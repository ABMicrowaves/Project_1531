

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 22:30:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   143                           	psect	text119,global,reloc=2,class=CODE,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   145                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           ; Version 1.45
   148                           ; Generated 16/11/2017 GMT
   149                           ; 
   150                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC18F45K22 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     
   182 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  00416E                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _readAddress
   189  00416E  4580               	dw	17792
   190  004170  0000               	dw	0
   191                           
   192                           ;initializer for _writeAddress
   193  004172  4580               	dw	17792
   194  004174  0000               	dw	0
   195                           
   196                           ;initializer for _SynthRxOper
   197  004176  01                 	db	1
   198                           
   199                           ;initializer for _SynthTxOper
   200  004177  01                 	db	1
   201                           
   202                           	psect	idataBANK0
   203  0041BC                     __pidataBANK0:
   204                           	opt stack 0
   205                           
   206                           ;initializer for _synthLdTxCnt
   207  0041BC  02                 	db	2
   208                           
   209                           ;initializer for _synthLdRxCnt
   210  0041BD  02                 	db	2
   211                           
   212                           	psect	idataBANK1
   213  004156                     __pidataBANK1:
   214                           	opt stack 0
   215                           
   216                           ;initializer for _groupsArray
   217  004156  7A                 	db	low _GroupControlMcu
   218  004157  3D                 	db	high _GroupControlMcu
   219  004158  00                 	db	low _GroupStatusAndVersion
   220  004159  3F                 	db	high _GroupStatusAndVersion
   221  00415A  B0                 	db	low _GroupAdc
   222  00415B  3F                 	db	high _GroupAdc
   223  00415C  22                 	db	low _GroupSynthesizers
   224  00415D  31                 	db	high _GroupSynthesizers
   225  00415E  5E                 	db	low _GroupFlashMemory
   226  00415F  3B                 	db	high _GroupFlashMemory
   227  004160  DE                 	db	low _GroupDAC
   228  004161  3C                 	db	high _GroupDAC
   229                           
   230                           	psect	smallconst
   231  000600                     __psmallconst:
   232                           	opt stack 0
   233  000600  00                 	db	0
   234  000601                     _SYNTH_REGS:
   235                           	opt stack 0
   236  000601  041C               	dw	1052
   237  000603  0001               	dw	1
   238  000605  300B               	dw	12299
   239  000607  0061               	dw	97
   240  000609  193A               	dw	6458
   241  00060B  00C0               	dw	192
   242  00060D  FCC9               	dw	64713
   243  00060F  1110               	dw	4368
   244  000611  0428               	dw	1064
   245  000613  102D               	dw	4141
   246  000615  00E7               	dw	231
   247  000617  1200               	dw	4608
   248  000619  6076               	dw	24694
   249  00061B  3500               	dw	13568
   250  00061D  0025               	dw	37
   251  00061F  0080               	dw	128
   252  000621  BF84               	dw	49028
   253  000623  0800               	dw	2048
   254  000625  0003               	dw	3
   255  000627  0000               	dw	0
   256  000629  0012               	dw	18
   257  00062B  0000               	dw	0
   258  00062D  0001               	dw	1
   259  00062F  0C00               	dw	3072
   260  000631  0680               	dw	1664
   261  000633  0020               	dw	32
   262  000635                     __end_of_SYNTH_REGS:
   263                           	opt stack 0
   264  000635                     _SYNTH_ADDRES:
   265                           	opt stack 0
   266  000635  04                 	db	4
   267  000636  08                 	db	8
   268  000637  0C                 	db	12
   269  000638  00                 	db	0
   270  000639  10                 	db	16
   271  00063A  00                 	db	0
   272  00063B  14                 	db	20
   273  00063C  00                 	db	0
   274  00063D  00                 	db	0
   275  00063E  00                 	db	0
   276  00063F  18                 	db	24
   277  000640  00                 	db	0
   278  000641  00                 	db	0
   279  000642                     __end_of_SYNTH_ADDRES:
   280                           	opt stack 0
   281  000642                     _channelArr:
   282                           	opt stack 0
   283  000642  04                 	db	4
   284  000643  05                 	db	5
   285  000644  06                 	db	6
   286  000645  07                 	db	7
   287  000646  08                 	db	8
   288  000647  09                 	db	9
   289  000648  0A                 	db	10
   290  000649  0D                 	db	13
   291  00064A  19                 	db	25
   292  00064B                     __end_of_channelArr:
   293                           	opt stack 0
   294  00064B                     _DAC_DEFAULT_INIT_VALUES:
   295                           	opt stack 0
   296  00064B  2344               	dw	9028
   297  00064D  6344               	dw	25412
   298  00064F  A344               	dw	41796
   299  000651  E344               	dw	58180
   300  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   301                           	opt stack 0
   302  000653                     _DAC_ADDRES:
   303                           	opt stack 0
   304  000653  02                 	db	2
   305  000654  04                 	db	4
   306  000655  06                 	db	6
   307  000656  08                 	db	8
   308  000657                     __end_of_DAC_ADDRES:
   309                           	opt stack 0
   310  000657                     exp@coeff:
   311                           	opt stack 0
   312  000657  00                 	db	0
   313  000658  80                 	db	128
   314  000659  3F                 	db	63
   315  00065A  72                 	db	114
   316  00065B  31                 	db	49
   317  00065C  3F                 	db	63
   318  00065D  FE                 	db	254
   319  00065E  75                 	db	117
   320  00065F  3E                 	db	62
   321  000660  58                 	db	88
   322  000661  63                 	db	99
   323  000662  3D                 	db	61
   324  000663  95                 	db	149
   325  000664  1D                 	db	29
   326  000665  3C                 	db	60
   327  000666  C5                 	db	197
   328  000667  AE                 	db	174
   329  000668  3A                 	db	58
   330  000669  79                 	db	121
   331  00066A  21                 	db	33
   332  00066B  39                 	db	57
   333  00066C  94                 	db	148
   334  00066D  80                 	db	128
   335  00066E  37                 	db	55
   336  00066F  93                 	db	147
   337  000670  A7                 	db	167
   338  000671  35                 	db	53
   339  000672  56                 	db	86
   340  000673  15                 	db	21
   341  000674  34                 	db	52
   342  000675                     __end_ofexp@coeff:
   343                           	opt stack 0
   344  000675                     log@coeff:
   345                           	opt stack 0
   346  000675  00                 	db	0
   347  000676  00                 	db	0
   348  000677  00                 	db	0
   349  000678  00                 	db	0
   350  000679  80                 	db	128
   351  00067A  3F                 	db	63
   352  00067B  F0                 	db	240
   353  00067C  FF                 	db	255
   354  00067D  BE                 	db	190
   355  00067E  E2                 	db	226
   356  00067F  A9                 	db	169
   357  000680  3E                 	db	62
   358  000681  83                 	db	131
   359  000682  76                 	db	118
   360  000683  BE                 	db	190
   361  000684  AE                 	db	174
   362  000685  2B                 	db	43
   363  000686  3E                 	db	62
   364  000687  3C                 	db	60
   365  000688  C3                 	db	195
   366  000689  BD                 	db	189
   367  00068A  D2                 	db	210
   368  00068B  13                 	db	19
   369  00068C  3D                 	db	61
   370  00068D  78                 	db	120
   371  00068E  D3                 	db	211
   372  00068F  BB                 	db	187
   373  000690                     __end_oflog@coeff:
   374                           	opt stack 0
   375  000690                     STR_1:
   376                           
   377                           ; BSR set to: 0
   378  000690  4D                 	db	77	;'M'
   379  000691  61                 	db	97	;'a'
   380  000692  72                 	db	114	;'r'
   381  000693  20                 	db	32
   382  000694  32                 	db	50	;'2'
   383  000695  33                 	db	51	;'3'
   384  000696  20                 	db	32
   385  000697  32                 	db	50	;'2'
   386  000698  30                 	db	48	;'0'
   387  000699  31                 	db	49	;'1'
   388  00069A  38                 	db	56	;'8'
   389  00069B  00                 	db	0
   390  00069C                     STR_18:
   391                           
   392                           ; BSR set to: 0
   393  00069C  32                 	db	50	;'2'
   394  00069D  32                 	db	50	;'2'
   395  00069E  3A                 	db	58	;':'
   396  00069F  33                 	db	51	;'3'
   397  0006A0  30                 	db	48	;'0'
   398  0006A1  3A                 	db	58	;':'
   399  0006A2  31                 	db	49	;'1'
   400  0006A3  38                 	db	56	;'8'
   401  0006A4  00                 	db	0
   402  0000                     
   403                           ; #config settings
   404  0006A5  00                 	db	0	; dummy byte at the end
   405  0000                     
   406                           	psect	nvCOMRAM
   407  000045                     __pnvCOMRAM:
   408                           	opt stack 0
   409  000045                     _timer0ReloadVal:
   410                           	opt stack 0
   411  000045                     	ds	2
   412  000047                     _eusart1TxBufferRemaining:
   413                           	opt stack 0
   414  000047                     	ds	1
   415                           
   416                           	psect	nvBANK1
   417  0001DD                     __pnvBANK1:
   418                           	opt stack 0
   419  0001DD                     _TMR0_InterruptHandler:
   420                           	opt stack 0
   421  0001DD                     	ds	2
   422  0001DF                     _IOCB5_InterruptHandler:
   423                           	opt stack 0
   424  0001DF                     	ds	2
   425  0001E1                     _IOCB4_InterruptHandler:
   426                           	opt stack 0
   427  0001E1                     	ds	2
   428  0000                     _ANSELA	set	3896
   429  0000                     _ANSELE	set	3900
   430  0000                     _ANSELD	set	3899
   431  0000                     _ANSELB	set	3897
   432  0000                     _ANSELC	set	3898
   433  0000                     _ADCON0bits	set	4034
   434  0000                     _ADRESH	set	4036
   435  0000                     _ADRESL	set	4035
   436  0000                     _ADCON2	set	4032
   437  0000                     _ADCON1	set	4033
   438  0000                     _ADCON0	set	4034
   439  0000                     _T0CONbits	set	4053
   440  0000                     _T0CON	set	4053
   441  0000                     _TMR0L	set	4054
   442  0000                     _TMR0H	set	4055
   443  0000                     _EEDATA	set	4008
   444  0000                     _EEADR	set	4009
   445  0000                     _EECON2	set	4007
   446  0000                     _EECON1bits	set	4006
   447  0000                     _TABLAT	set	4085
   448  0000                     _TBLPTRL	set	4086
   449  0000                     _TBLPTRH	set	4087
   450  0000                     _TBLPTRU	set	4088
   451  0000                     _IOCBbits	set	3938
   452  0000                     _INTCON2bits	set	4081
   453  0000                     _WPUB	set	3937
   454  0000                     _TRISD	set	3989
   455  0000                     _TRISC	set	3988
   456  0000                     _TRISB	set	3987
   457  0000                     _TRISA	set	3986
   458  0000                     _TRISE	set	3990
   459  0000                     _LATC	set	3979
   460  0000                     _LATB	set	3978
   461  0000                     _LATA	set	3977
   462  0000                     _LATD	set	3980
   463  0000                     _LATE	set	3981
   464  0000                     _RCREG1	set	4014
   465  0000                     _RCSTA1bits	set	4011
   466  0000                     _TXREG1	set	4013
   467  0000                     _SPBRGH1	set	4016
   468  0000                     _SPBRG1	set	4015
   469  0000                     _TXSTA1	set	4012
   470  0000                     _RCSTA1	set	4011
   471  0000                     _BAUDCON1	set	4024
   472  0000                     _PIR1bits	set	3998
   473  0000                     _PIE1bits	set	3997
   474  0000                     _PIR2bits	set	4001
   475  0000                     _PIE2bits	set	4000
   476  0000                     _RCONbits	set	4048
   477  0000                     _OSCTUNE	set	3995
   478  0000                     _OSCCON2	set	4050
   479  0000                     _OSCCON	set	4051
   480  0000                     _LATAbits	set	3977
   481  0000                     _LATDbits	set	3980
   482  0000                     _INTCONbits	set	4082
   483  0000                     _PORTDbits	set	3971
   484  0000                     _LATCbits	set	3979
   485  0000                     _LATBbits	set	3978
   486                           
   487                           	psect	cinit
   488  002F6C                     __pcinit:
   489                           	opt stack 0
   490  002F6C                     start_initialization:
   491                           	opt stack 0
   492  002F6C                     __initialization:
   493                           	opt stack 0
   494                           
   495                           ; Initialize objects allocated to BANK1 (12 bytes)
   496                           ; load TBLPTR registers with __pidataBANK1
   497  002F6C  0E56               	movlw	low __pidataBANK1
   498  002F6E  6EF6               	movwf	tblptrl,c
   499  002F70  0E41               	movlw	high __pidataBANK1
   500  002F72  6EF7               	movwf	tblptrh,c
   501  002F74  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   502  002F76  6EF8               	movwf	tblptru,c
   503  002F78  EE01  F0D1         	lfsr	0,__pdataBANK1
   504  002F7C  EE10 F00C          	lfsr	1,12
   505  002F80                     copy_data0:
   506  002F80  0009               	tblrd		*+
   507  002F82  CFF5 FFEE          	movff	tablat,postinc0
   508  002F86  50E5               	movf	postdec1,w,c
   509  002F88  50E1               	movf	fsr1l,w,c
   510  002F8A  E1FA               	bnz	copy_data0
   511                           
   512                           ; Initialize objects allocated to BANK0 (2 bytes)
   513                           ; load TBLPTR registers with __pidataBANK0
   514  002F8C  0EBC               	movlw	low __pidataBANK0
   515  002F8E  6EF6               	movwf	tblptrl,c
   516  002F90  0E41               	movlw	high __pidataBANK0
   517  002F92  6EF7               	movwf	tblptrh,c
   518  002F94  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   519  002F96  6EF8               	movwf	tblptru,c
   520  002F98  0009               	tblrd		*+	;fetch initializer
   521  002F9A  CFF5 F0FE          	movff	tablat,__pdataBANK0
   522  002F9E  0009               	tblrd		*+	;fetch initializer
   523  002FA0  CFF5 F0FF          	movff	tablat,__pdataBANK0+1
   524                           
   525                           ; Initialize objects allocated to COMRAM (10 bytes)
   526                           ; load TBLPTR registers with __pidataCOMRAM
   527  002FA4  0E6E               	movlw	low __pidataCOMRAM
   528  002FA6  6EF6               	movwf	tblptrl,c
   529  002FA8  0E41               	movlw	high __pidataCOMRAM
   530  002FAA  6EF7               	movwf	tblptrh,c
   531  002FAC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   532  002FAE  6EF8               	movwf	tblptru,c
   533  002FB0  EE00  F03B         	lfsr	0,__pdataCOMRAM
   534  002FB4  EE10 F00A          	lfsr	1,10
   535  002FB8                     copy_data1:
   536  002FB8  0009               	tblrd		*+
   537  002FBA  CFF5 FFEE          	movff	tablat,postinc0
   538  002FBE  50E5               	movf	postdec1,w,c
   539  002FC0  50E1               	movf	fsr1l,w,c
   540  002FC2  E1FA               	bnz	copy_data1
   541                           
   542                           ; Clear objects allocated to BANK2 (70 bytes)
   543  002FC4  EE02  F059         	lfsr	0,__pbssBANK2
   544  002FC8  0E46               	movlw	70
   545  002FCA                     clear_0:
   546  002FCA  6AEE               	clrf	postinc0,c
   547  002FCC  06E8               	decf	wreg,f,c
   548  002FCE  E1FD               	bnz	clear_0
   549                           
   550                           ; Clear objects allocated to BANK1 (172 bytes)
   551  002FD0  EE01  F000         	lfsr	0,__pbssBANK1
   552  002FD4  0EAC               	movlw	172
   553  002FD6                     clear_1:
   554  002FD6  6AEE               	clrf	postinc0,c
   555  002FD8  06E8               	decf	wreg,f,c
   556  002FDA  E1FD               	bnz	clear_1
   557                           
   558                           ; Clear objects allocated to BANK0 (29 bytes)
   559  002FDC  EE00  F0E1         	lfsr	0,__pbssBANK0
   560  002FE0  0E1D               	movlw	29
   561  002FE2                     clear_2:
   562  002FE2  6AEE               	clrf	postinc0,c
   563  002FE4  06E8               	decf	wreg,f,c
   564  002FE6  E1FD               	bnz	clear_2
   565                           
   566                           ; Clear objects allocated to COMRAM (10 bytes)
   567  002FE8  EE00  F031         	lfsr	0,__pbssCOMRAM
   568  002FEC  0E0A               	movlw	10
   569  002FEE                     clear_3:
   570  002FEE  6AEE               	clrf	postinc0,c
   571  002FF0  06E8               	decf	wreg,f,c
   572  002FF2  E1FD               	bnz	clear_3
   573  002FF4                     end_of_initialization:
   574                           	opt stack 0
   575  002FF4                     __end_of__initialization:
   576                           	opt stack 0
   577  002FF4  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   578  002FF6  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   579  002FF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   580  002FFA  6EF8               	movwf	tblptru,c
   581  002FFC  0100               	movlb	0
   582  002FFE  EF0C  F01A         	goto	_main	;jump to C main() function
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           
   592                           	psect	bssCOMRAM
   593  000031                     __pbssCOMRAM:
   594                           	opt stack 0
   595  000031                     TMR0_ISR@CountCallBack:
   596                           	opt stack 0
   597  000031                     	ds	2
   598  000033                     _eusart1RxTail:
   599                           	opt stack 0
   600  000033                     	ds	1
   601  000034                     _eusart1RxHead:
   602                           	opt stack 0
   603  000034                     	ds	1
   604  000035                     _eusart1TxTail:
   605                           	opt stack 0
   606  000035                     	ds	1
   607  000036                     _eusart1TxHead:
   608                           	opt stack 0
   609  000036                     	ds	1
   610  000037                     _cntRegUpdate:
   611                           	opt stack 0
   612  000037                     	ds	1
   613  000038                     _isReWriteDone:
   614                           	opt stack 0
   615  000038                     	ds	1
   616  000039                     _data:
   617                           	opt stack 0
   618  000039                     	ds	1
   619  00003A                     _adcSampleMode:
   620                           	opt stack 0
   621  00003A                     	ds	1
   622                           tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           postdec1	equ	0xFE5
   629                           fsr1l	equ	0xFE1
   630                           
   631                           	psect	dataCOMRAM
   632  00003B                     __pdataCOMRAM:
   633                           	opt stack 0
   634  00003B                     _readAddress:
   635                           	opt stack 0
   636  00003B                     	ds	4
   637  00003F                     _writeAddress:
   638                           	opt stack 0
   639  00003F                     	ds	4
   640  000043                     _SynthRxOper:
   641                           	opt stack 0
   642  000043                     	ds	1
   643  000044                     _SynthTxOper:
   644                           	opt stack 0
   645  000044                     	ds	1
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssBANK0
   656  0000E1                     __pbssBANK0:
   657                           	opt stack 0
   658  0000E1                     _mcuRunTimeIn5SecTicks:
   659                           	opt stack 0
   660  0000E1                     	ds	4
   661  0000E5                     _numOfValidateSamples:
   662                           	opt stack 0
   663  0000E5                     	ds	4
   664  0000E9                     _errno:
   665                           	opt stack 0
   666  0000E9                     	ds	2
   667  0000EB                     _sampleCount:
   668                           	opt stack 0
   669  0000EB                     	ds	2
   670  0000ED                     _count:
   671                           	opt stack 0
   672  0000ED                     	ds	2
   673  0000EF                     _synthLdTxArrayCnt:
   674                           	opt stack 0
   675  0000EF                     	ds	1
   676  0000F0                     _synthLdRxArrayCnt:
   677                           	opt stack 0
   678  0000F0                     	ds	1
   679  0000F1                     _msgCount:
   680                           	opt stack 0
   681  0000F1                     	ds	1
   682  0000F2                     _crcGiven:
   683                           	opt stack 0
   684  0000F2                     	ds	1
   685  0000F3                     _crcCalc:
   686                           	opt stack 0
   687  0000F3                     	ds	1
   688  0000F4                     _dataSize:
   689                           	opt stack 0
   690  0000F4                     	ds	1
   691  0000F5                     _request:
   692                           	opt stack 0
   693  0000F5                     	ds	1
   694  0000F6                     _group:
   695                           	opt stack 0
   696  0000F6                     	ds	1
   697  0000F7                     _cState:
   698                           	opt stack 0
   699  0000F7                     	ds	1
   700  0000F8                     _eusart1RxCount:
   701                           	opt stack 0
   702  0000F8                     	ds	1
   703  0000F9                     _channel:
   704                           	opt stack 0
   705  0000F9                     	ds	1
   706  0000FA                     _Timer0_OneSec:
   707                           	opt stack 0
   708  0000FA                     	ds	1
   709  0000FB                     _Timer0_KeepAlive:
   710                           	opt stack 0
   711  0000FB                     	ds	1
   712  0000FC                     _Timer0_Sampling:
   713                           	opt stack 0
   714  0000FC                     	ds	1
   715  0000FD                     _Timer0_SynthLd:
   716                           	opt stack 0
   717  0000FD                     	ds	1
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	dataBANK0
   728  0000FE                     __pdataBANK0:
   729                           	opt stack 0
   730  0000FE                     _synthLdTxCnt:
   731                           	opt stack 0
   732  0000FE                     	ds	1
   733  0000FF                     _synthLdRxCnt:
   734                           	opt stack 0
   735  0000FF                     	ds	1
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           
   745                           	psect	bssBANK1
   746  000100                     __pbssBANK1:
   747                           	opt stack 0
   748  000100                     _eusart1RxBuffer:
   749                           	opt stack 0
   750  000100                     	ds	40
   751  000128                     _numOfReadSamples:
   752                           	opt stack 0
   753  000128                     	ds	4
   754  00012C                     _sampleArray:
   755                           	opt stack 0
   756  00012C                     	ds	64
   757  00016C                     _rxMsgData:
   758                           	opt stack 0
   759  00016C                     	ds	20
   760  000180                     _rxMsgQueue:
   761                           	opt stack 0
   762  000180                     	ds	20
   763  000194                     _synthLdTxArray:
   764                           	opt stack 0
   765  000194                     	ds	12
   766  0001A0                     _synthLdRxArray:
   767                           	opt stack 0
   768  0001A0                     	ds	12
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           postdec1	equ	0xFE5
   776                           fsr1l	equ	0xFE1
   777                           
   778                           	psect	dataBANK1
   779  0001D1                     __pdataBANK1:
   780                           	opt stack 0
   781  0001D1                     _groupsArray:
   782                           	opt stack 0
   783  0001D1                     	ds	12
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           
   793                           	psect	bssBANK2
   794  000259                     __pbssBANK2:
   795                           	opt stack 0
   796  000259                     _eusart1TxBuffer:
   797                           	opt stack 0
   798  000259                     	ds	70
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1l	equ	0xFE1
   807                           
   808                           	psect	cstackBANK2
   809  000200                     __pcstackBANK2:
   810                           	opt stack 0
   811  000200                     FlashReadUart@TxMsg:
   812                           	opt stack 0
   813                           
   814                           ; 69 bytes @ 0x0
   815  000200                     	ds	69
   816  000245                     FlashReadUart@offset:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x45
   820  000245                     	ds	2
   821  000247                     FlashReadUart@val:
   822                           	opt stack 0
   823                           
   824                           ; 8 bytes @ 0x47
   825  000247                     	ds	8
   826  00024F                     _FlashReadUart$605:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x4F
   830  00024F                     	ds	4
   831  000253                     FlashReadUart@j:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x53
   835  000253                     	ds	2
   836  000255                     FlashReadUart@numOfSampleToRead:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x55
   840  000255                     	ds	2
   841  000257                     FlashReadUart@idx:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x57
   845  000257                     	ds	2
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postdec1	equ	0xFE5
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	cstackBANK1
   856  0001AC                     __pcstackBANK1:
   857                           	opt stack 0
   858  0001AC                     SynthReadData@TxMsg:
   859                           	opt stack 0
   860                           
   861                           ; 18 bytes @ 0x0
   862  0001AC                     	ds	18
   863  0001BE                     SynthReadData@data_979:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x12
   867  0001BE                     	ds	1
   868  0001BF                     SynthReadData@cType:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x13
   872  0001BF                     	ds	1
   873  0001C0                     SynthReadData@eepromDataArray:
   874                           	opt stack 0
   875                           
   876                           ; 12 bytes @ 0x14
   877  0001C0                     	ds	12
   878  0001CC                     SynthReadData@regNum:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x20
   882  0001CC                     	ds	1
   883  0001CD                     SynthReadData@byteNum:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x21
   887  0001CD                     	ds	1
   888  0001CE                     readUartMessage@idx:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x22
   892  0001CE                     	ds	2
   893  0001D0                     readUartMessage@chRec:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x24
   897  0001D0                     	ds	1
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1l	equ	0xFE1
   906                           
   907                           	psect	cstackBANK0
   908  000060                     __pcstackBANK0:
   909                           	opt stack 0
   910  000060                     ??_FlashSampleWrite:
   911  000060                     ??___ftdiv:
   912  000060                     strtol@sign:
   913                           	opt stack 0
   914  000060                     GetMcuFwVersion@compileData:
   915                           	opt stack 0
   916  000060                     GetMcuRunTime@TxMsg:
   917                           	opt stack 0
   918  000060                     SWSPI_Synth_send_bits@bitArray:
   919                           	opt stack 0
   920                           
   921                           ; 32 bytes @ 0x0
   922  000060                     	ds	1
   923  000061                     strtol@a:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x1
   927  000061                     	ds	1
   928  000062                     FlashSampleWrite@rotateLeft:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x2
   932  000062                     	ds	1
   933  000063                     ___ftdiv@cntr:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x3
   937  000063                     	ds	1
   938  000064                     ___ftdiv@f3:
   939                           	opt stack 0
   940  000064                     GetMcuFwVersion@TxMsg:
   941                           	opt stack 0
   942                           
   943                           ; 18 bytes @ 0x4
   944  000064                     	ds	1
   945  000065                     strtol@c:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x5
   949  000065                     	ds	1
   950  000066                     ?_GetIntFromUartData:
   951                           	opt stack 0
   952  000066                     GetIntFromUartData@data:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x6
   956  000066                     	ds	1
   957  000067                     ___ftdiv@exp:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x7
   961  000067                     	ds	1
   962  000068                     ___ftdiv@sign:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x8
   966  000068                     	ds	1
   967  000069                     ?___ftmul:
   968                           	opt stack 0
   969  000069                     ___ftmul@f1:
   970                           	opt stack 0
   971  000069                     GetMcuRunTime@tempRunTime:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x9
   975  000069                     	ds	3
   976  00006C                     ___ftmul@f2:
   977                           	opt stack 0
   978                           
   979                           ; 3 bytes @ 0xC
   980  00006C                     	ds	1
   981  00006D                     GetMcuRunTime@idx:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xD
   985  00006D                     	ds	1
   986  00006E                     ??_GetIntFromUartData:
   987                           
   988                           ; 1 bytes @ 0xE
   989  00006E                     	ds	1
   990  00006F                     ??___ftmul:
   991                           
   992                           ; 1 bytes @ 0xF
   993  00006F                     	ds	1
   994  000070                     GetIntFromUartData@dataRegArr:
   995                           	opt stack 0
   996                           
   997                           ; 10 bytes @ 0x10
   998  000070                     	ds	2
   999  000072                     ___ftmul@exp:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x12
  1003  000072                     	ds	1
  1004  000073                     ___ftmul@f3_as_product:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x13
  1008  000073                     	ds	3
  1009  000076                     ___ftmul@cntr:
  1010                           	opt stack 0
  1011  000076                     _GetMcuFwVersion$2685:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x16
  1015  000076                     	ds	1
  1016  000077                     ___ftmul@sign:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x17
  1020  000077                     	ds	1
  1021  000078                     ??_CheckFlashPrecentage:
  1022  000078                     ?___ftadd:
  1023                           	opt stack 0
  1024  000078                     ?___fttol:
  1025                           	opt stack 0
  1026  000078                     _GetMcuFwVersion$2689:
  1027                           	opt stack 0
  1028  000078                     ___ftadd@f1:
  1029                           	opt stack 0
  1030  000078                     ___fttol@f1:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x18
  1034  000078                     	ds	2
  1035  00007A                     GetIntFromUartData@num:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x1A
  1039  00007A                     	ds	1
  1040  00007B                     GetIntFromUartData@recVal:
  1041                           	opt stack 0
  1042  00007B                     ___ftadd@f2:
  1043                           	opt stack 0
  1044                           
  1045                           ; 3 bytes @ 0x1B
  1046  00007B                     	ds	1
  1047  00007C                     ??___fttol:
  1048  00007C                     CheckFlashPrecentage@precentage:
  1049                           	opt stack 0
  1050  00007C                     GetIntFromUartData@retVal:
  1051                           	opt stack 0
  1052                           
  1053                           ; 8 bytes @ 0x1C
  1054  00007C                     	ds	2
  1055  00007E                     ??___ftadd:
  1056                           
  1057                           ; 1 bytes @ 0x1E
  1058  00007E                     	ds	2
  1059  000080                     SWSPI_Synth_send_bits@mask:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x20
  1063  000080                     	ds	1
  1064  000081                     ___ftadd@sign:
  1065                           	opt stack 0
  1066  000081                     ___fttol@sign1:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x21
  1070  000081                     	ds	1
  1071  000082                     ___ftadd@exp2:
  1072                           	opt stack 0
  1073  000082                     ___fttol@lval:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x22
  1077  000082                     	ds	1
  1078  000083                     ___ftadd@exp1:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x23
  1082  000083                     	ds	1
  1083  000084                     ?___ftsub:
  1084                           	opt stack 0
  1085  000084                     ?_eval_poly:
  1086                           	opt stack 0
  1087  000084                     SWSPI_Synth_send_bits@count:
  1088                           	opt stack 0
  1089  000084                     GetIntFromUartData@idxCon:
  1090                           	opt stack 0
  1091  000084                     ___ftsub@f1:
  1092                           	opt stack 0
  1093  000084                     eval_poly@x:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x24
  1097  000084                     	ds	1
  1098  000085                     SWSPI_Synth_send_bits@phrType:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x25
  1102  000085                     	ds	1
  1103  000086                     SWSPI_send_word@datac:
  1104                           	opt stack 0
  1105  000086                     GetIntFromUartData@idxData:
  1106                           	opt stack 0
  1107  000086                     ___fttol@exp1:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x26
  1111  000086                     	ds	1
  1112  000087                     ?___altoft:
  1113                           	opt stack 0
  1114  000087                     FlashReadUart@data:
  1115                           	opt stack 0
  1116  000087                     SWSPI_send_word@idx:
  1117                           	opt stack 0
  1118  000087                     eval_poly@d:
  1119                           	opt stack 0
  1120  000087                     ___ftsub@f2:
  1121                           	opt stack 0
  1122  000087                     ___altoft@c:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x27
  1126  000087                     	ds	2
  1127  000089                     ??_FlashReadUart:
  1128  000089                     SWSPI_send_word@phrType:
  1129                           	opt stack 0
  1130  000089                     eval_poly@n:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x29
  1134  000089                     	ds	1
  1135  00008A                     DacSetValue@data:
  1136                           	opt stack 0
  1137  00008A                     UpdateSynthFreq@data:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x2A
  1141  00008A                     	ds	1
  1142  00008B                     ??___altoft:
  1143  00008B                     eval_poly@res:
  1144                           	opt stack 0
  1145                           
  1146                           ; 3 bytes @ 0x2B
  1147  00008B                     	ds	1
  1148  00008C                     ??_DacSetValue:
  1149  00008C                     UpdateSynthFreq@cType:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x2C
  1153  00008C                     	ds	1
  1154  00008D                     UpdateSynthFreq@retVal:
  1155                           	opt stack 0
  1156                           
  1157                           ; 8 bytes @ 0x2D
  1158  00008D                     	ds	1
  1159  00008E                     ?_log:
  1160                           	opt stack 0
  1161  00008E                     ?_ldexp:
  1162                           	opt stack 0
  1163  00008E                     ldexp@value:
  1164                           	opt stack 0
  1165  00008E                     log@x:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x2E
  1169  00008E                     	ds	1
  1170  00008F                     ?_floor:
  1171                           	opt stack 0
  1172  00008F                     floor@x:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x2F
  1176  00008F                     	ds	1
  1177  000090                     DacSetValue@dacIndex:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x30
  1181  000090                     	ds	1
  1182  000091                     ldexp@newexp:
  1183                           	opt stack 0
  1184  000091                     log@exponent:
  1185                           	opt stack 0
  1186  000091                     DacSetValue@retVal:
  1187                           	opt stack 0
  1188                           
  1189                           ; 8 bytes @ 0x31
  1190  000091                     	ds	1
  1191  000092                     floor@i:
  1192                           	opt stack 0
  1193                           
  1194                           ; 3 bytes @ 0x32
  1195  000092                     	ds	1
  1196  000093                     ??_ldexp:
  1197                           
  1198                           ; 1 bytes @ 0x33
  1199  000093                     	ds	2
  1200  000095                     floor@expon:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x35
  1204  000095                     	ds	2
  1205  000097                     ?_exp:
  1206                           	opt stack 0
  1207  000097                     exp@x:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x37
  1211  000097                     	ds	3
  1212  00009A                     _exp$3588:
  1213                           	opt stack 0
  1214                           
  1215                           ; 3 bytes @ 0x3A
  1216  00009A                     	ds	3
  1217  00009D                     exp@exponent:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x3D
  1221  00009D                     	ds	2
  1222  00009F                     exp@sign:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x3F
  1226  00009F                     	ds	1
  1227  0000A0                     ?_pow:
  1228                           	opt stack 0
  1229  0000A0                     pow@x:
  1230                           	opt stack 0
  1231                           
  1232                           ; 3 bytes @ 0x40
  1233  0000A0                     	ds	3
  1234  0000A3                     pow@y:
  1235                           	opt stack 0
  1236                           
  1237                           ; 3 bytes @ 0x43
  1238  0000A3                     	ds	3
  1239  0000A6                     _pow$3586:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0x46
  1243  0000A6                     	ds	3
  1244  0000A9                     _pow$3587:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0x49
  1248  0000A9                     	ds	3
  1249  0000AC                     pow@sign:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x4C
  1253  0000AC                     	ds	1
  1254  0000AD                     pow@yi:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x4D
  1258  0000AD                     	ds	4
  1259  0000B1                     ??_AdcConvert:
  1260  0000B1                     ?_ReadIntFromEeprom:
  1261                           	opt stack 0
  1262  0000B1                     ReadIntFromEeprom@numOfByes:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x51
  1266  0000B1                     	ds	2
  1267  0000B3                     AdcConvert@_adcResult:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x53
  1271  0000B3                     	ds	2
  1272  0000B5                     ??_ReadIntFromEeprom:
  1273  0000B5                     AdcConvert@_adcResult_348:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x55
  1277  0000B5                     	ds	2
  1278  0000B7                     AdcConvert@ldRxSate:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x57
  1282  0000B7                     	ds	1
  1283  0000B8                     ReadIntFromEeprom@base:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0x58
  1287  0000B8                     	ds	1
  1288  0000B9                     AdcConvert@ldTxSate:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x59
  1292  0000B9                     	ds	2
  1293  0000BB                     _AdcConvert$3583:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0x5B
  1297  0000BB                     	ds	1
  1298  0000BC                     _ReadIntFromEeprom$3584:
  1299                           	opt stack 0
  1300                           
  1301                           ; 3 bytes @ 0x5C
  1302  0000BC                     	ds	2
  1303  0000BE                     AdcConvert@adcRes:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x5E
  1307  0000BE                     	ds	1
  1308  0000BF                     _ReadIntFromEeprom$3585:
  1309                           	opt stack 0
  1310                           
  1311                           ; 3 bytes @ 0x5F
  1312  0000BF                     	ds	1
  1313  0000C0                     AdcConvert@idx:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x60
  1317  0000C0                     	ds	2
  1318  0000C2                     ReadIntFromEeprom@address:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x62
  1322  0000C2                     	ds	1
  1323  0000C3                     ReadIntFromEeprom@retVal:
  1324                           	opt stack 0
  1325                           
  1326                           ; 4 bytes @ 0x63
  1327  0000C3                     	ds	4
  1328  0000C7                     ReadIntFromEeprom@idx:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x67
  1332  0000C7                     	ds	1
  1333  0000C8                     ??_DacInit:
  1334  0000C8                     DacReadValue@data:
  1335                           	opt stack 0
  1336  0000C8                     SynthReadData@data:
  1337                           	opt stack 0
  1338  0000C8                     InitSynth@EepromVal:
  1339                           	opt stack 0
  1340                           
  1341                           ; 4 bytes @ 0x68
  1342  0000C8                     	ds	2
  1343  0000CA                     ??_DacReadValue:
  1344  0000CA                     DacInit@dacInput:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x6A
  1348  0000CA                     	ds	2
  1349  0000CC                     DacInit@idx:
  1350                           	opt stack 0
  1351  0000CC                     DacReadValue@regNum:
  1352                           	opt stack 0
  1353  0000CC                     InitSynth@cType:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x6C
  1357  0000CC                     	ds	1
  1358  0000CD                     DacReadValue@byteNum:
  1359                           	opt stack 0
  1360  0000CD                     InitSynth@idx:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x6D
  1364  0000CD                     	ds	1
  1365  0000CE                     InitSynth@regNum:
  1366                           	opt stack 0
  1367  0000CE                     DacReadValue@readVal:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x6E
  1371  0000CE                     	ds	1
  1372  0000CF                     SetSynthOper@cType:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x6F
  1376  0000CF                     	ds	1
  1377  0000D0                     DacReadValue@dacIndex:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x70
  1381  0000D0                     	ds	1
  1382  0000D1                     DacReadValue@TxMsg:
  1383                           	opt stack 0
  1384                           
  1385                           ; 7 bytes @ 0x71
  1386  0000D1                     	ds	7
  1387  0000D8                     DacReadValue@byteIdx:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x78
  1391  0000D8                     	ds	2
  1392  0000DA                     GroupAdc@data:
  1393                           	opt stack 0
  1394  0000DA                     GroupSynthesizers@data:
  1395                           	opt stack 0
  1396  0000DA                     GroupFlashMemory@data:
  1397                           	opt stack 0
  1398  0000DA                     GroupDAC@data:
  1399                           	opt stack 0
  1400  0000DA                     
  1401                           ; 3 bytes @ 0x7A
  1402  0000DA                     	ds	2
  1403  0000DC                     GroupAdc@request:
  1404                           	opt stack 0
  1405  0000DC                     GroupSynthesizers@request:
  1406                           	opt stack 0
  1407  0000DC                     GroupFlashMemory@request:
  1408                           	opt stack 0
  1409  0000DC                     GroupDAC@request:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x7C
  1413  0000DC                     	ds	1
  1414  0000DD                     ??_readUartMessage:
  1415  0000DD                     GroupControlMcu@request:
  1416                           	opt stack 0
  1417  0000DD                     GroupStatusAndVersion@request:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x7D
  1421  0000DD                     	ds	4
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           postdec1	equ	0xFE5
  1429                           fsr1l	equ	0xFE1
  1430                           
  1431                           	psect	cstackCOMRAM
  1432  000001                     __pcstackCOMRAM:
  1433                           	opt stack 0
  1434  000001                     ?___lwmod:
  1435                           	opt stack 0
  1436  000001                     ___lwmod@dividend:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x0
  1440  000001                     	ds	2
  1441  000003                     ___lwmod@divisor:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x2
  1445  000003                     	ds	2
  1446  000005                     ___lwmod@counter:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x4
  1450  000005                     	ds	1
  1451  000006                     ??_INTERRUPT_InterruptManager:
  1452                           
  1453                           ; 1 bytes @ 0x5
  1454  000006                     	ds	18
  1455  000018                     ??_EUSART1_Read:
  1456  000018                     ??_isspace:
  1457  000018                     ??_isdigit:
  1458  000018                     ??_isupper:
  1459  000018                     ??_BlinkErrorLeds:
  1460  000018                     ??_BlinkOkLeds:
  1461  000018                     ??_keepAliveSignalLed:
  1462  000018                     ?_ADC_GetConversion:
  1463                           	opt stack 0
  1464  000018                     ?_GetUint16FromBitArray:
  1465                           	opt stack 0
  1466  000018                     ?___wmul:
  1467                           	opt stack 0
  1468  000018                     ?___ftpack:
  1469                           	opt stack 0
  1470  000018                     ?_frexp:
  1471                           	opt stack 0
  1472  000018                     ?___ftneg:
  1473                           	opt stack 0
  1474  000018                     ?___lldiv:
  1475                           	opt stack 0
  1476  000018                     ?___llmod:
  1477                           	opt stack 0
  1478  000018                     SwSpi_Data_Pin@cPinMode:
  1479                           	opt stack 0
  1480  000018                     SwSpi_Clk_Pin@cPinMode:
  1481                           	opt stack 0
  1482  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1483                           	opt stack 0
  1484  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1485                           	opt stack 0
  1486  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1487                           	opt stack 0
  1488  000018                     EUSART1_Write@txData:
  1489                           	opt stack 0
  1490  000018                     DATAEE_WriteByte@bData:
  1491                           	opt stack 0
  1492  000018                     DATAEE_ReadByte@bAdd:
  1493                           	opt stack 0
  1494  000018                     toupper@c:
  1495                           	opt stack 0
  1496  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1497                           	opt stack 0
  1498  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1499                           	opt stack 0
  1500  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1501                           	opt stack 0
  1502  000018                     crc8@dataArray:
  1503                           	opt stack 0
  1504  000018                     GetUint16FromBitArray@bitarray:
  1505                           	opt stack 0
  1506  000018                     Make32bitsArray@array:
  1507                           	opt stack 0
  1508  000018                     ___wmul@multiplier:
  1509                           	opt stack 0
  1510  000018                     memset@p1:
  1511                           	opt stack 0
  1512  000018                     ___ftpack@arg:
  1513                           	opt stack 0
  1514  000018                     ___ftge@ff1:
  1515                           	opt stack 0
  1516  000018                     ___ftneg@f1:
  1517                           	opt stack 0
  1518  000018                     frexp@value:
  1519                           	opt stack 0
  1520  000018                     FLASH_ReadByte@flashAddr:
  1521                           	opt stack 0
  1522  000018                     FLASH_EraseBlock@baseAddr:
  1523                           	opt stack 0
  1524  000018                     make8@data:
  1525                           	opt stack 0
  1526  000018                     ___lldiv@dividend:
  1527                           	opt stack 0
  1528  000018                     ___llmod@dividend:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x17
  1532  000018                     	ds	1
  1533  000019                     EepromRead@address:
  1534                           	opt stack 0
  1535  000019                     SwSpi_Data_Pin@phrType:
  1536                           	opt stack 0
  1537  000019                     SwSpi_Clk_Pin@phrType:
  1538                           	opt stack 0
  1539  000019                     SwSpi_Set_CE_Pin@phrType:
  1540                           	opt stack 0
  1541  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1542                           	opt stack 0
  1543  000019                     DATAEE_WriteByte@bAdd:
  1544                           	opt stack 0
  1545  000019                     _isdigit$3311:
  1546                           	opt stack 0
  1547  000019                     _isspace$3314:
  1548                           	opt stack 0
  1549  000019                     _isupper$3317:
  1550                           	opt stack 0
  1551  000019                     WriteUartMessage@dataBuf:
  1552                           	opt stack 0
  1553  000019                     EUSART1_Read@readValue:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x18
  1557  000019                     	ds	1
  1558  00001A                     ??_ADC_GetConversion:
  1559  00001A                     ??_TMR0_Initialize:
  1560  00001A                     ?___lmul:
  1561                           	opt stack 0
  1562  00001A                     SWSPI_DAC_send_bits@data:
  1563                           	opt stack 0
  1564  00001A                     DATAEE_WriteByte@GIEBitValue:
  1565                           	opt stack 0
  1566  00001A                     isdigit@c:
  1567                           	opt stack 0
  1568  00001A                     isspace@c:
  1569                           	opt stack 0
  1570  00001A                     isupper@c:
  1571                           	opt stack 0
  1572  00001A                     crc8@dataSize:
  1573                           	opt stack 0
  1574  00001A                     GetUint16FromBitArray@numOfBits:
  1575                           	opt stack 0
  1576  00001A                     ___wmul@multiplicand:
  1577                           	opt stack 0
  1578  00001A                     memset@c:
  1579                           	opt stack 0
  1580  00001A                     Make32bitsArray@data:
  1581                           	opt stack 0
  1582  00001A                     ___lmul@multiplier:
  1583                           	opt stack 0
  1584                           
  1585                           ; 4 bytes @ 0x19
  1586  00001A                     	ds	1
  1587  00001B                     ??_isalpha:
  1588  00001B                     BlinkErrorLeds@state:
  1589                           	opt stack 0
  1590  00001B                     BlinkOkLeds@state:
  1591                           	opt stack 0
  1592  00001B                     EepromWrite@data:
  1593                           	opt stack 0
  1594  00001B                     SWSPI_DAC_send_bits@count:
  1595                           	opt stack 0
  1596  00001B                     ___ftpack@exp:
  1597                           	opt stack 0
  1598  00001B                     WriteUartMessage@dataSize:
  1599                           	opt stack 0
  1600  00001B                     frexp@eptr:
  1601                           	opt stack 0
  1602  00001B                     ___ftge@ff2:
  1603                           	opt stack 0
  1604                           
  1605                           ; 3 bytes @ 0x1A
  1606  00001B                     	ds	1
  1607  00001C                     ??_GetUint16FromBitArray:
  1608  00001C                     ??_crc8:
  1609  00001C                     EepromWrite@address:
  1610                           	opt stack 0
  1611  00001C                     SWSPI_DAC_send_bits@phrType:
  1612                           	opt stack 0
  1613  00001C                     FLASH_EraseBlock@GIEBitValue:
  1614                           	opt stack 0
  1615  00001C                     ADC_GetConversion@channel:
  1616                           	opt stack 0
  1617  00001C                     make8@dataLocation:
  1618                           	opt stack 0
  1619  00001C                     ___ftpack@sign:
  1620                           	opt stack 0
  1621  00001C                     _isalpha$3308:
  1622                           	opt stack 0
  1623  00001C                     BlinkErrorLeds@idx:
  1624                           	opt stack 0
  1625  00001C                     BlinkOkLeds@idx:
  1626                           	opt stack 0
  1627  00001C                     ___wmul@product:
  1628                           	opt stack 0
  1629  00001C                     memset@n:
  1630                           	opt stack 0
  1631  00001C                     ___lldiv@divisor:
  1632                           	opt stack 0
  1633  00001C                     ___llmod@divisor:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x1B
  1637  00001C                     	ds	1
  1638  00001D                     ??_make8:
  1639  00001D                     ??___ftpack:
  1640  00001D                     ??_frexp:
  1641  00001D                     ??_WriteUartMessage:
  1642  00001D                     isalpha@c:
  1643                           	opt stack 0
  1644  00001D                     crc8@crc:
  1645                           	opt stack 0
  1646  00001D                     FLASH_WriteBlock@writeAddr:
  1647                           	opt stack 0
  1648                           
  1649                           ; 4 bytes @ 0x1C
  1650  00001D                     	ds	1
  1651  00001E                     ??_Make32bitsArray:
  1652  00001E                     ??___ftge:
  1653  00001E                     WriteUartMessage@idx:
  1654                           	opt stack 0
  1655  00001E                     memset@p:
  1656                           	opt stack 0
  1657  00001E                     ___lmul@multiplicand:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x1D
  1661  00001E                     	ds	1
  1662  00001F                     GetUint16FromBitArray@state:
  1663                           	opt stack 0
  1664  00001F                     crc8@i:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x1E
  1668  00001F                     	ds	1
  1669  000020                     ?___awtoft:
  1670                           	opt stack 0
  1671  000020                     ?___lltoft:
  1672                           	opt stack 0
  1673  000020                     ?___lwtoft:
  1674                           	opt stack 0
  1675  000020                     ___llmod@counter:
  1676                           	opt stack 0
  1677  000020                     ZeroArray@array:
  1678                           	opt stack 0
  1679  000020                     FillArray@array:
  1680                           	opt stack 0
  1681  000020                     GetUint16FromBitArray@res:
  1682                           	opt stack 0
  1683  000020                     Make32bitsArray@idx:
  1684                           	opt stack 0
  1685  000020                     ___awtoft@c:
  1686                           	opt stack 0
  1687  000020                     ___lwtoft@c:
  1688                           	opt stack 0
  1689  000020                     ___lldiv@quotient:
  1690                           	opt stack 0
  1691  000020                     ___lltoft@c:
  1692                           	opt stack 0
  1693                           
  1694                           ; 4 bytes @ 0x1F
  1695  000020                     	ds	1
  1696  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1697                           	opt stack 0
  1698  000021                     StoreIntInEeprom@data:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x20
  1702  000021                     	ds	1
  1703  000022                     ZeroArray@size:
  1704                           	opt stack 0
  1705  000022                     FillArray@size:
  1706                           	opt stack 0
  1707  000022                     GetUint16FromBitArray@i:
  1708                           	opt stack 0
  1709  000022                     ___lmul@product:
  1710                           	opt stack 0
  1711                           
  1712                           ; 4 bytes @ 0x21
  1713  000022                     	ds	1
  1714  000023                     ??_FLASH_WriteBlock:
  1715  000023                     ___awtoft@sign:
  1716                           	opt stack 0
  1717                           
  1718                           ; 1 bytes @ 0x22
  1719  000023                     	ds	1
  1720  000024                     ??_GetMcuFwVersion:
  1721  000024                     ??_FlashReadCondition:
  1722  000024                     ??___lltoft:
  1723  000024                     SendAckMessage@inRequest:
  1724                           	opt stack 0
  1725  000024                     FillArray@value:
  1726                           	opt stack 0
  1727  000024                     ___lldiv@counter:
  1728                           	opt stack 0
  1729                           
  1730                           ; 1 bytes @ 0x23
  1731  000024                     	ds	1
  1732  000025                     ??_GetMcuRunTime:
  1733  000025                     SendAckMessage@inGroup:
  1734                           	opt stack 0
  1735  000025                     StoreIntInEeprom@address:
  1736                           	opt stack 0
  1737  000025                     SWSPI_Synth_send_bits@data:
  1738                           	opt stack 0
  1739                           
  1740                           ; 4 bytes @ 0x24
  1741  000025                     	ds	1
  1742  000026                     ?_strtol:
  1743                           	opt stack 0
  1744  000026                     StoreIntInEeprom@numOfByes:
  1745                           	opt stack 0
  1746  000026                     strtol@s:
  1747                           	opt stack 0
  1748  000026                     SendAckMessage@TxMsg:
  1749                           	opt stack 0
  1750                           
  1751                           ; 6 bytes @ 0x25
  1752  000026                     	ds	1
  1753  000027                     FLASH_WriteBlock@blockStartAddr:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0x26
  1757  000027                     	ds	1
  1758  000028                     StoreIntInEeprom@val:
  1759                           	opt stack 0
  1760  000028                     ___lltoft@exp:
  1761                           	opt stack 0
  1762  000028                     strtol@endptr:
  1763                           	opt stack 0
  1764  000028                     FlashReadCondition@TxMsg:
  1765                           	opt stack 0
  1766                           
  1767                           ; 9 bytes @ 0x27
  1768  000028                     	ds	1
  1769  000029                     ?___ftdiv:
  1770                           	opt stack 0
  1771  000029                     StoreIntInEeprom@idx:
  1772                           	opt stack 0
  1773  000029                     ___ftdiv@f1:
  1774                           	opt stack 0
  1775  000029                     SWSPI_send_word@data:
  1776                           	opt stack 0
  1777                           
  1778                           ; 4 bytes @ 0x28
  1779  000029                     	ds	1
  1780  00002A                     strtol@base:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x29
  1784  00002A                     	ds	1
  1785  00002B                     FLASH_WriteBlock@GIEBitValue:
  1786                           	opt stack 0
  1787                           
  1788                           ; 1 bytes @ 0x2A
  1789  00002B                     	ds	1
  1790  00002C                     ??_strtol:
  1791  00002C                     ??_testLeds:
  1792  00002C                     FLASH_WriteBlock@i:
  1793                           	opt stack 0
  1794  00002C                     SetChannelMode@data:
  1795                           	opt stack 0
  1796  00002C                     ___ftdiv@f2:
  1797                           	opt stack 0
  1798                           
  1799                           ; 3 bytes @ 0x2B
  1800  00002C                     	ds	1
  1801  00002D                     SWSPI_send_word@dataSize:
  1802                           	opt stack 0
  1803  00002D                     testLeds@idx:
  1804                           	opt stack 0
  1805  00002D                     FlashSampleWrite@sampleData:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x2C
  1809  00002D                     	ds	1
  1810  00002E                     
  1811                           ; 1 bytes @ 0x2D
  1812  00002E                     	ds	1
  1813  00002F                     ??_eval_poly:
  1814  00002F                     FlashSampleWrite@channelNum:
  1815                           	opt stack 0
  1816  00002F                     ___altoft@exp:
  1817                           	opt stack 0
  1818                           
  1819                           ; 1 bytes @ 0x2E
  1820  00002F                     	ds	1
  1821  000030                     ___altoft@sign:
  1822                           	opt stack 0
  1823                           
  1824                           ; 1 bytes @ 0x2F
  1825  000030                     	ds	1
  1826  000031                     tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835                           ; 1 bytes @ 0x30
  1836 ;;
  1837 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1838 ;;
  1839 ;; *************** function _main *****************
  1840 ;; Defined at:
  1841 ;;		line 13 in file "main.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;		None
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;		None
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      void 
  1848 ;; Registers used:
  1849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1855 ;;      Params:         0       0       0       0       0       0       0
  1856 ;;      Locals:         0       0       0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0
  1858 ;;      Totals:         0       0       0       0       0       0       0
  1859 ;;Total ram usage:        0 bytes
  1860 ;; Hardware stack levels required when called:   14
  1861 ;; This function calls:
  1862 ;;		_AdcConvert
  1863 ;;		_BlinkErrorLeds
  1864 ;;		_BlinkOkLeds
  1865 ;;		_CheckFlashPrecentage
  1866 ;;		_InitSystemApplicationManagers
  1867 ;;		_SendSystemStartAck
  1868 ;;		_SetMcuRunTime
  1869 ;;		_SetMcuSystem
  1870 ;;		_keepAliveSignalLed
  1871 ;;		_readUartMessage
  1872 ;; This function is called by:
  1873 ;;		Startup code after reset
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text0
  1878  003418                     __ptext0:
  1879                           	opt stack 0
  1880  003418                     _main:
  1881                           	opt stack 17
  1882                           
  1883                           ;main.c: 16: SetMcuSystem();
  1884                           
  1885                           ;incstack = 0
  1886  003418  ECBC  F020         	call	_SetMcuSystem	;wreg free
  1887                           
  1888                           ;main.c: 19: InitSystemApplicationManagers();
  1889  00341C  EC55  F020         	call	_InitSystemApplicationManagers	;wreg free
  1890                           
  1891                           ;main.c: 22: SendSystemStartAck();
  1892  003420  ECB1  F020         	call	_SendSystemStartAck	;wreg free
  1893                           
  1894                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1895  003424  0E03               	movlw	3
  1896  003426  ECA5  F01A         	call	_BlinkOkLeds
  1897  00342A                     
  1898                           ;main.c: 28: {
  1899                           ;main.c: 29: readUartMessage();
  1900  00342A  EC95  F008         	call	_readUartMessage	;wreg free
  1901                           
  1902                           ;main.c: 31: if (Timer0_OneSec == 1)
  1903  00342E  0100               	movlb	0	; () banked
  1904  003430  05FA               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1905  003432  A4D8               	btfss	status,2,c
  1906  003434  D006               	goto	l1575
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;main.c: 32: {
  1910                           ;main.c: 33: SetMcuRunTime();
  1911  003436  ECD3  F01C         	call	_SetMcuRunTime	;wreg free
  1912                           
  1913                           ;main.c: 34: Timer0_OneSec = 0;
  1914  00343A  0E00               	movlw	0
  1915  00343C  0100               	movlb	0	; () banked
  1916  00343E  6FFA               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1917                           
  1918                           ;main.c: 35: }
  1919  003440  D7F4               	goto	l1574
  1920  003442                     l1575:
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1924                           
  1925                           ; BSR set to: 0
  1926  003442  05FC               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1927  003444  A4D8               	btfss	status,2,c
  1928  003446  D010               	goto	l1577
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 37: {
  1932                           ;main.c: 38: keepAliveSignalLed();
  1933  003448  EC3E  F020         	call	_keepAliveSignalLed	;wreg free
  1934                           
  1935                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1936  00344C  EC0E  F016         	call	_CheckFlashPrecentage	;wreg free
  1937  003450  06E8               	decf	wreg,f,c
  1938  003452  A4D8               	btfss	status,2,c
  1939  003454  D003               	goto	l1578
  1940                           
  1941                           ;main.c: 41: {
  1942                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1943  003456  0E02               	movlw	2
  1944  003458  ECD4  F01A         	call	_BlinkErrorLeds
  1945  00345C                     l1578:
  1946                           
  1947                           ;main.c: 43: }
  1948                           ;main.c: 46: AdcConvert();
  1949  00345C  EC86  F006         	call	_AdcConvert	;wreg free
  1950                           
  1951                           ;main.c: 47: Timer0_Sampling = 0;
  1952  003460  0E00               	movlw	0
  1953  003462  0100               	movlb	0	; () banked
  1954  003464  6FFC               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1955                           
  1956                           ;main.c: 48: }
  1957  003466  D7E1               	goto	l1574
  1958  003468                     l1577:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1962                           
  1963                           ; BSR set to: 0
  1964  003468  05FB               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1965  00346A  A4D8               	btfss	status,2,c
  1966  00346C  D003               	goto	l1580
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;main.c: 50: {
  1970                           ;main.c: 52: Timer0_KeepAlive = 0;
  1971  00346E  0E00               	movlw	0
  1972  003470  6FFB               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1973                           
  1974                           ;main.c: 53: }
  1975  003472  D7DB               	goto	l1574
  1976  003474                     l1580:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1980                           
  1981                           ; BSR set to: 0
  1982  003474  05FD               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1983  003476  A4D8               	btfss	status,2,c
  1984  003478  D7D8               	goto	l1574
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 55: {
  1988                           ;main.c: 57: Timer0_SynthLd = 0;
  1989  00347A  0E00               	movlw	0
  1990  00347C  6FFD               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1991                           
  1992                           ; BSR set to: 0
  1993                           
  1994                           ; BSR set to: 0
  1995                           
  1996                           ; BSR set to: 0
  1997                           
  1998                           ; BSR set to: 0
  1999                           
  2000                           ; BSR set to: 0
  2001  00347E  D7D5               	goto	l1574
  2002  003480                     __end_of_main:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           postdec1	equ	0xFE5
  2011                           fsr1l	equ	0xFE1
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _readUartMessage *****************
  2015 ;; Defined at:
  2016 ;;		line 28 in file "EusartApp.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  idx             2   34[BANK1 ] int 
  2021 ;;  chRec           1   36[BANK1 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2031 ;;      Params:         0       0       0       0       0       0       0
  2032 ;;      Locals:         0       0       3       0       0       0       0
  2033 ;;      Temps:          0       4       0       0       0       0       0
  2034 ;;      Totals:         0       4       3       0       0       0       0
  2035 ;;Total ram usage:        7 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:   13
  2038 ;; This function calls:
  2039 ;;		_EUSART1_Read
  2040 ;;		_GroupAdc
  2041 ;;		_GroupControlMcu
  2042 ;;		_GroupDAC
  2043 ;;		_GroupFlashMemory
  2044 ;;		_GroupStatusAndVersion
  2045 ;;		_GroupSynthesizers
  2046 ;;		_InitRxMessageParams
  2047 ;;		_ZeroArray
  2048 ;;		_crc8
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text1
  2055  00112A                     __ptext1:
  2056                           	opt stack 0
  2057  00112A                     _readUartMessage:
  2058                           	opt stack 17
  2059                           
  2060                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;incstack = 0
  2064  00112A  0E00               	movlw	0
  2065  00112C  0101               	movlb	1	; () banked
  2066  00112E  6FD0               	movwf	readUartMessage@chRec& (0+255),b
  2067                           
  2068                           ;EusartApp.c: 32: switch(cState)
  2069  001130  D0D9               	goto	l202
  2070  001132                     
  2071                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2072                           
  2073                           ; BSR set to: 1
  2074  001132  0E04               	movlw	4
  2075  001134  0100               	movlb	0	; () banked
  2076  001136  65F8               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2077  001138  0012               	return	
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;EusartApp.c: 38: {
  2081                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2082  00113A  0E01               	movlw	1
  2083  00113C  6FF7               	movwf	_cState& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;EusartApp.c: 40: }
  2087                           ;EusartApp.c: 41: return;
  2088                           
  2089                           ; BSR set to: 0
  2090  00113E  0012               	return	
  2091  001140                     
  2092                           ; BSR set to: 0
  2093                           ;EusartApp.c: 45: InitRxMessageParams();
  2094                           
  2095                           ; BSR set to: 0
  2096  001140  EC32  F01F         	call	_InitRxMessageParams	;wreg free
  2097                           
  2098                           ;EusartApp.c: 46: msgCount = 0;
  2099  001144  0E00               	movlw	0
  2100  001146  0100               	movlb	0	; () banked
  2101  001148  6FF1               	movwf	_msgCount& (0+255),b
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2105  00114A  0E01               	movlw	1
  2106  00114C  65F8               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2107  00114E  D00E               	goto	l207
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;EusartApp.c: 48: {
  2111                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2112  001150  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2113  001154  0101               	movlb	1	; () banked
  2114  001156  6FD0               	movwf	readUartMessage@chRec& (0+255),b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2118  001158  C1D0  F180         	movff	readUartMessage@chRec,_rxMsgQueue
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;EusartApp.c: 51: if(chRec == (0x24))
  2122  00115C  0E24               	movlw	36
  2123  00115E  19D0               	xorwf	readUartMessage@chRec& (0+255),w,b
  2124  001160  A4D8               	btfss	status,2,c
  2125  001162  0012               	return	
  2126                           
  2127                           ; BSR set to: 1
  2128                           ;EusartApp.c: 52: {
  2129                           ;EusartApp.c: 53: cState = READ_GROUP;
  2130  001164  0E02               	movlw	2
  2131  001166  0100               	movlb	0	; () banked
  2132  001168  6FF7               	movwf	_cState& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;EusartApp.c: 54: }
  2136                           ;EusartApp.c: 55: }
  2137  00116A  0012               	return	
  2138  00116C                     l207:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;EusartApp.c: 56: else
  2142                           ;EusartApp.c: 57: {
  2143                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2144                           
  2145                           ; BSR set to: 0
  2146  00116C  0E00               	movlw	0
  2147  00116E  6FF7               	movwf	_cState& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;EusartApp.c: 59: }
  2151                           ;EusartApp.c: 61: break;
  2152  001170  0012               	return	
  2153  001172                     
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2156                           
  2157                           ; BSR set to: 0
  2158  001172  0E01               	movlw	1
  2159  001174  65F8               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2160  001176  0012               	return	
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;EusartApp.c: 66: {
  2164                           ;EusartApp.c: 67: group = EUSART1_Read();
  2165  001178  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2166  00117C  0100               	movlb	0	; () banked
  2167  00117E  6FF6               	movwf	_group& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2171  001180  C0F6  F181         	movff	_group,_rxMsgQueue+1
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2175  001184  0E03               	movlw	3
  2176  001186  6FF7               	movwf	_cState& (0+255),b
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;EusartApp.c: 70: }
  2180                           ;EusartApp.c: 71: break;
  2181  001188  0012               	return	
  2182  00118A                     
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2185                           
  2186                           ; BSR set to: 0
  2187  00118A  0E01               	movlw	1
  2188  00118C  65F8               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2189  00118E  0012               	return	
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;EusartApp.c: 76: {
  2193                           ;EusartApp.c: 77: request = EUSART1_Read();
  2194  001190  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2195  001194  0100               	movlb	0	; () banked
  2196  001196  6FF5               	movwf	_request& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2200  001198  C0F5  F182         	movff	_request,_rxMsgQueue+2
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2204  00119C  0E04               	movlw	4
  2205  00119E  6FF7               	movwf	_cState& (0+255),b
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;EusartApp.c: 80: }
  2209                           ;EusartApp.c: 81: break;
  2210  0011A0  0012               	return	
  2211  0011A2                     
  2212                           ; BSR set to: 0
  2213                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2214                           
  2215                           ; BSR set to: 0
  2216  0011A2  0E01               	movlw	1
  2217  0011A4  65F8               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2218  0011A6  0012               	return	
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;EusartApp.c: 85: {
  2222                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2223  0011A8  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2224  0011AC  0100               	movlb	0	; () banked
  2225  0011AE  6FF4               	movwf	_dataSize& (0+255),b
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2229  0011B0  C0F4  F183         	movff	_dataSize,_rxMsgQueue+3
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;EusartApp.c: 88: if(dataSize == 0)
  2233  0011B4  51F4               	movf	_dataSize& (0+255),w,b
  2234  0011B6  A4D8               	btfss	status,2,c
  2235  0011B8  D003               	goto	l217
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;EusartApp.c: 89: {
  2239                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2240  0011BA  0E06               	movlw	6
  2241  0011BC  6FF7               	movwf	_cState& (0+255),b
  2242                           
  2243                           ;EusartApp.c: 91: }
  2244  0011BE  0012               	return	
  2245  0011C0                     l217:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;EusartApp.c: 92: else
  2249                           ;EusartApp.c: 93: {
  2250                           ;EusartApp.c: 94: cState = READ_DATA;
  2251                           
  2252                           ; BSR set to: 0
  2253  0011C0  0E05               	movlw	5
  2254  0011C2  6FF7               	movwf	_cState& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;EusartApp.c: 95: }
  2258                           ;EusartApp.c: 97: }
  2259                           ;EusartApp.c: 99: break;
  2260                           
  2261                           ; BSR set to: 0
  2262  0011C4  0012               	return	
  2263  0011C6                     
  2264                           ; BSR set to: 0
  2265                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2266                           
  2267                           ; BSR set to: 0
  2268  0011C6  51F4               	movf	_dataSize& (0+255),w,b
  2269  0011C8  5DF8               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2270  0011CA  A0D8               	btfss	status,0,c
  2271  0011CC  0012               	return	
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;EusartApp.c: 104: {
  2275                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2276  0011CE  0E6C               	movlw	low _rxMsgData
  2277  0011D0  6E20               	movwf	ZeroArray@array,c
  2278  0011D2  0E01               	movlw	high _rxMsgData
  2279  0011D4  6E21               	movwf	ZeroArray@array+1,c
  2280  0011D6  0E00               	movlw	0
  2281  0011D8  6E23               	movwf	ZeroArray@size+1,c
  2282  0011DA  0E14               	movlw	20
  2283  0011DC  6E22               	movwf	ZeroArray@size,c
  2284  0011DE  EC06  F020         	call	_ZeroArray	;wreg free
  2285                           
  2286                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2287  0011E2  0E00               	movlw	0
  2288  0011E4  0101               	movlb	1	; () banked
  2289  0011E6  6FCF               	movwf	(readUartMessage@idx+1)& (0+255),b
  2290  0011E8  0E00               	movlw	0
  2291  0011EA  6FCE               	movwf	readUartMessage@idx& (0+255),b
  2292  0011EC  D020               	goto	l221
  2293  0011EE                     
  2294                           ;EusartApp.c: 108: {
  2295                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2296                           
  2297                           ; BSR set to: 1
  2298  0011EE  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2299  0011F2  0101               	movlb	1	; () banked
  2300  0011F4  6FD0               	movwf	readUartMessage@chRec& (0+255),b
  2301                           
  2302                           ; BSR set to: 1
  2303                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2304  0011F6  0100               	movlb	0	; () banked
  2305  0011F8  51F1               	movf	_msgCount& (0+255),w,b
  2306  0011FA  6FDD               	movwf	??_readUartMessage& (0+255),b
  2307  0011FC  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2308  0011FE  0E04               	movlw	4
  2309  001200  27DD               	addwf	??_readUartMessage& (0+255),f,b
  2310  001202  0E00               	movlw	0
  2311  001204  23DE               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2312  001206  0E80               	movlw	low _rxMsgQueue
  2313  001208  25DD               	addwf	??_readUartMessage& (0+255),w,b
  2314  00120A  6ED9               	movwf	fsr2l,c
  2315  00120C  0E01               	movlw	high _rxMsgQueue
  2316  00120E  21DE               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2317  001210  6EDA               	movwf	fsr2h,c
  2318  001212  C1D0  FFDF         	movff	readUartMessage@chRec,indf2
  2319                           
  2320                           ; BSR set to: 0
  2321  001216  2BF1               	incf	_msgCount& (0+255),f,b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2325  001218  0E6C               	movlw	low _rxMsgData
  2326  00121A  0101               	movlb	1	; () banked
  2327  00121C  25CE               	addwf	readUartMessage@idx& (0+255),w,b
  2328  00121E  6ED9               	movwf	fsr2l,c
  2329  001220  0E01               	movlw	high _rxMsgData
  2330  001222  21CF               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2331  001224  6EDA               	movwf	fsr2h,c
  2332  001226  C1D0  FFDF         	movff	readUartMessage@chRec,indf2
  2333                           
  2334                           ; BSR set to: 1
  2335  00122A  4BCE               	infsnz	readUartMessage@idx& (0+255),f,b
  2336  00122C  2BCF               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2337  00122E                     l221:
  2338                           
  2339                           ; BSR set to: 1
  2340                           
  2341                           ; BSR set to: 1
  2342  00122E  0100               	movlb	0	; () banked
  2343  001230  51F4               	movf	_dataSize& (0+255),w,b
  2344  001232  6FDD               	movwf	??_readUartMessage& (0+255),b
  2345  001234  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2346  001236  51DD               	movf	??_readUartMessage& (0+255),w,b
  2347  001238  0101               	movlb	1	; () banked
  2348  00123A  5DCE               	subwf	readUartMessage@idx& (0+255),w,b
  2349  00123C  51CF               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2350  00123E  0A80               	xorlw	128
  2351  001240  0100               	movlb	0	; () banked
  2352  001242  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2353  001244  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2354  001246  0A80               	xorlw	128
  2355  001248  59DF               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2356  00124A  A0D8               	btfss	status,0,c
  2357  00124C  D7D0               	goto	l222
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;EusartApp.c: 112: }
  2361                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2362                           
  2363                           ; BSR set to: 0
  2364  00124E  0E06               	movlw	6
  2365  001250  6FF7               	movwf	_cState& (0+255),b
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;EusartApp.c: 115: }
  2369                           ;EusartApp.c: 116: break;
  2370  001252  0012               	return	
  2371  001254                     
  2372                           ; BSR set to: 0
  2373                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2374                           
  2375                           ; BSR set to: 0
  2376  001254  51F8               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2377  001256  B4D8               	btfsc	status,2,c
  2378  001258  0012               	return	
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;EusartApp.c: 120: {
  2382                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2383  00125A  ECB1  F01C         	call	_EUSART1_Read	;wreg free
  2384  00125E  0100               	movlb	0	; () banked
  2385  001260  6FF2               	movwf	_crcGiven& (0+255),b
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2389  001262  0E80               	movlw	low _rxMsgQueue
  2390  001264  6E18               	movwf	crc8@dataArray,c
  2391  001266  0E01               	movlw	high _rxMsgQueue
  2392  001268  6E19               	movwf	crc8@dataArray+1,c
  2393  00126A  0E04               	movlw	4
  2394  00126C  25F1               	addwf	_msgCount& (0+255),w,b
  2395  00126E  6E1A               	movwf	crc8@dataSize,c
  2396  001270  6A1B               	clrf	crc8@dataSize+1,c
  2397  001272  0E00               	movlw	0
  2398  001274  221B               	addwfc	crc8@dataSize+1,f,c
  2399  001276  EC8A  F01C         	call	_crc8	;wreg free
  2400  00127A  0100               	movlb	0	; () banked
  2401  00127C  6FF3               	movwf	_crcCalc& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2405  00127E  51F3               	movf	_crcCalc& (0+255),w,b
  2406  001280  19F2               	xorwf	_crcGiven& (0+255),w,b
  2407  001282  A4D8               	btfss	status,2,c
  2408  001284  D003               	goto	l226
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;EusartApp.c: 125: {
  2412                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2413  001286  0E07               	movlw	7
  2414  001288  6FF7               	movwf	_cState& (0+255),b
  2415                           
  2416                           ;EusartApp.c: 127: }
  2417  00128A  0012               	return	
  2418  00128C                     l226:
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;EusartApp.c: 128: else
  2422                           ;EusartApp.c: 129: {
  2423                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2424                           
  2425                           ; BSR set to: 0
  2426  00128C  0E00               	movlw	0
  2427  00128E  6FF7               	movwf	_cState& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;EusartApp.c: 131: }
  2431                           ;EusartApp.c: 132: }
  2432                           ;EusartApp.c: 133: break;
  2433                           
  2434                           ; BSR set to: 0
  2435  001290  0012               	return	
  2436  001292                     
  2437                           ; BSR set to: 0
  2438                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2439                           
  2440                           ; BSR set to: 0
  2441  001292  0EFE               	movlw	254
  2442  001294  6FDD               	movwf	??_readUartMessage& (0+255),b
  2443  001296  0EFF               	movlw	255
  2444  001298  6FDE               	movwf	(??_readUartMessage+1)& (0+255),b
  2445  00129A  51F6               	movf	_group& (0+255),w,b
  2446  00129C  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2447  00129E  6BE0               	clrf	(??_readUartMessage+3)& (0+255),b
  2448  0012A0  90D8               	bcf	status,0,c
  2449  0012A2  37DF               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2450  0012A4  37E0               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2451  0012A6  51DD               	movf	??_readUartMessage& (0+255),w,b
  2452  0012A8  27DF               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2453  0012AA  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2454  0012AC  23E0               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2455  0012AE  0ED1               	movlw	low _groupsArray
  2456  0012B0  25DF               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2457  0012B2  6ED9               	movwf	fsr2l,c
  2458  0012B4  0E01               	movlw	high _groupsArray
  2459  0012B6  21E0               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2460  0012B8  6EDA               	movwf	fsr2h,c
  2461  0012BA  D801               	call	u8888
  2462  0012BC  D00F               	goto	u8889
  2463  0012BE                     u8888:
  2464  0012BE  0005               	push	
  2465  0012C0  6EFA               	movwf	pclath,c
  2466  0012C2  50DE               	movf	postinc2,w,c
  2467  0012C4  6EFD               	movwf	tosl,c
  2468  0012C6  50DE               	movf	postinc2,w,c
  2469  0012C8  6EFE               	movwf	tosh,c
  2470  0012CA  50F8               	movf	tblptru,w,c
  2471  0012CC  6EFF               	movwf	tosu,c
  2472  0012CE  50FA               	movf	pclath,w,c
  2473  0012D0  0E6C               	movlw	low _rxMsgData
  2474  0012D2  6FDA               	movwf	GroupDAC@data& (0+255),b
  2475  0012D4  0E01               	movlw	high _rxMsgData
  2476  0012D6  6FDB               	movwf	(GroupDAC@data+1)& (0+255),b
  2477  0012D8  51F5               	movf	_request& (0+255),w,b
  2478  0012DA  0012               	return		;indir
  2479  0012DC                     u8889:
  2480                           
  2481                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2482  0012DC  0E00               	movlw	0
  2483  0012DE  0100               	movlb	0	; () banked
  2484  0012E0  6FF7               	movwf	_cState& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;EusartApp.c: 139: }
  2488                           
  2489                           ;EusartApp.c: 138: break;
  2490  0012E2  0012               	return	
  2491  0012E4                     l202:
  2492                           
  2493                           ; BSR set to: 0
  2494  0012E4  0100               	movlb	0	; () banked
  2495  0012E6  51F7               	movf	_cState& (0+255),w,b
  2496                           
  2497                           ; Switch size 1, requested type "space"
  2498                           ; Number of cases is 8, Range of values is 0 to 7
  2499                           ; switch strategies available:
  2500                           ; Name         Instructions Cycles
  2501                           ; simple_byte           25    13 (average)
  2502                           ;	Chosen strategy is simple_byte
  2503  0012E8  0A00               	xorlw	0	; case 0
  2504  0012EA  B4D8               	btfsc	status,2,c
  2505  0012EC  D722               	goto	l203
  2506  0012EE  0A01               	xorlw	1	; case 1
  2507  0012F0  B4D8               	btfsc	status,2,c
  2508  0012F2  D726               	goto	l206
  2509  0012F4  0A03               	xorlw	3	; case 2
  2510  0012F6  B4D8               	btfsc	status,2,c
  2511  0012F8  D73C               	goto	l211
  2512  0012FA  0A01               	xorlw	1	; case 3
  2513  0012FC  B4D8               	btfsc	status,2,c
  2514  0012FE  D745               	goto	l213
  2515  001300  0A07               	xorlw	7	; case 4
  2516  001302  B4D8               	btfsc	status,2,c
  2517  001304  D74E               	goto	l215
  2518  001306  0A01               	xorlw	1	; case 5
  2519  001308  B4D8               	btfsc	status,2,c
  2520  00130A  D75D               	goto	l219
  2521  00130C  0A03               	xorlw	3	; case 6
  2522  00130E  B4D8               	btfsc	status,2,c
  2523  001310  D7A1               	goto	l224
  2524  001312  0A01               	xorlw	1	; case 7
  2525  001314  A4D8               	btfss	status,2,c
  2526  001316  0012               	return	
  2527  001318  D7BC               	goto	l228
  2528  00131A                     __end_of_readUartMessage:
  2529                           	opt stack 0
  2530                           tosu	equ	0xFFF
  2531                           tosh	equ	0xFFE
  2532                           tosl	equ	0xFFD
  2533                           pclath	equ	0xFFA
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _InitRxMessageParams *****************
  2549 ;; Defined at:
  2550 ;;		line 142 in file "EusartApp.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2564 ;;      Params:         0       0       0       0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0
  2567 ;;      Totals:         0       0       0       0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    6
  2571 ;; This function calls:
  2572 ;;		_ZeroArray
  2573 ;; This function is called by:
  2574 ;;		_readUartMessage
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text2
  2579  003E64                     __ptext2:
  2580                           	opt stack 0
  2581  003E64                     _InitRxMessageParams:
  2582                           	opt stack 23
  2583                           
  2584                           ;EusartApp.c: 146: dataSize = 0;
  2585                           
  2586                           ;incstack = 0
  2587  003E64  0E00               	movlw	0
  2588  003E66  0100               	movlb	0	; () banked
  2589  003E68  6FF4               	movwf	_dataSize& (0+255),b
  2590                           
  2591                           ;EusartApp.c: 147: crcCalc = 0;
  2592  003E6A  0E00               	movlw	0
  2593  003E6C  6FF3               	movwf	_crcCalc& (0+255),b
  2594                           
  2595                           ;EusartApp.c: 148: crcGiven = 0;
  2596  003E6E  0E00               	movlw	0
  2597  003E70  6FF2               	movwf	_crcGiven& (0+255),b
  2598                           
  2599                           ;EusartApp.c: 149: msgCount = 0;
  2600  003E72  0E00               	movlw	0
  2601  003E74  6FF1               	movwf	_msgCount& (0+255),b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2605  003E76  0E80               	movlw	low _rxMsgQueue
  2606  003E78  6E20               	movwf	ZeroArray@array,c
  2607  003E7A  0E01               	movlw	high _rxMsgQueue
  2608  003E7C  6E21               	movwf	ZeroArray@array+1,c
  2609  003E7E  0E00               	movlw	0
  2610  003E80  6E23               	movwf	ZeroArray@size+1,c
  2611  003E82  0E14               	movlw	20
  2612  003E84  6E22               	movwf	ZeroArray@size,c
  2613  003E86  EC06  F020         	call	_ZeroArray
  2614  003E8A  0012               	return		;funcret
  2615  003E8C                     __end_of_InitRxMessageParams:
  2616                           	opt stack 0
  2617                           tosu	equ	0xFFF
  2618                           tosh	equ	0xFFE
  2619                           tosl	equ	0xFFD
  2620                           pclath	equ	0xFFA
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _GroupDAC *****************
  2636 ;; Defined at:
  2637 ;;		line 125 in file "MessageFunctions.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  request         1    wreg     enum E12
  2640 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2641 ;;		 -> rxMsgData(20), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  request         1  124[BANK0 ] enum E12
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2653 ;;      Params:         0       2       0       0       0       0       0
  2654 ;;      Locals:         0       1       0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0
  2656 ;;      Totals:         0       3       0       0       0       0       0
  2657 ;;Total ram usage:        3 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:   11
  2660 ;; This function calls:
  2661 ;;		_DacReadValue
  2662 ;;		_DacSetValue
  2663 ;; This function is called by:
  2664 ;;		_readUartMessage
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text3
  2669  003CDE                     __ptext3:
  2670                           	opt stack 0
  2671  003CDE                     _GroupDAC:
  2672                           	opt stack 18
  2673                           
  2674                           ;incstack = 0
  2675                           ;GroupDAC@request stored from wreg
  2676  003CDE  0100               	movlb	0	; () banked
  2677  003CE0  6FDC               	movwf	GroupDAC@request& (0+255),b
  2678                           
  2679                           ;MessageFunctions.c: 127: switch (request)
  2680  003CE2  D00E               	goto	l1325
  2681  003CE4                     
  2682                           ;MessageFunctions.c: 130: DacSetValue(data);
  2683  003CE4  C0DA  F08A         	movff	GroupDAC@data,DacSetValue@data
  2684  003CE8  C0DB  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2685  003CEC  EC67  F017         	call	_DacSetValue	;wreg free
  2686                           
  2687                           ;MessageFunctions.c: 131: break;
  2688  003CF0  0012               	return	
  2689  003CF2                     
  2690                           ;MessageFunctions.c: 134: DacReadValue(data);
  2691  003CF2  C0DA  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2692  003CF6  C0DB  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2693  003CFA  EC2A  F013         	call	_DacReadValue	;wreg free
  2694                           
  2695                           ;MessageFunctions.c: 139: }
  2696                           
  2697                           ;MessageFunctions.c: 138: break;
  2698                           
  2699                           ;MessageFunctions.c: 137: default:
  2700                           
  2701                           ;MessageFunctions.c: 135: break;
  2702  003CFE  0012               	return	
  2703  003D00                     l1325:
  2704  003D00  0100               	movlb	0	; () banked
  2705  003D02  51DC               	movf	GroupDAC@request& (0+255),w,b
  2706                           
  2707                           ; Switch size 1, requested type "space"
  2708                           ; Number of cases is 2, Range of values is 97 to 98
  2709                           ; switch strategies available:
  2710                           ; Name         Instructions Cycles
  2711                           ; simple_byte            7     4 (average)
  2712                           ;	Chosen strategy is simple_byte
  2713  003D04  0A61               	xorlw	97	; case 97
  2714  003D06  B4D8               	btfsc	status,2,c
  2715  003D08  D7ED               	goto	l1326
  2716  003D0A  0A03               	xorlw	3	; case 98
  2717  003D0C  A4D8               	btfss	status,2,c
  2718  003D0E  0012               	return	
  2719  003D10  D7F0               	goto	l1328
  2720  003D12                     __end_of_GroupDAC:
  2721                           	opt stack 0
  2722                           tosu	equ	0xFFF
  2723                           tosh	equ	0xFFE
  2724                           tosl	equ	0xFFD
  2725                           pclath	equ	0xFFA
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1l	equ	0xFE1
  2734                           indf2	equ	0xFDF
  2735                           postinc2	equ	0xFDE
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _GroupFlashMemory *****************
  2741 ;; Defined at:
  2742 ;;		line 104 in file "MessageFunctions.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  request         1    wreg     enum E12
  2745 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  request         1  124[BANK0 ] enum E12
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2757 ;;      Params:         0       2       0       0       0       0       0
  2758 ;;      Locals:         0       1       0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0
  2760 ;;      Totals:         0       3       0       0       0       0       0
  2761 ;;Total ram usage:        3 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    9
  2764 ;; This function calls:
  2765 ;;		_FlashEreaseMem
  2766 ;;		_FlashReadCondition
  2767 ;;		_FlashReadUart
  2768 ;; This function is called by:
  2769 ;;		_readUartMessage
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text4
  2774  003B5E                     __ptext4:
  2775                           	opt stack 0
  2776  003B5E                     _GroupFlashMemory:
  2777                           	opt stack 20
  2778                           
  2779                           ;incstack = 0
  2780                           ;GroupFlashMemory@request stored from wreg
  2781  003B5E  0100               	movlb	0	; () banked
  2782  003B60  6FDC               	movwf	GroupFlashMemory@request& (0+255),b
  2783                           
  2784                           ;MessageFunctions.c: 106: switch (request)
  2785  003B62  D00D               	goto	l1316
  2786  003B64                     
  2787                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2788  003B64  EC38  F01C         	call	_FlashEreaseMem	;wreg free
  2789                           
  2790                           ;MessageFunctions.c: 110: break;
  2791  003B68  0012               	return	
  2792  003B6A                     
  2793                           ;MessageFunctions.c: 113: FlashReadCondition();
  2794  003B6A  ECCD  F00F         	call	_FlashReadCondition	;wreg free
  2795                           
  2796                           ;MessageFunctions.c: 114: break;
  2797  003B6E  0012               	return	
  2798  003B70                     
  2799                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2800  003B70  C0DA  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2801  003B74  C0DB  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2802  003B78  EC7C  F00A         	call	_FlashReadUart	;wreg free
  2803                           
  2804                           ;MessageFunctions.c: 122: }
  2805                           
  2806                           ;MessageFunctions.c: 121: break;
  2807                           
  2808                           ;MessageFunctions.c: 120: default:
  2809                           
  2810                           ;MessageFunctions.c: 118: break;
  2811  003B7C  0012               	return	
  2812  003B7E                     l1316:
  2813  003B7E  0100               	movlb	0	; () banked
  2814  003B80  51DC               	movf	GroupFlashMemory@request& (0+255),w,b
  2815                           
  2816                           ; Switch size 1, requested type "space"
  2817                           ; Number of cases is 3, Range of values is 81 to 83
  2818                           ; switch strategies available:
  2819                           ; Name         Instructions Cycles
  2820                           ; simple_byte           10     6 (average)
  2821                           ;	Chosen strategy is simple_byte
  2822  003B82  0A51               	xorlw	81	; case 81
  2823  003B84  B4D8               	btfsc	status,2,c
  2824  003B86  D7EE               	goto	l1317
  2825  003B88  0A03               	xorlw	3	; case 82
  2826  003B8A  B4D8               	btfsc	status,2,c
  2827  003B8C  D7EE               	goto	l1319
  2828  003B8E  0A01               	xorlw	1	; case 83
  2829  003B90  A4D8               	btfss	status,2,c
  2830  003B92  0012               	return	
  2831  003B94  D7ED               	goto	l1320
  2832  003B96                     __end_of_GroupFlashMemory:
  2833                           	opt stack 0
  2834                           tosu	equ	0xFFF
  2835                           tosh	equ	0xFFE
  2836                           tosl	equ	0xFFD
  2837                           pclath	equ	0xFFA
  2838                           tblptru	equ	0xFF8
  2839                           tblptrh	equ	0xFF7
  2840                           tblptrl	equ	0xFF6
  2841                           tablat	equ	0xFF5
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           fsr1l	equ	0xFE1
  2846                           indf2	equ	0xFDF
  2847                           postinc2	equ	0xFDE
  2848                           fsr2h	equ	0xFDA
  2849                           fsr2l	equ	0xFD9
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function _GroupAdc *****************
  2853 ;; Defined at:
  2854 ;;		line 51 in file "MessageFunctions.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  request         1    wreg     enum E12
  2857 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  request         1  124[BANK0 ] enum E12
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2869 ;;      Params:         0       2       0       0       0       0       0
  2870 ;;      Locals:         0       1       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0
  2872 ;;      Totals:         0       3       0       0       0       0       0
  2873 ;;Total ram usage:        3 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    8
  2876 ;; This function calls:
  2877 ;;		_SetChannelMode
  2878 ;; This function is called by:
  2879 ;;		_readUartMessage
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text5
  2884  003FB0                     __ptext5:
  2885                           	opt stack 0
  2886  003FB0                     _GroupAdc:
  2887                           	opt stack 21
  2888                           
  2889                           ;incstack = 0
  2890                           ;GroupAdc@request stored from wreg
  2891  003FB0  0100               	movlb	0	; () banked
  2892  003FB2  6FDC               	movwf	GroupAdc@request& (0+255),b
  2893                           
  2894                           ;MessageFunctions.c: 53: switch (request)
  2895  003FB4  D007               	goto	l1295
  2896  003FB6                     
  2897                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2898  003FB6  C0DA  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2899  003FBA  C0DB  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2900  003FBE  ECD5  F01E         	call	_SetChannelMode	;wreg free
  2901                           
  2902                           ;MessageFunctions.c: 61: }
  2903                           
  2904                           ;MessageFunctions.c: 60: break;
  2905                           
  2906                           ;MessageFunctions.c: 59: default:
  2907                           
  2908                           ;MessageFunctions.c: 57: break;
  2909  003FC2  0012               	return	
  2910  003FC4                     l1295:
  2911  003FC4  0100               	movlb	0	; () banked
  2912  003FC6  51DC               	movf	GroupAdc@request& (0+255),w,b
  2913                           
  2914                           ; Switch size 1, requested type "space"
  2915                           ; Number of cases is 1, Range of values is 50 to 50
  2916                           ; switch strategies available:
  2917                           ; Name         Instructions Cycles
  2918                           ; simple_byte            4     3 (average)
  2919                           ;	Chosen strategy is simple_byte
  2920  003FC8  0A32               	xorlw	50	; case 50
  2921  003FCA  A4D8               	btfss	status,2,c
  2922  003FCC  0012               	return	
  2923  003FCE  D7F3               	goto	l1296
  2924  003FD0                     __end_of_GroupAdc:
  2925                           	opt stack 0
  2926                           tosu	equ	0xFFF
  2927                           tosh	equ	0xFFE
  2928                           tosl	equ	0xFFD
  2929                           pclath	equ	0xFFA
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1l	equ	0xFE1
  2938                           indf2	equ	0xFDF
  2939                           postinc2	equ	0xFDE
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _GroupStatusAndVersion *****************
  2945 ;; Defined at:
  2946 ;;		line 34 in file "MessageFunctions.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  request         1    wreg     enum E12
  2949 ;;  data            3  122[BANK0 ] PTR unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  request         1  125[BANK0 ] enum E12
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2961 ;;      Params:         0       2       0       0       0       0       0
  2962 ;;      Locals:         0       1       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0
  2964 ;;      Totals:         0       3       0       0       0       0       0
  2965 ;;Total ram usage:        3 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    7
  2968 ;; This function calls:
  2969 ;;		_GetMcuFwVersion
  2970 ;;		_GetMcuRunTime
  2971 ;; This function is called by:
  2972 ;;		_readUartMessage
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text6
  2977  003F00                     __ptext6:
  2978                           	opt stack 0
  2979  003F00                     _GroupStatusAndVersion:
  2980                           	opt stack 22
  2981                           
  2982                           ;incstack = 0
  2983                           ;GroupStatusAndVersion@request stored from wreg
  2984  003F00  0100               	movlb	0	; () banked
  2985  003F02  6FDD               	movwf	GroupStatusAndVersion@request& (0+255),b
  2986                           
  2987                           ;MessageFunctions.c: 36: switch (request)
  2988  003F04  D006               	goto	l1287
  2989  003F06                     
  2990                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2991  003F06  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2992                           
  2993                           ;MessageFunctions.c: 40: break;
  2994  003F0A  0012               	return	
  2995  003F0C                     
  2996                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2997  003F0C  ECB8  F012         	call	_GetMcuRunTime	;wreg free
  2998                           
  2999                           ;MessageFunctions.c: 48: }
  3000                           
  3001                           ;MessageFunctions.c: 47: break;
  3002                           
  3003                           ;MessageFunctions.c: 46: default:
  3004                           
  3005                           ;MessageFunctions.c: 44: break;
  3006  003F10  0012               	return	
  3007  003F12                     l1287:
  3008  003F12  0100               	movlb	0	; () banked
  3009  003F14  51DD               	movf	GroupStatusAndVersion@request& (0+255),w,b
  3010                           
  3011                           ; Switch size 1, requested type "space"
  3012                           ; Number of cases is 2, Range of values is 33 to 34
  3013                           ; switch strategies available:
  3014                           ; Name         Instructions Cycles
  3015                           ; simple_byte            7     4 (average)
  3016                           ;	Chosen strategy is simple_byte
  3017  003F16  0A21               	xorlw	33	; case 33
  3018  003F18  B4D8               	btfsc	status,2,c
  3019  003F1A  D7F8               	goto	l1290
  3020  003F1C  0A03               	xorlw	3	; case 34
  3021  003F1E  A4D8               	btfss	status,2,c
  3022  003F20  0012               	return	
  3023  003F22  D7F1               	goto	l1288
  3024  003F24                     __end_of_GroupStatusAndVersion:
  3025                           	opt stack 0
  3026                           tosu	equ	0xFFF
  3027                           tosh	equ	0xFFE
  3028                           tosl	equ	0xFFD
  3029                           pclath	equ	0xFFA
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _GroupControlMcu *****************
  3045 ;; Defined at:
  3046 ;;		line 11 in file "MessageFunctions.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  request         1    wreg     enum E12
  3049 ;;  data            3  122[BANK0 ] PTR unsigned char 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  request         1  125[BANK0 ] enum E12
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3061 ;;      Params:         0       2       0       0       0       0       0
  3062 ;;      Locals:         0       1       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0
  3064 ;;      Totals:         0       3       0       0       0       0       0
  3065 ;;Total ram usage:        3 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    8
  3068 ;; This function calls:
  3069 ;;		_ResetMcu
  3070 ;;		_testLeds
  3071 ;; This function is called by:
  3072 ;;		_readUartMessage
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text7
  3077  003D7A                     __ptext7:
  3078                           	opt stack 0
  3079  003D7A                     _GroupControlMcu:
  3080                           	opt stack 21
  3081                           
  3082                           ;incstack = 0
  3083                           ;GroupControlMcu@request stored from wreg
  3084  003D7A  0100               	movlb	0	; () banked
  3085  003D7C  6FDD               	movwf	GroupControlMcu@request& (0+255),b
  3086                           
  3087                           ;MessageFunctions.c: 13: switch (request)
  3088  003D7E  D006               	goto	l1277
  3089  003D80                     
  3090                           ;MessageFunctions.c: 16: testLeds();
  3091  003D80  ECD7  F019         	call	_testLeds	;wreg free
  3092                           
  3093                           ;MessageFunctions.c: 17: break;
  3094  003D84  0012               	return	
  3095  003D86                     
  3096                           ;MessageFunctions.c: 20: ResetMcu();
  3097  003D86  EC8F  F020         	call	_ResetMcu	;wreg free
  3098                           
  3099                           ;MessageFunctions.c: 31: }
  3100                           
  3101                           ;MessageFunctions.c: 30: break;
  3102                           
  3103                           ;MessageFunctions.c: 29: default:
  3104                           
  3105                           ;MessageFunctions.c: 27: break;
  3106                           
  3107                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3108                           
  3109                           ;MessageFunctions.c: 24: break;
  3110                           
  3111                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3112                           
  3113                           ;MessageFunctions.c: 21: break;
  3114  003D8A  0012               	return	
  3115  003D8C                     l1277:
  3116  003D8C  0100               	movlb	0	; () banked
  3117  003D8E  51DD               	movf	GroupControlMcu@request& (0+255),w,b
  3118                           
  3119                           ; Switch size 1, requested type "space"
  3120                           ; Number of cases is 4, Range of values is 17 to 20
  3121                           ; switch strategies available:
  3122                           ; Name         Instructions Cycles
  3123                           ; simple_byte           13     7 (average)
  3124                           ;	Chosen strategy is simple_byte
  3125  003D90  0A11               	xorlw	17	; case 17
  3126  003D92  B4D8               	btfsc	status,2,c
  3127  003D94  D7F8               	goto	l1280
  3128  003D96  0A03               	xorlw	3	; case 18
  3129  003D98  B4D8               	btfsc	status,2,c
  3130  003D9A  0012               	return	
  3131  003D9C  0A01               	xorlw	1	; case 19
  3132  003D9E  B4D8               	btfsc	status,2,c
  3133  003DA0  0012               	return	
  3134  003DA2  0A07               	xorlw	7	; case 20
  3135  003DA4  A4D8               	btfss	status,2,c
  3136  003DA6  0012               	return	
  3137  003DA8  D7EB               	goto	l1278
  3138  003DAA                     __end_of_GroupControlMcu:
  3139                           	opt stack 0
  3140                           tosu	equ	0xFFF
  3141                           tosh	equ	0xFFE
  3142                           tosl	equ	0xFFD
  3143                           pclath	equ	0xFFA
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           postdec1	equ	0xFE5
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _GroupSynthesizers *****************
  3159 ;; Defined at:
  3160 ;;		line 63 in file "MessageFunctions.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  request         1    wreg     enum E12
  3163 ;;  data            2  122[BANK0 ] PTR unsigned char 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  request         1  124[BANK0 ] enum E12
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3175 ;;      Params:         0       2       0       0       0       0       0
  3176 ;;      Locals:         0       1       0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0
  3178 ;;      Totals:         0       3       0       0       0       0       0
  3179 ;;Total ram usage:        3 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:   12
  3182 ;; This function calls:
  3183 ;;		_SetSynthOper
  3184 ;;		_SynthReadData
  3185 ;;		_UpdateSynthFreq
  3186 ;; This function is called by:
  3187 ;;		_readUartMessage
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text8
  3192  003122                     __ptext8:
  3193                           	opt stack 0
  3194  003122                     _GroupSynthesizers:
  3195                           	opt stack 17
  3196                           
  3197                           ;incstack = 0
  3198                           ;GroupSynthesizers@request stored from wreg
  3199  003122  0100               	movlb	0	; () banked
  3200  003124  6FDC               	movwf	GroupSynthesizers@request& (0+255),b
  3201                           
  3202                           ;MessageFunctions.c: 65: switch (request)
  3203  003126  D028               	goto	l1302
  3204  003128                     
  3205                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3206  003128  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3207  00312C  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3208  003130  0E00               	movlw	0
  3209  003132  EC4E  F011         	call	_UpdateSynthFreq
  3210                           
  3211                           ;MessageFunctions.c: 77: break;
  3212  003136  0012               	return	
  3213  003138                     
  3214                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3215  003138  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3216  00313C  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3217  003140  0E01               	movlw	1
  3218  003142  EC4E  F011         	call	_UpdateSynthFreq
  3219                           
  3220                           ;MessageFunctions.c: 81: break;
  3221  003146  0012               	return	
  3222  003148                     
  3223                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3224  003148  0E01               	movlw	1
  3225  00314A  EC5C  F019         	call	_SetSynthOper
  3226                           
  3227                           ;MessageFunctions.c: 85: break;
  3228  00314E  0012               	return	
  3229  003150                     
  3230                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3231  003150  0E00               	movlw	0
  3232  003152  EC5C  F019         	call	_SetSynthOper
  3233                           
  3234                           ;MessageFunctions.c: 89: break;
  3235  003156  0012               	return	
  3236  003158                     
  3237                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3238  003158  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3239  00315C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3240  003160  0E01               	movlw	1
  3241  003162  EC8D  F009         	call	_SynthReadData
  3242                           
  3243                           ;MessageFunctions.c: 93: break;
  3244  003166  0012               	return	
  3245  003168                     
  3246                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3247  003168  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3248  00316C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3249  003170  0E00               	movlw	0
  3250  003172  EC8D  F009         	call	_SynthReadData
  3251                           
  3252                           ;MessageFunctions.c: 101: }
  3253                           
  3254                           ;MessageFunctions.c: 100: break;
  3255                           
  3256                           ;MessageFunctions.c: 99: default:
  3257                           
  3258                           ;MessageFunctions.c: 97: break;
  3259  003176  0012               	return	
  3260  003178                     l1302:
  3261  003178  0100               	movlb	0	; () banked
  3262  00317A  51DC               	movf	GroupSynthesizers@request& (0+255),w,b
  3263                           
  3264                           ; Switch size 1, requested type "space"
  3265                           ; Number of cases is 8, Range of values is 64 to 71
  3266                           ; switch strategies available:
  3267                           ; Name         Instructions Cycles
  3268                           ; simple_byte           25    13 (average)
  3269                           ;	Chosen strategy is simple_byte
  3270  00317C  0A40               	xorlw	64	; case 64
  3271  00317E  B4D8               	btfsc	status,2,c
  3272  003180  0012               	return	
  3273  003182  0A01               	xorlw	1	; case 65
  3274  003184  B4D8               	btfsc	status,2,c
  3275  003186  0012               	return	
  3276  003188  0A03               	xorlw	3	; case 66
  3277  00318A  B4D8               	btfsc	status,2,c
  3278  00318C  D7CD               	goto	l1306
  3279  00318E  0A01               	xorlw	1	; case 67
  3280  003190  B4D8               	btfsc	status,2,c
  3281  003192  D7D2               	goto	l1307
  3282  003194  0A07               	xorlw	7	; case 68
  3283  003196  B4D8               	btfsc	status,2,c
  3284  003198  D7D7               	goto	l1308
  3285  00319A  0A01               	xorlw	1	; case 69
  3286  00319C  B4D8               	btfsc	status,2,c
  3287  00319E  D7D8               	goto	l1309
  3288  0031A0  0A03               	xorlw	3	; case 70
  3289  0031A2  B4D8               	btfsc	status,2,c
  3290  0031A4  D7D9               	goto	l1310
  3291  0031A6  0A01               	xorlw	1	; case 71
  3292  0031A8  A4D8               	btfss	status,2,c
  3293  0031AA  0012               	return	
  3294  0031AC  D7DD               	goto	l1311
  3295  0031AE                     __end_of_GroupSynthesizers:
  3296                           	opt stack 0
  3297                           tosu	equ	0xFFF
  3298                           tosh	equ	0xFFE
  3299                           tosl	equ	0xFFD
  3300                           pclath	equ	0xFFA
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1l	equ	0xFE1
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _UpdateSynthFreq *****************
  3316 ;; Defined at:
  3317 ;;		line 90 in file "SyntApp.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  cType           1    wreg     enum E1
  3320 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  cType           1   44[BANK0 ] enum E1
  3323 ;;  retVal          8   45[BANK0 ] struct .
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3333 ;;      Params:         0       2       0       0       0       0       0
  3334 ;;      Locals:         0       9       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0
  3336 ;;      Totals:         0      11       0       0       0       0       0
  3337 ;;Total ram usage:       11 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    8
  3340 ;; This function calls:
  3341 ;;		_GetIntFromUartData
  3342 ;;		_SWSPI_send_word
  3343 ;;		_SendAckMessage
  3344 ;;		_StoreIntInEeprom
  3345 ;; This function is called by:
  3346 ;;		_GroupSynthesizers
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text9
  3351  00229C                     __ptext9:
  3352                           	opt stack 0
  3353  00229C                     _UpdateSynthFreq:
  3354                           	opt stack 20
  3355                           
  3356                           ;incstack = 0
  3357                           ;UpdateSynthFreq@cType stored from wreg
  3358  00229C  0100               	movlb	0	; () banked
  3359  00229E  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3360                           
  3361                           ;SyntApp.c: 92: INT_VAL retVal;
  3362                           ;SyntApp.c: 93: if(cntRegUpdate < 7)
  3363  0022A0  0E07               	movlw	7
  3364  0022A2  6037               	cpfslt	_cntRegUpdate,c
  3365  0022A4  D060               	goto	l518
  3366                           
  3367                           ;SyntApp.c: 94: {
  3368                           ;SyntApp.c: 95: retVal = GetIntFromUartData(10, data);
  3369  0022A6  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3370  0022AA  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3371  0022AE  0E0A               	movlw	10
  3372  0022B0  EC2D  F00D         	call	_GetIntFromUartData
  3373  0022B4  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3374  0022B8  0E07               	movlw	7
  3375  0022BA                     u8391:
  3376  0022BA  CFEB FFDB          	movff	plusw0,plusw2
  3377  0022BE  06E8               	decf	wreg,f,c
  3378  0022C0  E2FC               	bc	u8391
  3379                           
  3380                           ;SyntApp.c: 96: SWSPI_send_word(cType, retVal.num, 3);
  3381  0022C2  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3382  0022C6  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3383  0022CA  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3384  0022CE  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3385  0022D2  0E03               	movlw	3
  3386  0022D4  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3387  0022D6  0100               	movlb	0	; () banked
  3388  0022D8  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3389  0022DA  EC12  F017         	call	_SWSPI_send_word
  3390                           
  3391                           ;SyntApp.c: 97: if(cType == SYNTH_TX)
  3392  0022DE  0100               	movlb	0	; () banked
  3393  0022E0  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3394  0022E2  A4D8               	btfss	status,2,c
  3395  0022E4  D01D               	goto	l519
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;SyntApp.c: 98: {
  3399                           ;SyntApp.c: 99: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3400  0022E6  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3401  0022EA  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3402  0022EE  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3403  0022F2  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3404  0022F6  0E35               	movlw	low _SYNTH_ADDRES
  3405  0022F8  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3406  0022FA  6EF6               	movwf	tblptrl,c
  3407  0022FC  0E06               	movlw	high _SYNTH_ADDRES
  3408  0022FE  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3409  002300  6EF7               	movwf	tblptrh,c
  3410  002302                     	if	0	;There are less than 3 active tblptr bytes
  3411  002302                     	endif
  3412  002302  0008               	tblrd		*
  3413  002304  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3414  002308  0E00               	movlw	0
  3415  00230A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3416  00230C  0E04               	movlw	4
  3417  00230E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3418  002310  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
  3419                           
  3420                           ;SyntApp.c: 100: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3421  002314  0E48               	movlw	72
  3422  002316  6E24               	movwf	SendAckMessage@inRequest,c
  3423  002318  0E04               	movlw	4
  3424  00231A  EC61  F01C         	call	_SendAckMessage
  3425                           
  3426                           ;SyntApp.c: 101: }
  3427  00231E  D021               	goto	l521
  3428  002320                     l519:
  3429                           
  3430                           ;SyntApp.c: 102: else if(cType == SYNTH_RX)
  3431  002320  0100               	movlb	0	; () banked
  3432  002322  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3433  002324  A4D8               	btfss	status,2,c
  3434  002326  D01D               	goto	l521
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;SyntApp.c: 103: {
  3438                           ;SyntApp.c: 104: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3439  002328  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3440  00232C  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3441  002330  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3442  002334  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3443  002338  0E35               	movlw	low _SYNTH_ADDRES
  3444  00233A  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3445  00233C  6EF6               	movwf	tblptrl,c
  3446  00233E  0E06               	movlw	high _SYNTH_ADDRES
  3447  002340  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3448  002342  6EF7               	movwf	tblptrh,c
  3449  002344                     	if	0	;There are less than 3 active tblptr bytes
  3450  002344                     	endif
  3451  002344  0008               	tblrd		*
  3452  002346  50F5               	movf	tablat,w,c
  3453  002348  0920               	iorlw	32
  3454  00234A  6E25               	movwf	StoreIntInEeprom@address,c
  3455  00234C  0E00               	movlw	0
  3456  00234E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3457  002350  0E04               	movlw	4
  3458  002352  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3459  002354  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
  3460                           
  3461                           ;SyntApp.c: 105: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3462  002358  0E49               	movlw	73
  3463  00235A  6E24               	movwf	SendAckMessage@inRequest,c
  3464  00235C  0E04               	movlw	4
  3465  00235E  EC61  F01C         	call	_SendAckMessage
  3466  002362                     l521:
  3467                           
  3468                           ;SyntApp.c: 106: }
  3469                           ;SyntApp.c: 107: cntRegUpdate ++;
  3470  002362  2A37               	incf	_cntRegUpdate,f,c
  3471                           
  3472                           ;SyntApp.c: 108: }
  3473  002364  0012               	return	
  3474  002366                     l518:
  3475                           
  3476                           ;SyntApp.c: 110: else
  3477                           ;SyntApp.c: 111: {
  3478                           ;SyntApp.c: 112: cntRegUpdate = 0;
  3479  002366  0E00               	movlw	0
  3480  002368  6E37               	movwf	_cntRegUpdate,c
  3481                           
  3482                           ;SyntApp.c: 113: if(cType == SYNTH_TX)
  3483  00236A  0100               	movlb	0	; () banked
  3484  00236C  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3485  00236E  A4D8               	btfss	status,2,c
  3486  002370  D006               	goto	l523
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;SyntApp.c: 114: {
  3490                           ;SyntApp.c: 115: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3491  002372  0E42               	movlw	66
  3492  002374  6E24               	movwf	SendAckMessage@inRequest,c
  3493  002376  0E04               	movlw	4
  3494  002378  EC61  F01C         	call	_SendAckMessage
  3495                           
  3496                           ;SyntApp.c: 116: }
  3497  00237C  0012               	return	
  3498  00237E                     l523:
  3499                           
  3500                           ;SyntApp.c: 117: else if(cType == SYNTH_RX)
  3501  00237E  0100               	movlb	0	; () banked
  3502  002380  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3503  002382  A4D8               	btfss	status,2,c
  3504  002384  0012               	return	
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;SyntApp.c: 118: {
  3508                           ;SyntApp.c: 119: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3509  002386  0E43               	movlw	67
  3510  002388  6E24               	movwf	SendAckMessage@inRequest,c
  3511  00238A  0E04               	movlw	4
  3512  00238C  EC61  F01C         	call	_SendAckMessage
  3513  002390  0012               	return	
  3514  002392                     __end_of_UpdateSynthFreq:
  3515                           	opt stack 0
  3516                           tosu	equ	0xFFF
  3517                           tosh	equ	0xFFE
  3518                           tosl	equ	0xFFD
  3519                           pclath	equ	0xFFA
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           postinc0	equ	0xFEE
  3525                           plusw0	equ	0xFEB
  3526                           wreg	equ	0xFE8
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           plusw2	equ	0xFDB
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _SynthReadData *****************
  3537 ;; Defined at:
  3538 ;;		line 159 in file "SyntApp.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  cType           1    wreg     enum E1
  3541 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  cType           1   19[BANK1 ] enum E1
  3544 ;;  data            1   18[BANK1 ] unsigned char 
  3545 ;;  TxMsg          18    0[BANK1 ] unsigned char [18]
  3546 ;;  eepromDataAr   12   20[BANK1 ] unsigned long [3]
  3547 ;;  byteNum         1   33[BANK1 ] unsigned char 
  3548 ;;  regNum          1   32[BANK1 ] unsigned char 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3558 ;;      Params:         0       2       0       0       0       0       0
  3559 ;;      Locals:         0       0      34       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0
  3561 ;;      Totals:         0       2      34       0       0       0       0
  3562 ;;Total ram usage:       36 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:   10
  3565 ;; This function calls:
  3566 ;;		_ReadIntFromEeprom
  3567 ;;		_WriteUartMessage
  3568 ;;		_ZeroArray
  3569 ;;		_crc8
  3570 ;;		_make8
  3571 ;; This function is called by:
  3572 ;;		_GroupSynthesizers
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text10
  3577  00131A                     __ptext10:
  3578                           	opt stack 0
  3579  00131A                     _SynthReadData:
  3580                           	opt stack 18
  3581                           
  3582                           ;incstack = 0
  3583                           ;SynthReadData@cType stored from wreg
  3584  00131A  0101               	movlb	1	; () banked
  3585  00131C  6FBF               	movwf	SynthReadData@cType& (0+255),b
  3586                           
  3587                           ;SyntApp.c: 161: uint32_t eepromDataArray[3];
  3588                           ;SyntApp.c: 162: uint8_t regNum = 0, byteNum = 0;
  3589  00131E  0E00               	movlw	0
  3590  001320  0101               	movlb	1	; () banked
  3591  001322  6FCC               	movwf	SynthReadData@regNum& (0+255),b
  3592  001324  0E00               	movlw	0
  3593  001326  6FCD               	movwf	SynthReadData@byteNum& (0+255),b
  3594                           
  3595                           ; BSR set to: 1
  3596                           ;SyntApp.c: 163: char TxMsg[5 * 3 + 1 + 1 + 1];
  3597                           ;SyntApp.c: 164: ZeroArray(TxMsg, 5 * 3 + 1 + 1 + 1);
  3598  001328  0EAC               	movlw	low SynthReadData@TxMsg
  3599  00132A  6E20               	movwf	ZeroArray@array,c
  3600  00132C  0E01               	movlw	high SynthReadData@TxMsg
  3601  00132E  6E21               	movwf	ZeroArray@array+1,c
  3602  001330  0E00               	movlw	0
  3603  001332  6E23               	movwf	ZeroArray@size+1,c
  3604  001334  0E12               	movlw	18
  3605  001336  6E22               	movwf	ZeroArray@size,c
  3606  001338  EC06  F020         	call	_ZeroArray	;wreg free
  3607                           
  3608                           ;SyntApp.c: 167: TxMsg[(0)] = (0x24);
  3609  00133C  0E24               	movlw	36
  3610  00133E  0101               	movlb	1	; () banked
  3611  001340  6FAC               	movwf	SynthReadData@TxMsg& (0+255),b
  3612                           
  3613                           ; BSR set to: 1
  3614                           ;SyntApp.c: 168: TxMsg[(1)] = SYNTH_MSG;
  3615  001342  0E04               	movlw	4
  3616  001344  6FAD               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;SyntApp.c: 169: TxMsg[(3)] = 5 * 3 + 1 - (0x4);
  3620  001346  0E0C               	movlw	12
  3621  001348  6FAF               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3622                           
  3623                           ; BSR set to: 1
  3624                           ;SyntApp.c: 171: if(cType == SYNTH_TX)
  3625  00134A  51BF               	movf	SynthReadData@cType& (0+255),w,b
  3626  00134C  A4D8               	btfss	status,2,c
  3627  00134E  D03A               	goto	l539
  3628                           
  3629                           ; BSR set to: 1
  3630                           ;SyntApp.c: 172: {
  3631                           ;SyntApp.c: 173: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3632  001350  0E47               	movlw	71
  3633  001352  6FAE               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3634                           
  3635                           ; BSR set to: 1
  3636                           ;SyntApp.c: 174: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3637  001354  0E00               	movlw	0
  3638  001356  0100               	movlb	0	; () banked
  3639  001358  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3640  00135A  0E04               	movlw	4
  3641  00135C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3642  00135E  0E35               	movlw	low _SYNTH_ADDRES
  3643  001360  6EF6               	movwf	tblptrl,c
  3644  001362                     	if	1	;There is more than 1 active tblptr byte
  3645  001362  0E06               	movlw	high _SYNTH_ADDRES
  3646  001364  6EF7               	movwf	tblptrh,c
  3647  001366                     	endif
  3648  001366                     	if	0	;There are less than 3 active tblptr bytes
  3649  001366                     	endif
  3650  001366  0008               	tblrd		*
  3651  001368  50F5               	movf	tablat,w,c
  3652  00136A  ECA9  F00E         	call	_ReadIntFromEeprom
  3653  00136E  C0B1  F1C0         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3654  001372  C0B2  F1C1         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3655  001376  C0B3  F1C2         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3656  00137A  C0B4  F1C3         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3657                           
  3658                           ;SyntApp.c: 175: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3659  00137E  0E00               	movlw	0
  3660  001380  0100               	movlb	0	; () banked
  3661  001382  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3662  001384  0E04               	movlw	4
  3663  001386  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3664  001388  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3665  00138A  6EF6               	movwf	tblptrl,c
  3666  00138C  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3667  00138E  6EF7               	movwf	tblptrh,c
  3668  001390                     	if	0	;tblptru may be non-zero
  3669  001390                     	endif
  3670  001390                     	if	0	;tblptru may be non-zero
  3671  001390                     	endif
  3672  001390  0008               	tblrd		*
  3673  001392  50F5               	movf	tablat,w,c
  3674  001394  ECA9  F00E         	call	_ReadIntFromEeprom
  3675  001398  C0B1  F1C4         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3676  00139C  C0B2  F1C5         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3677  0013A0  C0B3  F1C6         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3678  0013A4  C0B4  F1C7         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3679                           
  3680                           ;SyntApp.c: 176: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3681  0013A8  0E00               	movlw	0
  3682  0013AA  0100               	movlb	0	; () banked
  3683  0013AC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3684  0013AE  0E04               	movlw	4
  3685  0013B0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3686  0013B2  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3687  0013B4  6EF6               	movwf	tblptrl,c
  3688  0013B6  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3689  0013B8  6EF7               	movwf	tblptrh,c
  3690  0013BA                     	if	0	;tblptru may be non-zero
  3691  0013BA                     	endif
  3692  0013BA                     	if	0	;tblptru may be non-zero
  3693  0013BA                     	endif
  3694  0013BA  0008               	tblrd		*
  3695  0013BC  50F5               	movf	tablat,w,c
  3696  0013BE  ECA9  F00E         	call	_ReadIntFromEeprom
  3697  0013C2  D040               	goto	L1
  3698  0013C4                     l539:
  3699                           
  3700                           ;SyntApp.c: 178: else if (cType == SYNTH_RX)
  3701  0013C4  0101               	movlb	1	; () banked
  3702  0013C6  05BF               	decf	SynthReadData@cType& (0+255),w,b
  3703  0013C8  A4D8               	btfss	status,2,c
  3704  0013CA  D044               	goto	l541
  3705                           
  3706                           ; BSR set to: 1
  3707                           ;SyntApp.c: 179: {
  3708                           ;SyntApp.c: 180: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3709  0013CC  0E46               	movlw	70
  3710  0013CE  6FAE               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3711                           
  3712                           ; BSR set to: 1
  3713                           ;SyntApp.c: 181: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3714  0013D0  0E00               	movlw	0
  3715  0013D2  0100               	movlb	0	; () banked
  3716  0013D4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3717  0013D6  0E04               	movlw	4
  3718  0013D8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3719  0013DA  0E35               	movlw	low _SYNTH_ADDRES
  3720  0013DC  6EF6               	movwf	tblptrl,c
  3721  0013DE                     	if	1	;There is more than 1 active tblptr byte
  3722  0013DE  0E06               	movlw	high _SYNTH_ADDRES
  3723  0013E0  6EF7               	movwf	tblptrh,c
  3724  0013E2                     	endif
  3725  0013E2                     	if	0	;There are less than 3 active tblptr bytes
  3726  0013E2                     	endif
  3727  0013E2  0008               	tblrd		*
  3728  0013E4  50F5               	movf	tablat,w,c
  3729  0013E6  0920               	iorlw	32
  3730  0013E8  ECA9  F00E         	call	_ReadIntFromEeprom
  3731  0013EC  C0B1  F1C0         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3732  0013F0  C0B2  F1C1         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3733  0013F4  C0B3  F1C2         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3734  0013F8  C0B4  F1C3         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3735                           
  3736                           ;SyntApp.c: 182: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3737  0013FC  0E00               	movlw	0
  3738  0013FE  0100               	movlb	0	; () banked
  3739  001400  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3740  001402  0E04               	movlw	4
  3741  001404  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3742  001406  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3743  001408  6EF6               	movwf	tblptrl,c
  3744  00140A  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3745  00140C  6EF7               	movwf	tblptrh,c
  3746  00140E                     	if	0	;tblptru may be non-zero
  3747  00140E                     	endif
  3748  00140E                     	if	0	;tblptru may be non-zero
  3749  00140E                     	endif
  3750  00140E  0008               	tblrd		*
  3751  001410  50F5               	movf	tablat,w,c
  3752  001412  0920               	iorlw	32
  3753  001414  ECA9  F00E         	call	_ReadIntFromEeprom
  3754  001418  C0B1  F1C4         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3755  00141C  C0B2  F1C5         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3756  001420  C0B3  F1C6         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3757  001424  C0B4  F1C7         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3758                           
  3759                           ;SyntApp.c: 183: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3760  001428  0E00               	movlw	0
  3761  00142A  0100               	movlb	0	; () banked
  3762  00142C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3763  00142E  0E04               	movlw	4
  3764  001430  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3765  001432  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3766  001434  6EF6               	movwf	tblptrl,c
  3767  001436  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3768  001438  6EF7               	movwf	tblptrh,c
  3769  00143A                     	if	0	;tblptru may be non-zero
  3770  00143A                     	endif
  3771  00143A                     	if	0	;tblptru may be non-zero
  3772  00143A                     	endif
  3773  00143A  0008               	tblrd		*
  3774  00143C  50F5               	movf	tablat,w,c
  3775  00143E  0920               	iorlw	32
  3776  001440  ECA9  F00E         	call	_ReadIntFromEeprom
  3777  001444                     L1:
  3778  001444  C0B1  F1C8         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3779  001448  C0B2  F1C9         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3780  00144C  C0B3  F1CA         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3781  001450  C0B4  F1CB         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3782  001454                     l541:
  3783                           
  3784                           ;SyntApp.c: 184: }
  3785                           ;SyntApp.c: 186: for(regNum = 0; regNum < 3; regNum++)
  3786  001454  0E00               	movlw	0
  3787  001456  0101               	movlb	1	; () banked
  3788  001458  6FCC               	movwf	SynthReadData@regNum& (0+255),b
  3789  00145A                     l8364:
  3790                           
  3791                           ; BSR set to: 1
  3792  00145A  0E02               	movlw	2
  3793  00145C  65CC               	cpfsgt	SynthReadData@regNum& (0+255),b
  3794  00145E  D001               	goto	l542
  3795  001460  D032               	goto	u8570
  3796  001462                     l542:
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;SyntApp.c: 187: {
  3800                           ;SyntApp.c: 188: for(byteNum = 0; byteNum < (5); byteNum++)
  3801                           
  3802                           ; BSR set to: 1
  3803  001462  0E00               	movlw	0
  3804  001464  6FCD               	movwf	SynthReadData@byteNum& (0+255),b
  3805  001466                     l8370:
  3806                           
  3807                           ; BSR set to: 1
  3808  001466  0E04               	movlw	4
  3809  001468  65CD               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3810  00146A  D001               	goto	l544
  3811  00146C  D02A               	goto	u8560
  3812  00146E                     l544:
  3813                           
  3814                           ; BSR set to: 1
  3815                           ;SyntApp.c: 189: {
  3816                           ;SyntApp.c: 190: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3817                           
  3818                           ; BSR set to: 1
  3819  00146E  51CC               	movf	SynthReadData@regNum& (0+255),w,b
  3820  001470  0D04               	mullw	4
  3821  001472  0EC0               	movlw	low SynthReadData@eepromDataArray
  3822  001474  24F3               	addwf	prodl,w,c
  3823  001476  6ED9               	movwf	fsr2l,c
  3824  001478  0E01               	movlw	high SynthReadData@eepromDataArray
  3825  00147A  20F4               	addwfc	prodh,w,c
  3826  00147C  6EDA               	movwf	fsr2h,c
  3827  00147E  CFDE F018          	movff	postinc2,make8@data
  3828  001482  CFDE F019          	movff	postinc2,make8@data+1
  3829  001486  CFDE F01A          	movff	postinc2,make8@data+2
  3830  00148A  CFDE F01B          	movff	postinc2,make8@data+3
  3831  00148E  C1CD  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3832  001492  EC03  F01B         	call	_make8	;wreg free
  3833  001496  0101               	movlb	1	; () banked
  3834  001498  6FBE               	movwf	SynthReadData@data_979& (0+255),b
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;SyntApp.c: 191: TxMsg[(0x4) + (3 + 1)*regNum + byteNum] = data;
  3838  00149A  51CC               	movf	SynthReadData@regNum& (0+255),w,b
  3839  00149C  0D04               	mullw	4
  3840  00149E  51CD               	movf	SynthReadData@byteNum& (0+255),w,b
  3841  0014A0  26F3               	addwf	prodl,f,c
  3842  0014A2  0E00               	movlw	0
  3843  0014A4  22F4               	addwfc	prodh,f,c
  3844  0014A6  0E04               	movlw	4
  3845  0014A8  26F3               	addwf	prodl,f,c
  3846  0014AA  0E00               	movlw	0
  3847  0014AC  22F4               	addwfc	prodh,f,c
  3848  0014AE  0EAC               	movlw	low SynthReadData@TxMsg
  3849  0014B0  24F3               	addwf	prodl,w,c
  3850  0014B2  6ED9               	movwf	fsr2l,c
  3851  0014B4  0E01               	movlw	high SynthReadData@TxMsg
  3852  0014B6  20F4               	addwfc	prodh,w,c
  3853  0014B8  6EDA               	movwf	fsr2h,c
  3854  0014BA  C1BE  FFDF         	movff	SynthReadData@data_979,indf2
  3855                           
  3856                           ; BSR set to: 1
  3857  0014BE  2BCD               	incf	SynthReadData@byteNum& (0+255),f,b
  3858  0014C0  D7D2               	goto	l8370
  3859  0014C2                     u8560:
  3860                           
  3861                           ; BSR set to: 1
  3862                           
  3863                           ; BSR set to: 1
  3864  0014C2  2BCC               	incf	SynthReadData@regNum& (0+255),f,b
  3865  0014C4  D7CA               	goto	l8364
  3866  0014C6                     u8570:
  3867                           
  3868                           ; BSR set to: 1
  3869                           ;SyntApp.c: 192: }
  3870                           ;SyntApp.c: 193: }
  3871                           ;SyntApp.c: 195: TxMsg[5 * 3 + 1] = 0x9;
  3872                           
  3873                           ; BSR set to: 1
  3874  0014C6  0E09               	movlw	9
  3875  0014C8  6FBC               	movwf	(SynthReadData@TxMsg+16)& (0+255),b
  3876                           
  3877                           ; BSR set to: 1
  3878                           ;SyntApp.c: 196: TxMsg[5 * 3 + 1 + 1] = crc8(TxMsg, 5 * 3 + 1 + 1);
  3879  0014CA  0EAC               	movlw	low SynthReadData@TxMsg
  3880  0014CC  6E18               	movwf	crc8@dataArray,c
  3881  0014CE  0E01               	movlw	high SynthReadData@TxMsg
  3882  0014D0  6E19               	movwf	crc8@dataArray+1,c
  3883  0014D2  0E00               	movlw	0
  3884  0014D4  6E1B               	movwf	crc8@dataSize+1,c
  3885  0014D6  0E11               	movlw	17
  3886  0014D8  6E1A               	movwf	crc8@dataSize,c
  3887  0014DA  EC8A  F01C         	call	_crc8	;wreg free
  3888  0014DE  0101               	movlb	1	; () banked
  3889  0014E0  6FBD               	movwf	(SynthReadData@TxMsg+17)& (0+255),b
  3890                           
  3891                           ; BSR set to: 1
  3892                           ;SyntApp.c: 197: WriteUartMessage(TxMsg, 5 * 3 + 1 + 1 + 1);
  3893  0014E2  0EAC               	movlw	low SynthReadData@TxMsg
  3894  0014E4  6E19               	movwf	WriteUartMessage@dataBuf,c
  3895  0014E6  0E01               	movlw	high SynthReadData@TxMsg
  3896  0014E8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3897  0014EA  0E00               	movlw	0
  3898  0014EC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3899  0014EE  0E12               	movlw	18
  3900  0014F0  6E1B               	movwf	WriteUartMessage@dataSize,c
  3901  0014F2  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  3902  0014F6  0012               	return		;funcret
  3903  0014F8                     __end_of_SynthReadData:
  3904                           	opt stack 0
  3905                           tosu	equ	0xFFF
  3906                           tosh	equ	0xFFE
  3907                           tosl	equ	0xFFD
  3908                           pclath	equ	0xFFA
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           postinc0	equ	0xFEE
  3916                           plusw0	equ	0xFEB
  3917                           wreg	equ	0xFE8
  3918                           postdec1	equ	0xFE5
  3919                           fsr1l	equ	0xFE1
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           plusw2	equ	0xFDB
  3923                           fsr2h	equ	0xFDA
  3924                           fsr2l	equ	0xFD9
  3925                           status	equ	0xFD8
  3926                           
  3927 ;; *************** function _SetSynthOper *****************
  3928 ;; Defined at:
  3929 ;;		line 128 in file "SyntApp.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;  cType           1    wreg     enum E1
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  cType           1  111[BANK0 ] enum E1
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         0       0       0       0       0       0       0
  3944 ;;      Locals:         0       1       0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0
  3946 ;;      Totals:         0       1       0       0       0       0       0
  3947 ;;Total ram usage:        1 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:   11
  3950 ;; This function calls:
  3951 ;;		_InitSynth
  3952 ;;		_SendAckMessage
  3953 ;;		_SwSpi_Set_CE_Pin
  3954 ;; This function is called by:
  3955 ;;		_GroupSynthesizers
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           	psect	text11
  3960  0032B8                     __ptext11:
  3961                           	opt stack 0
  3962  0032B8                     _SetSynthOper:
  3963                           	opt stack 17
  3964                           
  3965                           ;incstack = 0
  3966                           ;SetSynthOper@cType stored from wreg
  3967  0032B8  0100               	movlb	0	; () banked
  3968  0032BA  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  3969                           
  3970                           ;SyntApp.c: 130: if(cType == SYNTH_TX)
  3971  0032BC  0100               	movlb	0	; () banked
  3972  0032BE  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  3973  0032C0  A4D8               	btfss	status,2,c
  3974  0032C2  D01A               	goto	l529
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;SyntApp.c: 131: {
  3978                           ;SyntApp.c: 132: SynthTxOper = !SynthTxOper;
  3979  0032C4  5044               	movf	_SynthTxOper,w,c
  3980  0032C6  A4D8               	btfss	status,2,c
  3981  0032C8  D002               	goto	u8450
  3982  0032CA  0E01               	movlw	1
  3983  0032CC  D001               	goto	u8460
  3984  0032CE                     u8450:
  3985  0032CE  0E00               	movlw	0
  3986  0032D0                     u8460:
  3987  0032D0  6E44               	movwf	_SynthTxOper,c
  3988                           
  3989                           ;SyntApp.c: 133: if(SynthTxOper)
  3990  0032D2  5044               	movf	_SynthTxOper,w,c
  3991  0032D4  B4D8               	btfsc	status,2,c
  3992  0032D6  D004               	goto	l530
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;SyntApp.c: 134: {
  3996                           ;SyntApp.c: 135: InitSynth(cType);
  3997  0032D8  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  3998  0032DA  EC4B  F005         	call	_InitSynth
  3999                           
  4000                           ;SyntApp.c: 136: }
  4001  0032DE  D006               	goto	l531
  4002  0032E0                     l530:
  4003                           
  4004                           ;SyntApp.c: 137: else
  4005                           ;SyntApp.c: 138: {
  4006                           ;SyntApp.c: 139: SwSpi_Set_CE_Pin(cType, 0);
  4007  0032E0  0E00               	movlw	0
  4008  0032E2  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4009  0032E4  0100               	movlb	0	; () banked
  4010  0032E6  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4011  0032E8  EC56  F01D         	call	_SwSpi_Set_CE_Pin
  4012  0032EC                     l531:
  4013                           
  4014                           ;SyntApp.c: 140: }
  4015                           ;SyntApp.c: 141: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4016  0032EC  0E45               	movlw	69
  4017  0032EE  6E24               	movwf	SendAckMessage@inRequest,c
  4018  0032F0  0E04               	movlw	4
  4019  0032F2  EC61  F01C         	call	_SendAckMessage
  4020                           
  4021                           ;SyntApp.c: 142: }
  4022  0032F6  0012               	return	
  4023  0032F8                     l529:
  4024                           
  4025                           ;SyntApp.c: 143: else if (cType == SYNTH_RX)
  4026  0032F8  0100               	movlb	0	; () banked
  4027  0032FA  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4028  0032FC  A4D8               	btfss	status,2,c
  4029  0032FE  0012               	return	
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;SyntApp.c: 144: {
  4033                           ;SyntApp.c: 145: SynthRxOper = !SynthRxOper;
  4034  003300  5043               	movf	_SynthRxOper,w,c
  4035  003302  A4D8               	btfss	status,2,c
  4036  003304  D002               	goto	u8490
  4037  003306  0E01               	movlw	1
  4038  003308  D001               	goto	u8500
  4039  00330A                     u8490:
  4040  00330A  0E00               	movlw	0
  4041  00330C                     u8500:
  4042  00330C  6E43               	movwf	_SynthRxOper,c
  4043                           
  4044                           ;SyntApp.c: 146: if(SynthRxOper)
  4045  00330E  5043               	movf	_SynthRxOper,w,c
  4046  003310  B4D8               	btfsc	status,2,c
  4047  003312  D004               	goto	l534
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;SyntApp.c: 147: {
  4051                           ;SyntApp.c: 148: InitSynth(cType);
  4052  003314  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4053  003316  EC4B  F005         	call	_InitSynth
  4054                           
  4055                           ;SyntApp.c: 149: }
  4056  00331A  D006               	goto	l535
  4057  00331C                     l534:
  4058                           
  4059                           ;SyntApp.c: 150: else
  4060                           ;SyntApp.c: 151: {
  4061                           ;SyntApp.c: 152: SwSpi_Set_CE_Pin(cType, 0);
  4062  00331C  0E00               	movlw	0
  4063  00331E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4064  003320  0100               	movlb	0	; () banked
  4065  003322  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4066  003324  EC56  F01D         	call	_SwSpi_Set_CE_Pin
  4067  003328                     l535:
  4068                           
  4069                           ;SyntApp.c: 153: }
  4070                           ;SyntApp.c: 154: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4071  003328  0E44               	movlw	68
  4072  00332A  6E24               	movwf	SendAckMessage@inRequest,c
  4073  00332C  0E04               	movlw	4
  4074  00332E  EC61  F01C         	call	_SendAckMessage
  4075  003332  0012               	return	
  4076  003334                     __end_of_SetSynthOper:
  4077                           	opt stack 0
  4078                           tosu	equ	0xFFF
  4079                           tosh	equ	0xFFE
  4080                           tosl	equ	0xFFD
  4081                           pclath	equ	0xFFA
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           plusw0	equ	0xFEB
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           postinc2	equ	0xFDE
  4095                           plusw2	equ	0xFDB
  4096                           fsr2h	equ	0xFDA
  4097                           fsr2l	equ	0xFD9
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _GetMcuRunTime *****************
  4101 ;; Defined at:
  4102 ;;		line 68 in file "SystemStatus.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  idx             2   13[BANK0 ] int 
  4107 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4108 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  1    wreg      void 
  4111 ;; Registers used:
  4112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4118 ;;      Params:         0       0       0       0       0       0       0
  4119 ;;      Locals:         0      15       0       0       0       0       0
  4120 ;;      Temps:          2       0       0       0       0       0       0
  4121 ;;      Totals:         2      15       0       0       0       0       0
  4122 ;;Total ram usage:       17 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    6
  4125 ;; This function calls:
  4126 ;;		_WriteUartMessage
  4127 ;;		___lldiv
  4128 ;;		___llmod
  4129 ;;		_crc8
  4130 ;; This function is called by:
  4131 ;;		_GroupStatusAndVersion
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text12
  4136  002570                     __ptext12:
  4137                           	opt stack 0
  4138  002570                     _GetMcuRunTime:
  4139                           	opt stack 22
  4140                           
  4141                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4142                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4143                           
  4144                           ;incstack = 0
  4145  002570  0E24               	movlw	36
  4146  002572  0100               	movlb	0	; () banked
  4147  002574  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4148                           
  4149                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4150  002576  0E02               	movlw	2
  4151  002578  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4152                           
  4153                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4154  00257A  0E21               	movlw	33
  4155  00257C  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4156                           
  4157                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4158  00257E  0E04               	movlw	4
  4159  002580  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4163  002582  C0E1  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4164  002586  C0E2  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4165  00258A  C0E3  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4166  00258E  C0E4  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4167                           
  4168                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4169  002592  0E00               	movlw	0
  4170  002594  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4171  002596  0E00               	movlw	0
  4172  002598  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4173  00259A                     l8450:
  4174                           
  4175                           ; BSR set to: 0
  4176  00259A  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4177  00259C  D006               	goto	l1508
  4178  00259E  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4179  0025A0  E142               	bnz	l8462
  4180  0025A2  0E04               	movlw	4
  4181  0025A4  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4182  0025A6  B0D8               	btfsc	status,0,c
  4183  0025A8  D03E               	goto	u8610
  4184  0025AA                     l1508:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;SystemStatus.c: 83: {
  4188                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4189                           
  4190                           ; BSR set to: 0
  4191  0025AA  0E04               	movlw	4
  4192  0025AC  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4193  0025AE  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4194  0025B0  0E00               	movlw	0
  4195  0025B2  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4196  0025B4  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4197  0025B6  0E60               	movlw	low GetMcuRunTime@TxMsg
  4198  0025B8  2425               	addwf	??_GetMcuRunTime,w,c
  4199  0025BA  6ED9               	movwf	fsr2l,c
  4200  0025BC  0E00               	movlw	high GetMcuRunTime@TxMsg
  4201  0025BE  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4202  0025C0  6EDA               	movwf	fsr2h,c
  4203  0025C2  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4204  0025C6  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4205  0025CA  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4206  0025CE  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4207  0025D2  0E0A               	movlw	10
  4208  0025D4  6E1C               	movwf	___llmod@divisor,c
  4209  0025D6  0E00               	movlw	0
  4210  0025D8  6E1D               	movwf	___llmod@divisor+1,c
  4211  0025DA  0E00               	movlw	0
  4212  0025DC  6E1E               	movwf	___llmod@divisor+2,c
  4213  0025DE  0E00               	movlw	0
  4214  0025E0  6E1F               	movwf	___llmod@divisor+3,c
  4215  0025E2  EC40  F01A         	call	___llmod	;wreg free
  4216  0025E6  5018               	movf	?___llmod,w,c
  4217  0025E8  6EDF               	movwf	indf2,c
  4218                           
  4219                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4220  0025EA  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4221  0025EE  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4222  0025F2  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4223  0025F6  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4224  0025FA  0E0A               	movlw	10
  4225  0025FC  6E1C               	movwf	___lldiv@divisor,c
  4226  0025FE  0E00               	movlw	0
  4227  002600  6E1D               	movwf	___lldiv@divisor+1,c
  4228  002602  0E00               	movlw	0
  4229  002604  6E1E               	movwf	___lldiv@divisor+2,c
  4230  002606  0E00               	movlw	0
  4231  002608  6E1F               	movwf	___lldiv@divisor+3,c
  4232  00260A  EC1B  F019         	call	___lldiv	;wreg free
  4233  00260E  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4234  002612  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4235  002616  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4236  00261A  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4237  00261E  0100               	movlb	0	; () banked
  4238  002620  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4239  002622  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4240  002624  D7BA               	goto	l8450
  4241  002626                     u8610:
  4242  002626                     l8462:
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;SystemStatus.c: 86: }
  4246                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4247  002626  0E60               	movlw	low GetMcuRunTime@TxMsg
  4248  002628  6E18               	movwf	crc8@dataArray,c
  4249  00262A  0E00               	movlw	high GetMcuRunTime@TxMsg
  4250  00262C  6E19               	movwf	crc8@dataArray+1,c
  4251  00262E  0E00               	movlw	0
  4252  002630  6E1B               	movwf	crc8@dataSize+1,c
  4253  002632  0E08               	movlw	8
  4254  002634  6E1A               	movwf	crc8@dataSize,c
  4255  002636  EC8A  F01C         	call	_crc8	;wreg free
  4256  00263A  0100               	movlb	0	; () banked
  4257  00263C  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4261  00263E  0E60               	movlw	low GetMcuRunTime@TxMsg
  4262  002640  6E19               	movwf	WriteUartMessage@dataBuf,c
  4263  002642  0E00               	movlw	high GetMcuRunTime@TxMsg
  4264  002644  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4265  002646  0E00               	movlw	0
  4266  002648  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4267  00264A  0E09               	movlw	9
  4268  00264C  6E1B               	movwf	WriteUartMessage@dataSize,c
  4269  00264E  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  4270  002652  0012               	return		;funcret
  4271  002654                     __end_of_GetMcuRunTime:
  4272                           	opt stack 0
  4273                           tosu	equ	0xFFF
  4274                           tosh	equ	0xFFE
  4275                           tosl	equ	0xFFD
  4276                           pclath	equ	0xFFA
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           postinc0	equ	0xFEE
  4284                           plusw0	equ	0xFEB
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           plusw2	equ	0xFDB
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function ___lldiv *****************
  4296 ;; Defined at:
  4297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  dividend        4   23[COMRAM] unsigned long 
  4300 ;;  divisor         4   27[COMRAM] unsigned long 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  quotient        4   31[COMRAM] unsigned long 
  4303 ;;  counter         1   35[COMRAM] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  4   23[COMRAM] unsigned long 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4313 ;;      Params:         8       0       0       0       0       0       0
  4314 ;;      Locals:         5       0       0       0       0       0       0
  4315 ;;      Temps:          0       0       0       0       0       0       0
  4316 ;;      Totals:        13       0       0       0       0       0       0
  4317 ;;Total ram usage:       13 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    4
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_GetMcuRunTime
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text13
  4328  003236                     __ptext13:
  4329                           	opt stack 0
  4330  003236                     ___lldiv:
  4331                           	opt stack 23
  4332                           
  4333                           ;incstack = 0
  4334  003236  0E00               	movlw	0
  4335  003238  6E20               	movwf	___lldiv@quotient,c
  4336  00323A  0E00               	movlw	0
  4337  00323C  6E21               	movwf	___lldiv@quotient+1,c
  4338  00323E  0E00               	movlw	0
  4339  003240  6E22               	movwf	___lldiv@quotient+2,c
  4340  003242  0E00               	movlw	0
  4341  003244  6E23               	movwf	___lldiv@quotient+3,c
  4342  003246  501C               	movf	___lldiv@divisor,w,c
  4343  003248  101D               	iorwf	___lldiv@divisor+1,w,c
  4344  00324A  101E               	iorwf	___lldiv@divisor+2,w,c
  4345  00324C  101F               	iorwf	___lldiv@divisor+3,w,c
  4346  00324E  B4D8               	btfsc	status,2,c
  4347  003250  D02A               	goto	l1941
  4348  003252  0E01               	movlw	1
  4349  003254  6E24               	movwf	___lldiv@counter,c
  4350  003256  D006               	goto	l1936
  4351  003258  90D8               	bcf	status,0,c
  4352  00325A  361C               	rlcf	___lldiv@divisor,f,c
  4353  00325C  361D               	rlcf	___lldiv@divisor+1,f,c
  4354  00325E  361E               	rlcf	___lldiv@divisor+2,f,c
  4355  003260  361F               	rlcf	___lldiv@divisor+3,f,c
  4356  003262  2A24               	incf	___lldiv@counter,f,c
  4357  003264                     l1936:
  4358  003264  AE1F               	btfss	___lldiv@divisor+3,7,c
  4359  003266  D7F8               	goto	l1937
  4360  003268                     u8130:
  4361  003268  90D8               	bcf	status,0,c
  4362  00326A  3620               	rlcf	___lldiv@quotient,f,c
  4363  00326C  3621               	rlcf	___lldiv@quotient+1,f,c
  4364  00326E  3622               	rlcf	___lldiv@quotient+2,f,c
  4365  003270  3623               	rlcf	___lldiv@quotient+3,f,c
  4366  003272  501C               	movf	___lldiv@divisor,w,c
  4367  003274  5C18               	subwf	___lldiv@dividend,w,c
  4368  003276  501D               	movf	___lldiv@divisor+1,w,c
  4369  003278  5819               	subwfb	___lldiv@dividend+1,w,c
  4370  00327A  501E               	movf	___lldiv@divisor+2,w,c
  4371  00327C  581A               	subwfb	___lldiv@dividend+2,w,c
  4372  00327E  501F               	movf	___lldiv@divisor+3,w,c
  4373  003280  581B               	subwfb	___lldiv@dividend+3,w,c
  4374  003282  A0D8               	btfss	status,0,c
  4375  003284  D009               	goto	l1940
  4376  003286  501C               	movf	___lldiv@divisor,w,c
  4377  003288  5E18               	subwf	___lldiv@dividend,f,c
  4378  00328A  501D               	movf	___lldiv@divisor+1,w,c
  4379  00328C  5A19               	subwfb	___lldiv@dividend+1,f,c
  4380  00328E  501E               	movf	___lldiv@divisor+2,w,c
  4381  003290  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4382  003292  501F               	movf	___lldiv@divisor+3,w,c
  4383  003294  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4384  003296  8020               	bsf	___lldiv@quotient,0,c
  4385  003298                     l1940:
  4386  003298  90D8               	bcf	status,0,c
  4387  00329A  321F               	rrcf	___lldiv@divisor+3,f,c
  4388  00329C  321E               	rrcf	___lldiv@divisor+2,f,c
  4389  00329E  321D               	rrcf	___lldiv@divisor+1,f,c
  4390  0032A0  321C               	rrcf	___lldiv@divisor,f,c
  4391  0032A2  2E24               	decfsz	___lldiv@counter,f,c
  4392  0032A4  D7E1               	goto	u8130
  4393  0032A6                     l1941:
  4394  0032A6  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4395  0032AA  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4396  0032AE  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4397  0032B2  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4398  0032B6  0012               	return		;funcret
  4399  0032B8                     __end_of___lldiv:
  4400                           	opt stack 0
  4401                           tosu	equ	0xFFF
  4402                           tosh	equ	0xFFE
  4403                           tosl	equ	0xFFD
  4404                           pclath	equ	0xFFA
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           postinc0	equ	0xFEE
  4412                           plusw0	equ	0xFEB
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           plusw2	equ	0xFDB
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _GetMcuFwVersion *****************
  4424 ;; Defined at:
  4425 ;;		line 14 in file "SystemStatus.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4430 ;;  compileData     4    0[BANK0 ] unsigned long 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         0       0       0       0       0       0       0
  4441 ;;      Locals:         0      26       0       0       0       0       0
  4442 ;;      Temps:          7       0       0       0       0       0       0
  4443 ;;      Totals:         7      26       0       0       0       0       0
  4444 ;;Total ram usage:       33 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    6
  4447 ;; This function calls:
  4448 ;;		_WriteUartMessage
  4449 ;;		_ZeroArray
  4450 ;;		___wmul
  4451 ;;		_crc8
  4452 ;; This function is called by:
  4453 ;;		_GroupStatusAndVersion
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text14
  4458  0006A6                     __ptext14:
  4459                           	opt stack 0
  4460  0006A6                     _GetMcuFwVersion:
  4461                           	opt stack 22
  4462                           
  4463                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4464                           
  4465                           ;incstack = 0
  4466  0006A6  0E00               	movlw	0
  4467  0006A8  0100               	movlb	0	; () banked
  4468  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4469  0006AC  0E00               	movlw	0
  4470  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4471  0006B0  0E00               	movlw	0
  4472  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4473  0006B4  0E00               	movlw	0
  4474  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4478                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4479  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4480  0006BA  6E20               	movwf	ZeroArray@array,c
  4481  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4482  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4483  0006C0  0E00               	movlw	0
  4484  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4485  0006C4  0E12               	movlw	18
  4486  0006C6  6E22               	movwf	ZeroArray@size,c
  4487  0006C8  EC06  F020         	call	_ZeroArray	;wreg free
  4488                           
  4489                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4490  0006CC  0E24               	movlw	36
  4491  0006CE  0100               	movlb	0	; () banked
  4492  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4496  0006D2  0E02               	movlw	2
  4497  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4501  0006D6  0E22               	movlw	34
  4502  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4506  0006DA  0E0D               	movlw	13
  4507  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 23 2018"[ 7] - '0') * 1000 + ("Mar 23 2
      +                          018"[ 8] - '0') * 100 + ("Mar 23 2018"[ 9] - '0') * 10 + ("Mar 23 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4511  0006DE  0ED0               	movlw	208
  4512  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4513  0006E2  0EFF               	movlw	255
  4514  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4515  0006E6  0E97               	movlw	low (STR_1+7)
  4516  0006E8  6EF6               	movwf	tblptrl,c
  4517  0006EA  0E06               	movlw	high (STR_1+7)
  4518  0006EC  6EF7               	movwf	tblptrh,c
  4519  0006EE                     	if	0	;tblptru may be non-zero
  4520  0006EE                     	endif
  4521  0006EE                     	if	0	;tblptru may be non-zero
  4522  0006EE                     	endif
  4523  0006EE  0008               	tblrd		*
  4524  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4525  0006F4  0ED0               	movlw	208
  4526  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4527  0006F8  6E18               	movwf	___wmul@multiplier,c
  4528  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4529  0006FC  0EFF               	movlw	255
  4530  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4531  000700  0E03               	movlw	3
  4532  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4533  000704  0EE8               	movlw	232
  4534  000706  6E1A               	movwf	___wmul@multiplicand,c
  4535  000708  EC6D  F01F         	call	___wmul	;wreg free
  4536  00070C  0E9A               	movlw	low (STR_1+10)
  4537  00070E  6EF6               	movwf	tblptrl,c
  4538  000710  0E06               	movlw	high (STR_1+10)
  4539  000712  6EF7               	movwf	tblptrh,c
  4540  000714                     	if	0	;tblptru may be non-zero
  4541  000714                     	endif
  4542  000714                     	if	0	;tblptru may be non-zero
  4543  000714                     	endif
  4544  000714  0008               	tblrd		*
  4545  000716  50F5               	movf	tablat,w,c
  4546  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4547  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4548  00071C  5018               	movf	?___wmul,w,c
  4549  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4550  000720  5019               	movf	?___wmul+1,w,c
  4551  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4552  000724  0E98               	movlw	low (STR_1+8)
  4553  000726  6EF6               	movwf	tblptrl,c
  4554  000728  0E06               	movlw	high (STR_1+8)
  4555  00072A  6EF7               	movwf	tblptrh,c
  4556  00072C                     	if	0	;tblptru may be non-zero
  4557  00072C                     	endif
  4558  00072C                     	if	0	;tblptru may be non-zero
  4559  00072C                     	endif
  4560  00072C  0008               	tblrd		*
  4561  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4562  000732  0ED0               	movlw	208
  4563  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4564  000736  6E18               	movwf	___wmul@multiplier,c
  4565  000738  6A19               	clrf	___wmul@multiplier+1,c
  4566  00073A  0EFF               	movlw	255
  4567  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4568  00073E  0E00               	movlw	0
  4569  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4570  000742  0E64               	movlw	100
  4571  000744  6E1A               	movwf	___wmul@multiplicand,c
  4572  000746  EC6D  F01F         	call	___wmul	;wreg free
  4573  00074A  5018               	movf	?___wmul,w,c
  4574  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4575  00074E  5019               	movf	?___wmul+1,w,c
  4576  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4577  000752  0E99               	movlw	low (STR_1+9)
  4578  000754  6EF6               	movwf	tblptrl,c
  4579  000756  0E06               	movlw	high (STR_1+9)
  4580  000758  6EF7               	movwf	tblptrh,c
  4581  00075A                     	if	0	;tblptru may be non-zero
  4582  00075A                     	endif
  4583  00075A                     	if	0	;tblptru may be non-zero
  4584  00075A                     	endif
  4585  00075A  0008               	tblrd		*
  4586  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4587  000760  0ED0               	movlw	208
  4588  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4589  000764  6E18               	movwf	___wmul@multiplier,c
  4590  000766  6A19               	clrf	___wmul@multiplier+1,c
  4591  000768  0EFF               	movlw	255
  4592  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4593  00076C  0E00               	movlw	0
  4594  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4595  000770  0E0A               	movlw	10
  4596  000772  6E1A               	movwf	___wmul@multiplicand,c
  4597  000774  EC6D  F01F         	call	___wmul	;wreg free
  4598  000778  5018               	movf	?___wmul,w,c
  4599  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4600  00077C  5019               	movf	?___wmul+1,w,c
  4601  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4602  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4603  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4604  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4605  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4606  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4607  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4608  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4609  000790  0100               	movlb	0	; () banked
  4610  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 23 2018"[ 7] - '0') * 1000 + ("Mar 23 20
      +                          18"[ 8] - '0') * 100 + ("Mar 23 2018"[ 9] - '0') * 10 + ("Mar 23 2018"[10] - '0') ) & 0x
      +                          FF;
  4614  000794  0E9A               	movlw	low (STR_1+10)
  4615  000796  6EF6               	movwf	tblptrl,c
  4616  000798  0E06               	movlw	high (STR_1+10)
  4617  00079A  6EF7               	movwf	tblptrh,c
  4618  00079C                     	if	0	;tblptru may be non-zero
  4619  00079C                     	endif
  4620  00079C                     	if	0	;tblptru may be non-zero
  4621  00079C                     	endif
  4622  00079C  0008               	tblrd		*
  4623  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4624  0007A2  0E99               	movlw	low (STR_1+9)
  4625  0007A4  6EF6               	movwf	tblptrl,c
  4626  0007A6  0E06               	movlw	high (STR_1+9)
  4627  0007A8  6EF7               	movwf	tblptrh,c
  4628  0007AA                     	if	0	;tblptru may be non-zero
  4629  0007AA                     	endif
  4630  0007AA                     	if	0	;tblptru may be non-zero
  4631  0007AA                     	endif
  4632  0007AA  0008               	tblrd		*
  4633  0007AC  50F5               	movf	tablat,w,c
  4634  0007AE  0FD0               	addlw	208
  4635  0007B0  0D0A               	mullw	10
  4636  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4637  0007B6  0E98               	movlw	low (STR_1+8)
  4638  0007B8  6EF6               	movwf	tblptrl,c
  4639  0007BA  0E06               	movlw	high (STR_1+8)
  4640  0007BC  6EF7               	movwf	tblptrh,c
  4641  0007BE                     	if	0	;tblptru may be non-zero
  4642  0007BE                     	endif
  4643  0007BE                     	if	0	;tblptru may be non-zero
  4644  0007BE                     	endif
  4645  0007BE  0008               	tblrd		*
  4646  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4647  0007C4  0ED0               	movlw	208
  4648  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4649  0007C8  6E18               	movwf	___wmul@multiplier,c
  4650  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4651  0007CC  0EFF               	movlw	255
  4652  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4653  0007D0  0E00               	movlw	0
  4654  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4655  0007D4  0E64               	movlw	100
  4656  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4657  0007D8  EC6D  F01F         	call	___wmul	;wreg free
  4658  0007DC  0E97               	movlw	low (STR_1+7)
  4659  0007DE  6EF6               	movwf	tblptrl,c
  4660  0007E0  0E06               	movlw	high (STR_1+7)
  4661  0007E2  6EF7               	movwf	tblptrh,c
  4662  0007E4                     	if	0	;tblptru may be non-zero
  4663  0007E4                     	endif
  4664  0007E4                     	if	0	;tblptru may be non-zero
  4665  0007E4                     	endif
  4666  0007E4  0008               	tblrd		*
  4667  0007E6  50F5               	movf	tablat,w,c
  4668  0007E8  0FD0               	addlw	208
  4669  0007EA  0DE8               	mullw	232
  4670  0007EC  50F3               	movf	prodl,w,c
  4671  0007EE  2418               	addwf	?___wmul,w,c
  4672  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4673  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4674  0007F4  0FD0               	addlw	208
  4675  0007F6  0100               	movlb	0	; () banked
  4676  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 23 2018"[0];
  4680  0007FA  0E90               	movlw	low STR_1
  4681  0007FC  6EF6               	movwf	tblptrl,c
  4682  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4683  0007FE  0E06               	movlw	high STR_1
  4684  000800  6EF7               	movwf	tblptrh,c
  4685  000802                     	endif
  4686  000802                     	if	0	;There are less than 3 active tblptr bytes
  4687  000802                     	endif
  4688  000802  0008               	tblrd		*
  4689  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 23 2018"[1];
  4693  000808  0E91               	movlw	low (STR_1+1)
  4694  00080A  6EF6               	movwf	tblptrl,c
  4695  00080C  0E06               	movlw	high (STR_1+1)
  4696  00080E  6EF7               	movwf	tblptrh,c
  4697  000810                     	if	0	;tblptru may be non-zero
  4698  000810                     	endif
  4699  000810                     	if	0	;tblptru may be non-zero
  4700  000810                     	endif
  4701  000810  0008               	tblrd		*
  4702  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 23 2018"[2];
  4706  000816  0E92               	movlw	low (STR_1+2)
  4707  000818  6EF6               	movwf	tblptrl,c
  4708  00081A  0E06               	movlw	high (STR_1+2)
  4709  00081C  6EF7               	movwf	tblptrh,c
  4710  00081E                     	if	0	;tblptru may be non-zero
  4711  00081E                     	endif
  4712  00081E                     	if	0	;tblptru may be non-zero
  4713  00081E                     	endif
  4714  00081E  0008               	tblrd		*
  4715  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 23 2018"[4] >= '0') ? ("Mar 23 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 23 2018"[5] - '0') ) & 0xFF00) >> 8;
  4719  000824  0E94               	movlw	low (STR_1+4)
  4720  000826  6EF6               	movwf	tblptrl,c
  4721  000828  0E06               	movlw	high (STR_1+4)
  4722  00082A  6EF7               	movwf	tblptrh,c
  4723  00082C                     	if	0	;tblptru may be non-zero
  4724  00082C                     	endif
  4725  00082C                     	if	0	;tblptru may be non-zero
  4726  00082C                     	endif
  4727  00082C  0E30               	movlw	48
  4728  00082E  0008               	tblrd		*
  4729  000830  60F5               	cpfslt	tablat,c
  4730  000832  D005               	goto	l1492
  4731                           
  4732                           ; BSR set to: 0
  4733  000834  0E00               	movlw	0
  4734  000836  6F77               	movwf	(_GetMcuFwVersion$2685+1)& (0+255),b
  4735  000838  0E00               	movlw	0
  4736  00083A  6F76               	movwf	_GetMcuFwVersion$2685& (0+255),b
  4737  00083C  D017               	goto	l1494
  4738  00083E                     l1492:
  4739                           
  4740                           ; BSR set to: 0
  4741                           
  4742                           ; BSR set to: 0
  4743  00083E  0E94               	movlw	low (STR_1+4)
  4744  000840  6EF6               	movwf	tblptrl,c
  4745  000842  0E06               	movlw	high (STR_1+4)
  4746  000844  6EF7               	movwf	tblptrh,c
  4747  000846                     	if	0	;tblptru may be non-zero
  4748  000846                     	endif
  4749  000846                     	if	0	;tblptru may be non-zero
  4750  000846                     	endif
  4751  000846  0008               	tblrd		*
  4752  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4753  00084C  0ED0               	movlw	208
  4754  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4755  000850  6E18               	movwf	___wmul@multiplier,c
  4756  000852  6A19               	clrf	___wmul@multiplier+1,c
  4757  000854  0EFF               	movlw	255
  4758  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4759  000858  0E00               	movlw	0
  4760  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4761  00085C  0E0A               	movlw	10
  4762  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4763  000860  EC6D  F01F         	call	___wmul	;wreg free
  4764  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2685
  4765  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2685+1
  4766  00086C                     l1494:
  4767  00086C  0ED0               	movlw	208
  4768  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4769  000870  0EFF               	movlw	255
  4770  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4771  000874  0E95               	movlw	low (STR_1+5)
  4772  000876  6EF6               	movwf	tblptrl,c
  4773  000878  0E06               	movlw	high (STR_1+5)
  4774  00087A  6EF7               	movwf	tblptrh,c
  4775  00087C                     	if	0	;tblptru may be non-zero
  4776  00087C                     	endif
  4777  00087C                     	if	0	;tblptru may be non-zero
  4778  00087C                     	endif
  4779  00087C  0008               	tblrd		*
  4780  00087E  50F5               	movf	tablat,w,c
  4781  000880  0100               	movlb	0	; () banked
  4782  000882  2576               	addwf	_GetMcuFwVersion$2685& (0+255),w,b
  4783  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4784  000886  0E00               	movlw	0
  4785  000888  2177               	addwfc	(_GetMcuFwVersion$2685+1)& (0+255),w,b
  4786  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4787  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4788  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4789  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4790  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4791  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4792  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4793  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4794  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 23 2018"[4] >= '0') ? ("Mar 23 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 23 2018"[5] - '0') ) & 0xFF;
  4798  00089E  0E94               	movlw	low (STR_1+4)
  4799  0008A0  6EF6               	movwf	tblptrl,c
  4800  0008A2  0E06               	movlw	high (STR_1+4)
  4801  0008A4  6EF7               	movwf	tblptrh,c
  4802  0008A6                     	if	0	;tblptru may be non-zero
  4803  0008A6                     	endif
  4804  0008A6                     	if	0	;tblptru may be non-zero
  4805  0008A6                     	endif
  4806  0008A6  0E30               	movlw	48
  4807  0008A8  0008               	tblrd		*
  4808  0008AA  60F5               	cpfslt	tablat,c
  4809  0008AC  D005               	goto	l1496
  4810                           
  4811                           ; BSR set to: 0
  4812  0008AE  0E00               	movlw	0
  4813  0008B0  6F79               	movwf	(_GetMcuFwVersion$2689+1)& (0+255),b
  4814  0008B2  0E00               	movlw	0
  4815  0008B4  6F78               	movwf	_GetMcuFwVersion$2689& (0+255),b
  4816  0008B6  D017               	goto	l1498
  4817  0008B8                     l1496:
  4818                           
  4819                           ; BSR set to: 0
  4820                           
  4821                           ; BSR set to: 0
  4822  0008B8  0E94               	movlw	low (STR_1+4)
  4823  0008BA  6EF6               	movwf	tblptrl,c
  4824  0008BC  0E06               	movlw	high (STR_1+4)
  4825  0008BE  6EF7               	movwf	tblptrh,c
  4826  0008C0                     	if	0	;tblptru may be non-zero
  4827  0008C0                     	endif
  4828  0008C0                     	if	0	;tblptru may be non-zero
  4829  0008C0                     	endif
  4830  0008C0  0008               	tblrd		*
  4831  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4832  0008C6  0ED0               	movlw	208
  4833  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  4834  0008CA  6E18               	movwf	___wmul@multiplier,c
  4835  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  4836  0008CE  0EFF               	movlw	255
  4837  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  4838  0008D2  0E00               	movlw	0
  4839  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  4840  0008D6  0E0A               	movlw	10
  4841  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  4842  0008DA  EC6D  F01F         	call	___wmul	;wreg free
  4843  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2689
  4844  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2689+1
  4845  0008E6                     l1498:
  4846  0008E6  0E95               	movlw	low (STR_1+5)
  4847  0008E8  6EF6               	movwf	tblptrl,c
  4848  0008EA  0E06               	movlw	high (STR_1+5)
  4849  0008EC  6EF7               	movwf	tblptrh,c
  4850  0008EE                     	if	0	;tblptru may be non-zero
  4851  0008EE                     	endif
  4852  0008EE                     	if	0	;tblptru may be non-zero
  4853  0008EE                     	endif
  4854  0008EE  0008               	tblrd		*
  4855  0008F0  50F5               	movf	tablat,w,c
  4856  0008F2  0100               	movlb	0	; () banked
  4857  0008F4  2578               	addwf	_GetMcuFwVersion$2689& (0+255),w,b
  4858  0008F6  0FD0               	addlw	208
  4859  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("22:30:18"[0] - '0') * 10 + "22:30:18"[1] - '
      +                          0') & 0xFF00) >> 8;
  4863  0008FA  0ED0               	movlw	208
  4864  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4865  0008FE  0EFF               	movlw	255
  4866  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4867  000902  0E9C               	movlw	low STR_18
  4868  000904  6EF6               	movwf	tblptrl,c
  4869  000906                     	if	1	;There is more than 1 active tblptr byte
  4870  000906  0E06               	movlw	high STR_18
  4871  000908  6EF7               	movwf	tblptrh,c
  4872  00090A                     	endif
  4873  00090A                     	if	0	;There are less than 3 active tblptr bytes
  4874  00090A                     	endif
  4875  00090A  0008               	tblrd		*
  4876  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4877  000910  0ED0               	movlw	208
  4878  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4879  000914  6E18               	movwf	___wmul@multiplier,c
  4880  000916  6A19               	clrf	___wmul@multiplier+1,c
  4881  000918  0EFF               	movlw	255
  4882  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  4883  00091C  0E00               	movlw	0
  4884  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  4885  000920  0E0A               	movlw	10
  4886  000922  6E1A               	movwf	___wmul@multiplicand,c
  4887  000924  EC6D  F01F         	call	___wmul	;wreg free
  4888  000928  0E9D               	movlw	low (STR_18+1)
  4889  00092A  6EF6               	movwf	tblptrl,c
  4890  00092C  0E06               	movlw	high (STR_18+1)
  4891  00092E  6EF7               	movwf	tblptrh,c
  4892  000930                     	if	0	;tblptru may be non-zero
  4893  000930                     	endif
  4894  000930                     	if	0	;tblptru may be non-zero
  4895  000930                     	endif
  4896  000930  0008               	tblrd		*
  4897  000932  50F5               	movf	tablat,w,c
  4898  000934  2618               	addwf	?___wmul,f,c
  4899  000936  0E00               	movlw	0
  4900  000938  2219               	addwfc	?___wmul+1,f,c
  4901  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  4902  00093C  2618               	addwf	?___wmul,f,c
  4903  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  4904  000940  2219               	addwfc	?___wmul+1,f,c
  4905  000942  C019  F018         	movff	?___wmul+1,?___wmul
  4906  000946  6A19               	clrf	?___wmul+1,c
  4907  000948  5018               	movf	?___wmul,w,c
  4908  00094A  0100               	movlb	0	; () banked
  4909  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("22:30:18"[0] - '0') * 10 + "22:30:18"[1] - '0
      +                          ') & 0xFF;
  4913  00094E  0E9D               	movlw	low (STR_18+1)
  4914  000950  6EF6               	movwf	tblptrl,c
  4915  000952  0E06               	movlw	high (STR_18+1)
  4916  000954  6EF7               	movwf	tblptrh,c
  4917  000956                     	if	0	;tblptru may be non-zero
  4918  000956                     	endif
  4919  000956                     	if	0	;tblptru may be non-zero
  4920  000956                     	endif
  4921  000956  0008               	tblrd		*
  4922  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4923  00095C  0E9C               	movlw	low STR_18
  4924  00095E  6EF6               	movwf	tblptrl,c
  4925  000960                     	if	1	;There is more than 1 active tblptr byte
  4926  000960  0E06               	movlw	high STR_18
  4927  000962  6EF7               	movwf	tblptrh,c
  4928  000964                     	endif
  4929  000964                     	if	0	;There are less than 3 active tblptr bytes
  4930  000964                     	endif
  4931  000964  0008               	tblrd		*
  4932  000966  50F5               	movf	tablat,w,c
  4933  000968  0FD0               	addlw	208
  4934  00096A  0D0A               	mullw	10
  4935  00096C  50F3               	movf	prodl,w,c
  4936  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  4937  000970  0FD0               	addlw	208
  4938  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("22:30:18"[3] - '0') * 10 + "22:30:18"[4] - '
      +                          0') & 0xFF00) >> 8;
  4942  000974  0ED0               	movlw	208
  4943  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4944  000978  0EFF               	movlw	255
  4945  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4946  00097C  0E9F               	movlw	low (STR_18+3)
  4947  00097E  6EF6               	movwf	tblptrl,c
  4948  000980  0E06               	movlw	high (STR_18+3)
  4949  000982  6EF7               	movwf	tblptrh,c
  4950  000984                     	if	0	;tblptru may be non-zero
  4951  000984                     	endif
  4952  000984                     	if	0	;tblptru may be non-zero
  4953  000984                     	endif
  4954  000984  0008               	tblrd		*
  4955  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4956  00098A  0ED0               	movlw	208
  4957  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4958  00098E  6E18               	movwf	___wmul@multiplier,c
  4959  000990  6A19               	clrf	___wmul@multiplier+1,c
  4960  000992  0EFF               	movlw	255
  4961  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  4962  000996  0E00               	movlw	0
  4963  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  4964  00099A  0E0A               	movlw	10
  4965  00099C  6E1A               	movwf	___wmul@multiplicand,c
  4966  00099E  EC6D  F01F         	call	___wmul	;wreg free
  4967  0009A2  0EA0               	movlw	low (STR_18+4)
  4968  0009A4  6EF6               	movwf	tblptrl,c
  4969  0009A6  0E06               	movlw	high (STR_18+4)
  4970  0009A8  6EF7               	movwf	tblptrh,c
  4971  0009AA                     	if	0	;tblptru may be non-zero
  4972  0009AA                     	endif
  4973  0009AA                     	if	0	;tblptru may be non-zero
  4974  0009AA                     	endif
  4975  0009AA  0008               	tblrd		*
  4976  0009AC  50F5               	movf	tablat,w,c
  4977  0009AE  2618               	addwf	?___wmul,f,c
  4978  0009B0  0E00               	movlw	0
  4979  0009B2  2219               	addwfc	?___wmul+1,f,c
  4980  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  4981  0009B6  2618               	addwf	?___wmul,f,c
  4982  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  4983  0009BA  2219               	addwfc	?___wmul+1,f,c
  4984  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  4985  0009C0  6A19               	clrf	?___wmul+1,c
  4986  0009C2  5018               	movf	?___wmul,w,c
  4987  0009C4  0100               	movlb	0	; () banked
  4988  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("22:30:18"[3] - '0') * 10 + "22:30:18"[4] - '
      +                          0') & 0xFF;
  4992  0009C8  0EA0               	movlw	low (STR_18+4)
  4993  0009CA  6EF6               	movwf	tblptrl,c
  4994  0009CC  0E06               	movlw	high (STR_18+4)
  4995  0009CE  6EF7               	movwf	tblptrh,c
  4996  0009D0                     	if	0	;tblptru may be non-zero
  4997  0009D0                     	endif
  4998  0009D0                     	if	0	;tblptru may be non-zero
  4999  0009D0                     	endif
  5000  0009D0  0008               	tblrd		*
  5001  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5002  0009D6  0E9F               	movlw	low (STR_18+3)
  5003  0009D8  6EF6               	movwf	tblptrl,c
  5004  0009DA  0E06               	movlw	high (STR_18+3)
  5005  0009DC  6EF7               	movwf	tblptrh,c
  5006  0009DE                     	if	0	;tblptru may be non-zero
  5007  0009DE                     	endif
  5008  0009DE                     	if	0	;tblptru may be non-zero
  5009  0009DE                     	endif
  5010  0009DE  0008               	tblrd		*
  5011  0009E0  50F5               	movf	tablat,w,c
  5012  0009E2  0FD0               	addlw	208
  5013  0009E4  0D0A               	mullw	10
  5014  0009E6  50F3               	movf	prodl,w,c
  5015  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  5016  0009EA  0FD0               	addlw	208
  5017  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("22:30:18"[6] - '0') * 10 + "22:30:18"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5021  0009EE  0ED0               	movlw	208
  5022  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5023  0009F2  0EFF               	movlw	255
  5024  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5025  0009F6  0EA2               	movlw	low (STR_18+6)
  5026  0009F8  6EF6               	movwf	tblptrl,c
  5027  0009FA  0E06               	movlw	high (STR_18+6)
  5028  0009FC  6EF7               	movwf	tblptrh,c
  5029  0009FE                     	if	0	;tblptru may be non-zero
  5030  0009FE                     	endif
  5031  0009FE                     	if	0	;tblptru may be non-zero
  5032  0009FE                     	endif
  5033  0009FE  0008               	tblrd		*
  5034  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5035  000A04  0ED0               	movlw	208
  5036  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5037  000A08  6E18               	movwf	___wmul@multiplier,c
  5038  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  5039  000A0C  0EFF               	movlw	255
  5040  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  5041  000A10  0E00               	movlw	0
  5042  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  5043  000A14  0E0A               	movlw	10
  5044  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5045  000A18  EC6D  F01F         	call	___wmul	;wreg free
  5046  000A1C  0EA3               	movlw	low (STR_18+7)
  5047  000A1E  6EF6               	movwf	tblptrl,c
  5048  000A20  0E06               	movlw	high (STR_18+7)
  5049  000A22  6EF7               	movwf	tblptrh,c
  5050  000A24                     	if	0	;tblptru may be non-zero
  5051  000A24                     	endif
  5052  000A24                     	if	0	;tblptru may be non-zero
  5053  000A24                     	endif
  5054  000A24  0008               	tblrd		*
  5055  000A26  50F5               	movf	tablat,w,c
  5056  000A28  2618               	addwf	?___wmul,f,c
  5057  000A2A  0E00               	movlw	0
  5058  000A2C  2219               	addwfc	?___wmul+1,f,c
  5059  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5060  000A30  2618               	addwf	?___wmul,f,c
  5061  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5062  000A34  2219               	addwfc	?___wmul+1,f,c
  5063  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5064  000A3A  6A19               	clrf	?___wmul+1,c
  5065  000A3C  5018               	movf	?___wmul,w,c
  5066  000A3E  0100               	movlb	0	; () banked
  5067  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("22:30:18"[6] - '0') * 10 + "22:30:18"[7] - '
      +                          0') & 0xFF;
  5071  000A42  0EA3               	movlw	low (STR_18+7)
  5072  000A44  6EF6               	movwf	tblptrl,c
  5073  000A46  0E06               	movlw	high (STR_18+7)
  5074  000A48  6EF7               	movwf	tblptrh,c
  5075  000A4A                     	if	0	;tblptru may be non-zero
  5076  000A4A                     	endif
  5077  000A4A                     	if	0	;tblptru may be non-zero
  5078  000A4A                     	endif
  5079  000A4A  0008               	tblrd		*
  5080  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5081  000A50  0EA2               	movlw	low (STR_18+6)
  5082  000A52  6EF6               	movwf	tblptrl,c
  5083  000A54  0E06               	movlw	high (STR_18+6)
  5084  000A56  6EF7               	movwf	tblptrh,c
  5085  000A58                     	if	0	;tblptru may be non-zero
  5086  000A58                     	endif
  5087  000A58                     	if	0	;tblptru may be non-zero
  5088  000A58                     	endif
  5089  000A58  0008               	tblrd		*
  5090  000A5A  50F5               	movf	tablat,w,c
  5091  000A5C  0FD0               	addlw	208
  5092  000A5E  0D0A               	mullw	10
  5093  000A60  50F3               	movf	prodl,w,c
  5094  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5095  000A64  0FD0               	addlw	208
  5096  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5100  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5101  000A6A  6E18               	movwf	crc8@dataArray,c
  5102  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5103  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5104  000A70  0E00               	movlw	0
  5105  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5106  000A74  0E11               	movlw	17
  5107  000A76  6E1A               	movwf	crc8@dataSize,c
  5108  000A78  EC8A  F01C         	call	_crc8	;wreg free
  5109  000A7C  0100               	movlb	0	; () banked
  5110  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5111                           
  5112                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5113  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5114  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5115  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5116  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5117  000A88  0E00               	movlw	0
  5118  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5119  000A8C  0E12               	movlw	18
  5120  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5121  000A90  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  5122  000A94  0012               	return		;funcret
  5123  000A96                     __end_of_GetMcuFwVersion:
  5124                           	opt stack 0
  5125                           tosu	equ	0xFFF
  5126                           tosh	equ	0xFFE
  5127                           tosl	equ	0xFFD
  5128                           pclath	equ	0xFFA
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           postinc0	equ	0xFEE
  5136                           plusw0	equ	0xFEB
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           plusw2	equ	0xFDB
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _FlashReadUart *****************
  5148 ;; Defined at:
  5149 ;;		line 63 in file "FlashApp.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  idx             2   87[BANK2 ] int 
  5154 ;;  TxMsg          69    0[BANK2 ] unsigned char [69]
  5155 ;;  val             8   71[BANK2 ] struct .
  5156 ;;  numOfSampleT    2   85[BANK2 ] int 
  5157 ;;  j               2   83[BANK2 ] int 
  5158 ;;  offset          2   69[BANK2 ] int 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      void 
  5161 ;; Registers used:
  5162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5168 ;;      Params:         0       2       0       0       0       0       0
  5169 ;;      Locals:         0       0       0      89       0       0       0
  5170 ;;      Temps:          0       6       0       0       0       0       0
  5171 ;;      Totals:         0       8       0      89       0       0       0
  5172 ;;Total ram usage:       97 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    8
  5175 ;; This function calls:
  5176 ;;		_FLASH_IsWriteDone
  5177 ;;		_FLASH_ReadByte
  5178 ;;		_GetIntFromUartData
  5179 ;;		_WriteUartMessage
  5180 ;;		_ZeroArray
  5181 ;;		_crc8
  5182 ;; This function is called by:
  5183 ;;		_GroupFlashMemory
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text15
  5188  0014F8                     __ptext15:
  5189                           	opt stack 0
  5190  0014F8                     _FlashReadUart:
  5191                           	opt stack 20
  5192                           
  5193                           ;FlashApp.c: 69: int j=0;
  5194                           
  5195                           ;incstack = 0
  5196  0014F8  0E00               	movlw	0
  5197  0014FA  0102               	movlb	2	; () banked
  5198  0014FC  6F54               	movwf	(FlashReadUart@j+1)& (0+255),b
  5199  0014FE  0E00               	movlw	0
  5200  001500  6F53               	movwf	FlashReadUart@j& (0+255),b
  5201                           
  5202                           ;FlashApp.c: 70: int offset = 0;
  5203  001502  0E00               	movlw	0
  5204  001504  6F46               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5205  001506  0E00               	movlw	0
  5206  001508  6F45               	movwf	FlashReadUart@offset& (0+255),b
  5207                           
  5208                           ;FlashApp.c: 71: int16_t numOfSampleToRead = 0x0;
  5209  00150A  0E00               	movlw	0
  5210  00150C  6F56               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5211  00150E  0E00               	movlw	0
  5212  001510  6F55               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5213                           
  5214                           ; BSR set to: 2
  5215                           ;FlashApp.c: 72: INT_VAL val = GetIntFromUartData(10, data);
  5216  001512  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5217  001516  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5218  00151A  0E0A               	movlw	10
  5219  00151C  EC2D  F00D         	call	_GetIntFromUartData
  5220  001520  EE22  F047         	lfsr	2,FlashReadUart@val
  5221  001524  0E07               	movlw	7
  5222  001526                     u8261:
  5223  001526  CFEB FFDB          	movff	plusw0,plusw2
  5224  00152A  06E8               	decf	wreg,f,c
  5225  00152C  E2FC               	bc	u8261
  5226                           
  5227                           ;FlashApp.c: 74: int numOfSampleToRead = val.num;
  5228  00152E  C247  F255         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5229  001532  C248  F256         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5230                           
  5231                           ;FlashApp.c: 77: char TxMsg[(64) + (0x4) + 1];
  5232                           ;FlashApp.c: 80: if (FLASH_IsWriteDone() == 0)
  5233  001536  ECA4  F020         	call	_FLASH_IsWriteDone	;wreg free
  5234  00153A  0900               	iorlw	0
  5235  00153C  B4D8               	btfsc	status,2,c
  5236  00153E  0012               	return	
  5237                           
  5238                           ;FlashApp.c: 83: }
  5239                           ;FlashApp.c: 86: if (readAddress < writeAddress)
  5240                           
  5241                           ;FlashApp.c: 81: {
  5242                           ;FlashApp.c: 82: return;
  5243  001540  503F               	movf	_writeAddress,w,c
  5244  001542  5C3B               	subwf	_readAddress,w,c
  5245  001544  5040               	movf	_writeAddress+1,w,c
  5246  001546  583C               	subwfb	_readAddress+1,w,c
  5247  001548  5041               	movf	_writeAddress+2,w,c
  5248  00154A  583D               	subwfb	_readAddress+2,w,c
  5249  00154C  5042               	movf	_writeAddress+3,w,c
  5250  00154E  583E               	subwfb	_readAddress+3,w,c
  5251  001550  B0D8               	btfsc	status,0,c
  5252  001552  D033               	goto	l324
  5253                           
  5254                           ;FlashApp.c: 87: {
  5255                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5256  001554  C255  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5257  001558  C256  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5258  00155C  0E00               	movlw	0
  5259  00155E  0100               	movlb	0	; () banked
  5260  001560  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5261  001562  0EFF               	movlw	255
  5262  001564  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5263  001566  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5264  001568  51E5               	movf	_numOfValidateSamples& (0+255),w,b
  5265  00156A  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5266  00156C  51E6               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5267  00156E  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5268  001570  51E7               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5269  001572  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5270  001574  51E8               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5271  001576  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5272  001578  B0D8               	btfsc	status,0,c
  5273  00157A  D00B               	goto	l326
  5274                           
  5275                           ; BSR set to: 0
  5276  00157C  C255  F24F         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$605
  5277  001580  C256  F250         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$605+1
  5278  001584  0102               	movlb	2	; () banked
  5279  001586  0E00               	movlw	0
  5280  001588  BF50               	btfsc	(_FlashReadUart$605+1)& (0+255),7,b
  5281  00158A  0EFF               	movlw	-1
  5282  00158C  6F51               	movwf	(_FlashReadUart$605+2)& (0+255),b
  5283  00158E  6F52               	movwf	(_FlashReadUart$605+3)& (0+255),b
  5284  001590  D008               	goto	l328
  5285  001592                     l326:
  5286                           
  5287                           ; BSR set to: 0
  5288  001592  C0E5  F24F         	movff	_numOfValidateSamples,_FlashReadUart$605
  5289  001596  C0E6  F250         	movff	_numOfValidateSamples+1,_FlashReadUart$605+1
  5290  00159A  C0E7  F251         	movff	_numOfValidateSamples+2,_FlashReadUart$605+2
  5291  00159E  C0E8  F252         	movff	_numOfValidateSamples+3,_FlashReadUart$605+3
  5292  0015A2                     l328:
  5293  0015A2  C24F  F255         	movff	_FlashReadUart$605,FlashReadUart@numOfSampleToRead
  5294  0015A6  C250  F256         	movff	_FlashReadUart$605+1,FlashReadUart@numOfSampleToRead+1
  5295                           
  5296                           ;FlashApp.c: 89: readAddress = writeAddress;
  5297  0015AA  C03F  F03B         	movff	_writeAddress,_readAddress
  5298  0015AE  C040  F03C         	movff	_writeAddress+1,_readAddress+1
  5299  0015B2  C041  F03D         	movff	_writeAddress+2,_readAddress+2
  5300  0015B6  C042  F03E         	movff	_writeAddress+3,_readAddress+3
  5301  0015BA                     l324:
  5302                           
  5303                           ;FlashApp.c: 90: }
  5304                           ;FlashApp.c: 93: for (j=0; j<numOfSampleToRead; j++)
  5305  0015BA  0E00               	movlw	0
  5306  0015BC  0102               	movlb	2	; () banked
  5307  0015BE  6F54               	movwf	(FlashReadUart@j+1)& (0+255),b
  5308  0015C0  0E00               	movlw	0
  5309  0015C2  6F53               	movwf	FlashReadUart@j& (0+255),b
  5310  0015C4  D07A               	goto	l329
  5311  0015C6                     
  5312                           ;FlashApp.c: 94: {
  5313                           ;FlashApp.c: 96: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5314                           
  5315                           ; BSR set to: 2
  5316  0015C6  0E00               	movlw	low FlashReadUart@TxMsg
  5317  0015C8  6E20               	movwf	ZeroArray@array,c
  5318  0015CA  0E02               	movlw	high FlashReadUart@TxMsg
  5319  0015CC  6E21               	movwf	ZeroArray@array+1,c
  5320  0015CE  0E00               	movlw	0
  5321  0015D0  6E23               	movwf	ZeroArray@size+1,c
  5322  0015D2  0E45               	movlw	69
  5323  0015D4  6E22               	movwf	ZeroArray@size,c
  5324  0015D6  EC06  F020         	call	_ZeroArray	;wreg free
  5325                           
  5326                           ;FlashApp.c: 97: TxMsg[(0)] = (0x24);
  5327  0015DA  0E24               	movlw	36
  5328  0015DC  0102               	movlb	2	; () banked
  5329  0015DE  6F00               	movwf	FlashReadUart@TxMsg& (0+255),b
  5330                           
  5331                           ; BSR set to: 2
  5332                           ;FlashApp.c: 98: TxMsg[(1)] = FLASH_MSG;
  5333  0015E0  0E05               	movlw	5
  5334  0015E2  6F01               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5335                           
  5336                           ; BSR set to: 2
  5337                           ;FlashApp.c: 99: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5338  0015E4  0E54               	movlw	84
  5339  0015E6  6F02               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5340                           
  5341                           ; BSR set to: 2
  5342                           ;FlashApp.c: 100: TxMsg[(3)] = (64);
  5343  0015E8  0E40               	movlw	64
  5344  0015EA  6F03               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5345                           
  5346                           ; BSR set to: 2
  5347                           ;FlashApp.c: 103: for(int idx = 0; idx < (64); idx++)
  5348  0015EC  0E00               	movlw	0
  5349  0015EE  6F58               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5350  0015F0  0E00               	movlw	0
  5351  0015F2  6F57               	movwf	FlashReadUart@idx& (0+255),b
  5352  0015F4                     l8194:
  5353                           
  5354                           ; BSR set to: 2
  5355  0015F4  BF58               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5356  0015F6  D006               	goto	l331
  5357  0015F8  5158               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5358  0015FA  E12F               	bnz	l8204
  5359  0015FC  0E40               	movlw	64
  5360  0015FE  5D57               	subwf	FlashReadUart@idx& (0+255),w,b
  5361  001600  B0D8               	btfsc	status,0,c
  5362  001602  D02B               	goto	u8310
  5363  001604                     l331:
  5364                           
  5365                           ; BSR set to: 2
  5366                           ;FlashApp.c: 104: {
  5367                           ;FlashApp.c: 105: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5368                           
  5369                           ; BSR set to: 2
  5370  001604  0E04               	movlw	4
  5371  001606  2557               	addwf	FlashReadUart@idx& (0+255),w,b
  5372  001608  0100               	movlb	0	; () banked
  5373  00160A  6F89               	movwf	??_FlashReadUart& (0+255),b
  5374  00160C  0E00               	movlw	0
  5375  00160E  0102               	movlb	2	; () banked
  5376  001610  2158               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5377  001612  0100               	movlb	0	; () banked
  5378  001614  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5379  001616  0E00               	movlw	low FlashReadUart@TxMsg
  5380  001618  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5381  00161A  6ED9               	movwf	fsr2l,c
  5382  00161C  0E02               	movlw	high FlashReadUart@TxMsg
  5383  00161E  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5384  001620  6EDA               	movwf	fsr2h,c
  5385  001622  C257  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5386  001626  C258  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5387  00162A  0E00               	movlw	0
  5388  00162C  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5389  00162E  0EFF               	movlw	255
  5390  001630  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5391  001632  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5392  001634  503B               	movf	_readAddress,w,c
  5393  001636  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5394  001638  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5395  00163A  503C               	movf	_readAddress+1,w,c
  5396  00163C  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5397  00163E  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5398  001640  503D               	movf	_readAddress+2,w,c
  5399  001642  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5400  001644  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5401  001646  503E               	movf	_readAddress+3,w,c
  5402  001648  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5403  00164A  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5404  00164C  EC7E  F020         	call	_FLASH_ReadByte	;wreg free
  5405  001650  6EDF               	movwf	indf2,c
  5406  001652  0102               	movlb	2	; () banked
  5407  001654  4B57               	infsnz	FlashReadUart@idx& (0+255),f,b
  5408  001656  2B58               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5409  001658  D7CD               	goto	l8194
  5410  00165A                     u8310:
  5411  00165A                     l8204:
  5412                           
  5413                           ; BSR set to: 2
  5414                           ;FlashApp.c: 106: }
  5415                           ;FlashApp.c: 108: readAddress -= (64);
  5416  00165A  0E40               	movlw	64
  5417  00165C  5E3B               	subwf	_readAddress,f,c
  5418  00165E  0E00               	movlw	0
  5419  001660  5A3C               	subwfb	_readAddress+1,f,c
  5420  001662  5A3D               	subwfb	_readAddress+2,f,c
  5421  001664  5A3E               	subwfb	_readAddress+3,f,c
  5422                           
  5423                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  5424  001666  503E               	movf	_readAddress+3,w,c
  5425  001668  103D               	iorwf	_readAddress+2,w,c
  5426  00166A  E106               	bnz	u8320
  5427  00166C  0EF0               	movlw	240
  5428  00166E  5C3B               	subwf	_readAddress,w,c
  5429  001670  0E7F               	movlw	127
  5430  001672  583C               	subwfb	_readAddress+1,w,c
  5431  001674  A0D8               	btfss	status,0,c
  5432  001676  D008               	goto	l333
  5433  001678                     u8320:
  5434                           
  5435                           ; BSR set to: 2
  5436                           ;FlashApp.c: 110: {
  5437                           ;FlashApp.c: 111: readAddress = 0x4580;
  5438  001678  0E80               	movlw	128
  5439  00167A  6E3B               	movwf	_readAddress,c
  5440  00167C  0E45               	movlw	69
  5441  00167E  6E3C               	movwf	_readAddress+1,c
  5442  001680  0E00               	movlw	0
  5443  001682  6E3D               	movwf	_readAddress+2,c
  5444  001684  0E00               	movlw	0
  5445  001686  6E3E               	movwf	_readAddress+3,c
  5446  001688                     l333:
  5447                           
  5448                           ; BSR set to: 2
  5449                           ;FlashApp.c: 112: }
  5450                           ;FlashApp.c: 113: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5451                           
  5452                           ; BSR set to: 2
  5453  001688  0E00               	movlw	low FlashReadUart@TxMsg
  5454  00168A  6E18               	movwf	crc8@dataArray,c
  5455  00168C  0E02               	movlw	high FlashReadUart@TxMsg
  5456  00168E  6E19               	movwf	crc8@dataArray+1,c
  5457  001690  0E00               	movlw	0
  5458  001692  6E1B               	movwf	crc8@dataSize+1,c
  5459  001694  0E44               	movlw	68
  5460  001696  6E1A               	movwf	crc8@dataSize,c
  5461  001698  EC8A  F01C         	call	_crc8	;wreg free
  5462  00169C  0102               	movlb	2	; () banked
  5463  00169E  6F44               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5464                           
  5465                           ; BSR set to: 2
  5466                           ;FlashApp.c: 115: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5467  0016A0  0E00               	movlw	low FlashReadUart@TxMsg
  5468  0016A2  6E19               	movwf	WriteUartMessage@dataBuf,c
  5469  0016A4  0E02               	movlw	high FlashReadUart@TxMsg
  5470  0016A6  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5471  0016A8  0E00               	movlw	0
  5472  0016AA  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5473  0016AC  0E45               	movlw	69
  5474  0016AE  6E1B               	movwf	WriteUartMessage@dataSize,c
  5475  0016B0  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  5476  0016B4  0102               	movlb	2	; () banked
  5477  0016B6  4B53               	infsnz	FlashReadUart@j& (0+255),f,b
  5478  0016B8  2B54               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5479  0016BA                     l329:
  5480                           
  5481                           ; BSR set to: 2
  5482                           
  5483                           ; BSR set to: 2
  5484  0016BA  5155               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5485  0016BC  5D53               	subwf	FlashReadUart@j& (0+255),w,b
  5486  0016BE  5154               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5487  0016C0  0A80               	xorlw	128
  5488  0016C2  0100               	movlb	0	; () banked
  5489  0016C4  6F89               	movwf	??_FlashReadUart& (0+255),b
  5490  0016C6  0102               	movlb	2	; () banked
  5491  0016C8  5156               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5492  0016CA  0A80               	xorlw	128
  5493  0016CC  0100               	movlb	0	; () banked
  5494  0016CE  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5495  0016D0  B0D8               	btfsc	status,0,c
  5496  0016D2  0012               	return	
  5497  0016D4  D778               	goto	l330
  5498  0016D6                     __end_of_FlashReadUart:
  5499                           	opt stack 0
  5500                           tosu	equ	0xFFF
  5501                           tosh	equ	0xFFE
  5502                           tosl	equ	0xFFD
  5503                           pclath	equ	0xFFA
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           postinc0	equ	0xFEE
  5511                           plusw0	equ	0xFEB
  5512                           wreg	equ	0xFE8
  5513                           postdec1	equ	0xFE5
  5514                           fsr1l	equ	0xFE1
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           plusw2	equ	0xFDB
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function _FLASH_ReadByte *****************
  5523 ;; Defined at:
  5524 ;;		line 58 in file "mcc_generated_files/memory.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;		None
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      unsigned char 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5538 ;;      Params:         4       0       0       0       0       0       0
  5539 ;;      Locals:         0       0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0
  5541 ;;      Totals:         4       0       0       0       0       0       0
  5542 ;;Total ram usage:        4 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    4
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_FlashReadUart
  5549 ;;		_FLASH_ReadWord
  5550 ;;		_FLASH_WriteByte
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text16
  5555  0040FC                     __ptext16:
  5556                           	opt stack 0
  5557  0040FC                     _FLASH_ReadByte:
  5558                           	opt stack 23
  5559                           
  5560                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5561                           
  5562                           ;incstack = 0
  5563  0040FC  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5564                           
  5565                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5566  004100  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5567                           
  5568                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5569  004104  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5570  004108  0008               	tblrd		*	;# 
  5571                           
  5572                           ;memory.c: 66: return (TABLAT);
  5573  00410A  50F5               	movf	tablat,w,c	;volatile
  5574  00410C  0012               	return	
  5575  00410E                     __end_of_FLASH_ReadByte:
  5576                           	opt stack 0
  5577                           tosu	equ	0xFFF
  5578                           tosh	equ	0xFFE
  5579                           tosl	equ	0xFFD
  5580                           pclath	equ	0xFFA
  5581                           tblptru	equ	0xFF8
  5582                           tblptrh	equ	0xFF7
  5583                           tblptrl	equ	0xFF6
  5584                           tablat	equ	0xFF5
  5585                           prodh	equ	0xFF4
  5586                           prodl	equ	0xFF3
  5587                           postinc0	equ	0xFEE
  5588                           plusw0	equ	0xFEB
  5589                           wreg	equ	0xFE8
  5590                           postdec1	equ	0xFE5
  5591                           fsr1l	equ	0xFE1
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           plusw2	equ	0xFDB
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           
  5599 ;; *************** function _FlashReadCondition *****************
  5600 ;; Defined at:
  5601 ;;		line 134 in file "FlashApp.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5615 ;;      Params:         0       0       0       0       0       0       0
  5616 ;;      Locals:         9       0       0       0       0       0       0
  5617 ;;      Temps:          4       0       0       0       0       0       0
  5618 ;;      Totals:        13       0       0       0       0       0       0
  5619 ;;Total ram usage:       13 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    6
  5622 ;; This function calls:
  5623 ;;		_WriteUartMessage
  5624 ;;		_ZeroArray
  5625 ;;		_crc8
  5626 ;;		_make8
  5627 ;; This function is called by:
  5628 ;;		_GroupFlashMemory
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text17
  5633  001F9A                     __ptext17:
  5634                           	opt stack 0
  5635  001F9A                     _FlashReadCondition:
  5636                           	opt stack 22
  5637                           
  5638                           ;FlashApp.c: 137: char TxMsg[4 + (0x4) + 1];
  5639                           ;FlashApp.c: 138: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5640                           
  5641                           ;incstack = 0
  5642  001F9A  0E28               	movlw	low FlashReadCondition@TxMsg
  5643  001F9C  6E20               	movwf	ZeroArray@array,c
  5644  001F9E  0E00               	movlw	high FlashReadCondition@TxMsg
  5645  001FA0  6E21               	movwf	ZeroArray@array+1,c
  5646  001FA2  0E00               	movlw	0
  5647  001FA4  6E23               	movwf	ZeroArray@size+1,c
  5648  001FA6  0E09               	movlw	9
  5649  001FA8  6E22               	movwf	ZeroArray@size,c
  5650  001FAA  EC06  F020         	call	_ZeroArray	;wreg free
  5651                           
  5652                           ;FlashApp.c: 141: TxMsg[(0)] = (0x24);
  5653  001FAE  0E24               	movlw	36
  5654  001FB0  6E28               	movwf	FlashReadCondition@TxMsg,c
  5655                           
  5656                           ;FlashApp.c: 142: TxMsg[(1)] = FLASH_MSG;
  5657  001FB2  0E05               	movlw	5
  5658  001FB4  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5659                           
  5660                           ;FlashApp.c: 143: TxMsg[(2)] = FLASH_READ_CONDITION;
  5661  001FB6  0E52               	movlw	82
  5662  001FB8  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5663                           
  5664                           ;FlashApp.c: 144: TxMsg[(3)] = 4;
  5665  001FBA  0E04               	movlw	4
  5666  001FBC  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5667                           
  5668                           ;FlashApp.c: 149: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5669  001FBE  0E70               	movlw	112
  5670  001FC0  6E18               	movwf	make8@data,c
  5671  001FC2  0E3A               	movlw	58
  5672  001FC4  6E19               	movwf	make8@data+1,c
  5673  001FC6  0E00               	movlw	0
  5674  001FC8  6E1A               	movwf	make8@data+2,c
  5675  001FCA  0E00               	movlw	0
  5676  001FCC  6E1B               	movwf	make8@data+3,c
  5677  001FCE  0E01               	movlw	1
  5678  001FD0  6E1C               	movwf	make8@dataLocation,c
  5679  001FD2  EC03  F01B         	call	_make8	;wreg free
  5680  001FD6  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5681                           
  5682                           ;FlashApp.c: 150: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5683  001FD8  0E70               	movlw	112
  5684  001FDA  6E18               	movwf	make8@data,c
  5685  001FDC  0E3A               	movlw	58
  5686  001FDE  6E19               	movwf	make8@data+1,c
  5687  001FE0  0E00               	movlw	0
  5688  001FE2  6E1A               	movwf	make8@data+2,c
  5689  001FE4  0E00               	movlw	0
  5690  001FE6  6E1B               	movwf	make8@data+3,c
  5691  001FE8  0E00               	movlw	0
  5692  001FEA  6E1C               	movwf	make8@dataLocation,c
  5693  001FEC  EC03  F01B         	call	_make8	;wreg free
  5694  001FF0  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5695                           
  5696                           ;FlashApp.c: 153: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5697  001FF2  C03F  F024         	movff	_writeAddress,??_FlashReadCondition
  5698  001FF6  C040  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5699  001FFA  C041  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5700  001FFE  C042  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5701  002002  1E24               	comf	??_FlashReadCondition,f,c
  5702  002004  1E25               	comf	??_FlashReadCondition+1,f,c
  5703  002006  1E26               	comf	??_FlashReadCondition+2,f,c
  5704  002008  1E27               	comf	??_FlashReadCondition+3,f,c
  5705  00200A  2A24               	incf	??_FlashReadCondition,f,c
  5706  00200C  0E00               	movlw	0
  5707  00200E  2225               	addwfc	??_FlashReadCondition+1,f,c
  5708  002010  2226               	addwfc	??_FlashReadCondition+2,f,c
  5709  002012  2227               	addwfc	??_FlashReadCondition+3,f,c
  5710  002014  0EF0               	movlw	240
  5711  002016  2424               	addwf	??_FlashReadCondition,w,c
  5712  002018  6E18               	movwf	make8@data,c
  5713  00201A  0E7F               	movlw	127
  5714  00201C  2025               	addwfc	??_FlashReadCondition+1,w,c
  5715  00201E  6E19               	movwf	make8@data+1,c
  5716  002020  0E00               	movlw	0
  5717  002022  2026               	addwfc	??_FlashReadCondition+2,w,c
  5718  002024  6E1A               	movwf	make8@data+2,c
  5719  002026  0E00               	movlw	0
  5720  002028  2027               	addwfc	??_FlashReadCondition+3,w,c
  5721  00202A  6E1B               	movwf	make8@data+3,c
  5722  00202C  0E01               	movlw	1
  5723  00202E  6E1C               	movwf	make8@dataLocation,c
  5724  002030  EC03  F01B         	call	_make8	;wreg free
  5725  002034  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5726                           
  5727                           ;FlashApp.c: 154: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5728  002036  C03F  F024         	movff	_writeAddress,??_FlashReadCondition
  5729  00203A  C040  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5730  00203E  C041  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5731  002042  C042  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5732  002046  1E24               	comf	??_FlashReadCondition,f,c
  5733  002048  1E25               	comf	??_FlashReadCondition+1,f,c
  5734  00204A  1E26               	comf	??_FlashReadCondition+2,f,c
  5735  00204C  1E27               	comf	??_FlashReadCondition+3,f,c
  5736  00204E  2A24               	incf	??_FlashReadCondition,f,c
  5737  002050  0E00               	movlw	0
  5738  002052  2225               	addwfc	??_FlashReadCondition+1,f,c
  5739  002054  2226               	addwfc	??_FlashReadCondition+2,f,c
  5740  002056  2227               	addwfc	??_FlashReadCondition+3,f,c
  5741  002058  0EF0               	movlw	240
  5742  00205A  2424               	addwf	??_FlashReadCondition,w,c
  5743  00205C  6E18               	movwf	make8@data,c
  5744  00205E  0E7F               	movlw	127
  5745  002060  2025               	addwfc	??_FlashReadCondition+1,w,c
  5746  002062  6E19               	movwf	make8@data+1,c
  5747  002064  0E00               	movlw	0
  5748  002066  2026               	addwfc	??_FlashReadCondition+2,w,c
  5749  002068  6E1A               	movwf	make8@data+2,c
  5750  00206A  0E00               	movlw	0
  5751  00206C  2027               	addwfc	??_FlashReadCondition+3,w,c
  5752  00206E  6E1B               	movwf	make8@data+3,c
  5753  002070  0E00               	movlw	0
  5754  002072  6E1C               	movwf	make8@dataLocation,c
  5755  002074  EC03  F01B         	call	_make8	;wreg free
  5756  002078  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5757                           
  5758                           ;FlashApp.c: 156: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5759  00207A  0E28               	movlw	low FlashReadCondition@TxMsg
  5760  00207C  6E18               	movwf	crc8@dataArray,c
  5761  00207E  0E00               	movlw	high FlashReadCondition@TxMsg
  5762  002080  6E19               	movwf	crc8@dataArray+1,c
  5763  002082  0E00               	movlw	0
  5764  002084  6E1B               	movwf	crc8@dataSize+1,c
  5765  002086  0E08               	movlw	8
  5766  002088  6E1A               	movwf	crc8@dataSize,c
  5767  00208A  EC8A  F01C         	call	_crc8	;wreg free
  5768  00208E  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5769                           
  5770                           ;FlashApp.c: 158: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5771  002090  0E28               	movlw	low FlashReadCondition@TxMsg
  5772  002092  6E19               	movwf	WriteUartMessage@dataBuf,c
  5773  002094  0E00               	movlw	high FlashReadCondition@TxMsg
  5774  002096  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5775  002098  0E00               	movlw	0
  5776  00209A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5777  00209C  0E09               	movlw	9
  5778  00209E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5779  0020A0  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  5780  0020A4  0012               	return		;funcret
  5781  0020A6                     __end_of_FlashReadCondition:
  5782                           	opt stack 0
  5783                           tosu	equ	0xFFF
  5784                           tosh	equ	0xFFE
  5785                           tosl	equ	0xFFD
  5786                           pclath	equ	0xFFA
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           postinc0	equ	0xFEE
  5794                           plusw0	equ	0xFEB
  5795                           wreg	equ	0xFE8
  5796                           postdec1	equ	0xFE5
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           plusw2	equ	0xFDB
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805 ;; *************** function _FlashEreaseMem *****************
  5806 ;; Defined at:
  5807 ;;		line 124 in file "FlashApp.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5821 ;;      Params:         0       0       0       0       0       0       0
  5822 ;;      Locals:         0       0       0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0
  5824 ;;      Totals:         0       0       0       0       0       0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    7
  5828 ;; This function calls:
  5829 ;;		_SendAckMessage
  5830 ;;		_ZeroArray
  5831 ;; This function is called by:
  5832 ;;		_GroupFlashMemory
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text18
  5837  003870                     __ptext18:
  5838                           	opt stack 0
  5839  003870                     _FlashEreaseMem:
  5840                           	opt stack 21
  5841                           
  5842                           ;FlashApp.c: 126: writeAddress = 0x4580;
  5843                           
  5844                           ;incstack = 0
  5845  003870  0E80               	movlw	128
  5846  003872  6E3F               	movwf	_writeAddress,c
  5847  003874  0E45               	movlw	69
  5848  003876  6E40               	movwf	_writeAddress+1,c
  5849  003878  0E00               	movlw	0
  5850  00387A  6E41               	movwf	_writeAddress+2,c
  5851  00387C  0E00               	movlw	0
  5852  00387E  6E42               	movwf	_writeAddress+3,c
  5853                           
  5854                           ;FlashApp.c: 127: readAddress = 0x4580;
  5855  003880  0E80               	movlw	128
  5856  003882  6E3B               	movwf	_readAddress,c
  5857  003884  0E45               	movlw	69
  5858  003886  6E3C               	movwf	_readAddress+1,c
  5859  003888  0E00               	movlw	0
  5860  00388A  6E3D               	movwf	_readAddress+2,c
  5861  00388C  0E00               	movlw	0
  5862  00388E  6E3E               	movwf	_readAddress+3,c
  5863                           
  5864                           ;FlashApp.c: 128: numOfValidateSamples = 0;
  5865  003890  0E00               	movlw	0
  5866  003892  0100               	movlb	0	; () banked
  5867  003894  6FE5               	movwf	_numOfValidateSamples& (0+255),b
  5868  003896  0E00               	movlw	0
  5869  003898  6FE6               	movwf	(_numOfValidateSamples+1)& (0+255),b
  5870  00389A  0E00               	movlw	0
  5871  00389C  6FE7               	movwf	(_numOfValidateSamples+2)& (0+255),b
  5872  00389E  0E00               	movlw	0
  5873  0038A0  6FE8               	movwf	(_numOfValidateSamples+3)& (0+255),b
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;FlashApp.c: 129: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5877  0038A2  0E2C               	movlw	low _sampleArray
  5878  0038A4  6E20               	movwf	ZeroArray@array,c
  5879  0038A6  0E01               	movlw	high _sampleArray
  5880  0038A8  6E21               	movwf	ZeroArray@array+1,c
  5881  0038AA  0E00               	movlw	0
  5882  0038AC  6E23               	movwf	ZeroArray@size+1,c
  5883  0038AE  0E20               	movlw	32
  5884  0038B0  6E22               	movwf	ZeroArray@size,c
  5885  0038B2  EC06  F020         	call	_ZeroArray	;wreg free
  5886                           
  5887                           ;FlashApp.c: 130: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5888  0038B6  0E51               	movlw	81
  5889  0038B8  6E24               	movwf	SendAckMessage@inRequest,c
  5890  0038BA  0E05               	movlw	5
  5891  0038BC  EC61  F01C         	call	_SendAckMessage
  5892  0038C0  0012               	return		;funcret
  5893  0038C2                     __end_of_FlashEreaseMem:
  5894                           	opt stack 0
  5895                           tosu	equ	0xFFF
  5896                           tosh	equ	0xFFE
  5897                           tosl	equ	0xFFD
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           postinc0	equ	0xFEE
  5906                           plusw0	equ	0xFEB
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           plusw2	equ	0xFDB
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _DacSetValue *****************
  5918 ;; Defined at:
  5919 ;;		line 30 in file "DacApp.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  data            2   42[BANK0 ] PTR unsigned char 
  5922 ;;		 -> rxMsgData(20), 
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  retVal          8   49[BANK0 ] struct .
  5925 ;;  dacIndex        1   48[BANK0 ] char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  1    wreg      void 
  5928 ;; Registers used:
  5929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5935 ;;      Params:         0       2       0       0       0       0       0
  5936 ;;      Locals:         0       9       0       0       0       0       0
  5937 ;;      Temps:          0       4       0       0       0       0       0
  5938 ;;      Totals:         0      15       0       0       0       0       0
  5939 ;;Total ram usage:       15 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    8
  5942 ;; This function calls:
  5943 ;;		_GetIntFromUartData
  5944 ;;		_SWSPI_send_word
  5945 ;;		_SendAckMessage
  5946 ;;		_StoreIntInEeprom
  5947 ;; This function is called by:
  5948 ;;		_GroupDAC
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text19
  5953  002ECE                     __ptext19:
  5954                           	opt stack 0
  5955  002ECE                     _DacSetValue:
  5956                           	opt stack 20
  5957                           
  5958                           ;DacApp.c: 32: INT_VAL retVal;
  5959                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  5960                           
  5961                           ;incstack = 0
  5962  002ECE  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5963  002ED2  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5964  002ED6  0E10               	movlw	16
  5965  002ED8  EC2D  F00D         	call	_GetIntFromUartData
  5966  002EDC  EE20  F091         	lfsr	2,DacSetValue@retVal
  5967  002EE0  0E07               	movlw	7
  5968  002EE2                     u8341:
  5969  002EE2  CFEB FFDB          	movff	plusw0,plusw2
  5970  002EE6  06E8               	decf	wreg,f,c
  5971  002EE8  E2FC               	bc	u8341
  5972                           
  5973                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  5974  002EEA  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  5975  002EEE  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  5976  002EF2  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  5977  002EF6  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  5978  002EFA  0E01               	movlw	1
  5979  002EFC  6E2D               	movwf	SWSPI_send_word@dataSize,c
  5980  002EFE  0E02               	movlw	2
  5981  002F00  EC12  F017         	call	_SWSPI_send_word
  5982                           
  5983                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  5984  002F04  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  5985  002F08  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  5986  002F0C  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  5987  002F10  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  5988  002F14  0E0F               	movlw	15
  5989  002F16  D006               	goto	u8350
  5990  002F18                     u8355:
  5991  002F18  0100               	movlb	0	; () banked
  5992  002F1A  90D8               	bcf	status,0,c
  5993  002F1C  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  5994  002F1E  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  5995  002F20  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  5996  002F22  338C               	rrcf	??_DacSetValue& (0+255),f,b
  5997  002F24                     u8350:
  5998  002F24  2EE8               	decfsz	wreg,f,c
  5999  002F26  D7F8               	goto	u8355
  6000  002F28  518C               	movf	??_DacSetValue& (0+255),w,b
  6001  002F2A  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6005  002F2C  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6006  002F30  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6007  002F34  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6008  002F38  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6009  002F3C  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6010  002F3E  0D01               	mullw	1
  6011  002F40  0E53               	movlw	low _DAC_ADDRES
  6012  002F42  24F3               	addwf	prodl,w,c
  6013  002F44  6EF6               	movwf	tblptrl,c
  6014  002F46  0E06               	movlw	high _DAC_ADDRES
  6015  002F48  20F4               	addwfc	prodh,w,c
  6016  002F4A  6EF7               	movwf	tblptrh,c
  6017  002F4C                     	if	0	;There are less than 3 active tblptr bytes
  6018  002F4C                     	endif
  6019  002F4C  0008               	tblrd		*
  6020  002F4E  50F5               	movf	tablat,w,c
  6021  002F50  0940               	iorlw	64
  6022  002F52  6E25               	movwf	StoreIntInEeprom@address,c
  6023  002F54  0E00               	movlw	0
  6024  002F56  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6025  002F58  0E02               	movlw	2
  6026  002F5A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6027  002F5C  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
  6028                           
  6029                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6030  002F60  0E61               	movlw	97
  6031  002F62  6E24               	movwf	SendAckMessage@inRequest,c
  6032  002F64  0E06               	movlw	6
  6033  002F66  EC61  F01C         	call	_SendAckMessage
  6034  002F6A  0012               	return		;funcret
  6035  002F6C                     __end_of_DacSetValue:
  6036                           	opt stack 0
  6037                           tosu	equ	0xFFF
  6038                           tosh	equ	0xFFE
  6039                           tosl	equ	0xFFD
  6040                           pclath	equ	0xFFA
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           postinc0	equ	0xFEE
  6048                           plusw0	equ	0xFEB
  6049                           wreg	equ	0xFE8
  6050                           postdec1	equ	0xFE5
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           plusw2	equ	0xFDB
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _GetIntFromUartData *****************
  6060 ;; Defined at:
  6061 ;;		line 52 in file "SystemCommon.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  num             1    wreg     char 
  6064 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6065 ;;		 -> rxMsgData(20), 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  num             1   26[BANK0 ] char 
  6068 ;;  idxCon          2   36[BANK0 ] int 
  6069 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6070 ;;  retVal          8   28[BANK0 ] struct .
  6071 ;;  idxData         1   38[BANK0 ] unsigned char 
  6072 ;;  recVal          1   27[BANK0 ] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  8    6[BANK0 ] struct .
  6075 ;; Registers used:
  6076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6082 ;;      Params:         0       8       0       0       0       0       0
  6083 ;;      Locals:         0      23       0       0       0       0       0
  6084 ;;      Temps:          0       2       0       0       0       0       0
  6085 ;;      Totals:         0      33       0       0       0       0       0
  6086 ;;Total ram usage:       33 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    7
  6089 ;; This function calls:
  6090 ;;		_ZeroArray
  6091 ;;		_strtol
  6092 ;; This function is called by:
  6093 ;;		_FlashReadUart
  6094 ;;		_DacSetValue
  6095 ;;		_UpdateSynthFreq
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text20
  6100  001A5A                     __ptext20:
  6101                           	opt stack 0
  6102  001A5A                     _GetIntFromUartData:
  6103                           	opt stack 20
  6104                           
  6105                           ;incstack = 0
  6106                           ;GetIntFromUartData@num stored from wreg
  6107  001A5A  0100               	movlb	0	; () banked
  6108  001A5C  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6109                           
  6110                           ;SystemCommon.c: 54: INT_VAL retVal;
  6111                           ;SystemCommon.c: 55: retVal.num = 0;
  6112  001A5E  0E00               	movlw	0
  6113  001A60  0100               	movlb	0	; () banked
  6114  001A62  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6115  001A64  0E00               	movlw	0
  6116  001A66  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6117  001A68  0E00               	movlw	0
  6118  001A6A  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6119  001A6C  0E00               	movlw	0
  6120  001A6E  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6121                           
  6122                           ;SystemCommon.c: 56: retVal.con = 0;
  6123  001A70  0E00               	movlw	0
  6124  001A72  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6125  001A74  0E00               	movlw	0
  6126  001A76  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6127  001A78  0E00               	movlw	0
  6128  001A7A  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6129  001A7C  0E00               	movlw	0
  6130  001A7E  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6131                           
  6132                           ;SystemCommon.c: 57: uint8_t idxData = 0;
  6133  001A80  0E00               	movlw	0
  6134  001A82  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6135                           
  6136                           ;SystemCommon.c: 58: char recVal = (0);
  6137  001A84  0E00               	movlw	0
  6138  001A86  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;SystemCommon.c: 60: char dataRegArr[0xA];
  6142                           ;SystemCommon.c: 61: ZeroArray(dataRegArr, 0xA);
  6143  001A88  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6144  001A8A  6E20               	movwf	ZeroArray@array,c
  6145  001A8C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6146  001A8E  6E21               	movwf	ZeroArray@array+1,c
  6147  001A90  0E00               	movlw	0
  6148  001A92  6E23               	movwf	ZeroArray@size+1,c
  6149  001A94  0E0A               	movlw	10
  6150  001A96  6E22               	movwf	ZeroArray@size,c
  6151  001A98  EC06  F020         	call	_ZeroArray	;wreg free
  6152                           
  6153                           ;SystemCommon.c: 63: for(idxData = 0; idxData < 0xA; idxData++)
  6154  001A9C  0E00               	movlw	0
  6155  001A9E  0100               	movlb	0	; () banked
  6156  001AA0  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6157  001AA2                     l7922:
  6158                           
  6159                           ; BSR set to: 0
  6160  001AA2  0E09               	movlw	9
  6161  001AA4  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6162  001AA6  D001               	goto	l1401
  6163  001AA8  D01D               	goto	u7940
  6164  001AAA                     l1401:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;SystemCommon.c: 64: {
  6168                           ;SystemCommon.c: 65: recVal = data[idxData];
  6169                           
  6170                           ; BSR set to: 0
  6171  001AAA  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6172  001AAC  0D01               	mullw	1
  6173  001AAE  50F3               	movf	prodl,w,c
  6174  001AB0  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6175  001AB2  6ED9               	movwf	fsr2l,c
  6176  001AB4  50F4               	movf	prodh,w,c
  6177  001AB6  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6178  001AB8  6EDA               	movwf	fsr2h,c
  6179  001ABA  50DF               	movf	indf2,w,c
  6180  001ABC  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;SystemCommon.c: 66: if(recVal == 0x10)
  6184  001ABE  0E10               	movlw	16
  6185  001AC0  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6186  001AC2  A4D8               	btfss	status,2,c
  6187  001AC4  D002               	goto	l1403
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;SystemCommon.c: 67: {
  6191                           ;SystemCommon.c: 68: idxData++;
  6192  001AC6  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6193                           
  6194                           ;SystemCommon.c: 69: break;
  6195  001AC8  D00D               	goto	u7940
  6196  001ACA                     l1403:
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;SystemCommon.c: 71: else
  6200                           ;SystemCommon.c: 72: {
  6201                           ;SystemCommon.c: 73: dataRegArr[idxData] = recVal + '0';
  6202                           
  6203                           ; BSR set to: 0
  6204  001ACA  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6205  001ACC  0D01               	mullw	1
  6206  001ACE  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6207  001AD0  24F3               	addwf	prodl,w,c
  6208  001AD2  6ED9               	movwf	fsr2l,c
  6209  001AD4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6210  001AD6  20F4               	addwfc	prodh,w,c
  6211  001AD8  6EDA               	movwf	fsr2h,c
  6212  001ADA  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6213  001ADC  0F30               	addlw	48
  6214  001ADE  6EDF               	movwf	indf2,c
  6215                           
  6216                           ; BSR set to: 0
  6217                           
  6218                           ; BSR set to: 0
  6219  001AE0  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6220  001AE2  D7DF               	goto	l7922
  6221  001AE4                     u7940:
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;SystemCommon.c: 74: }
  6225                           ;SystemCommon.c: 75: }
  6226                           ;SystemCommon.c: 76: retVal.num = strtol(dataRegArr, (0), num);
  6227                           
  6228                           ; BSR set to: 0
  6229  001AE4  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6230  001AE6  6E26               	movwf	strtol@s,c
  6231  001AE8  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6232  001AEA  6E27               	movwf	strtol@s+1,c
  6233  001AEC  0E00               	movlw	0
  6234  001AEE  6E28               	movwf	strtol@endptr,c
  6235  001AF0  0E00               	movlw	0
  6236  001AF2  6E29               	movwf	strtol@endptr+1,c
  6237  001AF4  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6238  001AF6  6E2A               	movwf	strtol@base,c
  6239  001AF8  6A2B               	clrf	strtol@base+1,c
  6240  001AFA  BE2A               	btfsc	strtol@base,7,c
  6241  001AFC  062B               	decf	strtol@base+1,f,c
  6242  001AFE  EC6B  F00B         	call	_strtol	;wreg free
  6243  001B02  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6244  001B06  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6245  001B0A  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6246  001B0E  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6247                           
  6248                           ;SystemCommon.c: 78: ZeroArray(dataRegArr, 0xA);
  6249  001B12  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6250  001B14  6E20               	movwf	ZeroArray@array,c
  6251  001B16  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6252  001B18  6E21               	movwf	ZeroArray@array+1,c
  6253  001B1A  0E00               	movlw	0
  6254  001B1C  6E23               	movwf	ZeroArray@size+1,c
  6255  001B1E  0E0A               	movlw	10
  6256  001B20  6E22               	movwf	ZeroArray@size,c
  6257  001B22  EC06  F020         	call	_ZeroArray	;wreg free
  6258                           
  6259                           ;SystemCommon.c: 80: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6260  001B26  0E00               	movlw	0
  6261  001B28  0100               	movlb	0	; () banked
  6262  001B2A  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6263  001B2C  0E00               	movlw	0
  6264  001B2E  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6265  001B30                     l7944:
  6266                           
  6267                           ; BSR set to: 0
  6268  001B30  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6269  001B32  D006               	goto	l1405
  6270  001B34  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6271  001B36  E12E               	bnz	l7962
  6272  001B38  0E0A               	movlw	10
  6273  001B3A  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6274  001B3C  B0D8               	btfsc	status,0,c
  6275  001B3E  D02A               	goto	u7970
  6276  001B40                     l1405:
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;SystemCommon.c: 81: {
  6280                           ;SystemCommon.c: 82: recVal = data[idxData + idxCon];
  6281                           
  6282                           ; BSR set to: 0
  6283  001B40  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6284  001B42  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6285  001B44  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6286  001B46  0E00               	movlw	0
  6287  001B48  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6288  001B4A  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6289  001B4C  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6290  001B4E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6291  001B50  6ED9               	movwf	fsr2l,c
  6292  001B52  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6293  001B54  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6294  001B56  6EDA               	movwf	fsr2h,c
  6295  001B58  50DF               	movf	indf2,w,c
  6296  001B5A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;SystemCommon.c: 83: if(recVal == 0x23)
  6300  001B5C  0E23               	movlw	35
  6301  001B5E  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6302  001B60  B4D8               	btfsc	status,2,c
  6303  001B62  D018               	goto	u7970
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;SystemCommon.c: 87: else
  6307                           ;SystemCommon.c: 88: {
  6308                           ;SystemCommon.c: 89: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6309                           
  6310                           ; BSR set to: 0
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;SystemCommon.c: 86: }
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;SystemCommon.c: 84: {
  6317                           ;SystemCommon.c: 85: break;
  6318  001B64  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6319  001B66  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6320  001B68  6ED9               	movwf	fsr2l,c
  6321  001B6A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6322  001B6C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6323  001B6E  6EDA               	movwf	fsr2h,c
  6324  001B70  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6325  001B72  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6326  001B74  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6327  001B76  0E00               	movlw	0
  6328  001B78  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6329  001B7A  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6330  001B7C  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6331  001B7E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6332  001B80  6EE1               	movwf	fsr1l,c
  6333  001B82  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6334  001B84  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6335  001B86  6EE2               	movwf	fsr1h,c
  6336  001B88  50E7               	movf	indf1,w,c
  6337  001B8A  0F30               	addlw	48
  6338  001B8C  6EDF               	movwf	indf2,c
  6339                           
  6340                           ; BSR set to: 0
  6341                           
  6342                           ; BSR set to: 0
  6343  001B8E  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6344  001B90  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6345  001B92  D7CE               	goto	l7944
  6346  001B94                     u7970:
  6347  001B94                     l7962:
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;SystemCommon.c: 90: }
  6351                           ;SystemCommon.c: 91: }
  6352                           ;SystemCommon.c: 92: retVal.con = strtol(dataRegArr, (0), num);
  6353  001B94  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6354  001B96  6E26               	movwf	strtol@s,c
  6355  001B98  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6356  001B9A  6E27               	movwf	strtol@s+1,c
  6357  001B9C  0E00               	movlw	0
  6358  001B9E  6E28               	movwf	strtol@endptr,c
  6359  001BA0  0E00               	movlw	0
  6360  001BA2  6E29               	movwf	strtol@endptr+1,c
  6361  001BA4  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6362  001BA6  6E2A               	movwf	strtol@base,c
  6363  001BA8  6A2B               	clrf	strtol@base+1,c
  6364  001BAA  BE2A               	btfsc	strtol@base,7,c
  6365  001BAC  062B               	decf	strtol@base+1,f,c
  6366  001BAE  EC6B  F00B         	call	_strtol	;wreg free
  6367  001BB2  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6368  001BB6  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6369  001BBA  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6370  001BBE  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6371                           
  6372                           ;SystemCommon.c: 94: return retVal;
  6373  001BC2  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6374  001BC6  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6375  001BCA  0E07               	movlw	7
  6376  001BCC                     u7981:
  6377  001BCC  CFDB FFEB          	movff	plusw2,plusw0
  6378  001BD0  06E8               	decf	wreg,f,c
  6379  001BD2  E2FC               	bc	u7981
  6380  001BD4  0012               	return	
  6381  001BD6                     __end_of_GetIntFromUartData:
  6382                           	opt stack 0
  6383                           tosu	equ	0xFFF
  6384                           tosh	equ	0xFFE
  6385                           tosl	equ	0xFFD
  6386                           pclath	equ	0xFFA
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           postinc0	equ	0xFEE
  6394                           plusw0	equ	0xFEB
  6395                           wreg	equ	0xFE8
  6396                           indf1	equ	0xFE7
  6397                           postdec1	equ	0xFE5
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           plusw2	equ	0xFDB
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _strtol *****************
  6408 ;; Defined at:
  6409 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6412 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6413 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6414 ;;		 -> NULL(0), 
  6415 ;;  base            2   41[COMRAM] int 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  a               4    1[BANK0 ] long 
  6418 ;;  c               1    5[BANK0 ] unsigned char 
  6419 ;;  sign            1    0[BANK0 ] unsigned char 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  4   37[COMRAM] long 
  6422 ;; Registers used:
  6423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6429 ;;      Params:         6       0       0       0       0       0       0
  6430 ;;      Locals:         0       6       0       0       0       0       0
  6431 ;;      Temps:          4       0       0       0       0       0       0
  6432 ;;      Totals:        10       6       0       0       0       0       0
  6433 ;;Total ram usage:       16 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    6
  6436 ;; This function calls:
  6437 ;;		___lmul
  6438 ;;		_isalpha
  6439 ;;		_isdigit
  6440 ;;		_isspace
  6441 ;;		_toupper
  6442 ;; This function is called by:
  6443 ;;		_GetIntFromUartData
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text21
  6448  0016D6                     __ptext21:
  6449                           	opt stack 0
  6450  0016D6                     _strtol:
  6451                           	opt stack 20
  6452                           
  6453                           ;incstack = 0
  6454  0016D6  C026  FFD9         	movff	strtol@s,fsr2l
  6455  0016DA  C027  FFDA         	movff	strtol@s+1,fsr2h
  6456  0016DE  50DF               	movf	indf2,w,c
  6457  0016E0  0100               	movlb	0	; () banked
  6458  0016E2  6F65               	movwf	strtol@c& (0+255),b
  6459                           
  6460                           ; BSR set to: 0
  6461  0016E4  4A26               	infsnz	strtol@s,f,c
  6462  0016E6  2A27               	incf	strtol@s+1,f,c
  6463                           
  6464                           ; BSR set to: 0
  6465  0016E8  5165               	movf	strtol@c& (0+255),w,b
  6466  0016EA  EC5A  F01F         	call	_isspace
  6467  0016EE  B0D8               	btfsc	status,0,c
  6468  0016F0  D7F2               	goto	_strtol
  6469  0016F2  0E00               	movlw	0
  6470  0016F4  0100               	movlb	0	; () banked
  6471  0016F6  6F61               	movwf	strtol@a& (0+255),b
  6472  0016F8  0E00               	movlw	0
  6473  0016FA  6F62               	movwf	(strtol@a+1)& (0+255),b
  6474  0016FC  0E00               	movlw	0
  6475  0016FE  6F63               	movwf	(strtol@a+2)& (0+255),b
  6476  001700  0E00               	movlw	0
  6477  001702  6F64               	movwf	(strtol@a+3)& (0+255),b
  6478  001704  0E00               	movlw	0
  6479  001706  6F60               	movwf	strtol@sign& (0+255),b
  6480                           
  6481                           ; BSR set to: 0
  6482  001708  0E2D               	movlw	45
  6483  00170A  1965               	xorwf	strtol@c& (0+255),w,b
  6484  00170C  A4D8               	btfss	status,2,c
  6485  00170E  D003               	goto	l2164
  6486                           
  6487                           ; BSR set to: 0
  6488  001710  0E01               	movlw	1
  6489  001712  6F60               	movwf	strtol@sign& (0+255),b
  6490  001714  D004               	goto	u7770
  6491  001716                     l2164:
  6492                           
  6493                           ; BSR set to: 0
  6494                           
  6495                           ; BSR set to: 0
  6496  001716  0E2B               	movlw	43
  6497  001718  1965               	xorwf	strtol@c& (0+255),w,b
  6498  00171A  A4D8               	btfss	status,2,c
  6499  00171C  D008               	goto	l2166
  6500  00171E                     u7770:
  6501                           
  6502                           ; BSR set to: 0
  6503  00171E  C026  FFD9         	movff	strtol@s,fsr2l
  6504  001722  C027  FFDA         	movff	strtol@s+1,fsr2h
  6505  001726  50DF               	movf	indf2,w,c
  6506  001728  6F65               	movwf	strtol@c& (0+255),b
  6507                           
  6508                           ; BSR set to: 0
  6509  00172A  4A26               	infsnz	strtol@s,f,c
  6510  00172C  2A27               	incf	strtol@s+1,f,c
  6511  00172E                     l2166:
  6512                           
  6513                           ; BSR set to: 0
  6514                           
  6515                           ; BSR set to: 0
  6516                           
  6517                           ; BSR set to: 0
  6518  00172E  0E30               	movlw	48
  6519  001730  1965               	xorwf	strtol@c& (0+255),w,b
  6520  001732  A4D8               	btfss	status,2,c
  6521  001734  D02E               	goto	l2174
  6522                           
  6523                           ; BSR set to: 0
  6524  001736  C026  FFD9         	movff	strtol@s,fsr2l
  6525  00173A  C027  FFDA         	movff	strtol@s+1,fsr2h
  6526  00173E  50DF               	movf	indf2,w,c
  6527  001740  6F65               	movwf	strtol@c& (0+255),b
  6528                           
  6529                           ; BSR set to: 0
  6530  001742  4A26               	infsnz	strtol@s,f,c
  6531  001744  2A27               	incf	strtol@s+1,f,c
  6532                           
  6533                           ; BSR set to: 0
  6534  001746  502A               	movf	strtol@base,w,c
  6535  001748  102B               	iorwf	strtol@base+1,w,c
  6536  00174A  B4D8               	btfsc	status,2,c
  6537  00174C  D005               	goto	u7800
  6538                           
  6539                           ; BSR set to: 0
  6540  00174E  0E10               	movlw	16
  6541  001750  182A               	xorwf	strtol@base,w,c
  6542  001752  102B               	iorwf	strtol@base+1,w,c
  6543  001754  A4D8               	btfss	status,2,c
  6544  001756  D015               	goto	l2168
  6545  001758                     u7800:
  6546                           
  6547                           ; BSR set to: 0
  6548                           
  6549                           ; BSR set to: 0
  6550  001758  0E78               	movlw	120
  6551  00175A  1965               	xorwf	strtol@c& (0+255),w,b
  6552  00175C  B4D8               	btfsc	status,2,c
  6553  00175E  D004               	goto	u7820
  6554                           
  6555                           ; BSR set to: 0
  6556  001760  0E58               	movlw	88
  6557  001762  1965               	xorwf	strtol@c& (0+255),w,b
  6558  001764  A4D8               	btfss	status,2,c
  6559  001766  D00D               	goto	l2168
  6560  001768                     u7820:
  6561                           
  6562                           ; BSR set to: 0
  6563                           
  6564                           ; BSR set to: 0
  6565  001768  0E00               	movlw	0
  6566  00176A  6E2B               	movwf	strtol@base+1,c
  6567  00176C  0E10               	movlw	16
  6568  00176E  6E2A               	movwf	strtol@base,c
  6569                           
  6570                           ; BSR set to: 0
  6571  001770  C026  FFD9         	movff	strtol@s,fsr2l
  6572  001774  C027  FFDA         	movff	strtol@s+1,fsr2h
  6573  001778  50DF               	movf	indf2,w,c
  6574  00177A  6F65               	movwf	strtol@c& (0+255),b
  6575                           
  6576                           ; BSR set to: 0
  6577  00177C  4A26               	infsnz	strtol@s,f,c
  6578  00177E  2A27               	incf	strtol@s+1,f,c
  6579  001780  D008               	goto	l2174
  6580  001782                     l2168:
  6581                           
  6582                           ; BSR set to: 0
  6583                           
  6584                           ; BSR set to: 0
  6585  001782  502A               	movf	strtol@base,w,c
  6586  001784  102B               	iorwf	strtol@base+1,w,c
  6587  001786  A4D8               	btfss	status,2,c
  6588  001788  D004               	goto	l2174
  6589                           
  6590                           ; BSR set to: 0
  6591  00178A  0E00               	movlw	0
  6592  00178C  6E2B               	movwf	strtol@base+1,c
  6593  00178E  0E08               	movlw	8
  6594  001790  6E2A               	movwf	strtol@base,c
  6595  001792                     l2174:
  6596                           
  6597                           ; BSR set to: 0
  6598                           
  6599                           ; BSR set to: 0
  6600                           
  6601                           ; BSR set to: 0
  6602                           
  6603                           ; BSR set to: 0
  6604  001792  502A               	movf	strtol@base,w,c
  6605  001794  102B               	iorwf	strtol@base+1,w,c
  6606  001796  A4D8               	btfss	status,2,c
  6607  001798  D004               	goto	l2175
  6608                           
  6609                           ; BSR set to: 0
  6610  00179A  0E00               	movlw	0
  6611  00179C  6E2B               	movwf	strtol@base+1,c
  6612  00179E  0E0A               	movlw	10
  6613  0017A0  6E2A               	movwf	strtol@base,c
  6614  0017A2                     l2175:
  6615                           
  6616                           ; BSR set to: 0
  6617                           
  6618                           ; BSR set to: 0
  6619                           
  6620                           ; BSR set to: 0
  6621  0017A2  5165               	movf	strtol@c& (0+255),w,b
  6622  0017A4  EC46  F01F         	call	_isalpha
  6623  0017A8  A0D8               	btfss	status,0,c
  6624  0017AA  D008               	goto	l2177
  6625  0017AC  0100               	movlb	0	; () banked
  6626  0017AE  5165               	movf	strtol@c& (0+255),w,b
  6627  0017B0  EC60  F020         	call	_toupper
  6628  0017B4  0FC9               	addlw	201
  6629  0017B6  0100               	movlb	0	; () banked
  6630  0017B8  6F65               	movwf	strtol@c& (0+255),b
  6631  0017BA  D009               	goto	l2180
  6632  0017BC                     l2177:
  6633                           
  6634                           ; BSR set to: 0
  6635  0017BC  0100               	movlb	0	; () banked
  6636  0017BE  5165               	movf	strtol@c& (0+255),w,b
  6637  0017C0  ECE8  F01F         	call	_isdigit
  6638  0017C4  A0D8               	btfss	status,0,c
  6639  0017C6  D039               	goto	l2181
  6640  0017C8  0E30               	movlw	48
  6641  0017CA  0100               	movlb	0	; () banked
  6642  0017CC  5F65               	subwf	strtol@c& (0+255),f,b
  6643  0017CE                     l2180:
  6644                           
  6645                           ; BSR set to: 0
  6646                           
  6647                           ; BSR set to: 0
  6648                           
  6649                           ; BSR set to: 0
  6650  0017CE  5165               	movf	strtol@c& (0+255),w,b
  6651  0017D0  6E2C               	movwf	??_strtol& (0+255),c
  6652  0017D2  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6653  0017D4  502A               	movf	strtol@base,w,c
  6654  0017D6  5C2C               	subwf	??_strtol,w,c
  6655  0017D8  502D               	movf	??_strtol+1,w,c
  6656  0017DA  0A80               	xorlw	128
  6657  0017DC  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6658  0017DE  502B               	movf	strtol@base+1,w,c
  6659  0017E0  0A80               	xorlw	128
  6660  0017E2  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6661  0017E4  B0D8               	btfsc	status,0,c
  6662  0017E6  D029               	goto	l2181
  6663                           
  6664                           ; BSR set to: 0
  6665                           
  6666                           ; BSR set to: 0
  6667                           
  6668                           ; BSR set to: 0
  6669  0017E8  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6670  0017EC  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6671  0017F0  0E00               	movlw	0
  6672  0017F2  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6673  0017F4  0EFF               	movlw	-1
  6674  0017F6  6E1C               	movwf	___lmul@multiplier+2,c
  6675  0017F8  6E1D               	movwf	___lmul@multiplier+3,c
  6676  0017FA  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6677  0017FE  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6678  001802  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6679  001806  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6680  00180A  EC0D  F01C         	call	___lmul	;wreg free
  6681  00180E  0100               	movlb	0	; () banked
  6682  001810  5165               	movf	strtol@c& (0+255),w,b
  6683  001812  241A               	addwf	?___lmul,w,c
  6684  001814  6F61               	movwf	strtol@a& (0+255),b
  6685  001816  0E00               	movlw	0
  6686  001818  201B               	addwfc	?___lmul+1,w,c
  6687  00181A  6F62               	movwf	(strtol@a+1)& (0+255),b
  6688  00181C  0E00               	movlw	0
  6689  00181E  201C               	addwfc	?___lmul+2,w,c
  6690  001820  6F63               	movwf	(strtol@a+2)& (0+255),b
  6691  001822  0E00               	movlw	0
  6692  001824  201D               	addwfc	?___lmul+3,w,c
  6693  001826  6F64               	movwf	(strtol@a+3)& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696  001828  C026  FFD9         	movff	strtol@s,fsr2l
  6697  00182C  C027  FFDA         	movff	strtol@s+1,fsr2h
  6698  001830  50DF               	movf	indf2,w,c
  6699  001832  6F65               	movwf	strtol@c& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702  001834  4A26               	infsnz	strtol@s,f,c
  6703  001836  2A27               	incf	strtol@s+1,f,c
  6704  001838  D7B4               	goto	l2175
  6705  00183A                     l2181:
  6706                           
  6707                           ; BSR set to: 0
  6708  00183A  5028               	movf	strtol@endptr,w,c
  6709  00183C  1029               	iorwf	strtol@endptr+1,w,c
  6710  00183E  B4D8               	btfsc	status,2,c
  6711  001840  D00E               	goto	l2183
  6712  001842  0EFF               	movlw	255
  6713  001844  2426               	addwf	strtol@s,w,c
  6714  001846  6E2C               	movwf	??_strtol& (0+255),c
  6715  001848  0EFF               	movlw	255
  6716  00184A  2027               	addwfc	strtol@s+1,w,c
  6717  00184C  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6718  00184E  C028  FFD9         	movff	strtol@endptr,fsr2l
  6719  001852  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6720  001856  C02C  FFDE         	movff	??_strtol,postinc2
  6721  00185A  C02D  FFDD         	movff	??_strtol+1,postdec2
  6722  00185E                     l2183:
  6723  00185E  0100               	movlb	0	; () banked
  6724  001860  5160               	movf	strtol@sign& (0+255),w,b
  6725  001862  B4D8               	btfsc	status,2,c
  6726  001864  D01A               	goto	l2184
  6727                           
  6728                           ; BSR set to: 0
  6729  001866  C061  F02C         	movff	strtol@a,??_strtol
  6730  00186A  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6731  00186E  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6732  001872  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6733  001876  1E2C               	comf	??_strtol,f,c
  6734  001878  1E2D               	comf	??_strtol+1,f,c
  6735  00187A  1E2E               	comf	??_strtol+2,f,c
  6736  00187C  1E2F               	comf	??_strtol+3,f,c
  6737  00187E  2A2C               	incf	??_strtol,f,c
  6738  001880  0E00               	movlw	0
  6739  001882  222D               	addwfc	??_strtol+1,f,c
  6740  001884  222E               	addwfc	??_strtol+2,f,c
  6741  001886  222F               	addwfc	??_strtol+3,f,c
  6742  001888  C02C  F026         	movff	??_strtol,?_strtol
  6743  00188C  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6744  001890  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6745  001894  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6746                           
  6747                           ; BSR set to: 0
  6748  001898  0012               	return	
  6749  00189A                     l2184:
  6750                           
  6751                           ; BSR set to: 0
  6752  00189A  C061  F026         	movff	strtol@a,?_strtol
  6753  00189E  C062  F027         	movff	strtol@a+1,?_strtol+1
  6754  0018A2  C063  F028         	movff	strtol@a+2,?_strtol+2
  6755  0018A6  C064  F029         	movff	strtol@a+3,?_strtol+3
  6756                           
  6757                           ; BSR set to: 0
  6758  0018AA  0012               	return		;funcret
  6759  0018AC                     __end_of_strtol:
  6760                           	opt stack 0
  6761                           tosu	equ	0xFFF
  6762                           tosh	equ	0xFFE
  6763                           tosl	equ	0xFFD
  6764                           pclath	equ	0xFFA
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           postinc0	equ	0xFEE
  6772                           plusw0	equ	0xFEB
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           postdec1	equ	0xFE5
  6776                           fsr1h	equ	0xFE2
  6777                           fsr1l	equ	0xFE1
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           plusw2	equ	0xFDB
  6782                           fsr2h	equ	0xFDA
  6783                           fsr2l	equ	0xFD9
  6784                           status	equ	0xFD8
  6785                           
  6786 ;; *************** function _toupper *****************
  6787 ;; Defined at:
  6788 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  c               1    wreg     unsigned char 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;  c               1   23[COMRAM] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      unsigned char 
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6802 ;;      Params:         0       0       0       0       0       0       0
  6803 ;;      Locals:         1       0       0       0       0       0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0
  6805 ;;      Totals:         1       0       0       0       0       0       0
  6806 ;;Total ram usage:        1 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    4
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_strtol
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text22
  6817  0040C0                     __ptext22:
  6818                           	opt stack 0
  6819  0040C0                     _toupper:
  6820                           	opt stack 21
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;incstack = 0
  6824                           ;toupper@c stored from wreg
  6825  0040C0  6E18               	movwf	toupper@c,c
  6826  0040C2  0E7B               	movlw	123
  6827  0040C4  6018               	cpfslt	toupper@c,c
  6828  0040C6  D004               	goto	l2188
  6829  0040C8  0E60               	movlw	96
  6830  0040CA  6418               	cpfsgt	toupper@c,c
  6831  0040CC  D001               	goto	l2188
  6832  0040CE  9A18               	bcf	toupper@c,5,c
  6833  0040D0                     l2188:
  6834  0040D0  5018               	movf	toupper@c,w,c
  6835  0040D2  0012               	return	
  6836  0040D4                     __end_of_toupper:
  6837                           	opt stack 0
  6838                           tosu	equ	0xFFF
  6839                           tosh	equ	0xFFE
  6840                           tosl	equ	0xFFD
  6841                           pclath	equ	0xFFA
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           postinc0	equ	0xFEE
  6849                           plusw0	equ	0xFEB
  6850                           wreg	equ	0xFE8
  6851                           indf1	equ	0xFE7
  6852                           postdec1	equ	0xFE5
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           postdec2	equ	0xFDD
  6858                           plusw2	equ	0xFDB
  6859                           fsr2h	equ	0xFDA
  6860                           fsr2l	equ	0xFD9
  6861                           status	equ	0xFD8
  6862                           
  6863 ;; *************** function _isspace *****************
  6864 ;; Defined at:
  6865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  c               1    wreg     unsigned char 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  c               1   25[COMRAM] unsigned char 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;		None               void
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6879 ;;      Params:         0       0       0       0       0       0       0
  6880 ;;      Locals:         2       0       0       0       0       0       0
  6881 ;;      Temps:          1       0       0       0       0       0       0
  6882 ;;      Totals:         3       0       0       0       0       0       0
  6883 ;;Total ram usage:        3 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    4
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_strtol
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text23
  6894  003EB4                     __ptext23:
  6895                           	opt stack 0
  6896  003EB4                     _isspace:
  6897                           	opt stack 21
  6898                           
  6899                           ;incstack = 0
  6900                           ;isspace@c stored from wreg
  6901  003EB4  6E1A               	movwf	isspace@c,c
  6902  003EB6  0E01               	movlw	1
  6903  003EB8  6E19               	movwf	_isspace$3314,c
  6904  003EBA  0E20               	movlw	32
  6905  003EBC  181A               	xorwf	isspace@c,w,c
  6906  003EBE  B4D8               	btfsc	status,2,c
  6907  003EC0  D008               	goto	l2270
  6908  003EC2  0E0E               	movlw	14
  6909  003EC4  601A               	cpfslt	isspace@c,c
  6910  003EC6  D003               	goto	u7540
  6911  003EC8  0E09               	movlw	9
  6912  003ECA  601A               	cpfslt	isspace@c,c
  6913  003ECC  D002               	goto	l2270
  6914  003ECE                     u7540:
  6915  003ECE  0E00               	movlw	0
  6916  003ED0  6E19               	movwf	_isspace$3314,c
  6917  003ED2                     l2270:
  6918  003ED2  C019  F018         	movff	_isspace$3314,??_isspace
  6919  003ED6  3018               	rrcf	??_isspace,w,c
  6920  003ED8  0012               	return	
  6921  003EDA                     __end_of_isspace:
  6922                           	opt stack 0
  6923                           tosu	equ	0xFFF
  6924                           tosh	equ	0xFFE
  6925                           tosl	equ	0xFFD
  6926                           pclath	equ	0xFFA
  6927                           tblptru	equ	0xFF8
  6928                           tblptrh	equ	0xFF7
  6929                           tblptrl	equ	0xFF6
  6930                           tablat	equ	0xFF5
  6931                           prodh	equ	0xFF4
  6932                           prodl	equ	0xFF3
  6933                           postinc0	equ	0xFEE
  6934                           plusw0	equ	0xFEB
  6935                           wreg	equ	0xFE8
  6936                           indf1	equ	0xFE7
  6937                           postdec1	equ	0xFE5
  6938                           fsr1h	equ	0xFE2
  6939                           fsr1l	equ	0xFE1
  6940                           indf2	equ	0xFDF
  6941                           postinc2	equ	0xFDE
  6942                           postdec2	equ	0xFDD
  6943                           plusw2	equ	0xFDB
  6944                           fsr2h	equ	0xFDA
  6945                           fsr2l	equ	0xFD9
  6946                           status	equ	0xFD8
  6947                           
  6948 ;; *************** function _isdigit *****************
  6949 ;; Defined at:
  6950 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  c               1    wreg     unsigned char 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  c               1   25[COMRAM] unsigned char 
  6955 ;; Return value:  Size  Location     Type
  6956 ;;		None               void
  6957 ;; Registers used:
  6958 ;;		wreg, status,2, status,0
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6964 ;;      Params:         0       0       0       0       0       0       0
  6965 ;;      Locals:         2       0       0       0       0       0       0
  6966 ;;      Temps:          1       0       0       0       0       0       0
  6967 ;;      Totals:         3       0       0       0       0       0       0
  6968 ;;Total ram usage:        3 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    4
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		_strtol
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text24
  6979  003FD0                     __ptext24:
  6980                           	opt stack 0
  6981  003FD0                     _isdigit:
  6982                           	opt stack 21
  6983                           
  6984                           ;incstack = 0
  6985                           ;isdigit@c stored from wreg
  6986  003FD0  6E1A               	movwf	isdigit@c,c
  6987  003FD2  0E00               	movlw	0
  6988  003FD4  6E19               	movwf	_isdigit$3311,c
  6989  003FD6  0E3A               	movlw	58
  6990  003FD8  601A               	cpfslt	isdigit@c,c
  6991  003FDA  D005               	goto	l2265
  6992  003FDC  0E2F               	movlw	47
  6993  003FDE  641A               	cpfsgt	isdigit@c,c
  6994  003FE0  D002               	goto	l2265
  6995  003FE2  0E01               	movlw	1
  6996  003FE4  6E19               	movwf	_isdigit$3311,c
  6997  003FE6                     l2265:
  6998  003FE6  C019  F018         	movff	_isdigit$3311,??_isdigit
  6999  003FEA  3018               	rrcf	??_isdigit,w,c
  7000  003FEC  0012               	return	
  7001  003FEE                     __end_of_isdigit:
  7002                           	opt stack 0
  7003                           tosu	equ	0xFFF
  7004                           tosh	equ	0xFFE
  7005                           tosl	equ	0xFFD
  7006                           pclath	equ	0xFFA
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodh	equ	0xFF4
  7012                           prodl	equ	0xFF3
  7013                           postinc0	equ	0xFEE
  7014                           plusw0	equ	0xFEB
  7015                           wreg	equ	0xFE8
  7016                           indf1	equ	0xFE7
  7017                           postdec1	equ	0xFE5
  7018                           fsr1h	equ	0xFE2
  7019                           fsr1l	equ	0xFE1
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           plusw2	equ	0xFDB
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _isalpha *****************
  7029 ;; Defined at:
  7030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;  c               1    wreg     unsigned char 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  c               1   28[COMRAM] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;		None               void
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7044 ;;      Params:         0       0       0       0       0       0       0
  7045 ;;      Locals:         2       0       0       0       0       0       0
  7046 ;;      Temps:          1       0       0       0       0       0       0
  7047 ;;      Totals:         3       0       0       0       0       0       0
  7048 ;;Total ram usage:        3 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    5
  7051 ;; This function calls:
  7052 ;;		_isupper
  7053 ;; This function is called by:
  7054 ;;		_strtol
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text25
  7059  003E8C                     __ptext25:
  7060                           	opt stack 0
  7061  003E8C                     _isalpha:
  7062                           	opt stack 20
  7063                           
  7064                           ;incstack = 0
  7065                           ;isalpha@c stored from wreg
  7066  003E8C  6E1D               	movwf	isalpha@c,c
  7067  003E8E  0E01               	movlw	1
  7068  003E90  6E1C               	movwf	_isalpha$3308,c
  7069  003E92  0E7B               	movlw	123
  7070  003E94  601D               	cpfslt	isalpha@c,c
  7071  003E96  D003               	goto	u7560
  7072  003E98  0E61               	movlw	97
  7073  003E9A  601D               	cpfslt	isalpha@c,c
  7074  003E9C  D007               	goto	l2260
  7075  003E9E                     u7560:
  7076  003E9E  501D               	movf	isalpha@c,w,c
  7077  003EA0  ECF7  F01F         	call	_isupper
  7078  003EA4  B0D8               	btfsc	status,0,c
  7079  003EA6  D002               	goto	l2260
  7080  003EA8  0E00               	movlw	0
  7081  003EAA  6E1C               	movwf	_isalpha$3308,c
  7082  003EAC                     l2260:
  7083  003EAC  C01C  F01B         	movff	_isalpha$3308,??_isalpha
  7084  003EB0  301B               	rrcf	??_isalpha,w,c
  7085  003EB2  0012               	return	
  7086  003EB4                     __end_of_isalpha:
  7087                           	opt stack 0
  7088                           tosu	equ	0xFFF
  7089                           tosh	equ	0xFFE
  7090                           tosl	equ	0xFFD
  7091                           pclath	equ	0xFFA
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           postinc0	equ	0xFEE
  7099                           plusw0	equ	0xFEB
  7100                           wreg	equ	0xFE8
  7101                           indf1	equ	0xFE7
  7102                           postdec1	equ	0xFE5
  7103                           fsr1h	equ	0xFE2
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           plusw2	equ	0xFDB
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _isupper *****************
  7114 ;; Defined at:
  7115 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  c               1    wreg     unsigned char 
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  c               1   25[COMRAM] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;		None               void
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7129 ;;      Params:         0       0       0       0       0       0       0
  7130 ;;      Locals:         2       0       0       0       0       0       0
  7131 ;;      Temps:          1       0       0       0       0       0       0
  7132 ;;      Totals:         3       0       0       0       0       0       0
  7133 ;;Total ram usage:        3 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    4
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_isalpha
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text26
  7144  003FEE                     __ptext26:
  7145                           	opt stack 0
  7146  003FEE                     _isupper:
  7147                           	opt stack 20
  7148                           
  7149                           ;incstack = 0
  7150                           ;isupper@c stored from wreg
  7151  003FEE  6E1A               	movwf	isupper@c,c
  7152  003FF0  0E00               	movlw	0
  7153  003FF2  6E19               	movwf	_isupper$3317,c
  7154  003FF4  0E5B               	movlw	91
  7155  003FF6  601A               	cpfslt	isupper@c,c
  7156  003FF8  D005               	goto	l2275
  7157  003FFA  0E40               	movlw	64
  7158  003FFC  641A               	cpfsgt	isupper@c,c
  7159  003FFE  D002               	goto	l2275
  7160  004000  0E01               	movlw	1
  7161  004002  6E19               	movwf	_isupper$3317,c
  7162  004004                     l2275:
  7163  004004  C019  F018         	movff	_isupper$3317,??_isupper
  7164  004008  3018               	rrcf	??_isupper,w,c
  7165  00400A  0012               	return	
  7166  00400C                     __end_of_isupper:
  7167                           	opt stack 0
  7168                           tosu	equ	0xFFF
  7169                           tosh	equ	0xFFE
  7170                           tosl	equ	0xFFD
  7171                           pclath	equ	0xFFA
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           postinc0	equ	0xFEE
  7179                           plusw0	equ	0xFEB
  7180                           wreg	equ	0xFE8
  7181                           indf1	equ	0xFE7
  7182                           postdec1	equ	0xFE5
  7183                           fsr1h	equ	0xFE2
  7184                           fsr1l	equ	0xFE1
  7185                           indf2	equ	0xFDF
  7186                           postinc2	equ	0xFDE
  7187                           postdec2	equ	0xFDD
  7188                           plusw2	equ	0xFDB
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function _DacReadValue *****************
  7194 ;; Defined at:
  7195 ;;		line 44 in file "DacApp.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7198 ;;		 -> rxMsgData(20), 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;  byteIdx         2  120[BANK0 ] int 
  7201 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7202 ;;  readVal         2  110[BANK0 ] unsigned int 
  7203 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7204 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7205 ;;  regNum          1  108[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7215 ;;      Params:         0       2       0       0       0       0       0
  7216 ;;      Locals:         0      14       0       0       0       0       0
  7217 ;;      Temps:          0       2       0       0       0       0       0
  7218 ;;      Totals:         0      18       0       0       0       0       0
  7219 ;;Total ram usage:       18 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:   10
  7222 ;; This function calls:
  7223 ;;		_ReadIntFromEeprom
  7224 ;;		_WriteUartMessage
  7225 ;;		_ZeroArray
  7226 ;;		_crc8
  7227 ;;		_make8
  7228 ;; This function is called by:
  7229 ;;		_GroupDAC
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text27
  7234  002654                     __ptext27:
  7235                           	opt stack 0
  7236  002654                     _DacReadValue:
  7237                           	opt stack 18
  7238                           
  7239                           ;DacApp.c: 46: uint16_t readVal;
  7240                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7241                           
  7242                           ;incstack = 0
  7243  002654  0E00               	movlw	0
  7244  002656  0100               	movlb	0	; () banked
  7245  002658  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7246  00265A  0E00               	movlw	0
  7247  00265C  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7251                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7252  00265E  0ED1               	movlw	low DacReadValue@TxMsg
  7253  002660  6E20               	movwf	ZeroArray@array,c
  7254  002662  0E00               	movlw	high DacReadValue@TxMsg
  7255  002664  6E21               	movwf	ZeroArray@array+1,c
  7256  002666  0E00               	movlw	0
  7257  002668  6E23               	movwf	ZeroArray@size+1,c
  7258  00266A  0E07               	movlw	7
  7259  00266C  6E22               	movwf	ZeroArray@size,c
  7260  00266E  EC06  F020         	call	_ZeroArray	;wreg free
  7261                           
  7262                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7263  002672  0E24               	movlw	36
  7264  002674  0100               	movlb	0	; () banked
  7265  002676  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7269  002678  0E06               	movlw	6
  7270  00267A  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7274  00267C  0E62               	movlw	98
  7275  00267E  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7279  002680  0E02               	movlw	2
  7280  002682  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7284  002684  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7285  002688  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7286  00268C  50DF               	movf	indf2,w,c
  7287  00268E  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7291  002690  0E00               	movlw	0
  7292  002692  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7293  002694  0E02               	movlw	2
  7294  002696  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7295  002698  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7296  00269A  0D01               	mullw	1
  7297  00269C  0E53               	movlw	low _DAC_ADDRES
  7298  00269E  24F3               	addwf	prodl,w,c
  7299  0026A0  6EF6               	movwf	tblptrl,c
  7300  0026A2  0E06               	movlw	high _DAC_ADDRES
  7301  0026A4  20F4               	addwfc	prodh,w,c
  7302  0026A6  6EF7               	movwf	tblptrh,c
  7303  0026A8                     	if	0	;There are less than 3 active tblptr bytes
  7304  0026A8                     	endif
  7305  0026A8  0008               	tblrd		*
  7306  0026AA  50F5               	movf	tablat,w,c
  7307  0026AC  0940               	iorlw	64
  7308  0026AE  ECA9  F00E         	call	_ReadIntFromEeprom
  7309  0026B2  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7310  0026B6  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7311                           
  7312                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7313  0026BA  0E00               	movlw	0
  7314  0026BC  0100               	movlb	0	; () banked
  7315  0026BE  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7316  0026C0  0E00               	movlw	0
  7317  0026C2  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7318  0026C4                     l8270:
  7319                           
  7320                           ; BSR set to: 0
  7321  0026C4  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7322  0026C6  D006               	goto	l416
  7323  0026C8  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7324  0026CA  E11F               	bnz	l8280
  7325  0026CC  0E02               	movlw	2
  7326  0026CE  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7327  0026D0  B0D8               	btfsc	status,0,c
  7328  0026D2  D01B               	goto	u8370
  7329  0026D4                     l416:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;DacApp.c: 61: {
  7333                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7334                           
  7335                           ; BSR set to: 0
  7336  0026D4  0E04               	movlw	4
  7337  0026D6  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7338  0026D8  6FCA               	movwf	??_DacReadValue& (0+255),b
  7339  0026DA  0E00               	movlw	0
  7340  0026DC  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7341  0026DE  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7342  0026E0  0ED1               	movlw	low DacReadValue@TxMsg
  7343  0026E2  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7344  0026E4  6ED9               	movwf	fsr2l,c
  7345  0026E6  0E00               	movlw	high DacReadValue@TxMsg
  7346  0026E8  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7347  0026EA  6EDA               	movwf	fsr2h,c
  7348  0026EC  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7349  0026F0  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7350  0026F4  6A1A               	clrf	make8@data+2,c
  7351  0026F6  6A1B               	clrf	make8@data+3,c
  7352  0026F8  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7353  0026FC  EC03  F01B         	call	_make8	;wreg free
  7354  002700  6EDF               	movwf	indf2,c
  7355  002702  0100               	movlb	0	; () banked
  7356  002704  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7357  002706  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7358  002708  D7DD               	goto	l8270
  7359  00270A                     u8370:
  7360  00270A                     l8280:
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;DacApp.c: 63: }
  7364                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7365  00270A  0ED1               	movlw	low DacReadValue@TxMsg
  7366  00270C  6E18               	movwf	crc8@dataArray,c
  7367  00270E  0E00               	movlw	high DacReadValue@TxMsg
  7368  002710  6E19               	movwf	crc8@dataArray+1,c
  7369  002712  0E00               	movlw	0
  7370  002714  6E1B               	movwf	crc8@dataSize+1,c
  7371  002716  0E06               	movlw	6
  7372  002718  6E1A               	movwf	crc8@dataSize,c
  7373  00271A  EC8A  F01C         	call	_crc8	;wreg free
  7374  00271E  0100               	movlb	0	; () banked
  7375  002720  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7379  002722  0ED1               	movlw	low DacReadValue@TxMsg
  7380  002724  6E19               	movwf	WriteUartMessage@dataBuf,c
  7381  002726  0E00               	movlw	high DacReadValue@TxMsg
  7382  002728  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7383  00272A  0E00               	movlw	0
  7384  00272C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7385  00272E  0E07               	movlw	7
  7386  002730  6E1B               	movwf	WriteUartMessage@dataSize,c
  7387  002732  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  7388  002736  0012               	return		;funcret
  7389  002738                     __end_of_DacReadValue:
  7390                           	opt stack 0
  7391                           tosu	equ	0xFFF
  7392                           tosh	equ	0xFFE
  7393                           tosl	equ	0xFFD
  7394                           pclath	equ	0xFFA
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           prodh	equ	0xFF4
  7400                           prodl	equ	0xFF3
  7401                           postinc0	equ	0xFEE
  7402                           plusw0	equ	0xFEB
  7403                           wreg	equ	0xFE8
  7404                           indf1	equ	0xFE7
  7405                           postdec1	equ	0xFE5
  7406                           fsr1h	equ	0xFE2
  7407                           fsr1l	equ	0xFE1
  7408                           indf2	equ	0xFDF
  7409                           postinc2	equ	0xFDE
  7410                           postdec2	equ	0xFDD
  7411                           plusw2	equ	0xFDB
  7412                           fsr2h	equ	0xFDA
  7413                           fsr2l	equ	0xFD9
  7414                           status	equ	0xFD8
  7415                           
  7416 ;; *************** function _testLeds *****************
  7417 ;; Defined at:
  7418 ;;		line 43 in file "LedsApp.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;		None
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  idx             2   44[COMRAM] int 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7432 ;;      Params:         0       0       0       0       0       0       0
  7433 ;;      Locals:         2       0       0       0       0       0       0
  7434 ;;      Temps:          1       0       0       0       0       0       0
  7435 ;;      Totals:         3       0       0       0       0       0       0
  7436 ;;Total ram usage:        3 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    7
  7439 ;; This function calls:
  7440 ;;		_SendAckMessage
  7441 ;; This function is called by:
  7442 ;;		_GroupControlMcu
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text28
  7447  0033AE                     __ptext28:
  7448                           	opt stack 0
  7449  0033AE                     _testLeds:
  7450                           	opt stack 21
  7451                           
  7452                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7453                           
  7454                           ;incstack = 0
  7455  0033AE  0E00               	movlw	0
  7456  0033B0  6E2E               	movwf	testLeds@idx+1,c
  7457  0033B2  0E00               	movlw	0
  7458  0033B4  6E2D               	movwf	testLeds@idx,c
  7459  0033B6                     l8096:
  7460  0033B6  BE2E               	btfsc	testLeds@idx+1,7,c
  7461  0033B8  D006               	goto	l60
  7462  0033BA  502E               	movf	testLeds@idx+1,w,c
  7463  0033BC  E127               	bnz	l8110
  7464  0033BE  0E0A               	movlw	10
  7465  0033C0  5C2D               	subwf	testLeds@idx,w,c
  7466  0033C2  B0D8               	btfsc	status,0,c
  7467  0033C4  D023               	goto	u8190
  7468  0033C6                     l60:
  7469                           
  7470                           ;LedsApp.c: 47: {
  7471                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7472  0033C6  808B               	bsf	3979,0,c	;volatile
  7473                           
  7474                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7475  0033C8  0E82               	movlw	130
  7476  0033CA  6E2C               	movwf	??_testLeds& (0+255),c
  7477  0033CC  0EDE               	movlw	222
  7478  0033CE                     u9027:
  7479  0033CE  2EE8               	decfsz	wreg,f,c
  7480  0033D0  D7FE               	bra	u9027
  7481  0033D2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7482  0033D4  D7FC               	bra	u9027
  7483                           
  7484                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7485  0033D6  888A               	bsf	3978,4,c	;volatile
  7486                           
  7487                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7488  0033D8  0E82               	movlw	130
  7489  0033DA  6E2C               	movwf	??_testLeds& (0+255),c
  7490  0033DC  0EDE               	movlw	222
  7491  0033DE                     u9037:
  7492  0033DE  2EE8               	decfsz	wreg,f,c
  7493  0033E0  D7FE               	bra	u9037
  7494  0033E2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7495  0033E4  D7FC               	bra	u9037
  7496                           
  7497                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7498  0033E6  908B               	bcf	3979,0,c	;volatile
  7499                           
  7500                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7501  0033E8  0E82               	movlw	130
  7502  0033EA  6E2C               	movwf	??_testLeds& (0+255),c
  7503  0033EC  0EDE               	movlw	222
  7504  0033EE                     u9047:
  7505  0033EE  2EE8               	decfsz	wreg,f,c
  7506  0033F0  D7FE               	bra	u9047
  7507  0033F2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7508  0033F4  D7FC               	bra	u9047
  7509                           
  7510                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7511  0033F6  988A               	bcf	3978,4,c	;volatile
  7512                           
  7513                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7514  0033F8  0E82               	movlw	130
  7515  0033FA  6E2C               	movwf	??_testLeds& (0+255),c
  7516  0033FC  0EDE               	movlw	222
  7517  0033FE                     u9057:
  7518  0033FE  2EE8               	decfsz	wreg,f,c
  7519  003400  D7FE               	bra	u9057
  7520  003402  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7521  003404  D7FC               	bra	u9057
  7522  003406  4A2D               	infsnz	testLeds@idx,f,c
  7523  003408  2A2E               	incf	testLeds@idx+1,f,c
  7524  00340A  D7D5               	goto	l8096
  7525  00340C                     u8190:
  7526  00340C                     l8110:
  7527                           
  7528                           ;LedsApp.c: 57: }
  7529                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7530  00340C  0E14               	movlw	20
  7531  00340E  6E24               	movwf	SendAckMessage@inRequest,c
  7532  003410  0E01               	movlw	1
  7533  003412  EC61  F01C         	call	_SendAckMessage
  7534  003416  0012               	return	
  7535  003418                     __end_of_testLeds:
  7536                           	opt stack 0
  7537                           tosu	equ	0xFFF
  7538                           tosh	equ	0xFFE
  7539                           tosl	equ	0xFFD
  7540                           pclath	equ	0xFFA
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           prodh	equ	0xFF4
  7546                           prodl	equ	0xFF3
  7547                           postinc0	equ	0xFEE
  7548                           plusw0	equ	0xFEB
  7549                           wreg	equ	0xFE8
  7550                           indf1	equ	0xFE7
  7551                           postdec1	equ	0xFE5
  7552                           fsr1h	equ	0xFE2
  7553                           fsr1l	equ	0xFE1
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           plusw2	equ	0xFDB
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _ResetMcu *****************
  7563 ;; Defined at:
  7564 ;;		line 149 in file "SystemCommon.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;		None
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;		None
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  1    wreg      void 
  7571 ;; Registers used:
  7572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7578 ;;      Params:         0       0       0       0       0       0       0
  7579 ;;      Locals:         0       0       0       0       0       0       0
  7580 ;;      Temps:          0       0       0       0       0       0       0
  7581 ;;      Totals:         0       0       0       0       0       0       0
  7582 ;;Total ram usage:        0 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    7
  7585 ;; This function calls:
  7586 ;;		_SendAckMessage
  7587 ;; This function is called by:
  7588 ;;		_GroupControlMcu
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text29
  7593  00411E                     __ptext29:
  7594                           	opt stack 0
  7595  00411E                     _ResetMcu:
  7596                           	opt stack 21
  7597                           
  7598                           ;SystemCommon.c: 152: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7599                           
  7600                           ;incstack = 0
  7601  00411E  0E11               	movlw	17
  7602  004120  6E24               	movwf	SendAckMessage@inRequest,c
  7603  004122  0E01               	movlw	1
  7604  004124  EC61  F01C         	call	_SendAckMessage
  7605  004128  00FF               	reset		;# 
  7606  00412A  0012               	return		;funcret
  7607  00412C                     __end_of_ResetMcu:
  7608                           	opt stack 0
  7609                           tosu	equ	0xFFF
  7610                           tosh	equ	0xFFE
  7611                           tosl	equ	0xFFD
  7612                           pclath	equ	0xFFA
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           postinc0	equ	0xFEE
  7620                           plusw0	equ	0xFEB
  7621                           wreg	equ	0xFE8
  7622                           indf1	equ	0xFE7
  7623                           postdec1	equ	0xFE5
  7624                           fsr1h	equ	0xFE2
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           plusw2	equ	0xFDB
  7630                           fsr2h	equ	0xFDA
  7631                           fsr2l	equ	0xFD9
  7632                           status	equ	0xFD8
  7633                           
  7634 ;; *************** function _SetChannelMode *****************
  7635 ;; Defined at:
  7636 ;;		line 30 in file "AdcApp.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  data            2   43[COMRAM] PTR unsigned char 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7650 ;;      Params:         2       0       0       0       0       0       0
  7651 ;;      Locals:         0       0       0       0       0       0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0
  7653 ;;      Totals:         2       0       0       0       0       0       0
  7654 ;;Total ram usage:        2 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    7
  7657 ;; This function calls:
  7658 ;;		_SendAckMessage
  7659 ;; This function is called by:
  7660 ;;		_GroupAdc
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text30
  7665  003DAA                     __ptext30:
  7666                           	opt stack 0
  7667  003DAA                     _SetChannelMode:
  7668                           	opt stack 21
  7669                           
  7670                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7671                           
  7672                           ;incstack = 0
  7673  003DAA  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7674  003DAE  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7675  003DB2  50DF               	movf	indf2,w,c
  7676  003DB4  6E3A               	movwf	_adcSampleMode,c
  7677                           
  7678                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7679  003DB6  043A               	decf	_adcSampleMode,w,c
  7680  003DB8  A4D8               	btfss	status,2,c
  7681  003DBA  D009               	goto	l122
  7682                           
  7683                           ;AdcApp.c: 34: {
  7684                           ;AdcApp.c: 35: channel = data[1];
  7685  003DBC  EE20 F001          	lfsr	2,1
  7686  003DC0  502C               	movf	SetChannelMode@data,w,c
  7687  003DC2  26D9               	addwf	fsr2l,f,c
  7688  003DC4  502D               	movf	SetChannelMode@data+1,w,c
  7689  003DC6  22DA               	addwfc	fsr2h,f,c
  7690  003DC8  50DF               	movf	indf2,w,c
  7691  003DCA  0100               	movlb	0	; () banked
  7692  003DCC  6FF9               	movwf	_channel& (0+255),b
  7693  003DCE                     l122:
  7694                           
  7695                           ;AdcApp.c: 36: }
  7696                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7697                           
  7698                           ; BSR set to: 0
  7699  003DCE  0E32               	movlw	50
  7700  003DD0  6E24               	movwf	SendAckMessage@inRequest,c
  7701  003DD2  0E03               	movlw	3
  7702  003DD4  EC61  F01C         	call	_SendAckMessage
  7703  003DD8  0012               	return		;funcret
  7704  003DDA                     __end_of_SetChannelMode:
  7705                           	opt stack 0
  7706                           tosu	equ	0xFFF
  7707                           tosh	equ	0xFFE
  7708                           tosl	equ	0xFFD
  7709                           pclath	equ	0xFFA
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           postinc0	equ	0xFEE
  7717                           plusw0	equ	0xFEB
  7718                           wreg	equ	0xFE8
  7719                           indf1	equ	0xFE7
  7720                           postdec1	equ	0xFE5
  7721                           fsr1h	equ	0xFE2
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           plusw2	equ	0xFDB
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _EUSART1_Read *****************
  7732 ;; Defined at:
  7733 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;		None
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  readValue       2   24[COMRAM] unsigned int 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;                  1    wreg      unsigned char 
  7740 ;; Registers used:
  7741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7747 ;;      Params:         0       0       0       0       0       0       0
  7748 ;;      Locals:         2       0       0       0       0       0       0
  7749 ;;      Temps:          1       0       0       0       0       0       0
  7750 ;;      Totals:         3       0       0       0       0       0       0
  7751 ;;Total ram usage:        3 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    4
  7754 ;; This function calls:
  7755 ;;		Nothing
  7756 ;; This function is called by:
  7757 ;;		_readUartMessage
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text31
  7762  003962                     __ptext31:
  7763                           	opt stack 0
  7764  003962                     _EUSART1_Read:
  7765                           	opt stack 25
  7766                           
  7767                           ;eusart1.c: 112: uint16_t readValue = 0;
  7768                           
  7769                           ;incstack = 0
  7770  003962  0E00               	movlw	0
  7771  003964  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7772  003966  0E00               	movlw	0
  7773  003968  6E19               	movwf	EUSART1_Read@readValue,c
  7774                           
  7775                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7776  00396A  0100               	movlb	0	; () banked
  7777  00396C  51F8               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7778  00396E  A4D8               	btfss	status,2,c
  7779  003970  D002               	goto	l887
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;eusart1.c: 120: {
  7783                           ;eusart1.c: 121: return readValue;
  7784  003972  5019               	movf	EUSART1_Read@readValue,w,c
  7785                           
  7786                           ; BSR set to: 0
  7787  003974  0012               	return	
  7788  003976                     l887:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;eusart1.c: 122: }
  7792                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7793                           
  7794                           ; BSR set to: 0
  7795  003976  5033               	movf	_eusart1RxTail,w,c	;volatile
  7796  003978  0D01               	mullw	1
  7797  00397A  0E00               	movlw	low _eusart1RxBuffer
  7798  00397C  24F3               	addwf	prodl,w,c
  7799  00397E  6ED9               	movwf	fsr2l,c
  7800  003980  0E01               	movlw	high _eusart1RxBuffer
  7801  003982  20F4               	addwfc	prodh,w,c
  7802  003984  6EDA               	movwf	fsr2h,c
  7803  003986  50DF               	movf	indf2,w,c
  7804  003988  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7805  00398A  5018               	movf	??_EUSART1_Read,w,c
  7806  00398C  6E19               	movwf	EUSART1_Read@readValue,c
  7807  00398E  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7808                           
  7809                           ; BSR set to: 0
  7810  003990  2A33               	incf	_eusart1RxTail,f,c	;volatile
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7814  003992  0E27               	movlw	39
  7815  003994  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  7816  003996  D002               	goto	l889
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;eusart1.c: 126: {
  7820                           ;eusart1.c: 127: eusart1RxTail = 0;
  7821  003998  0E00               	movlw	0
  7822  00399A  6E33               	movwf	_eusart1RxTail,c	;volatile
  7823  00399C                     l889:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;eusart1.c: 128: }
  7827                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7828                           
  7829                           ; BSR set to: 0
  7830  00399C  9A9D               	bcf	3997,5,c	;volatile
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;eusart1.c: 130: eusart1RxCount--;
  7834  00399E  07F8               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7838  0039A0  8A9D               	bsf	3997,5,c	;volatile
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;eusart1.c: 133: return readValue;
  7842  0039A2  5019               	movf	EUSART1_Read@readValue,w,c
  7843  0039A4  0012               	return	
  7844  0039A6                     __end_of_EUSART1_Read:
  7845                           	opt stack 0
  7846                           tosu	equ	0xFFF
  7847                           tosh	equ	0xFFE
  7848                           tosl	equ	0xFFD
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           postinc0	equ	0xFEE
  7857                           plusw0	equ	0xFEB
  7858                           wreg	equ	0xFE8
  7859                           indf1	equ	0xFE7
  7860                           postdec1	equ	0xFE5
  7861                           fsr1h	equ	0xFE2
  7862                           fsr1l	equ	0xFE1
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           plusw2	equ	0xFDB
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _keepAliveSignalLed *****************
  7872 ;; Defined at:
  7873 ;;		line 35 in file "LedsApp.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         0       0       0       0       0       0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0
  7889 ;;      Temps:          1       0       0       0       0       0       0
  7890 ;;      Totals:         1       0       0       0       0       0       0
  7891 ;;Total ram usage:        1 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    4
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_main
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text32
  7902  00407C                     __ptext32:
  7903                           	opt stack 0
  7904  00407C                     _keepAliveSignalLed:
  7905                           	opt stack 26
  7906                           
  7907                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;incstack = 0
  7911  00407C  B08B               	btfsc	3979,0,c	;volatile
  7912  00407E  D003               	goto	u5700
  7913  004080  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7914  004082  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7915  004084  D001               	goto	u5718
  7916  004086                     u5700:
  7917  004086  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7918  004088                     u5718:
  7919  004088  508B               	movf	3979,w,c	;volatile
  7920  00408A  1818               	xorwf	??_keepAliveSignalLed,w,c
  7921  00408C  0BFE               	andlw	-2
  7922  00408E  1818               	xorwf	??_keepAliveSignalLed,w,c
  7923  004090  6E8B               	movwf	3979,c	;volatile
  7924  004092  0012               	return		;funcret
  7925  004094                     __end_of_keepAliveSignalLed:
  7926                           	opt stack 0
  7927                           tosu	equ	0xFFF
  7928                           tosh	equ	0xFFE
  7929                           tosl	equ	0xFFD
  7930                           pclath	equ	0xFFA
  7931                           tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           postinc0	equ	0xFEE
  7938                           plusw0	equ	0xFEB
  7939                           wreg	equ	0xFE8
  7940                           indf1	equ	0xFE7
  7941                           postdec1	equ	0xFE5
  7942                           fsr1h	equ	0xFE2
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           plusw2	equ	0xFDB
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function _SetMcuSystem *****************
  7953 ;; Defined at:
  7954 ;;		line 11 in file "SystemSettings.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;		None
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;		None
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2, status,0, cstack
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7968 ;;      Params:         0       0       0       0       0       0       0
  7969 ;;      Locals:         0       0       0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0
  7971 ;;      Totals:         0       0       0       0       0       0       0
  7972 ;;Total ram usage:        0 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    7
  7975 ;; This function calls:
  7976 ;;		_SYSTEM_Initialize
  7977 ;; This function is called by:
  7978 ;;		_main
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text33
  7983  004178                     __ptext33:
  7984                           	opt stack 0
  7985  004178                     _SetMcuSystem:
  7986                           	opt stack 23
  7987                           
  7988                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7989                           
  7990                           ;incstack = 0
  7991  004178  EC31  F020         	call	_SYSTEM_Initialize	;wreg free
  7992                           
  7993                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7994  00417C  8EF2               	bsf	intcon,7,c	;volatile
  7995                           
  7996                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7997  00417E  8CF2               	bsf	intcon,6,c	;volatile
  7998  004180  0012               	return		;funcret
  7999  004182                     __end_of_SetMcuSystem:
  8000                           	opt stack 0
  8001                           tosu	equ	0xFFF
  8002                           tosh	equ	0xFFE
  8003                           tosl	equ	0xFFD
  8004                           pclath	equ	0xFFA
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           intcon	equ	0xFF2
  8012                           postinc0	equ	0xFEE
  8013                           plusw0	equ	0xFEB
  8014                           wreg	equ	0xFE8
  8015                           indf1	equ	0xFE7
  8016                           postdec1	equ	0xFE5
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           plusw2	equ	0xFDB
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function _SYSTEM_Initialize *****************
  8028 ;; Defined at:
  8029 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      void 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8043 ;;      Params:         0       0       0       0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0
  8046 ;;      Totals:         0       0       0       0       0       0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    6
  8050 ;; This function calls:
  8051 ;;		_ADC_Initialize
  8052 ;;		_EUSART1_Initialize
  8053 ;;		_INTERRUPT_Initialize
  8054 ;;		_OSCILLATOR_Initialize
  8055 ;;		_PIN_MANAGER_Initialize
  8056 ;;		_TMR0_Initialize
  8057 ;; This function is called by:
  8058 ;;		_SetMcuSystem
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text34
  8063  004062                     __ptext34:
  8064                           	opt stack 0
  8065  004062                     _SYSTEM_Initialize:
  8066                           	opt stack 23
  8067                           
  8068                           ;mcc.c: 114: INTERRUPT_Initialize();
  8069                           
  8070                           ;incstack = 0
  8071  004062  ECD8  F020         	call	_INTERRUPT_Initialize	;wreg free
  8072                           
  8073                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8074  004066  EC73  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  8075                           
  8076                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8077  00406A  EC96  F020         	call	_OSCILLATOR_Initialize	;wreg free
  8078                           
  8079                           ;mcc.c: 117: TMR0_Initialize();
  8080  00406E  EC89  F01E         	call	_TMR0_Initialize	;wreg free
  8081                           
  8082                           ;mcc.c: 118: ADC_Initialize();
  8083  004072  EC4A  F020         	call	_ADC_Initialize	;wreg free
  8084                           
  8085                           ;mcc.c: 119: EUSART1_Initialize();
  8086  004076  EC03  F01E         	call	_EUSART1_Initialize	;wreg free
  8087  00407A  0012               	return		;funcret
  8088  00407C                     __end_of_SYSTEM_Initialize:
  8089                           	opt stack 0
  8090                           tosu	equ	0xFFF
  8091                           tosh	equ	0xFFE
  8092                           tosl	equ	0xFFD
  8093                           pclath	equ	0xFFA
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           postinc0	equ	0xFEE
  8102                           plusw0	equ	0xFEB
  8103                           wreg	equ	0xFE8
  8104                           indf1	equ	0xFE7
  8105                           postdec1	equ	0xFE5
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           plusw2	equ	0xFDB
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function _TMR0_Initialize *****************
  8117 ;; Defined at:
  8118 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;		None
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;		None
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg, status,2, status,0, cstack
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8132 ;;      Params:         0       0       0       0       0       0       0
  8133 ;;      Locals:         0       0       0       0       0       0       0
  8134 ;;      Temps:          2       0       0       0       0       0       0
  8135 ;;      Totals:         2       0       0       0       0       0       0
  8136 ;;Total ram usage:        2 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    5
  8139 ;; This function calls:
  8140 ;;		_TMR0_SetInterruptHandler
  8141 ;; This function is called by:
  8142 ;;		_SYSTEM_Initialize
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text35
  8147  003D12                     __ptext35:
  8148                           	opt stack 0
  8149  003D12                     _TMR0_Initialize:
  8150                           	opt stack 23
  8151                           
  8152                           ;tmr0.c: 71: TMR0H = 0xF8;
  8153                           
  8154                           ;incstack = 0
  8155  003D12  0EF8               	movlw	248
  8156  003D14  6ED7               	movwf	4055,c	;volatile
  8157                           
  8158                           ;tmr0.c: 74: TMR0L = 0x2F;
  8159  003D16  0E2F               	movlw	47
  8160  003D18  6ED6               	movwf	4054,c	;volatile
  8161                           
  8162                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8163  003D1A  50D6               	movf	4054,w,c	;volatile
  8164  003D1C  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8165  003D20  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8166  003D22  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8167  003D26  6A1A               	clrf	??_TMR0_Initialize,c
  8168  003D28  101A               	iorwf	??_TMR0_Initialize,w,c
  8169  003D2A  6E45               	movwf	_timer0ReloadVal,c	;volatile
  8170  003D2C  501B               	movf	??_TMR0_Initialize+1,w,c
  8171  003D2E  6E46               	movwf	_timer0ReloadVal+1,c	;volatile
  8172                           
  8173                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8174  003D30  94F2               	bcf	intcon,2,c	;volatile
  8175                           
  8176                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8177  003D32  8AF2               	bsf	intcon,5,c	;volatile
  8178                           
  8179                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8180  003D34  0E00               	movlw	0
  8181  003D36  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8182  003D38  0E00               	movlw	0
  8183  003D3A  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8184  003D3C  ECC1  F020         	call	_TMR0_SetInterruptHandler	;wreg free
  8185                           
  8186                           ;tmr0.c: 90: T0CON = 0x90;
  8187  003D40  0E90               	movlw	144
  8188  003D42  6ED5               	movwf	4053,c	;volatile
  8189  003D44  0012               	return		;funcret
  8190  003D46                     __end_of_TMR0_Initialize:
  8191                           	opt stack 0
  8192                           tosu	equ	0xFFF
  8193                           tosh	equ	0xFFE
  8194                           tosl	equ	0xFFD
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           intcon	equ	0xFF2
  8203                           postinc0	equ	0xFEE
  8204                           plusw0	equ	0xFEB
  8205                           wreg	equ	0xFE8
  8206                           indf1	equ	0xFE7
  8207                           postdec1	equ	0xFE5
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function _TMR0_SetInterruptHandler *****************
  8219 ;; Defined at:
  8220 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8223 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  1    wreg      void 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2, status,0
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8235 ;;      Params:         2       0       0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0
  8238 ;;      Totals:         2       0       0       0       0       0       0
  8239 ;;Total ram usage:        2 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    4
  8242 ;; This function calls:
  8243 ;;		Nothing
  8244 ;; This function is called by:
  8245 ;;		_TMR0_Initialize
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text36
  8250  004182                     __ptext36:
  8251                           	opt stack 0
  8252  004182                     _TMR0_SetInterruptHandler:
  8253                           	opt stack 23
  8254                           
  8255                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8256                           
  8257                           ;incstack = 0
  8258  004182  C018  F1DD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8259  004186  C019  F1DE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8260  00418A  0012               	return		;funcret
  8261  00418C                     __end_of_TMR0_SetInterruptHandler:
  8262                           	opt stack 0
  8263                           tosu	equ	0xFFF
  8264                           tosh	equ	0xFFE
  8265                           tosl	equ	0xFFD
  8266                           pclath	equ	0xFFA
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           postinc0	equ	0xFEE
  8275                           plusw0	equ	0xFEB
  8276                           wreg	equ	0xFE8
  8277                           indf1	equ	0xFE7
  8278                           postdec1	equ	0xFE5
  8279                           fsr1h	equ	0xFE2
  8280                           fsr1l	equ	0xFE1
  8281                           indf2	equ	0xFDF
  8282                           postinc2	equ	0xFDE
  8283                           postdec2	equ	0xFDD
  8284                           plusw2	equ	0xFDB
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8
  8288                           
  8289 ;; *************** function _PIN_MANAGER_Initialize *****************
  8290 ;; Defined at:
  8291 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;		None
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;		None
  8296 ;; Return value:  Size  Location     Type
  8297 ;;                  1    wreg      void 
  8298 ;; Registers used:
  8299 ;;		wreg, status,2, status,0, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8305 ;;      Params:         0       0       0       0       0       0       0
  8306 ;;      Locals:         0       0       0       0       0       0       0
  8307 ;;      Temps:          0       0       0       0       0       0       0
  8308 ;;      Totals:         0       0       0       0       0       0       0
  8309 ;;Total ram usage:        0 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    5
  8312 ;; This function calls:
  8313 ;;		_IOCB4_SetInterruptHandler
  8314 ;;		_IOCB5_SetInterruptHandler
  8315 ;; This function is called by:
  8316 ;;		_SYSTEM_Initialize
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text37
  8321  0034E6                     __ptext37:
  8322                           	opt stack 0
  8323  0034E6                     _PIN_MANAGER_Initialize:
  8324                           	opt stack 23
  8325                           
  8326                           ;pin_manager.c: 60: LATE = 0x00;
  8327                           
  8328                           ;incstack = 0
  8329  0034E6  0E00               	movlw	0
  8330  0034E8  6E8D               	movwf	3981,c	;volatile
  8331                           
  8332                           ;pin_manager.c: 61: LATD = 0x00;
  8333  0034EA  0E00               	movlw	0
  8334  0034EC  6E8C               	movwf	3980,c	;volatile
  8335                           
  8336                           ;pin_manager.c: 62: LATA = 0x06;
  8337  0034EE  0E06               	movlw	6
  8338  0034F0  6E89               	movwf	3977,c	;volatile
  8339                           
  8340                           ;pin_manager.c: 63: LATB = 0x00;
  8341  0034F2  0E00               	movlw	0
  8342  0034F4  6E8A               	movwf	3978,c	;volatile
  8343                           
  8344                           ;pin_manager.c: 64: LATC = 0x00;
  8345  0034F6  0E00               	movlw	0
  8346  0034F8  6E8B               	movwf	3979,c	;volatile
  8347                           
  8348                           ;pin_manager.c: 69: TRISE = 0x07;
  8349  0034FA  0E07               	movlw	7
  8350  0034FC  6E96               	movwf	3990,c	;volatile
  8351                           
  8352                           ;pin_manager.c: 70: TRISA = 0xE1;
  8353  0034FE  0EE1               	movlw	225
  8354  003500  6E92               	movwf	3986,c	;volatile
  8355                           
  8356                           ;pin_manager.c: 71: TRISB = 0xEF;
  8357  003502  0EEF               	movlw	239
  8358  003504  6E93               	movwf	3987,c	;volatile
  8359                           
  8360                           ;pin_manager.c: 72: TRISC = 0x80;
  8361  003506  0E80               	movlw	128
  8362  003508  6E94               	movwf	3988,c	;volatile
  8363                           
  8364                           ;pin_manager.c: 73: TRISD = 0xF2;
  8365  00350A  0EF2               	movlw	242
  8366  00350C  6E95               	movwf	3989,c	;volatile
  8367                           
  8368                           ;pin_manager.c: 78: ANSELC = 0x34;
  8369  00350E  0E34               	movlw	52
  8370  003510  010F               	movlb	15	; () banked
  8371  003512  6F3A               	movwf	58,b	;volatile
  8372                           
  8373                           ;pin_manager.c: 79: ANSELB = 0x3E;
  8374  003514  0E3E               	movlw	62
  8375  003516  6F39               	movwf	57,b	;volatile
  8376                           
  8377                           ;pin_manager.c: 80: ANSELD = 0xE4;
  8378  003518  0EE4               	movlw	228
  8379  00351A  6F3B               	movwf	59,b	;volatile
  8380                           
  8381                           ;pin_manager.c: 81: ANSELE = 0x07;
  8382  00351C  0E07               	movlw	7
  8383  00351E  6F3C               	movwf	60,b	;volatile
  8384                           
  8385                           ;pin_manager.c: 82: ANSELA = 0x2F;
  8386  003520  0E2F               	movlw	47
  8387  003522  6F38               	movwf	56,b	;volatile
  8388                           
  8389                           ;pin_manager.c: 87: WPUB = 0xC3;
  8390  003524  0EC3               	movlw	195
  8391  003526  6E61               	movwf	3937,c	;volatile
  8392                           
  8393                           ; BSR set to: 15
  8394                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  8395  003528  9EF1               	bcf	intcon2,7,c	;volatile
  8396                           
  8397                           ; BSR set to: 15
  8398                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  8399  00352A  8862               	bsf	3938,4,c	;volatile
  8400                           
  8401                           ; BSR set to: 15
  8402                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  8403  00352C  8A62               	bsf	3938,5,c	;volatile
  8404                           
  8405                           ; BSR set to: 15
  8406                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  8407  00352E  0EC0               	movlw	low _IOCB4_DefaultInterruptHandler
  8408  003530  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  8409  003532  0E41               	movlw	high _IOCB4_DefaultInterruptHandler
  8410  003534  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  8411  003536  ECCB  F020         	call	_IOCB4_SetInterruptHandler	;wreg free
  8412                           
  8413                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  8414  00353A  0EBE               	movlw	low _IOCB5_DefaultInterruptHandler
  8415  00353C  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  8416  00353E  0E41               	movlw	high _IOCB5_DefaultInterruptHandler
  8417  003540  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  8418  003542  ECC6  F020         	call	_IOCB5_SetInterruptHandler	;wreg free
  8419                           
  8420                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  8421  003546  86F2               	bsf	intcon,3,c	;volatile
  8422  003548  0012               	return		;funcret
  8423  00354A                     __end_of_PIN_MANAGER_Initialize:
  8424                           	opt stack 0
  8425                           tosu	equ	0xFFF
  8426                           tosh	equ	0xFFE
  8427                           tosl	equ	0xFFD
  8428                           pclath	equ	0xFFA
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon	equ	0xFF2
  8436                           intcon2	equ	0xFF1
  8437                           postinc0	equ	0xFEE
  8438                           plusw0	equ	0xFEB
  8439                           wreg	equ	0xFE8
  8440                           indf1	equ	0xFE7
  8441                           postdec1	equ	0xFE5
  8442                           fsr1h	equ	0xFE2
  8443                           fsr1l	equ	0xFE1
  8444                           indf2	equ	0xFDF
  8445                           postinc2	equ	0xFDE
  8446                           postdec2	equ	0xFDD
  8447                           plusw2	equ	0xFDB
  8448                           fsr2h	equ	0xFDA
  8449                           fsr2l	equ	0xFD9
  8450                           status	equ	0xFD8
  8451                           
  8452 ;; *************** function _IOCB5_SetInterruptHandler *****************
  8453 ;; Defined at:
  8454 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8457 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;		None
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      void 
  8462 ;; Registers used:
  8463 ;;		wreg, status,2, status,0
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8469 ;;      Params:         2       0       0       0       0       0       0
  8470 ;;      Locals:         0       0       0       0       0       0       0
  8471 ;;      Temps:          0       0       0       0       0       0       0
  8472 ;;      Totals:         2       0       0       0       0       0       0
  8473 ;;Total ram usage:        2 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    4
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_PIN_MANAGER_Initialize
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           	psect	text38
  8484  00418C                     __ptext38:
  8485                           	opt stack 0
  8486  00418C                     _IOCB5_SetInterruptHandler:
  8487                           	opt stack 23
  8488                           
  8489                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  8490                           
  8491                           ;incstack = 0
  8492  00418C  C018  F1DF         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  8493  004190  C019  F1E0         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  8494  004194  0012               	return		;funcret
  8495  004196                     __end_of_IOCB5_SetInterruptHandler:
  8496                           	opt stack 0
  8497                           tosu	equ	0xFFF
  8498                           tosh	equ	0xFFE
  8499                           tosl	equ	0xFFD
  8500                           pclath	equ	0xFFA
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           intcon2	equ	0xFF1
  8509                           postinc0	equ	0xFEE
  8510                           plusw0	equ	0xFEB
  8511                           wreg	equ	0xFE8
  8512                           indf1	equ	0xFE7
  8513                           postdec1	equ	0xFE5
  8514                           fsr1h	equ	0xFE2
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           plusw2	equ	0xFDB
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _IOCB4_SetInterruptHandler *****************
  8525 ;; Defined at:
  8526 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8529 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;		None
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      void 
  8534 ;; Registers used:
  8535 ;;		wreg, status,2, status,0
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8541 ;;      Params:         2       0       0       0       0       0       0
  8542 ;;      Locals:         0       0       0       0       0       0       0
  8543 ;;      Temps:          0       0       0       0       0       0       0
  8544 ;;      Totals:         2       0       0       0       0       0       0
  8545 ;;Total ram usage:        2 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    4
  8548 ;; This function calls:
  8549 ;;		Nothing
  8550 ;; This function is called by:
  8551 ;;		_PIN_MANAGER_Initialize
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text39
  8556  004196                     __ptext39:
  8557                           	opt stack 0
  8558  004196                     _IOCB4_SetInterruptHandler:
  8559                           	opt stack 23
  8560                           
  8561                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  8562                           
  8563                           ;incstack = 0
  8564  004196  C018  F1E1         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  8565  00419A  C019  F1E2         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  8566  00419E  0012               	return		;funcret
  8567  0041A0                     __end_of_IOCB4_SetInterruptHandler:
  8568                           	opt stack 0
  8569                           tosu	equ	0xFFF
  8570                           tosh	equ	0xFFE
  8571                           tosl	equ	0xFFD
  8572                           pclath	equ	0xFFA
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           intcon2	equ	0xFF1
  8581                           postinc0	equ	0xFEE
  8582                           plusw0	equ	0xFEB
  8583                           wreg	equ	0xFE8
  8584                           indf1	equ	0xFE7
  8585                           postdec1	equ	0xFE5
  8586                           fsr1h	equ	0xFE2
  8587                           fsr1l	equ	0xFE1
  8588                           indf2	equ	0xFDF
  8589                           postinc2	equ	0xFDE
  8590                           postdec2	equ	0xFDD
  8591                           plusw2	equ	0xFDB
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           
  8596 ;; *************** function _OSCILLATOR_Initialize *****************
  8597 ;; Defined at:
  8598 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;		None
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;		None
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      void 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8612 ;;      Params:         0       0       0       0       0       0       0
  8613 ;;      Locals:         0       0       0       0       0       0       0
  8614 ;;      Temps:          0       0       0       0       0       0       0
  8615 ;;      Totals:         0       0       0       0       0       0       0
  8616 ;;Total ram usage:        0 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    4
  8619 ;; This function calls:
  8620 ;;		Nothing
  8621 ;; This function is called by:
  8622 ;;		_SYSTEM_Initialize
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           	psect	text40
  8627  00412C                     __ptext40:
  8628                           	opt stack 0
  8629  00412C                     _OSCILLATOR_Initialize:
  8630                           	opt stack 24
  8631                           
  8632                           ;mcc.c: 125: OSCCON = 0x60;
  8633                           
  8634                           ;incstack = 0
  8635  00412C  0E60               	movlw	96
  8636  00412E  6ED3               	movwf	4051,c	;volatile
  8637                           
  8638                           ;mcc.c: 127: OSCCON2 = 0x04;
  8639  004130  0E04               	movlw	4
  8640  004132  6ED2               	movwf	4050,c	;volatile
  8641                           
  8642                           ;mcc.c: 129: OSCTUNE = 0x80;
  8643  004134  0E80               	movlw	128
  8644  004136  6E9B               	movwf	3995,c	;volatile
  8645  004138  0012               	return		;funcret
  8646  00413A                     __end_of_OSCILLATOR_Initialize:
  8647                           	opt stack 0
  8648                           tosu	equ	0xFFF
  8649                           tosh	equ	0xFFE
  8650                           tosl	equ	0xFFD
  8651                           pclath	equ	0xFFA
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           intcon2	equ	0xFF1
  8660                           postinc0	equ	0xFEE
  8661                           plusw0	equ	0xFEB
  8662                           wreg	equ	0xFE8
  8663                           indf1	equ	0xFE7
  8664                           postdec1	equ	0xFE5
  8665                           fsr1h	equ	0xFE2
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           plusw2	equ	0xFDB
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function _INTERRUPT_Initialize *****************
  8676 ;; Defined at:
  8677 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;		None
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      void 
  8684 ;; Registers used:
  8685 ;;		None
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8691 ;;      Params:         0       0       0       0       0       0       0
  8692 ;;      Locals:         0       0       0       0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0
  8694 ;;      Totals:         0       0       0       0       0       0       0
  8695 ;;Total ram usage:        0 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    4
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_SYSTEM_Initialize
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text41
  8706  0041B0                     __ptext41:
  8707                           	opt stack 0
  8708  0041B0                     _INTERRUPT_Initialize:
  8709                           	opt stack 24
  8710                           
  8711                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8712                           
  8713                           ;incstack = 0
  8714  0041B0  9ED0               	bcf	4048,7,c	;volatile
  8715  0041B2  0012               	return		;funcret
  8716  0041B4                     __end_of_INTERRUPT_Initialize:
  8717                           	opt stack 0
  8718                           tosu	equ	0xFFF
  8719                           tosh	equ	0xFFE
  8720                           tosl	equ	0xFFD
  8721                           pclath	equ	0xFFA
  8722                           tblptru	equ	0xFF8
  8723                           tblptrh	equ	0xFF7
  8724                           tblptrl	equ	0xFF6
  8725                           tablat	equ	0xFF5
  8726                           prodh	equ	0xFF4
  8727                           prodl	equ	0xFF3
  8728                           intcon	equ	0xFF2
  8729                           intcon2	equ	0xFF1
  8730                           postinc0	equ	0xFEE
  8731                           plusw0	equ	0xFEB
  8732                           wreg	equ	0xFE8
  8733                           indf1	equ	0xFE7
  8734                           postdec1	equ	0xFE5
  8735                           fsr1h	equ	0xFE2
  8736                           fsr1l	equ	0xFE1
  8737                           indf2	equ	0xFDF
  8738                           postinc2	equ	0xFDE
  8739                           postdec2	equ	0xFDD
  8740                           plusw2	equ	0xFDB
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _EUSART1_Initialize *****************
  8746 ;; Defined at:
  8747 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      void 
  8754 ;; Registers used:
  8755 ;;		wreg, status,2
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8761 ;;      Params:         0       0       0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0       0       0
  8764 ;;      Totals:         0       0       0       0       0       0       0
  8765 ;;Total ram usage:        0 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    4
  8768 ;; This function calls:
  8769 ;;		Nothing
  8770 ;; This function is called by:
  8771 ;;		_SYSTEM_Initialize
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text42
  8776  003C06                     __ptext42:
  8777                           	opt stack 0
  8778  003C06                     _EUSART1_Initialize:
  8779                           	opt stack 24
  8780                           
  8781                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8782                           
  8783                           ;incstack = 0
  8784  003C06  9A9D               	bcf	3997,5,c	;volatile
  8785                           
  8786                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8787  003C08  989D               	bcf	3997,4,c	;volatile
  8788                           
  8789                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8790  003C0A  0E08               	movlw	8
  8791  003C0C  6EB8               	movwf	4024,c	;volatile
  8792                           
  8793                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8794  003C0E  0E90               	movlw	144
  8795  003C10  6EAB               	movwf	4011,c	;volatile
  8796                           
  8797                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8798  003C12  0E24               	movlw	36
  8799  003C14  6EAC               	movwf	4012,c	;volatile
  8800                           
  8801                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8802  003C16  0E10               	movlw	16
  8803  003C18  6EAF               	movwf	4015,c	;volatile
  8804                           
  8805                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8806  003C1A  0E00               	movlw	0
  8807  003C1C  6EB0               	movwf	4016,c	;volatile
  8808                           
  8809                           ;eusart1.c: 98: eusart1TxHead = 0;
  8810  003C1E  0E00               	movlw	0
  8811  003C20  6E36               	movwf	_eusart1TxHead,c	;volatile
  8812                           
  8813                           ;eusart1.c: 99: eusart1TxTail = 0;
  8814  003C22  0E00               	movlw	0
  8815  003C24  6E35               	movwf	_eusart1TxTail,c	;volatile
  8816                           
  8817                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8818  003C26  0E46               	movlw	70
  8819  003C28  6E47               	movwf	_eusart1TxBufferRemaining,c	;volatile
  8820                           
  8821                           ;eusart1.c: 102: eusart1RxHead = 0;
  8822  003C2A  0E00               	movlw	0
  8823  003C2C  6E34               	movwf	_eusart1RxHead,c	;volatile
  8824                           
  8825                           ;eusart1.c: 103: eusart1RxTail = 0;
  8826  003C2E  0E00               	movlw	0
  8827  003C30  6E33               	movwf	_eusart1RxTail,c	;volatile
  8828                           
  8829                           ;eusart1.c: 104: eusart1RxCount = 0;
  8830  003C32  0E00               	movlw	0
  8831  003C34  0100               	movlb	0	; () banked
  8832  003C36  6FF8               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8836  003C38  8A9D               	bsf	3997,5,c	;volatile
  8837                           
  8838                           ; BSR set to: 0
  8839  003C3A  0012               	return		;funcret
  8840  003C3C                     __end_of_EUSART1_Initialize:
  8841                           	opt stack 0
  8842                           tosu	equ	0xFFF
  8843                           tosh	equ	0xFFE
  8844                           tosl	equ	0xFFD
  8845                           pclath	equ	0xFFA
  8846                           tblptru	equ	0xFF8
  8847                           tblptrh	equ	0xFF7
  8848                           tblptrl	equ	0xFF6
  8849                           tablat	equ	0xFF5
  8850                           prodh	equ	0xFF4
  8851                           prodl	equ	0xFF3
  8852                           intcon	equ	0xFF2
  8853                           intcon2	equ	0xFF1
  8854                           postinc0	equ	0xFEE
  8855                           plusw0	equ	0xFEB
  8856                           wreg	equ	0xFE8
  8857                           indf1	equ	0xFE7
  8858                           postdec1	equ	0xFE5
  8859                           fsr1h	equ	0xFE2
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           plusw2	equ	0xFDB
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function _ADC_Initialize *****************
  8870 ;; Defined at:
  8871 ;;		line 58 in file "mcc_generated_files/adc.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;		None
  8876 ;; Return value:  Size  Location     Type
  8877 ;;                  1    wreg      void 
  8878 ;; Registers used:
  8879 ;;		wreg, status,2
  8880 ;; Tracked objects:
  8881 ;;		On entry : 0/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8885 ;;      Params:         0       0       0       0       0       0       0
  8886 ;;      Locals:         0       0       0       0       0       0       0
  8887 ;;      Temps:          0       0       0       0       0       0       0
  8888 ;;      Totals:         0       0       0       0       0       0       0
  8889 ;;Total ram usage:        0 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:    4
  8892 ;; This function calls:
  8893 ;;		Nothing
  8894 ;; This function is called by:
  8895 ;;		_SYSTEM_Initialize
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           	psect	text43
  8900  004094                     __ptext43:
  8901                           	opt stack 0
  8902  004094                     _ADC_Initialize:
  8903                           	opt stack 24
  8904                           
  8905                           ;adc.c: 63: ADCON0 = 0x05;
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;incstack = 0
  8909  004094  0E05               	movlw	5
  8910  004096  6EC2               	movwf	4034,c	;volatile
  8911                           
  8912                           ;adc.c: 66: ADCON1 = 0x00;
  8913  004098  0E00               	movlw	0
  8914  00409A  6EC1               	movwf	4033,c	;volatile
  8915                           
  8916                           ;adc.c: 69: ADCON2 = 0x87;
  8917  00409C  0E87               	movlw	135
  8918  00409E  6EC0               	movwf	4032,c	;volatile
  8919                           
  8920                           ;adc.c: 72: ADRESL = 0x00;
  8921  0040A0  0E00               	movlw	0
  8922  0040A2  6EC3               	movwf	4035,c	;volatile
  8923                           
  8924                           ;adc.c: 75: ADRESH = 0x00;
  8925  0040A4  0E00               	movlw	0
  8926  0040A6  6EC4               	movwf	4036,c	;volatile
  8927  0040A8  0012               	return		;funcret
  8928  0040AA                     __end_of_ADC_Initialize:
  8929                           	opt stack 0
  8930                           tosu	equ	0xFFF
  8931                           tosh	equ	0xFFE
  8932                           tosl	equ	0xFFD
  8933                           pclath	equ	0xFFA
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           postinc0	equ	0xFEE
  8943                           plusw0	equ	0xFEB
  8944                           wreg	equ	0xFE8
  8945                           indf1	equ	0xFE7
  8946                           postdec1	equ	0xFE5
  8947                           fsr1h	equ	0xFE2
  8948                           fsr1l	equ	0xFE1
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _SetMcuRunTime *****************
  8958 ;; Defined at:
  8959 ;;		line 57 in file "SystemStatus.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8973 ;;      Params:         0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    5
  8980 ;; This function calls:
  8981 ;;		___llmod
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text44
  8988  0039A6                     __ptext44:
  8989                           	opt stack 0
  8990  0039A6                     _SetMcuRunTime:
  8991                           	opt stack 25
  8992                           
  8993                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  8994                           
  8995                           ;incstack = 0
  8996  0039A6  0E01               	movlw	1
  8997  0039A8  0100               	movlb	0	; () banked
  8998  0039AA  27E1               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8999  0039AC  0E00               	movlw	0
  9000  0039AE  23E2               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9001  0039B0  23E3               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9002  0039B2  23E4               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9006  0039B4  C0E1  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9007  0039B8  C0E2  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9008  0039BC  C0E3  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9009  0039C0  C0E4  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9010  0039C4  0E80               	movlw	128
  9011  0039C6  6E1C               	movwf	___llmod@divisor,c
  9012  0039C8  0E43               	movlw	67
  9013  0039CA  6E1D               	movwf	___llmod@divisor+1,c
  9014  0039CC  0E00               	movlw	0
  9015  0039CE  6E1E               	movwf	___llmod@divisor+2,c
  9016  0039D0  0E00               	movlw	0
  9017  0039D2  6E1F               	movwf	___llmod@divisor+3,c
  9018  0039D4  EC40  F01A         	call	___llmod	;wreg free
  9019  0039D8  C018  F0E1         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9020  0039DC  C019  F0E2         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9021  0039E0  C01A  F0E3         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9022  0039E4  C01B  F0E4         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9023  0039E8  0012               	return		;funcret
  9024  0039EA                     __end_of_SetMcuRunTime:
  9025                           	opt stack 0
  9026                           tosu	equ	0xFFF
  9027                           tosh	equ	0xFFE
  9028                           tosl	equ	0xFFD
  9029                           pclath	equ	0xFFA
  9030                           tblptru	equ	0xFF8
  9031                           tblptrh	equ	0xFF7
  9032                           tblptrl	equ	0xFF6
  9033                           tablat	equ	0xFF5
  9034                           prodh	equ	0xFF4
  9035                           prodl	equ	0xFF3
  9036                           intcon	equ	0xFF2
  9037                           intcon2	equ	0xFF1
  9038                           postinc0	equ	0xFEE
  9039                           plusw0	equ	0xFEB
  9040                           wreg	equ	0xFE8
  9041                           indf1	equ	0xFE7
  9042                           postdec1	equ	0xFE5
  9043                           fsr1h	equ	0xFE2
  9044                           fsr1l	equ	0xFE1
  9045                           indf2	equ	0xFDF
  9046                           postinc2	equ	0xFDE
  9047                           postdec2	equ	0xFDD
  9048                           plusw2	equ	0xFDB
  9049                           fsr2h	equ	0xFDA
  9050                           fsr2l	equ	0xFD9
  9051                           status	equ	0xFD8
  9052                           
  9053 ;; *************** function ___llmod *****************
  9054 ;; Defined at:
  9055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  dividend        4   23[COMRAM] unsigned long 
  9058 ;;  divisor         4   27[COMRAM] unsigned long 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  counter         1   31[COMRAM] unsigned char 
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  4   23[COMRAM] unsigned long 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9070 ;;      Params:         8       0       0       0       0       0       0
  9071 ;;      Locals:         1       0       0       0       0       0       0
  9072 ;;      Temps:          0       0       0       0       0       0       0
  9073 ;;      Totals:         9       0       0       0       0       0       0
  9074 ;;Total ram usage:        9 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:    4
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_SetMcuRunTime
  9081 ;;		_GetMcuRunTime
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text45
  9086  003480                     __ptext45:
  9087                           	opt stack 0
  9088  003480                     ___llmod:
  9089                           	opt stack 23
  9090                           
  9091                           ;incstack = 0
  9092  003480  501C               	movf	___llmod@divisor,w,c
  9093  003482  101D               	iorwf	___llmod@divisor+1,w,c
  9094  003484  101E               	iorwf	___llmod@divisor+2,w,c
  9095  003486  101F               	iorwf	___llmod@divisor+3,w,c
  9096  003488  B4D8               	btfsc	status,2,c
  9097  00348A  D024               	goto	l1951
  9098  00348C  0E01               	movlw	1
  9099  00348E  6E20               	movwf	___llmod@counter,c
  9100  003490  D006               	goto	l1946
  9101  003492  90D8               	bcf	status,0,c
  9102  003494  361C               	rlcf	___llmod@divisor,f,c
  9103  003496  361D               	rlcf	___llmod@divisor+1,f,c
  9104  003498  361E               	rlcf	___llmod@divisor+2,f,c
  9105  00349A  361F               	rlcf	___llmod@divisor+3,f,c
  9106  00349C  2A20               	incf	___llmod@counter,f,c
  9107  00349E                     l1946:
  9108  00349E  AE1F               	btfss	___llmod@divisor+3,7,c
  9109  0034A0  D7F8               	goto	l1947
  9110  0034A2                     u8160:
  9111  0034A2  501C               	movf	___llmod@divisor,w,c
  9112  0034A4  5C18               	subwf	___llmod@dividend,w,c
  9113  0034A6  501D               	movf	___llmod@divisor+1,w,c
  9114  0034A8  5819               	subwfb	___llmod@dividend+1,w,c
  9115  0034AA  501E               	movf	___llmod@divisor+2,w,c
  9116  0034AC  581A               	subwfb	___llmod@dividend+2,w,c
  9117  0034AE  501F               	movf	___llmod@divisor+3,w,c
  9118  0034B0  581B               	subwfb	___llmod@dividend+3,w,c
  9119  0034B2  A0D8               	btfss	status,0,c
  9120  0034B4  D008               	goto	l1950
  9121  0034B6  501C               	movf	___llmod@divisor,w,c
  9122  0034B8  5E18               	subwf	___llmod@dividend,f,c
  9123  0034BA  501D               	movf	___llmod@divisor+1,w,c
  9124  0034BC  5A19               	subwfb	___llmod@dividend+1,f,c
  9125  0034BE  501E               	movf	___llmod@divisor+2,w,c
  9126  0034C0  5A1A               	subwfb	___llmod@dividend+2,f,c
  9127  0034C2  501F               	movf	___llmod@divisor+3,w,c
  9128  0034C4  5A1B               	subwfb	___llmod@dividend+3,f,c
  9129  0034C6                     l1950:
  9130  0034C6  90D8               	bcf	status,0,c
  9131  0034C8  321F               	rrcf	___llmod@divisor+3,f,c
  9132  0034CA  321E               	rrcf	___llmod@divisor+2,f,c
  9133  0034CC  321D               	rrcf	___llmod@divisor+1,f,c
  9134  0034CE  321C               	rrcf	___llmod@divisor,f,c
  9135  0034D0  2E20               	decfsz	___llmod@counter,f,c
  9136  0034D2  D7E7               	goto	u8160
  9137  0034D4                     l1951:
  9138  0034D4  C018  F018         	movff	___llmod@dividend,?___llmod
  9139  0034D8  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9140  0034DC  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9141  0034E0  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9142  0034E4  0012               	return		;funcret
  9143  0034E6                     __end_of___llmod:
  9144                           	opt stack 0
  9145                           tosu	equ	0xFFF
  9146                           tosh	equ	0xFFE
  9147                           tosl	equ	0xFFD
  9148                           pclath	equ	0xFFA
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           intcon2	equ	0xFF1
  9157                           postinc0	equ	0xFEE
  9158                           plusw0	equ	0xFEB
  9159                           wreg	equ	0xFE8
  9160                           indf1	equ	0xFE7
  9161                           postdec1	equ	0xFE5
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _SendSystemStartAck *****************
  9173 ;; Defined at:
  9174 ;;		line 158 in file "SystemCommon.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9188 ;;      Params:         0       0       0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0
  9191 ;;      Totals:         0       0       0       0       0       0       0
  9192 ;;Total ram usage:        0 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    7
  9195 ;; This function calls:
  9196 ;;		_SendAckMessage
  9197 ;; This function is called by:
  9198 ;;		_main
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text46
  9203  004162                     __ptext46:
  9204                           	opt stack 0
  9205  004162                     _SendSystemStartAck:
  9206                           	opt stack 23
  9207                           
  9208                           ;SystemCommon.c: 160: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9209                           
  9210                           ;incstack = 0
  9211  004162  0E10               	movlw	16
  9212  004164  6E24               	movwf	SendAckMessage@inRequest,c
  9213  004166  0E01               	movlw	1
  9214  004168  EC61  F01C         	call	_SendAckMessage
  9215  00416C  0012               	return		;funcret
  9216  00416E                     __end_of_SendSystemStartAck:
  9217                           	opt stack 0
  9218                           tosu	equ	0xFFF
  9219                           tosh	equ	0xFFE
  9220                           tosl	equ	0xFFD
  9221                           pclath	equ	0xFFA
  9222                           tblptru	equ	0xFF8
  9223                           tblptrh	equ	0xFF7
  9224                           tblptrl	equ	0xFF6
  9225                           tablat	equ	0xFF5
  9226                           prodh	equ	0xFF4
  9227                           prodl	equ	0xFF3
  9228                           intcon	equ	0xFF2
  9229                           intcon2	equ	0xFF1
  9230                           postinc0	equ	0xFEE
  9231                           plusw0	equ	0xFEB
  9232                           wreg	equ	0xFE8
  9233                           indf1	equ	0xFE7
  9234                           postdec1	equ	0xFE5
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           plusw2	equ	0xFDB
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function _SendAckMessage *****************
  9246 ;; Defined at:
  9247 ;;		line 171 in file "EusartApp.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  inGroup         1    wreg     enum E7193
  9250 ;;  inRequest       1   35[COMRAM] enum E7201
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  inGroup         1   36[COMRAM] enum E7193
  9253 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9263 ;;      Params:         1       0       0       0       0       0       0
  9264 ;;      Locals:         7       0       0       0       0       0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0
  9266 ;;      Totals:         8       0       0       0       0       0       0
  9267 ;;Total ram usage:        8 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    6
  9270 ;; This function calls:
  9271 ;;		_WriteUartMessage
  9272 ;;		_ZeroArray
  9273 ;;		_crc8
  9274 ;; This function is called by:
  9275 ;;		_testLeds
  9276 ;;		_SetChannelMode
  9277 ;;		_FlashEreaseMem
  9278 ;;		_DacSetValue
  9279 ;;		_UpdateSynthFreq
  9280 ;;		_SetSynthOper
  9281 ;;		_ResetMcu
  9282 ;;		_SendSystemStartAck
  9283 ;;		_keepAliveSignalUart
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text47
  9288  0038C2                     __ptext47:
  9289                           	opt stack 0
  9290  0038C2                     _SendAckMessage:
  9291                           	opt stack 21
  9292                           
  9293                           ;incstack = 0
  9294                           ;SendAckMessage@inGroup stored from wreg
  9295  0038C2  6E25               	movwf	SendAckMessage@inGroup,c
  9296                           
  9297                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9298                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9299  0038C4  0E26               	movlw	low SendAckMessage@TxMsg
  9300  0038C6  6E20               	movwf	ZeroArray@array,c
  9301  0038C8  0E00               	movlw	high SendAckMessage@TxMsg
  9302  0038CA  6E21               	movwf	ZeroArray@array+1,c
  9303  0038CC  0E00               	movlw	0
  9304  0038CE  6E23               	movwf	ZeroArray@size+1,c
  9305  0038D0  0E06               	movlw	6
  9306  0038D2  6E22               	movwf	ZeroArray@size,c
  9307  0038D4  EC06  F020         	call	_ZeroArray	;wreg free
  9308                           
  9309                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9310  0038D8  0E24               	movlw	36
  9311  0038DA  6E26               	movwf	SendAckMessage@TxMsg,c
  9312                           
  9313                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9314  0038DC  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9315                           
  9316                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9317  0038E0  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9318                           
  9319                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9320  0038E4  0E00               	movlw	0
  9321  0038E6  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9322                           
  9323                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  9324  0038E8  0E26               	movlw	low SendAckMessage@TxMsg
  9325  0038EA  6E18               	movwf	crc8@dataArray,c
  9326  0038EC  0E00               	movlw	high SendAckMessage@TxMsg
  9327  0038EE  6E19               	movwf	crc8@dataArray+1,c
  9328  0038F0  0E00               	movlw	0
  9329  0038F2  6E1B               	movwf	crc8@dataSize+1,c
  9330  0038F4  0E05               	movlw	5
  9331  0038F6  6E1A               	movwf	crc8@dataSize,c
  9332  0038F8  EC8A  F01C         	call	_crc8	;wreg free
  9333  0038FC  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  9334                           
  9335                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  9336  0038FE  0E26               	movlw	low SendAckMessage@TxMsg
  9337  003900  6E19               	movwf	WriteUartMessage@dataBuf,c
  9338  003902  0E00               	movlw	high SendAckMessage@TxMsg
  9339  003904  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  9340  003906  0E00               	movlw	0
  9341  003908  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  9342  00390A  0E06               	movlw	6
  9343  00390C  6E1B               	movwf	WriteUartMessage@dataSize,c
  9344  00390E  EC1E  F01E         	call	_WriteUartMessage	;wreg free
  9345  003912  0012               	return		;funcret
  9346  003914                     __end_of_SendAckMessage:
  9347                           	opt stack 0
  9348                           tosu	equ	0xFFF
  9349                           tosh	equ	0xFFE
  9350                           tosl	equ	0xFFD
  9351                           pclath	equ	0xFFA
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           intcon2	equ	0xFF1
  9360                           postinc0	equ	0xFEE
  9361                           plusw0	equ	0xFEB
  9362                           wreg	equ	0xFE8
  9363                           indf1	equ	0xFE7
  9364                           postdec1	equ	0xFE5
  9365                           fsr1h	equ	0xFE2
  9366                           fsr1l	equ	0xFE1
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           postdec2	equ	0xFDD
  9370                           plusw2	equ	0xFDB
  9371                           fsr2h	equ	0xFDA
  9372                           fsr2l	equ	0xFD9
  9373                           status	equ	0xFD8
  9374                           
  9375 ;; *************** function _crc8 *****************
  9376 ;; Defined at:
  9377 ;;		line 13 in file "SystemCommon.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9380 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
  9381 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9382 ;;  dataSize        2   25[COMRAM] int 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  i               2   30[COMRAM] int 
  9385 ;;  crc             2   28[COMRAM] int 
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  1    wreg      unsigned char 
  9388 ;; Registers used:
  9389 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9395 ;;      Params:         4       0       0       0       0       0       0
  9396 ;;      Locals:         4       0       0       0       0       0       0
  9397 ;;      Temps:          1       0       0       0       0       0       0
  9398 ;;      Totals:         9       0       0       0       0       0       0
  9399 ;;Total ram usage:        9 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    4
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_readUartMessage
  9406 ;;		_SendAckMessage
  9407 ;;		_FlashReadUart
  9408 ;;		_FlashReadCondition
  9409 ;;		_DacReadValue
  9410 ;;		_SynthReadData
  9411 ;;		_GetMcuFwVersion
  9412 ;;		_GetMcuRunTime
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text48
  9417  003914                     __ptext48:
  9418                           	opt stack 0
  9419  003914                     _crc8:
  9420                           	opt stack 25
  9421                           
  9422                           ;SystemCommon.c: 15: int crc = 0;
  9423                           
  9424                           ;incstack = 0
  9425  003914  0E00               	movlw	0
  9426  003916  6E1E               	movwf	crc8@crc+1,c
  9427  003918  0E00               	movlw	0
  9428  00391A  6E1D               	movwf	crc8@crc,c
  9429                           
  9430                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  9431  00391C  0E00               	movlw	0
  9432  00391E  6E20               	movwf	crc8@i+1,c
  9433  003920  0E00               	movlw	0
  9434  003922  6E1F               	movwf	crc8@i,c
  9435  003924  D00E               	goto	l1381
  9436  003926                     
  9437                           ;SystemCommon.c: 17: {
  9438                           ;SystemCommon.c: 18: crc += dataArray[i];
  9439  003926  501F               	movf	crc8@i,w,c
  9440  003928  2418               	addwf	crc8@dataArray,w,c
  9441  00392A  6ED9               	movwf	fsr2l,c
  9442  00392C  5020               	movf	crc8@i+1,w,c
  9443  00392E  2019               	addwfc	crc8@dataArray+1,w,c
  9444  003930  6EDA               	movwf	fsr2h,c
  9445  003932  50DF               	movf	indf2,w,c
  9446  003934  6E1C               	movwf	??_crc8& (0+255),c
  9447  003936  501C               	movf	??_crc8,w,c
  9448  003938  261D               	addwf	crc8@crc,f,c
  9449  00393A  0E00               	movlw	0
  9450  00393C  221E               	addwfc	crc8@crc+1,f,c
  9451  00393E  4A1F               	infsnz	crc8@i,f,c
  9452  003940  2A20               	incf	crc8@i+1,f,c
  9453  003942                     l1381:
  9454  003942  501A               	movf	crc8@dataSize,w,c
  9455  003944  5C1F               	subwf	crc8@i,w,c
  9456  003946  5020               	movf	crc8@i+1,w,c
  9457  003948  0A80               	xorlw	128
  9458  00394A  6E1C               	movwf	??_crc8& (0+255),c
  9459  00394C  501B               	movf	crc8@dataSize+1,w,c
  9460  00394E  0A80               	xorlw	128
  9461  003950  581C               	subwfb	??_crc8& (0+255),w,c
  9462  003952  A0D8               	btfss	status,0,c
  9463  003954  D7E8               	goto	l1382
  9464                           
  9465                           ;SystemCommon.c: 19: }
  9466                           ;SystemCommon.c: 20: crc &= 0xff;
  9467  003956  0EFF               	movlw	255
  9468  003958  161D               	andwf	crc8@crc,f,c
  9469  00395A  0E00               	movlw	0
  9470  00395C  161E               	andwf	crc8@crc+1,f,c
  9471                           
  9472                           ;SystemCommon.c: 21: return crc;
  9473  00395E  501D               	movf	crc8@crc,w,c
  9474  003960  0012               	return	
  9475  003962                     __end_of_crc8:
  9476                           	opt stack 0
  9477                           tosu	equ	0xFFF
  9478                           tosh	equ	0xFFE
  9479                           tosl	equ	0xFFD
  9480                           pclath	equ	0xFFA
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           intcon2	equ	0xFF1
  9489                           postinc0	equ	0xFEE
  9490                           plusw0	equ	0xFEB
  9491                           wreg	equ	0xFE8
  9492                           indf1	equ	0xFE7
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           plusw2	equ	0xFDB
  9500                           fsr2h	equ	0xFDA
  9501                           fsr2l	equ	0xFD9
  9502                           status	equ	0xFD8
  9503                           
  9504 ;; *************** function _ZeroArray *****************
  9505 ;; Defined at:
  9506 ;;		line 24 in file "SystemCommon.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  array           2   31[COMRAM] PTR unsigned char 
  9509 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
  9510 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
  9511 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
  9512 ;;  size            2   33[COMRAM] int 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9524 ;;      Params:         4       0       0       0       0       0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0
  9527 ;;      Totals:         4       0       0       0       0       0       0
  9528 ;;Total ram usage:        4 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    5
  9531 ;; This function calls:
  9532 ;;		_memset
  9533 ;; This function is called by:
  9534 ;;		_readUartMessage
  9535 ;;		_InitRxMessageParams
  9536 ;;		_SendAckMessage
  9537 ;;		_FlashReadUart
  9538 ;;		_FlashEreaseMem
  9539 ;;		_FlashReadCondition
  9540 ;;		_DacReadValue
  9541 ;;		_SynthReadData
  9542 ;;		_GetIntFromUartData
  9543 ;;		_GetMcuFwVersion
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text49
  9548  00400C                     __ptext49:
  9549                           	opt stack 0
  9550  00400C                     _ZeroArray:
  9551                           	opt stack 24
  9552                           
  9553                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9554                           
  9555                           ;incstack = 0
  9556  00400C  C020  F018         	movff	ZeroArray@array,memset@p1
  9557  004010  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9558  004014  0E00               	movlw	0
  9559  004016  6E1B               	movwf	memset@c+1,c
  9560  004018  0E00               	movlw	0
  9561  00401A  6E1A               	movwf	memset@c,c
  9562  00401C  C022  F01C         	movff	ZeroArray@size,memset@n
  9563  004020  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9564  004024  EC1C  F01F         	call	_memset	;wreg free
  9565  004028  0012               	return		;funcret
  9566  00402A                     __end_of_ZeroArray:
  9567                           	opt stack 0
  9568                           tosu	equ	0xFFF
  9569                           tosh	equ	0xFFE
  9570                           tosl	equ	0xFFD
  9571                           pclath	equ	0xFFA
  9572                           tblptru	equ	0xFF8
  9573                           tblptrh	equ	0xFF7
  9574                           tblptrl	equ	0xFF6
  9575                           tablat	equ	0xFF5
  9576                           prodh	equ	0xFF4
  9577                           prodl	equ	0xFF3
  9578                           intcon	equ	0xFF2
  9579                           intcon2	equ	0xFF1
  9580                           postinc0	equ	0xFEE
  9581                           plusw0	equ	0xFEB
  9582                           wreg	equ	0xFE8
  9583                           indf1	equ	0xFE7
  9584                           postdec1	equ	0xFE5
  9585                           fsr1h	equ	0xFE2
  9586                           fsr1l	equ	0xFE1
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           plusw2	equ	0xFDB
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _WriteUartMessage *****************
  9596 ;; Defined at:
  9597 ;;		line 158 in file "EusartApp.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9600 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
  9601 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9602 ;;  dataSize        2   26[COMRAM] int 
  9603 ;; Auto vars:     Size  Location     Type
  9604 ;;  idx             2   29[COMRAM] int 
  9605 ;; Return value:  Size  Location     Type
  9606 ;;                  1    wreg      void 
  9607 ;; Registers used:
  9608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9614 ;;      Params:         4       0       0       0       0       0       0
  9615 ;;      Locals:         2       0       0       0       0       0       0
  9616 ;;      Temps:          1       0       0       0       0       0       0
  9617 ;;      Totals:         7       0       0       0       0       0       0
  9618 ;;Total ram usage:        7 bytes
  9619 ;; Hardware stack levels used:    1
  9620 ;; Hardware stack levels required when called:    5
  9621 ;; This function calls:
  9622 ;;		_EUSART1_Write
  9623 ;; This function is called by:
  9624 ;;		_SendAckMessage
  9625 ;;		_FlashReadUart
  9626 ;;		_FlashReadCondition
  9627 ;;		_DacReadValue
  9628 ;;		_SynthReadData
  9629 ;;		_GetMcuFwVersion
  9630 ;;		_GetMcuRunTime
  9631 ;; This function uses a non-reentrant model
  9632 ;;
  9633                           
  9634                           	psect	text50
  9635  003C3C                     __ptext50:
  9636                           	opt stack 0
  9637  003C3C                     _WriteUartMessage:
  9638                           	opt stack 21
  9639                           
  9640                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9641                           
  9642                           ;incstack = 0
  9643  003C3C  0E00               	movlw	0
  9644  003C3E  6E1F               	movwf	WriteUartMessage@idx+1,c
  9645  003C40  0E00               	movlw	0
  9646  003C42  6E1E               	movwf	WriteUartMessage@idx,c
  9647  003C44  D00B               	goto	l234
  9648  003C46                     
  9649                           ;EusartApp.c: 161: {
  9650                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9651  003C46  501E               	movf	WriteUartMessage@idx,w,c
  9652  003C48  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9653  003C4A  6ED9               	movwf	fsr2l,c
  9654  003C4C  501F               	movf	WriteUartMessage@idx+1,w,c
  9655  003C4E  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9656  003C50  6EDA               	movwf	fsr2h,c
  9657  003C52  50DF               	movf	indf2,w,c
  9658  003C54  EC92  F01D         	call	_EUSART1_Write
  9659  003C58  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9660  003C5A  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9661  003C5C                     l234:
  9662  003C5C  501B               	movf	WriteUartMessage@dataSize,w,c
  9663  003C5E  5C1E               	subwf	WriteUartMessage@idx,w,c
  9664  003C60  501F               	movf	WriteUartMessage@idx+1,w,c
  9665  003C62  0A80               	xorlw	128
  9666  003C64  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9667  003C66  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9668  003C68  0A80               	xorlw	128
  9669  003C6A  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9670  003C6C  B0D8               	btfsc	status,0,c
  9671  003C6E  0012               	return	
  9672  003C70  D7EA               	goto	l235
  9673  003C72                     __end_of_WriteUartMessage:
  9674                           	opt stack 0
  9675                           tosu	equ	0xFFF
  9676                           tosh	equ	0xFFE
  9677                           tosl	equ	0xFFD
  9678                           pclath	equ	0xFFA
  9679                           tblptru	equ	0xFF8
  9680                           tblptrh	equ	0xFF7
  9681                           tblptrl	equ	0xFF6
  9682                           tablat	equ	0xFF5
  9683                           prodh	equ	0xFF4
  9684                           prodl	equ	0xFF3
  9685                           intcon	equ	0xFF2
  9686                           intcon2	equ	0xFF1
  9687                           postinc0	equ	0xFEE
  9688                           plusw0	equ	0xFEB
  9689                           wreg	equ	0xFE8
  9690                           indf1	equ	0xFE7
  9691                           postdec1	equ	0xFE5
  9692                           fsr1h	equ	0xFE2
  9693                           fsr1l	equ	0xFE1
  9694                           indf2	equ	0xFDF
  9695                           postinc2	equ	0xFDE
  9696                           postdec2	equ	0xFDD
  9697                           plusw2	equ	0xFDB
  9698                           fsr2h	equ	0xFDA
  9699                           fsr2l	equ	0xFD9
  9700                           status	equ	0xFD8
  9701                           
  9702 ;; *************** function _EUSART1_Write *****************
  9703 ;; Defined at:
  9704 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  txData          1    wreg     unsigned char 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  txData          1   23[COMRAM] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9718 ;;      Params:         0       0       0       0       0       0       0
  9719 ;;      Locals:         1       0       0       0       0       0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0
  9721 ;;      Totals:         1       0       0       0       0       0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    4
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_WriteUartMessage
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text51
  9733  003B24                     __ptext51:
  9734                           	opt stack 0
  9735  003B24                     _EUSART1_Write:
  9736                           	opt stack 21
  9737                           
  9738                           ;incstack = 0
  9739                           ;EUSART1_Write@txData stored from wreg
  9740  003B24  6E18               	movwf	EUSART1_Write@txData,c
  9741  003B26                     
  9742                           ;eusart1.c: 160: {
  9743                           
  9744                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9745  003B26  5047               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  9746  003B28  B4D8               	btfsc	status,2,c
  9747  003B2A  D7FD               	goto	l7548
  9748                           
  9749                           ;eusart1.c: 161: }
  9750                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9751  003B2C  B89D               	btfsc	3997,4,c	;volatile
  9752  003B2E  D003               	goto	l900
  9753                           
  9754                           ;eusart1.c: 164: {
  9755                           ;eusart1.c: 165: TXREG1 = txData;
  9756  003B30  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9757                           
  9758                           ;eusart1.c: 166: }
  9759  003B34  D012               	goto	l901
  9760  003B36                     l900:
  9761                           
  9762                           ;eusart1.c: 167: else
  9763                           ;eusart1.c: 168: {
  9764                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9765  003B36  989D               	bcf	3997,4,c	;volatile
  9766                           
  9767                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9768  003B38  5036               	movf	_eusart1TxHead,w,c	;volatile
  9769  003B3A  0D01               	mullw	1
  9770  003B3C  0E59               	movlw	low _eusart1TxBuffer
  9771  003B3E  24F3               	addwf	prodl,w,c
  9772  003B40  6ED9               	movwf	fsr2l,c
  9773  003B42  0E02               	movlw	high _eusart1TxBuffer
  9774  003B44  20F4               	addwfc	prodh,w,c
  9775  003B46  6EDA               	movwf	fsr2h,c
  9776  003B48  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9777  003B4C  2A36               	incf	_eusart1TxHead,f,c	;volatile
  9778                           
  9779                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9780  003B4E  0E45               	movlw	69
  9781  003B50  6436               	cpfsgt	_eusart1TxHead,c	;volatile
  9782  003B52  D002               	goto	l902
  9783                           
  9784                           ;eusart1.c: 172: {
  9785                           ;eusart1.c: 173: eusart1TxHead = 0;
  9786  003B54  0E00               	movlw	0
  9787  003B56  6E36               	movwf	_eusart1TxHead,c	;volatile
  9788  003B58                     l902:
  9789                           
  9790                           ;eusart1.c: 174: }
  9791                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9792  003B58  0647               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  9793  003B5A                     l901:
  9794                           
  9795                           ;eusart1.c: 176: }
  9796                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9797  003B5A  889D               	bsf	3997,4,c	;volatile
  9798  003B5C  0012               	return		;funcret
  9799  003B5E                     __end_of_EUSART1_Write:
  9800                           	opt stack 0
  9801                           tosu	equ	0xFFF
  9802                           tosh	equ	0xFFE
  9803                           tosl	equ	0xFFD
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           postinc0	equ	0xFEE
  9814                           plusw0	equ	0xFEB
  9815                           wreg	equ	0xFE8
  9816                           indf1	equ	0xFE7
  9817                           postdec1	equ	0xFE5
  9818                           fsr1h	equ	0xFE2
  9819                           fsr1l	equ	0xFE1
  9820                           indf2	equ	0xFDF
  9821                           postinc2	equ	0xFDE
  9822                           postdec2	equ	0xFDD
  9823                           plusw2	equ	0xFDB
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _InitSystemApplicationManagers *****************
  9829 ;; Defined at:
  9830 ;;		line 33 in file "SystemSettings.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;		None
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;                  1    wreg      void 
  9837 ;; Registers used:
  9838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9844 ;;      Params:         0       0       0       0       0       0       0
  9845 ;;      Locals:         0       0       0       0       0       0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0
  9847 ;;      Totals:         0       0       0       0       0       0       0
  9848 ;;Total ram usage:        0 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:   12
  9851 ;; This function calls:
  9852 ;;		_ClearMcuRunTime
  9853 ;;		_DacInit
  9854 ;;		_InitAdcApplicationMgr
  9855 ;;		_PLLInitialize
  9856 ;;		_TMR0_StartTimer
  9857 ;; This function is called by:
  9858 ;;		_main
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text52
  9863  0040AA                     __ptext52:
  9864                           	opt stack 0
  9865  0040AA                     _InitSystemApplicationManagers:
  9866                           	opt stack 18
  9867                           
  9868                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9869                           
  9870                           ;incstack = 0
  9871  0040AA  ECD5  F020         	call	_InitAdcApplicationMgr	;wreg free
  9872                           
  9873                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9874  0040AE  ECDA  F020         	call	_TMR0_StartTimer	;wreg free
  9875                           
  9876                           ;SystemSettings.c: 42: PLLInitialize();
  9877  0040B2  EC37  F01D         	call	_PLLInitialize	;wreg free
  9878                           
  9879                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9880  0040B6  EC74  F020         	call	_ClearMcuRunTime	;wreg free
  9881                           
  9882                           ;SystemSettings.c: 48: DacInit();
  9883  0040BA  EC9C  F013         	call	_DacInit	;wreg free
  9884  0040BE  0012               	return		;funcret
  9885  0040C0                     __end_of_InitSystemApplicationManagers:
  9886                           	opt stack 0
  9887                           tosu	equ	0xFFF
  9888                           tosh	equ	0xFFE
  9889                           tosl	equ	0xFFD
  9890                           pclath	equ	0xFFA
  9891                           tblptru	equ	0xFF8
  9892                           tblptrh	equ	0xFF7
  9893                           tblptrl	equ	0xFF6
  9894                           tablat	equ	0xFF5
  9895                           prodh	equ	0xFF4
  9896                           prodl	equ	0xFF3
  9897                           intcon	equ	0xFF2
  9898                           intcon2	equ	0xFF1
  9899                           postinc0	equ	0xFEE
  9900                           plusw0	equ	0xFEB
  9901                           wreg	equ	0xFE8
  9902                           indf1	equ	0xFE7
  9903                           postdec1	equ	0xFE5
  9904                           fsr1h	equ	0xFE2
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           plusw2	equ	0xFDB
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _TMR0_StartTimer *****************
  9915 ;; Defined at:
  9916 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		None
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9930 ;;      Params:         0       0       0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0
  9933 ;;      Totals:         0       0       0       0       0       0       0
  9934 ;;Total ram usage:        0 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    4
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		_InitSystemApplicationManagers
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text53
  9945  0041B4                     __ptext53:
  9946                           	opt stack 0
  9947  0041B4                     _TMR0_StartTimer:
  9948                           	opt stack 25
  9949                           
  9950                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9951                           
  9952                           ;incstack = 0
  9953  0041B4  8ED5               	bsf	4053,7,c	;volatile
  9954  0041B6  0012               	return		;funcret
  9955  0041B8                     __end_of_TMR0_StartTimer:
  9956                           	opt stack 0
  9957                           tosu	equ	0xFFF
  9958                           tosh	equ	0xFFE
  9959                           tosl	equ	0xFFD
  9960                           pclath	equ	0xFFA
  9961                           tblptru	equ	0xFF8
  9962                           tblptrh	equ	0xFF7
  9963                           tblptrl	equ	0xFF6
  9964                           tablat	equ	0xFF5
  9965                           prodh	equ	0xFF4
  9966                           prodl	equ	0xFF3
  9967                           intcon	equ	0xFF2
  9968                           intcon2	equ	0xFF1
  9969                           postinc0	equ	0xFEE
  9970                           plusw0	equ	0xFEB
  9971                           wreg	equ	0xFE8
  9972                           indf1	equ	0xFE7
  9973                           postdec1	equ	0xFE5
  9974                           fsr1h	equ	0xFE2
  9975                           fsr1l	equ	0xFE1
  9976                           indf2	equ	0xFDF
  9977                           postinc2	equ	0xFDE
  9978                           postdec2	equ	0xFDD
  9979                           plusw2	equ	0xFDB
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _PLLInitialize *****************
  9985 ;; Defined at:
  9986 ;;		line 28 in file "SyntApp.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10000 ;;      Params:         0       0       0       0       0       0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0       0
 10003 ;;      Totals:         0       0       0       0       0       0       0
 10004 ;;Total ram usage:        0 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:   11
 10007 ;; This function calls:
 10008 ;;		_FillArray
 10009 ;;		_InitSynth
 10010 ;; This function is called by:
 10011 ;;		_InitSystemApplicationManagers
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text54
 10016  003A6E                     __ptext54:
 10017                           	opt stack 0
 10018  003A6E                     _PLLInitialize:
 10019                           	opt stack 18
 10020                           
 10021                           ;SyntApp.c: 30: InitSynth(SYNTH_TX);
 10022                           
 10023                           ;incstack = 0
 10024  003A6E  0E00               	movlw	0
 10025  003A70  EC4B  F005         	call	_InitSynth
 10026                           
 10027                           ;SyntApp.c: 31: InitSynth(SYNTH_RX);
 10028  003A74  0E01               	movlw	1
 10029  003A76  EC4B  F005         	call	_InitSynth
 10030                           
 10031                           ;SyntApp.c: 34: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0xFF);
 10032  003A7A  0EA0               	movlw	low _synthLdRxArray
 10033  003A7C  6E20               	movwf	FillArray@array,c
 10034  003A7E  0E01               	movlw	high _synthLdRxArray
 10035  003A80  6E21               	movwf	FillArray@array+1,c
 10036  003A82  0E00               	movlw	0
 10037  003A84  6E23               	movwf	FillArray@size+1,c
 10038  003A86  0E0C               	movlw	12
 10039  003A88  6E22               	movwf	FillArray@size,c
 10040  003A8A  0EFF               	movlw	255
 10041  003A8C  6E24               	movwf	FillArray@value,c
 10042  003A8E  EC23  F020         	call	_FillArray	;wreg free
 10043                           
 10044                           ;SyntApp.c: 35: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0xFF);
 10045  003A92  0E94               	movlw	low _synthLdTxArray
 10046  003A94  6E20               	movwf	FillArray@array,c
 10047  003A96  0E01               	movlw	high _synthLdTxArray
 10048  003A98  6E21               	movwf	FillArray@array+1,c
 10049  003A9A  0E00               	movlw	0
 10050  003A9C  6E23               	movwf	FillArray@size+1,c
 10051  003A9E  0E0C               	movlw	12
 10052  003AA0  6E22               	movwf	FillArray@size,c
 10053  003AA2  0EFF               	movlw	255
 10054  003AA4  6E24               	movwf	FillArray@value,c
 10055  003AA6  EC23  F020         	call	_FillArray	;wreg free
 10056  003AAA  0012               	return		;funcret
 10057  003AAC                     __end_of_PLLInitialize:
 10058                           	opt stack 0
 10059                           tosu	equ	0xFFF
 10060                           tosh	equ	0xFFE
 10061                           tosl	equ	0xFFD
 10062                           pclath	equ	0xFFA
 10063                           tblptru	equ	0xFF8
 10064                           tblptrh	equ	0xFF7
 10065                           tblptrl	equ	0xFF6
 10066                           tablat	equ	0xFF5
 10067                           prodh	equ	0xFF4
 10068                           prodl	equ	0xFF3
 10069                           intcon	equ	0xFF2
 10070                           intcon2	equ	0xFF1
 10071                           postinc0	equ	0xFEE
 10072                           plusw0	equ	0xFEB
 10073                           wreg	equ	0xFE8
 10074                           indf1	equ	0xFE7
 10075                           postdec1	equ	0xFE5
 10076                           fsr1h	equ	0xFE2
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           plusw2	equ	0xFDB
 10082                           fsr2h	equ	0xFDA
 10083                           fsr2l	equ	0xFD9
 10084                           status	equ	0xFD8
 10085                           
 10086 ;; *************** function _InitSynth *****************
 10087 ;; Defined at:
 10088 ;;		line 38 in file "SyntApp.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;  cType           1    wreg     enum E1
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  cType           1  108[BANK0 ] enum E1
 10093 ;;  idx             1  109[BANK0 ] unsigned char 
 10094 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10095 ;;  regNum          1  110[BANK0 ] unsigned char 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10105 ;;      Params:         0       0       0       0       0       0       0
 10106 ;;      Locals:         0       7       0       0       0       0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0
 10108 ;;      Totals:         0       7       0       0       0       0       0
 10109 ;;Total ram usage:        7 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:   10
 10112 ;; This function calls:
 10113 ;;		_ReadIntFromEeprom
 10114 ;;		_SWSPI_send_word
 10115 ;;		_StoreIntInEeprom
 10116 ;;		_SwSpi_Set_CE_Pin
 10117 ;; This function is called by:
 10118 ;;		_PLLInitialize
 10119 ;;		_SetSynthOper
 10120 ;;		_SynthLdDetect
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           	psect	text55
 10125  000A96                     __ptext55:
 10126                           	opt stack 0
 10127  000A96                     _InitSynth:
 10128                           	opt stack 17
 10129                           
 10130                           ;incstack = 0
 10131                           ;InitSynth@cType stored from wreg
 10132  000A96  0100               	movlb	0	; () banked
 10133  000A98  6FCC               	movwf	InitSynth@cType& (0+255),b
 10134                           
 10135                           ;SyntApp.c: 40: SwSpi_Set_CE_Pin(cType, 1);
 10136  000A9A  0E01               	movlw	1
 10137  000A9C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10138  000A9E  0100               	movlb	0	; () banked
 10139  000AA0  51CC               	movf	InitSynth@cType& (0+255),w,b
 10140  000AA2  EC56  F01D         	call	_SwSpi_Set_CE_Pin
 10141                           
 10142                           ;SyntApp.c: 42: uint8_t regNum = 0;
 10143  000AA6  0E00               	movlw	0
 10144  000AA8  0100               	movlb	0	; () banked
 10145  000AAA  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;SyntApp.c: 43: uint32_t EepromVal = 0x0;
 10149  000AAC  0E00               	movlw	0
 10150  000AAE  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10151  000AB0  0E00               	movlw	0
 10152  000AB2  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10153  000AB4  0E00               	movlw	0
 10154  000AB6  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10155  000AB8  0E00               	movlw	0
 10156  000ABA  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;SyntApp.c: 46: for(uint8_t idx = 0; idx < 13; idx++)
 10160  000ABC  0E00               	movlw	0
 10161  000ABE  6FCD               	movwf	InitSynth@idx& (0+255),b
 10162  000AC0                     l7982:
 10163                           
 10164                           ; BSR set to: 0
 10165  000AC0  0E0C               	movlw	12
 10166  000AC2  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10167  000AC4  D001               	goto	l502
 10168  000AC6  0012               	return	
 10169  000AC8                     l502:
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;SyntApp.c: 47: {
 10173                           ;SyntApp.c: 48: regNum = 13 - idx - 1;
 10174                           
 10175                           ; BSR set to: 0
 10176  000AC8  29CD               	incf	InitSynth@idx& (0+255),w,b
 10177  000ACA  0800               	sublw	0
 10178  000ACC  0F0D               	addlw	13
 10179  000ACE  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;SyntApp.c: 49: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10183  000AD0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10184  000AD2  B4D8               	btfsc	status,2,c
 10185  000AD4  D013               	goto	u8050
 10186                           
 10187                           ; BSR set to: 0
 10188  000AD6  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10189  000AD8  B4D8               	btfsc	status,2,c
 10190  000ADA  D010               	goto	u8050
 10191                           
 10192                           ; BSR set to: 0
 10193  000ADC  0E02               	movlw	2
 10194  000ADE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10195  000AE0  B4D8               	btfsc	status,2,c
 10196  000AE2  D00C               	goto	u8050
 10197                           
 10198                           ; BSR set to: 0
 10199  000AE4  0E04               	movlw	4
 10200  000AE6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10201  000AE8  B4D8               	btfsc	status,2,c
 10202  000AEA  D008               	goto	u8050
 10203                           
 10204                           ; BSR set to: 0
 10205  000AEC  0E06               	movlw	6
 10206  000AEE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10207  000AF0  B4D8               	btfsc	status,2,c
 10208  000AF2  D004               	goto	u8050
 10209                           
 10210                           ; BSR set to: 0
 10211  000AF4  0E0A               	movlw	10
 10212  000AF6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10213  000AF8  A4D8               	btfss	status,2,c
 10214  000AFA  D0EB               	goto	l504
 10215  000AFC                     u8050:
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;SyntApp.c: 50: {
 10219                           ;SyntApp.c: 51: if(cType == SYNTH_TX)
 10220                           
 10221                           ; BSR set to: 0
 10222  000AFC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10223  000AFE  A4D8               	btfss	status,2,c
 10224  000B00  D071               	goto	l507
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;SyntApp.c: 52: {
 10228                           ;SyntApp.c: 53: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10229  000B02  0E00               	movlw	0
 10230  000B04  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10231  000B06  0E04               	movlw	4
 10232  000B08  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10233  000B0A  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10234  000B0C  0D01               	mullw	1
 10235  000B0E  0E35               	movlw	low _SYNTH_ADDRES
 10236  000B10  24F3               	addwf	prodl,w,c
 10237  000B12  6EF6               	movwf	tblptrl,c
 10238  000B14  0E06               	movlw	high _SYNTH_ADDRES
 10239  000B16  20F4               	addwfc	prodh,w,c
 10240  000B18  6EF7               	movwf	tblptrh,c
 10241  000B1A                     	if	0	;There are less than 3 active tblptr bytes
 10242  000B1A                     	endif
 10243  000B1A  0008               	tblrd		*
 10244  000B1C  50F5               	movf	tablat,w,c
 10245  000B1E  ECA9  F00E         	call	_ReadIntFromEeprom
 10246  000B22  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10247  000B26  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10248  000B2A  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10249  000B2E  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10250                           
 10251                           ;SyntApp.c: 54: if(EepromVal == 0xFFFFFFFF)
 10252  000B32  0100               	movlb	0	; () banked
 10253  000B34  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10254  000B36  E147               	bnz	l8010
 10255  000B38  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10256  000B3A  E145               	bnz	l8010
 10257  000B3C  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10258  000B3E  E143               	bnz	l8010
 10259  000B40  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10260  000B42  A4D8               	btfss	status,2,c
 10261  000B44  D040               	goto	l508
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;SyntApp.c: 55: {
 10265                           ;SyntApp.c: 56: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10266  000B46  51CD               	movf	InitSynth@idx& (0+255),w,b
 10267  000B48  0D04               	mullw	4
 10268  000B4A  0E01               	movlw	low _SYNTH_REGS
 10269  000B4C  24F3               	addwf	prodl,w,c
 10270  000B4E  6EF6               	movwf	tblptrl,c
 10271  000B50  0E06               	movlw	high _SYNTH_REGS
 10272  000B52  20F4               	addwfc	prodh,w,c
 10273  000B54  6EF7               	movwf	tblptrh,c
 10274  000B56                     	if	0	;There are less than 3 active tblptr bytes
 10275  000B56                     	endif
 10276  000B56  0009               	tblrd		*+
 10277  000B58  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10278  000B5C  0009               	tblrd		*+
 10279  000B5E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10280  000B62  0009               	tblrd		*+
 10281  000B64  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10282  000B68  000A               	tblrd		*-
 10283  000B6A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10284  000B6E  0E03               	movlw	3
 10285  000B70  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10286  000B72  51CC               	movf	InitSynth@cType& (0+255),w,b
 10287  000B74  EC12  F017         	call	_SWSPI_send_word
 10288                           
 10289                           ;SyntApp.c: 57: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10290  000B78  0100               	movlb	0	; () banked
 10291  000B7A  51CD               	movf	InitSynth@idx& (0+255),w,b
 10292  000B7C  0D04               	mullw	4
 10293  000B7E  0E01               	movlw	low _SYNTH_REGS
 10294  000B80  24F3               	addwf	prodl,w,c
 10295  000B82  6EF6               	movwf	tblptrl,c
 10296  000B84  0E06               	movlw	high _SYNTH_REGS
 10297  000B86  20F4               	addwfc	prodh,w,c
 10298  000B88  6EF7               	movwf	tblptrh,c
 10299  000B8A                     	if	0	;There are less than 3 active tblptr bytes
 10300  000B8A                     	endif
 10301  000B8A  0009               	tblrd		*+
 10302  000B8C  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10303  000B90  0009               	tblrd		*+
 10304  000B92  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10305  000B96  0009               	tblrd		*+
 10306  000B98  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10307  000B9C  000A               	tblrd		*-
 10308  000B9E  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10309  000BA2  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10310  000BA4  0D01               	mullw	1
 10311  000BA6  0E35               	movlw	low _SYNTH_ADDRES
 10312  000BA8  24F3               	addwf	prodl,w,c
 10313  000BAA  6EF6               	movwf	tblptrl,c
 10314  000BAC  0E06               	movlw	high _SYNTH_ADDRES
 10315  000BAE  20F4               	addwfc	prodh,w,c
 10316  000BB0  6EF7               	movwf	tblptrh,c
 10317  000BB2                     	if	0	;There are less than 3 active tblptr bytes
 10318  000BB2                     	endif
 10319  000BB2  0008               	tblrd		*
 10320  000BB4  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 10321  000BB8  0E00               	movlw	0
 10322  000BBA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10323  000BBC  0E04               	movlw	4
 10324  000BBE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10325  000BC0  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
 10326                           
 10327                           ;SyntApp.c: 58: }
 10328  000BC4  D0A0               	goto	l514
 10329  000BC6                     l508:
 10330  000BC6                     l8010:
 10331                           
 10332                           ;SyntApp.c: 59: else
 10333                           ;SyntApp.c: 60: {
 10334                           ;SyntApp.c: 61: SWSPI_send_word(cType, EepromVal,3);
 10335  000BC6  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10336  000BCA  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10337  000BCE  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10338  000BD2  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10339  000BD6  0E03               	movlw	3
 10340  000BD8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10341  000BDA  0100               	movlb	0	; () banked
 10342  000BDC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10343  000BDE  EC12  F017         	call	_SWSPI_send_word
 10344                           
 10345                           ;SyntApp.c: 62: }
 10346                           ;SyntApp.c: 63: }
 10347  000BE2  D091               	goto	l514
 10348  000BE4                     l507:
 10349                           
 10350                           ;SyntApp.c: 64: else if (cType == SYNTH_RX)
 10351  000BE4  0100               	movlb	0	; () banked
 10352  000BE6  05CC               	decf	InitSynth@cType& (0+255),w,b
 10353  000BE8  A4D8               	btfss	status,2,c
 10354  000BEA  D08D               	goto	l514
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;SyntApp.c: 65: {
 10358                           ;SyntApp.c: 66: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 10359  000BEC  0E00               	movlw	0
 10360  000BEE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10361  000BF0  0E04               	movlw	4
 10362  000BF2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10363  000BF4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10364  000BF6  0D01               	mullw	1
 10365  000BF8  0E35               	movlw	low _SYNTH_ADDRES
 10366  000BFA  24F3               	addwf	prodl,w,c
 10367  000BFC  6EF6               	movwf	tblptrl,c
 10368  000BFE  0E06               	movlw	high _SYNTH_ADDRES
 10369  000C00  20F4               	addwfc	prodh,w,c
 10370  000C02  6EF7               	movwf	tblptrh,c
 10371  000C04                     	if	0	;There are less than 3 active tblptr bytes
 10372  000C04                     	endif
 10373  000C04  0008               	tblrd		*
 10374  000C06  50F5               	movf	tablat,w,c
 10375  000C08  0920               	iorlw	32
 10376  000C0A  ECA9  F00E         	call	_ReadIntFromEeprom
 10377  000C0E  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10378  000C12  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10379  000C16  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10380  000C1A  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10381                           
 10382                           ;SyntApp.c: 67: if(EepromVal == 0xFFFFFFFF)
 10383  000C1E  0100               	movlb	0	; () banked
 10384  000C20  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10385  000C22  E148               	bnz	l8022
 10386  000C24  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10387  000C26  E146               	bnz	l8022
 10388  000C28  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10389  000C2A  E144               	bnz	l8022
 10390  000C2C  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10391  000C2E  A4D8               	btfss	status,2,c
 10392  000C30  D041               	goto	l512
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;SyntApp.c: 68: {
 10396                           ;SyntApp.c: 69: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10397  000C32  51CD               	movf	InitSynth@idx& (0+255),w,b
 10398  000C34  0D04               	mullw	4
 10399  000C36  0E01               	movlw	low _SYNTH_REGS
 10400  000C38  24F3               	addwf	prodl,w,c
 10401  000C3A  6EF6               	movwf	tblptrl,c
 10402  000C3C  0E06               	movlw	high _SYNTH_REGS
 10403  000C3E  20F4               	addwfc	prodh,w,c
 10404  000C40  6EF7               	movwf	tblptrh,c
 10405  000C42                     	if	0	;There are less than 3 active tblptr bytes
 10406  000C42                     	endif
 10407  000C42  0009               	tblrd		*+
 10408  000C44  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10409  000C48  0009               	tblrd		*+
 10410  000C4A  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10411  000C4E  0009               	tblrd		*+
 10412  000C50  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10413  000C54  000A               	tblrd		*-
 10414  000C56  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10415  000C5A  0E03               	movlw	3
 10416  000C5C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10417  000C5E  51CC               	movf	InitSynth@cType& (0+255),w,b
 10418  000C60  EC12  F017         	call	_SWSPI_send_word
 10419                           
 10420                           ;SyntApp.c: 70: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 10421  000C64  0100               	movlb	0	; () banked
 10422  000C66  51CD               	movf	InitSynth@idx& (0+255),w,b
 10423  000C68  0D04               	mullw	4
 10424  000C6A  0E01               	movlw	low _SYNTH_REGS
 10425  000C6C  24F3               	addwf	prodl,w,c
 10426  000C6E  6EF6               	movwf	tblptrl,c
 10427  000C70  0E06               	movlw	high _SYNTH_REGS
 10428  000C72  20F4               	addwfc	prodh,w,c
 10429  000C74  6EF7               	movwf	tblptrh,c
 10430  000C76                     	if	0	;There are less than 3 active tblptr bytes
 10431  000C76                     	endif
 10432  000C76  0009               	tblrd		*+
 10433  000C78  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10434  000C7C  0009               	tblrd		*+
 10435  000C7E  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10436  000C82  0009               	tblrd		*+
 10437  000C84  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10438  000C88  000A               	tblrd		*-
 10439  000C8A  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10440  000C8E  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10441  000C90  0D01               	mullw	1
 10442  000C92  0E35               	movlw	low _SYNTH_ADDRES
 10443  000C94  24F3               	addwf	prodl,w,c
 10444  000C96  6EF6               	movwf	tblptrl,c
 10445  000C98  0E06               	movlw	high _SYNTH_ADDRES
 10446  000C9A  20F4               	addwfc	prodh,w,c
 10447  000C9C  6EF7               	movwf	tblptrh,c
 10448  000C9E                     	if	0	;There are less than 3 active tblptr bytes
 10449  000C9E                     	endif
 10450  000C9E  0008               	tblrd		*
 10451  000CA0  50F5               	movf	tablat,w,c
 10452  000CA2  0920               	iorlw	32
 10453  000CA4  6E25               	movwf	StoreIntInEeprom@address,c
 10454  000CA6  0E00               	movlw	0
 10455  000CA8  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10456  000CAA  0E04               	movlw	4
 10457  000CAC  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10458  000CAE  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
 10459                           
 10460                           ;SyntApp.c: 71: }
 10461  000CB2  D029               	goto	l514
 10462  000CB4                     l512:
 10463  000CB4                     l8022:
 10464                           
 10465                           ;SyntApp.c: 72: else
 10466                           ;SyntApp.c: 73: {
 10467                           ;SyntApp.c: 74: SWSPI_send_word(cType, EepromVal,3);
 10468  000CB4  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10469  000CB8  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10470  000CBC  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10471  000CC0  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10472  000CC4  0E03               	movlw	3
 10473  000CC6  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10474  000CC8  0100               	movlb	0	; () banked
 10475  000CCA  51CC               	movf	InitSynth@cType& (0+255),w,b
 10476  000CCC  EC12  F017         	call	_SWSPI_send_word
 10477                           
 10478                           ;SyntApp.c: 75: }
 10479                           ;SyntApp.c: 76: }
 10480                           ;SyntApp.c: 79: }
 10481  000CD0  D01A               	goto	l514
 10482  000CD2                     l504:
 10483                           
 10484                           ;SyntApp.c: 80: else
 10485                           ;SyntApp.c: 81: {
 10486                           ;SyntApp.c: 82: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10487  000CD2  0100               	movlb	0	; () banked
 10488  000CD4  51CD               	movf	InitSynth@idx& (0+255),w,b
 10489  000CD6  0D04               	mullw	4
 10490  000CD8  0E01               	movlw	low _SYNTH_REGS
 10491  000CDA  24F3               	addwf	prodl,w,c
 10492  000CDC  6EF6               	movwf	tblptrl,c
 10493  000CDE  0E06               	movlw	high _SYNTH_REGS
 10494  000CE0  20F4               	addwfc	prodh,w,c
 10495  000CE2  6EF7               	movwf	tblptrh,c
 10496  000CE4                     	if	0	;There are less than 3 active tblptr bytes
 10497  000CE4                     	endif
 10498  000CE4  0009               	tblrd		*+
 10499  000CE6  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10500  000CEA  0009               	tblrd		*+
 10501  000CEC  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10502  000CF0  0009               	tblrd		*+
 10503  000CF2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10504  000CF6  000A               	tblrd		*-
 10505  000CF8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10506  000CFC  0E03               	movlw	3
 10507  000CFE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10508  000D00  51CC               	movf	InitSynth@cType& (0+255),w,b
 10509  000D02  EC12  F017         	call	_SWSPI_send_word
 10510  000D06                     l514:
 10511  000D06  0100               	movlb	0	; () banked
 10512  000D08  2BCD               	incf	InitSynth@idx& (0+255),f,b
 10513  000D0A  D6DA               	goto	l7982
 10514  000D0C                     __end_of_InitSynth:
 10515                           	opt stack 0
 10516                           tosu	equ	0xFFF
 10517                           tosh	equ	0xFFE
 10518                           tosl	equ	0xFFD
 10519                           pclath	equ	0xFFA
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           intcon2	equ	0xFF1
 10528                           postinc0	equ	0xFEE
 10529                           plusw0	equ	0xFEB
 10530                           wreg	equ	0xFE8
 10531                           indf1	equ	0xFE7
 10532                           postdec1	equ	0xFE5
 10533                           fsr1h	equ	0xFE2
 10534                           fsr1l	equ	0xFE1
 10535                           indf2	equ	0xFDF
 10536                           postinc2	equ	0xFDE
 10537                           postdec2	equ	0xFDD
 10538                           plusw2	equ	0xFDB
 10539                           fsr2h	equ	0xFDA
 10540                           fsr2l	equ	0xFD9
 10541                           status	equ	0xFD8
 10542                           
 10543 ;; *************** function _SwSpi_Set_CE_Pin *****************
 10544 ;; Defined at:
 10545 ;;		line 201 in file "SwSpiApp.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;  phrType         1    wreg     enum E1
 10548 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  phrType         1   24[COMRAM] enum E1
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  1    wreg      void 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2, status,0
 10555 ;; Tracked objects:
 10556 ;;		On entry : 0/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10560 ;;      Params:         1       0       0       0       0       0       0
 10561 ;;      Locals:         1       0       0       0       0       0       0
 10562 ;;      Temps:          0       0       0       0       0       0       0
 10563 ;;      Totals:         2       0       0       0       0       0       0
 10564 ;;Total ram usage:        2 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    4
 10567 ;; This function calls:
 10568 ;;		Nothing
 10569 ;; This function is called by:
 10570 ;;		_InitSynth
 10571 ;;		_SetSynthOper
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text56
 10576  003AAC                     __ptext56:
 10577                           	opt stack 0
 10578  003AAC                     _SwSpi_Set_CE_Pin:
 10579                           	opt stack 23
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;incstack = 0
 10583                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 10584  003AAC  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 10585                           
 10586                           ;SwSpiApp.c: 203: switch(phrType)
 10587  003AAE  D014               	goto	l715
 10588  003AB0                     
 10589                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 10590  003AB0  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10591  003AB2  A4D8               	btfss	status,2,c
 10592  003AB4  D002               	goto	l717
 10593                           
 10594                           ;SwSpiApp.c: 207: {
 10595                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 10596  003AB6  828B               	bsf	3979,1,c	;volatile
 10597                           
 10598                           ;SwSpiApp.c: 209: }
 10599  003AB8  0012               	return	
 10600  003ABA                     l717:
 10601                           
 10602                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10603  003ABA  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10604  003ABC  A4D8               	btfss	status,2,c
 10605  003ABE  0012               	return	
 10606                           
 10607                           ;SwSpiApp.c: 211: {
 10608                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10609  003AC0  928B               	bcf	3979,1,c	;volatile
 10610                           
 10611                           ;SwSpiApp.c: 213: }
 10612                           ;SwSpiApp.c: 214: break;
 10613  003AC2  0012               	return	
 10614  003AC4                     
 10615                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10616  003AC4  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10617  003AC6  A4D8               	btfss	status,2,c
 10618  003AC8  D002               	goto	l726
 10619                           
 10620                           ;SwSpiApp.c: 218: {
 10621                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10622  003ACA  848C               	bsf	3980,2,c	;volatile
 10623                           
 10624                           ;SwSpiApp.c: 220: }
 10625  003ACC  0012               	return	
 10626  003ACE                     l726:
 10627                           
 10628                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10629  003ACE  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10630  003AD0  A4D8               	btfss	status,2,c
 10631  003AD2  0012               	return	
 10632                           
 10633                           ;SwSpiApp.c: 222: {
 10634                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 10635  003AD4  948C               	bcf	3980,2,c	;volatile
 10636                           
 10637                           ;SwSpiApp.c: 226: }
 10638                           
 10639                           ;SwSpiApp.c: 224: }
 10640                           ;SwSpiApp.c: 225: break;
 10641  003AD6  0012               	return	
 10642  003AD8                     l715:
 10643  003AD8  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10644                           
 10645                           ; Switch size 1, requested type "space"
 10646                           ; Number of cases is 2, Range of values is 0 to 1
 10647                           ; switch strategies available:
 10648                           ; Name         Instructions Cycles
 10649                           ; simple_byte            7     4 (average)
 10650                           ;	Chosen strategy is simple_byte
 10651  003ADA  0A00               	xorlw	0	; case 0
 10652  003ADC  B4D8               	btfsc	status,2,c
 10653  003ADE  D7E8               	goto	l716
 10654  003AE0  0A01               	xorlw	1	; case 1
 10655  003AE2  A4D8               	btfss	status,2,c
 10656  003AE4  0012               	return	
 10657  003AE6  D7EE               	goto	l725
 10658  003AE8                     __end_of_SwSpi_Set_CE_Pin:
 10659                           	opt stack 0
 10660                           tosu	equ	0xFFF
 10661                           tosh	equ	0xFFE
 10662                           tosl	equ	0xFFD
 10663                           pclath	equ	0xFFA
 10664                           tblptru	equ	0xFF8
 10665                           tblptrh	equ	0xFF7
 10666                           tblptrl	equ	0xFF6
 10667                           tablat	equ	0xFF5
 10668                           prodh	equ	0xFF4
 10669                           prodl	equ	0xFF3
 10670                           intcon	equ	0xFF2
 10671                           intcon2	equ	0xFF1
 10672                           postinc0	equ	0xFEE
 10673                           plusw0	equ	0xFEB
 10674                           wreg	equ	0xFE8
 10675                           indf1	equ	0xFE7
 10676                           postdec1	equ	0xFE5
 10677                           fsr1h	equ	0xFE2
 10678                           fsr1l	equ	0xFE1
 10679                           indf2	equ	0xFDF
 10680                           postinc2	equ	0xFDE
 10681                           postdec2	equ	0xFDD
 10682                           plusw2	equ	0xFDB
 10683                           fsr2h	equ	0xFDA
 10684                           fsr2l	equ	0xFD9
 10685                           status	equ	0xFD8
 10686                           
 10687 ;; *************** function _InitAdcApplicationMgr *****************
 10688 ;; Defined at:
 10689 ;;		line 20 in file "AdcApp.c"
 10690 ;; Parameters:    Size  Location     Type
 10691 ;;		None
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;		None
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  1    wreg      void 
 10696 ;; Registers used:
 10697 ;;		wreg, status,2
 10698 ;; Tracked objects:
 10699 ;;		On entry : 0/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10703 ;;      Params:         0       0       0       0       0       0       0
 10704 ;;      Locals:         0       0       0       0       0       0       0
 10705 ;;      Temps:          0       0       0       0       0       0       0
 10706 ;;      Totals:         0       0       0       0       0       0       0
 10707 ;;Total ram usage:        0 bytes
 10708 ;; Hardware stack levels used:    1
 10709 ;; Hardware stack levels required when called:    4
 10710 ;; This function calls:
 10711 ;;		Nothing
 10712 ;; This function is called by:
 10713 ;;		_InitSystemApplicationManagers
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717                           	psect	text57
 10718  0041AA                     __ptext57:
 10719                           	opt stack 0
 10720  0041AA                     _InitAdcApplicationMgr:
 10721                           	opt stack 25
 10722                           
 10723                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 10724                           
 10725                           ;incstack = 0
 10726  0041AA  0E00               	movlw	0
 10727  0041AC  6E3A               	movwf	_adcSampleMode,c
 10728  0041AE  0012               	return		;funcret
 10729  0041B0                     __end_of_InitAdcApplicationMgr:
 10730                           	opt stack 0
 10731                           tosu	equ	0xFFF
 10732                           tosh	equ	0xFFE
 10733                           tosl	equ	0xFFD
 10734                           pclath	equ	0xFFA
 10735                           tblptru	equ	0xFF8
 10736                           tblptrh	equ	0xFF7
 10737                           tblptrl	equ	0xFF6
 10738                           tablat	equ	0xFF5
 10739                           prodh	equ	0xFF4
 10740                           prodl	equ	0xFF3
 10741                           intcon	equ	0xFF2
 10742                           intcon2	equ	0xFF1
 10743                           postinc0	equ	0xFEE
 10744                           plusw0	equ	0xFEB
 10745                           wreg	equ	0xFE8
 10746                           indf1	equ	0xFE7
 10747                           postdec1	equ	0xFE5
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           plusw2	equ	0xFDB
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function _DacInit *****************
 10759 ;; Defined at:
 10760 ;;		line 11 in file "DacApp.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  dacInput        2  106[BANK0 ] unsigned int 
 10765 ;;  idx             1  108[BANK0 ] char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      void 
 10768 ;; Registers used:
 10769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10775 ;;      Params:         0       0       0       0       0       0       0
 10776 ;;      Locals:         0       3       0       0       0       0       0
 10777 ;;      Temps:          0       2       0       0       0       0       0
 10778 ;;      Totals:         0       5       0       0       0       0       0
 10779 ;;Total ram usage:        5 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:   10
 10782 ;; This function calls:
 10783 ;;		_ReadIntFromEeprom
 10784 ;;		_SWSPI_send_word
 10785 ;;		_StoreIntInEeprom
 10786 ;; This function is called by:
 10787 ;;		_InitSystemApplicationManagers
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text58
 10792  002738                     __ptext58:
 10793                           	opt stack 0
 10794  002738                     _DacInit:
 10795                           	opt stack 19
 10796                           
 10797                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 10798                           
 10799                           ;incstack = 0
 10800  002738  0E00               	movlw	0
 10801  00273A  0100               	movlb	0	; () banked
 10802  00273C  6FCC               	movwf	DacInit@idx& (0+255),b
 10803  00273E                     l8522:
 10804                           
 10805                           ; BSR set to: 0
 10806  00273E  51CC               	movf	DacInit@idx& (0+255),w,b
 10807  002740  0A80               	xorlw	128
 10808  002742  0F7C               	addlw	-132
 10809  002744  B0D8               	btfsc	status,0,c
 10810  002746  0012               	return	
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;DacApp.c: 14: {
 10814                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10815                           
 10816                           ; BSR set to: 0
 10817                           
 10818                           ; BSR set to: 0
 10819  002748  0E00               	movlw	0
 10820  00274A  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10821  00274C  0E02               	movlw	2
 10822  00274E  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10823  002750  51CC               	movf	DacInit@idx& (0+255),w,b
 10824  002752  0D01               	mullw	1
 10825  002754  0E53               	movlw	low _DAC_ADDRES
 10826  002756  24F3               	addwf	prodl,w,c
 10827  002758  6EF6               	movwf	tblptrl,c
 10828  00275A  0E06               	movlw	high _DAC_ADDRES
 10829  00275C  20F4               	addwfc	prodh,w,c
 10830  00275E  6EF7               	movwf	tblptrh,c
 10831  002760                     	if	0	;There are less than 3 active tblptr bytes
 10832  002760                     	endif
 10833  002760  0008               	tblrd		*
 10834  002762  50F5               	movf	tablat,w,c
 10835  002764  0940               	iorlw	64
 10836  002766  ECA9  F00E         	call	_ReadIntFromEeprom
 10837  00276A  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10838  00276E  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10839                           
 10840                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 10841  002772  0100               	movlb	0	; () banked
 10842  002774  29CA               	incf	DacInit@dacInput& (0+255),w,b
 10843  002776  E144               	bnz	l8534
 10844  002778  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10845  00277A  A4D8               	btfss	status,2,c
 10846  00277C  D041               	goto	l408
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;DacApp.c: 17: {
 10850                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10851  00277E  51CC               	movf	DacInit@idx& (0+255),w,b
 10852  002780  0D02               	mullw	2
 10853  002782  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10854  002784  24F3               	addwf	prodl,w,c
 10855  002786  6EF6               	movwf	tblptrl,c
 10856  002788  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10857  00278A  20F4               	addwfc	prodh,w,c
 10858  00278C  6EF7               	movwf	tblptrh,c
 10859  00278E                     	if	0	;There are less than 3 active tblptr bytes
 10860  00278E                     	endif
 10861  00278E  0009               	tblrd		*+
 10862  002790  CFF5 F0C8          	movff	tablat,??_DacInit
 10863  002794  0009               	tblrd		*+
 10864  002796  CFF5 F0C9          	movff	tablat,??_DacInit+1
 10865  00279A  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 10866  00279E  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10867  0027A2  6A2B               	clrf	SWSPI_send_word@data+2,c
 10868  0027A4  6A2C               	clrf	SWSPI_send_word@data+3,c
 10869  0027A6  0E01               	movlw	1
 10870  0027A8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10871  0027AA  0E02               	movlw	2
 10872  0027AC  EC12  F017         	call	_SWSPI_send_word
 10873                           
 10874                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 10875  0027B0  0100               	movlb	0	; () banked
 10876  0027B2  51CC               	movf	DacInit@idx& (0+255),w,b
 10877  0027B4  0D02               	mullw	2
 10878  0027B6  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10879  0027B8  24F3               	addwf	prodl,w,c
 10880  0027BA  6EF6               	movwf	tblptrl,c
 10881  0027BC  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10882  0027BE  20F4               	addwfc	prodh,w,c
 10883  0027C0  6EF7               	movwf	tblptrh,c
 10884  0027C2                     	if	0	;There are less than 3 active tblptr bytes
 10885  0027C2                     	endif
 10886  0027C2  0009               	tblrd		*+
 10887  0027C4  CFF5 F0C8          	movff	tablat,??_DacInit
 10888  0027C8  0009               	tblrd		*+
 10889  0027CA  CFF5 F0C9          	movff	tablat,??_DacInit+1
 10890  0027CE  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 10891  0027D2  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 10892  0027D6  6A23               	clrf	StoreIntInEeprom@data+2,c
 10893  0027D8  6A24               	clrf	StoreIntInEeprom@data+3,c
 10894  0027DA  51CC               	movf	DacInit@idx& (0+255),w,b
 10895  0027DC  0D01               	mullw	1
 10896  0027DE  0E53               	movlw	low _DAC_ADDRES
 10897  0027E0  24F3               	addwf	prodl,w,c
 10898  0027E2  6EF6               	movwf	tblptrl,c
 10899  0027E4  0E06               	movlw	high _DAC_ADDRES
 10900  0027E6  20F4               	addwfc	prodh,w,c
 10901  0027E8  6EF7               	movwf	tblptrh,c
 10902  0027EA                     	if	0	;There are less than 3 active tblptr bytes
 10903  0027EA                     	endif
 10904  0027EA  0008               	tblrd		*
 10905  0027EC  50F5               	movf	tablat,w,c
 10906  0027EE  0940               	iorlw	64
 10907  0027F0  6E25               	movwf	StoreIntInEeprom@address,c
 10908  0027F2  0E00               	movlw	0
 10909  0027F4  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10910  0027F6  0E02               	movlw	2
 10911  0027F8  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10912  0027FA  ECCB  F01D         	call	_StoreIntInEeprom	;wreg free
 10913                           
 10914                           ;DacApp.c: 20: }
 10915  0027FE  D00B               	goto	l409
 10916  002800                     l408:
 10917  002800                     l8534:
 10918                           
 10919                           ;DacApp.c: 21: else
 10920                           ;DacApp.c: 22: {
 10921                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10922  002800  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 10923  002804  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10924  002808  6A2B               	clrf	SWSPI_send_word@data+2,c
 10925  00280A  6A2C               	clrf	SWSPI_send_word@data+3,c
 10926  00280C  0E01               	movlw	1
 10927  00280E  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10928  002810  0E02               	movlw	2
 10929  002812  EC12  F017         	call	_SWSPI_send_word
 10930  002816                     l409:
 10931  002816  0100               	movlb	0	; () banked
 10932  002818  2BCC               	incf	DacInit@idx& (0+255),f,b
 10933  00281A  D791               	goto	l8522
 10934  00281C                     __end_of_DacInit:
 10935                           	opt stack 0
 10936                           tosu	equ	0xFFF
 10937                           tosh	equ	0xFFE
 10938                           tosl	equ	0xFFD
 10939                           pclath	equ	0xFFA
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           intcon2	equ	0xFF1
 10948                           postinc0	equ	0xFEE
 10949                           plusw0	equ	0xFEB
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           postdec2	equ	0xFDD
 10958                           plusw2	equ	0xFDB
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _StoreIntInEeprom *****************
 10964 ;; Defined at:
 10965 ;;		line 127 in file "SystemCommon.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  data            4   32[COMRAM] unsigned long 
 10968 ;;  address         1   36[COMRAM] unsigned char 
 10969 ;;  numOfByes       2   37[COMRAM] int 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;  val             1   39[COMRAM] unsigned char 
 10972 ;;  idx             1   40[COMRAM] unsigned char 
 10973 ;; Return value:  Size  Location     Type
 10974 ;;                  1    wreg      void 
 10975 ;; Registers used:
 10976 ;;		wreg, status,2, status,0, cstack
 10977 ;; Tracked objects:
 10978 ;;		On entry : 0/0
 10979 ;;		On exit  : 0/0
 10980 ;;		Unchanged: 0/0
 10981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10982 ;;      Params:         7       0       0       0       0       0       0
 10983 ;;      Locals:         2       0       0       0       0       0       0
 10984 ;;      Temps:          0       0       0       0       0       0       0
 10985 ;;      Totals:         9       0       0       0       0       0       0
 10986 ;;Total ram usage:        9 bytes
 10987 ;; Hardware stack levels used:    1
 10988 ;; Hardware stack levels required when called:    6
 10989 ;; This function calls:
 10990 ;;		_EepromWrite
 10991 ;;		_make8
 10992 ;; This function is called by:
 10993 ;;		_DacInit
 10994 ;;		_DacSetValue
 10995 ;;		_InitSynth
 10996 ;;		_UpdateSynthFreq
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text59
 11001  003B96                     __ptext59:
 11002                           	opt stack 0
 11003  003B96                     _StoreIntInEeprom:
 11004                           	opt stack 21
 11005                           
 11006                           ;SystemCommon.c: 129: for(uint8_t idx = numOfByes; idx; idx--)
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;incstack = 0
 11010  003B96  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11011  003B9A  D015               	goto	l1427
 11012  003B9C                     
 11013                           ;SystemCommon.c: 130: {
 11014                           ;SystemCommon.c: 131: uint8_t val = make8(data, idx - 1);
 11015  003B9C  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11016  003BA0  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11017  003BA4  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11018  003BA8  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11019  003BAC  0429               	decf	StoreIntInEeprom@idx,w,c
 11020  003BAE  6E1C               	movwf	make8@dataLocation,c
 11021  003BB0  EC03  F01B         	call	_make8	;wreg free
 11022  003BB4  6E28               	movwf	StoreIntInEeprom@val,c
 11023                           
 11024                           ;SystemCommon.c: 132: EepromWrite(address - idx, val);
 11025  003BB6  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11026  003BBA  5029               	movf	StoreIntInEeprom@idx,w,c
 11027  003BBC  0800               	sublw	0
 11028  003BBE  2425               	addwf	StoreIntInEeprom@address,w,c
 11029  003BC0  EC9D  F020         	call	_EepromWrite
 11030  003BC4  0629               	decf	StoreIntInEeprom@idx,f,c
 11031  003BC6                     l1427:
 11032  003BC6  5029               	movf	StoreIntInEeprom@idx,w,c
 11033  003BC8  B4D8               	btfsc	status,2,c
 11034  003BCA  0012               	return	
 11035  003BCC  D7E7               	goto	l1428
 11036  003BCE                     __end_of_StoreIntInEeprom:
 11037                           	opt stack 0
 11038                           tosu	equ	0xFFF
 11039                           tosh	equ	0xFFE
 11040                           tosl	equ	0xFFD
 11041                           pclath	equ	0xFFA
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           intcon2	equ	0xFF1
 11050                           postinc0	equ	0xFEE
 11051                           plusw0	equ	0xFEB
 11052                           wreg	equ	0xFE8
 11053                           indf1	equ	0xFE7
 11054                           postdec1	equ	0xFE5
 11055                           fsr1h	equ	0xFE2
 11056                           fsr1l	equ	0xFE1
 11057                           indf2	equ	0xFDF
 11058                           postinc2	equ	0xFDE
 11059                           postdec2	equ	0xFDD
 11060                           plusw2	equ	0xFDB
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065 ;; *************** function _EepromWrite *****************
 11066 ;; Defined at:
 11067 ;;		line 176 in file "FlashApp.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  address         1    wreg     unsigned char 
 11070 ;;  data            1   26[COMRAM] unsigned char 
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;  address         1   27[COMRAM] unsigned char 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  1    wreg      void 
 11075 ;; Registers used:
 11076 ;;		wreg, status,2, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11082 ;;      Params:         1       0       0       0       0       0       0
 11083 ;;      Locals:         1       0       0       0       0       0       0
 11084 ;;      Temps:          0       0       0       0       0       0       0
 11085 ;;      Totals:         2       0       0       0       0       0       0
 11086 ;;Total ram usage:        2 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    5
 11089 ;; This function calls:
 11090 ;;		_DATAEE_WriteByte
 11091 ;; This function is called by:
 11092 ;;		_StoreIntInEeprom
 11093 ;; This function uses a non-reentrant model
 11094 ;;
 11095                           
 11096                           	psect	text60
 11097  00413A                     __ptext60:
 11098                           	opt stack 0
 11099  00413A                     _EepromWrite:
 11100                           	opt stack 21
 11101                           
 11102                           ;incstack = 0
 11103                           ;EepromWrite@address stored from wreg
 11104  00413A  6E1C               	movwf	EepromWrite@address,c
 11105                           
 11106                           ;FlashApp.c: 178: DATAEE_WriteByte(address, data);
 11107  00413C  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11108  004140  501C               	movf	EepromWrite@address,w,c
 11109  004142  EC39  F01E         	call	_DATAEE_WriteByte
 11110  004146  0012               	return		;funcret
 11111  004148                     __end_of_EepromWrite:
 11112                           	opt stack 0
 11113                           tosu	equ	0xFFF
 11114                           tosh	equ	0xFFE
 11115                           tosl	equ	0xFFD
 11116                           pclath	equ	0xFFA
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           intcon2	equ	0xFF1
 11125                           postinc0	equ	0xFEE
 11126                           plusw0	equ	0xFEB
 11127                           wreg	equ	0xFE8
 11128                           indf1	equ	0xFE7
 11129                           postdec1	equ	0xFE5
 11130                           fsr1h	equ	0xFE2
 11131                           fsr1l	equ	0xFE1
 11132                           indf2	equ	0xFDF
 11133                           postinc2	equ	0xFDE
 11134                           postdec2	equ	0xFDD
 11135                           plusw2	equ	0xFDB
 11136                           fsr2h	equ	0xFDA
 11137                           fsr2l	equ	0xFD9
 11138                           status	equ	0xFD8
 11139                           
 11140 ;; *************** function _DATAEE_WriteByte *****************
 11141 ;; Defined at:
 11142 ;;		line 167 in file "mcc_generated_files/memory.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;  bAdd            1    wreg     unsigned char 
 11145 ;;  bData           1   23[COMRAM] unsigned char 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  bAdd            1   24[COMRAM] unsigned char 
 11148 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11158 ;;      Params:         1       0       0       0       0       0       0
 11159 ;;      Locals:         2       0       0       0       0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0
 11161 ;;      Totals:         3       0       0       0       0       0       0
 11162 ;;Total ram usage:        3 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    4
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_EepromWrite
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text61
 11173  003C72                     __ptext61:
 11174                           	opt stack 0
 11175  003C72                     _DATAEE_WriteByte:
 11176                           	opt stack 21
 11177                           
 11178                           ;incstack = 0
 11179                           ;DATAEE_WriteByte@bAdd stored from wreg
 11180  003C72  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11181                           
 11182                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11183  003C74  0E00               	movlw	0
 11184  003C76  BEF2               	btfsc	intcon,7,c	;volatile
 11185  003C78  0E01               	movlw	1
 11186  003C7A  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11187                           
 11188                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11189  003C7C  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11190                           
 11191                           ;memory.c: 172: EEDATA = bData;
 11192  003C80  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11193                           
 11194                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11195  003C84  9EA6               	bcf	4006,7,c	;volsfr
 11196                           
 11197                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11198  003C86  9CA6               	bcf	4006,6,c	;volsfr
 11199                           
 11200                           ;memory.c: 175: EECON1bits.WREN = 1;
 11201  003C88  84A6               	bsf	4006,2,c	;volsfr
 11202                           
 11203                           ;memory.c: 176: INTCONbits.GIE = 0;
 11204  003C8A  9EF2               	bcf	intcon,7,c	;volatile
 11205                           
 11206                           ;memory.c: 177: EECON2 = 0x55;
 11207  003C8C  0E55               	movlw	85
 11208  003C8E  6EA7               	movwf	4007,c	;volsfr
 11209                           
 11210                           ;memory.c: 178: EECON2 = 0xAA;
 11211  003C90  0EAA               	movlw	170
 11212  003C92  6EA7               	movwf	4007,c	;volsfr
 11213                           
 11214                           ;memory.c: 179: EECON1bits.WR = 1;
 11215  003C94  82A6               	bsf	4006,1,c	;volsfr
 11216  003C96                     
 11217                           ;memory.c: 182: {
 11218  003C96  B2A6               	btfsc	4006,1,c	;volsfr
 11219  003C98  D7FE               	goto	l1048
 11220                           
 11221                           ;memory.c: 183: }
 11222                           ;memory.c: 185: EECON1bits.WREN = 0;
 11223  003C9A  94A6               	bcf	4006,2,c	;volsfr
 11224                           
 11225                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11226  003C9C  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11227  003C9E  D002               	bra	u7035
 11228  003CA0  9EF2               	bcf	intcon,7,c	;volatile
 11229  003CA2  D001               	bra	u7036
 11230  003CA4                     u7035:
 11231  003CA4  8EF2               	bsf	intcon,7,c	;volatile
 11232  003CA6                     u7036:
 11233  003CA6  0012               	return		;funcret
 11234  003CA8                     __end_of_DATAEE_WriteByte:
 11235                           	opt stack 0
 11236                           tosu	equ	0xFFF
 11237                           tosh	equ	0xFFE
 11238                           tosl	equ	0xFFD
 11239                           pclath	equ	0xFFA
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           intcon	equ	0xFF2
 11247                           intcon2	equ	0xFF1
 11248                           postinc0	equ	0xFEE
 11249                           plusw0	equ	0xFEB
 11250                           wreg	equ	0xFE8
 11251                           indf1	equ	0xFE7
 11252                           postdec1	equ	0xFE5
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           plusw2	equ	0xFDB
 11259                           fsr2h	equ	0xFDA
 11260                           fsr2l	equ	0xFD9
 11261                           status	equ	0xFD8
 11262                           
 11263 ;; *************** function _SWSPI_send_word *****************
 11264 ;; Defined at:
 11265 ;;		line 17 in file "SwSpiApp.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;  phrType         1    wreg     enum E1
 11268 ;;  data            4   40[COMRAM] unsigned long 
 11269 ;;  dataSize        1   44[COMRAM] unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  phrType         1   41[BANK0 ] enum E1
 11272 ;;  datac           1   38[BANK0 ] unsigned char 
 11273 ;;  idx             2   39[BANK0 ] int 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      void 
 11276 ;; Registers used:
 11277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11283 ;;      Params:         5       0       0       0       0       0       0
 11284 ;;      Locals:         0       4       0       0       0       0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0
 11286 ;;      Totals:         5       4       0       0       0       0       0
 11287 ;;Total ram usage:        9 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    7
 11290 ;; This function calls:
 11291 ;;		_SWSPI_DAC_send_bits
 11292 ;;		_SWSPI_Synth_send_bits
 11293 ;;		_SwSpi_Set_Dac_Sync_Pin
 11294 ;;		_SwSpi_Set_Synth_Le_Pin
 11295 ;;		_make8
 11296 ;; This function is called by:
 11297 ;;		_DacInit
 11298 ;;		_DacSetValue
 11299 ;;		_InitSynth
 11300 ;;		_UpdateSynthFreq
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text62
 11305  002E24                     __ptext62:
 11306                           	opt stack 0
 11307  002E24                     _SWSPI_send_word:
 11308                           	opt stack 20
 11309                           
 11310                           ;incstack = 0
 11311                           ;SWSPI_send_word@phrType stored from wreg
 11312  002E24  0100               	movlb	0	; () banked
 11313  002E26  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 11314                           
 11315                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11316  002E28  9EF2               	bcf	intcon,7,c	;volatile
 11317                           
 11318                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11319  002E2A  0100               	movlb	0	; () banked
 11320  002E2C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11321  002E2E  B4D8               	btfsc	status,2,c
 11322  002E30  D003               	goto	u7660
 11323                           
 11324                           ; BSR set to: 0
 11325  002E32  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 11326  002E34  A4D8               	btfss	status,2,c
 11327  002E36  D018               	goto	l624
 11328  002E38                     u7660:
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;SwSpiApp.c: 24: {
 11332                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 11333                           
 11334                           ; BSR set to: 0
 11335  002E38  0E00               	movlw	0
 11336  002E3A  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11337  002E3C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11338  002E3E  EC74  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 11339                           
 11340                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 11341  002E42  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 11342  002E46  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 11343  002E4A  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 11344  002E4E  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 11345  002E52  0100               	movlb	0	; () banked
 11346  002E54  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11347  002E56  ECEA  F014         	call	_SWSPI_Synth_send_bits
 11348                           
 11349                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 11350  002E5A  0E01               	movlw	1
 11351  002E5C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11352  002E5E  0100               	movlb	0	; () banked
 11353  002E60  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11354  002E62  EC74  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 11355                           
 11356                           ;SwSpiApp.c: 28: }
 11357  002E66  D031               	goto	l628
 11358  002E68                     l624:
 11359                           
 11360                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 11361  002E68  0E02               	movlw	2
 11362  002E6A  0100               	movlb	0	; () banked
 11363  002E6C  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 11364  002E6E  A4D8               	btfss	status,2,c
 11365  002E70  D02C               	goto	l628
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;SwSpiApp.c: 30: {
 11369                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 11370  002E72  0E00               	movlw	0
 11371  002E74  EC15  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 11372                           
 11373                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 11374  002E78  0E01               	movlw	1
 11375  002E7A  242D               	addwf	SWSPI_send_word@dataSize,w,c
 11376  002E7C  0100               	movlb	0	; () banked
 11377  002E7E  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 11378  002E80  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 11379  002E82  0E00               	movlw	0
 11380  002E84  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 11381  002E86                     l7786:
 11382                           
 11383                           ; BSR set to: 0
 11384  002E86  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 11385  002E88  D01D               	goto	u7690
 11386  002E8A  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 11387  002E8C  E103               	bnz	l7790
 11388  002E8E  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 11389  002E90  A0D8               	btfss	status,0,c
 11390  002E92  D018               	goto	u7690
 11391  002E94                     l7790:
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;SwSpiApp.c: 33: {
 11395                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 11396  002E94  C029  F018         	movff	SWSPI_send_word@data,make8@data
 11397  002E98  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 11398  002E9C  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 11399  002EA0  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 11400  002EA4  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 11401  002EA6  6E1C               	movwf	make8@dataLocation,c
 11402  002EA8  EC03  F01B         	call	_make8	;wreg free
 11403  002EAC  0100               	movlb	0	; () banked
 11404  002EAE  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 11405                           
 11406                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 11407  002EB0  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 11408  002EB4  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11409  002EB6  EC8B  F01B         	call	_SWSPI_DAC_send_bits
 11410  002EBA  0100               	movlb	0	; () banked
 11411  002EBC  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 11412  002EBE  A0D8               	btfss	status,0,c
 11413  002EC0  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 11414  002EC2  D7E1               	goto	l7786
 11415  002EC4                     u7690:
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;SwSpiApp.c: 36: }
 11419                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 11420                           
 11421                           ; BSR set to: 0
 11422  002EC4  0E01               	movlw	1
 11423  002EC6  EC15  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 11424  002ECA                     l628:
 11425                           
 11426                           ;SwSpiApp.c: 38: }
 11427                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 11428  002ECA  8EF2               	bsf	intcon,7,c	;volatile
 11429  002ECC  0012               	return		;funcret
 11430  002ECE                     __end_of_SWSPI_send_word:
 11431                           	opt stack 0
 11432                           tosu	equ	0xFFF
 11433                           tosh	equ	0xFFE
 11434                           tosl	equ	0xFFD
 11435                           pclath	equ	0xFFA
 11436                           tblptru	equ	0xFF8
 11437                           tblptrh	equ	0xFF7
 11438                           tblptrl	equ	0xFF6
 11439                           tablat	equ	0xFF5
 11440                           prodh	equ	0xFF4
 11441                           prodl	equ	0xFF3
 11442                           intcon	equ	0xFF2
 11443                           intcon2	equ	0xFF1
 11444                           postinc0	equ	0xFEE
 11445                           plusw0	equ	0xFEB
 11446                           wreg	equ	0xFE8
 11447                           indf1	equ	0xFE7
 11448                           postdec1	equ	0xFE5
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _make8 *****************
 11460 ;; Defined at:
 11461 ;;		line 97 in file "SystemCommon.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  data            4   23[COMRAM] unsigned long 
 11464 ;;  dataLocation    1   27[COMRAM] unsigned char 
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;		None
 11467 ;; Return value:  Size  Location     Type
 11468 ;;                  1    wreg      unsigned char 
 11469 ;; Registers used:
 11470 ;;		wreg, status,2, status,0
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : 0/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11476 ;;      Params:         5       0       0       0       0       0       0
 11477 ;;      Locals:         0       0       0       0       0       0       0
 11478 ;;      Temps:          4       0       0       0       0       0       0
 11479 ;;      Totals:         9       0       0       0       0       0       0
 11480 ;;Total ram usage:        9 bytes
 11481 ;; Hardware stack levels used:    1
 11482 ;; Hardware stack levels required when called:    4
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_FlashReadCondition
 11487 ;;		_DacReadValue
 11488 ;;		_SynthReadData
 11489 ;;		_SWSPI_send_word
 11490 ;;		_StoreIntInEeprom
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text63
 11495  003606                     __ptext63:
 11496                           	opt stack 0
 11497  003606                     _make8:
 11498                           	opt stack 22
 11499                           
 11500                           ;SystemCommon.c: 99: switch(dataLocation)
 11501                           
 11502                           ;incstack = 0
 11503  003606  D01F               	goto	l1412
 11504  003608                     
 11505                           ;SystemCommon.c: 102: return (data & 0x000000ff);
 11506  003608  5018               	movf	make8@data,w,c
 11507  00360A  0012               	return	
 11508  00360C                     
 11509                           ;SystemCommon.c: 105: return (data & 0x0000ff00) >> 8;
 11510  00360C  5019               	movf	make8@data+1,w,c
 11511  00360E  0012               	return	
 11512  003610                     
 11513                           ;SystemCommon.c: 108: return (data & 0x00ff0000) >> 16;
 11514  003610  501A               	movf	make8@data+2,w,c
 11515  003612  0012               	return	
 11516  003614                     
 11517                           ;SystemCommon.c: 111: return (data & 0xff000000) >> 24;
 11518  003614  0E00               	movlw	0
 11519  003616  1418               	andwf	make8@data,w,c
 11520  003618  6E1D               	movwf	??_make8& (0+255),c
 11521  00361A  0E00               	movlw	0
 11522  00361C  1419               	andwf	make8@data+1,w,c
 11523  00361E  6E1E               	movwf	(??_make8+1)& (0+255),c
 11524  003620  0E00               	movlw	0
 11525  003622  141A               	andwf	make8@data+2,w,c
 11526  003624  6E1F               	movwf	(??_make8+2)& (0+255),c
 11527  003626  0EFF               	movlw	255
 11528  003628  141B               	andwf	make8@data+3,w,c
 11529  00362A  6E20               	movwf	(??_make8+3)& (0+255),c
 11530  00362C  0E19               	movlw	25
 11531  00362E  D005               	goto	u7400
 11532  003630                     u7405:
 11533  003630  90D8               	bcf	status,0,c
 11534  003632  3220               	rrcf	??_make8+3,f,c
 11535  003634  321F               	rrcf	??_make8+2,f,c
 11536  003636  321E               	rrcf	??_make8+1,f,c
 11537  003638  321D               	rrcf	??_make8,f,c
 11538  00363A                     u7400:
 11539  00363A  2EE8               	decfsz	wreg,f,c
 11540  00363C  D7F9               	goto	u7405
 11541  00363E  501D               	movf	??_make8,w,c
 11542  003640  0012               	return	
 11543  003642                     
 11544                           ;SystemCommon.c: 114: return (0);
 11545  003642  0E00               	movlw	0
 11546                           
 11547                           ;SystemCommon.c: 115: }
 11548  003644  0012               	return	
 11549  003646                     l1412:
 11550  003646  501C               	movf	make8@dataLocation,w,c
 11551                           
 11552                           ; Switch size 1, requested type "space"
 11553                           ; Number of cases is 4, Range of values is 0 to 3
 11554                           ; switch strategies available:
 11555                           ; Name         Instructions Cycles
 11556                           ; simple_byte           13     7 (average)
 11557                           ;	Chosen strategy is simple_byte
 11558  003648  0A00               	xorlw	0	; case 0
 11559  00364A  B4D8               	btfsc	status,2,c
 11560  00364C  D7DD               	goto	l1413
 11561  00364E  0A01               	xorlw	1	; case 1
 11562  003650  B4D8               	btfsc	status,2,c
 11563  003652  D7DC               	goto	l1415
 11564  003654  0A03               	xorlw	3	; case 2
 11565  003656  B4D8               	btfsc	status,2,c
 11566  003658  D7DB               	goto	l1416
 11567  00365A  0A01               	xorlw	1	; case 3
 11568  00365C  B4D8               	btfsc	status,2,c
 11569  00365E  D7DA               	goto	l1417
 11570  003660  D7F0               	goto	l1418
 11571  003662                     __end_of_make8:
 11572                           	opt stack 0
 11573                           tosu	equ	0xFFF
 11574                           tosh	equ	0xFFE
 11575                           tosl	equ	0xFFD
 11576                           pclath	equ	0xFFA
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           intcon2	equ	0xFF1
 11585                           postinc0	equ	0xFEE
 11586                           plusw0	equ	0xFEB
 11587                           wreg	equ	0xFE8
 11588                           indf1	equ	0xFE7
 11589                           postdec1	equ	0xFE5
 11590                           fsr1h	equ	0xFE2
 11591                           fsr1l	equ	0xFE1
 11592                           indf2	equ	0xFDF
 11593                           postinc2	equ	0xFDE
 11594                           postdec2	equ	0xFDD
 11595                           plusw2	equ	0xFDB
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 11601 ;; Defined at:
 11602 ;;		line 232 in file "SwSpiApp.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  phrType         1    wreg     enum E1
 11605 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;  phrType         1   24[COMRAM] enum E1
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1    wreg      void 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11617 ;;      Params:         1       0       0       0       0       0       0
 11618 ;;      Locals:         1       0       0       0       0       0       0
 11619 ;;      Temps:          0       0       0       0       0       0       0
 11620 ;;      Totals:         2       0       0       0       0       0       0
 11621 ;;Total ram usage:        2 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    4
 11624 ;; This function calls:
 11625 ;;		Nothing
 11626 ;; This function is called by:
 11627 ;;		_SWSPI_send_word
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           	psect	text64
 11632  003AE8                     __ptext64:
 11633                           	opt stack 0
 11634  003AE8                     _SwSpi_Set_Synth_Le_Pin:
 11635                           	opt stack 22
 11636                           
 11637                           ;incstack = 0
 11638                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 11639  003AE8  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 11640                           
 11641                           ;SwSpiApp.c: 234: switch(phrType)
 11642  003AEA  D014               	goto	l736
 11643  003AEC                     
 11644                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 11645  003AEC  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11646  003AEE  A4D8               	btfss	status,2,c
 11647  003AF0  D002               	goto	l738
 11648                           
 11649                           ;SwSpiApp.c: 238: {
 11650                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 11651  003AF2  848B               	bsf	3979,2,c	;volatile
 11652                           
 11653                           ;SwSpiApp.c: 240: }
 11654  003AF4  0012               	return	
 11655  003AF6                     l738:
 11656                           
 11657                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 11658  003AF6  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11659  003AF8  A4D8               	btfss	status,2,c
 11660  003AFA  0012               	return	
 11661                           
 11662                           ;SwSpiApp.c: 242: {
 11663                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 11664  003AFC  948B               	bcf	3979,2,c	;volatile
 11665                           
 11666                           ;SwSpiApp.c: 244: }
 11667                           ;SwSpiApp.c: 245: break;
 11668  003AFE  0012               	return	
 11669  003B00                     
 11670                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 11671  003B00  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11672  003B02  A4D8               	btfss	status,2,c
 11673  003B04  D002               	goto	l747
 11674                           
 11675                           ;SwSpiApp.c: 249: {
 11676                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 11677  003B06  868C               	bsf	3980,3,c	;volatile
 11678                           
 11679                           ;SwSpiApp.c: 251: }
 11680  003B08  0012               	return	
 11681  003B0A                     l747:
 11682                           
 11683                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 11684  003B0A  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11685  003B0C  A4D8               	btfss	status,2,c
 11686  003B0E  0012               	return	
 11687                           
 11688                           ;SwSpiApp.c: 253: {
 11689                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 11690  003B10  968C               	bcf	3980,3,c	;volatile
 11691                           
 11692                           ;SwSpiApp.c: 257: }
 11693                           
 11694                           ;SwSpiApp.c: 255: }
 11695                           ;SwSpiApp.c: 256: break;
 11696  003B12  0012               	return	
 11697  003B14                     l736:
 11698  003B14  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 11699                           
 11700                           ; Switch size 1, requested type "space"
 11701                           ; Number of cases is 2, Range of values is 0 to 1
 11702                           ; switch strategies available:
 11703                           ; Name         Instructions Cycles
 11704                           ; simple_byte            7     4 (average)
 11705                           ;	Chosen strategy is simple_byte
 11706  003B16  0A00               	xorlw	0	; case 0
 11707  003B18  B4D8               	btfsc	status,2,c
 11708  003B1A  D7E8               	goto	l737
 11709  003B1C  0A01               	xorlw	1	; case 1
 11710  003B1E  A4D8               	btfss	status,2,c
 11711  003B20  0012               	return	
 11712  003B22  D7EE               	goto	l746
 11713  003B24                     __end_of_SwSpi_Set_Synth_Le_Pin:
 11714                           	opt stack 0
 11715                           tosu	equ	0xFFF
 11716                           tosh	equ	0xFFE
 11717                           tosl	equ	0xFFD
 11718                           pclath	equ	0xFFA
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon2	equ	0xFF1
 11727                           postinc0	equ	0xFEE
 11728                           plusw0	equ	0xFEB
 11729                           wreg	equ	0xFE8
 11730                           indf1	equ	0xFE7
 11731                           postdec1	equ	0xFE5
 11732                           fsr1h	equ	0xFE2
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           plusw2	equ	0xFDB
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 11743 ;; Defined at:
 11744 ;;		line 260 in file "SwSpiApp.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  cPinMode        1    wreg     unsigned char 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  1    wreg      void 
 11751 ;; Registers used:
 11752 ;;		wreg, status,2, status,0
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11758 ;;      Params:         0       0       0       0       0       0       0
 11759 ;;      Locals:         1       0       0       0       0       0       0
 11760 ;;      Temps:          0       0       0       0       0       0       0
 11761 ;;      Totals:         1       0       0       0       0       0       0
 11762 ;;Total ram usage:        1 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    4
 11765 ;; This function calls:
 11766 ;;		Nothing
 11767 ;; This function is called by:
 11768 ;;		_SWSPI_send_word
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text65
 11773  00402A                     __ptext65:
 11774                           	opt stack 0
 11775  00402A                     _SwSpi_Set_Dac_Sync_Pin:
 11776                           	opt stack 22
 11777                           
 11778                           ;incstack = 0
 11779                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 11780  00402A  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 11781                           
 11782                           ;SwSpiApp.c: 262: switch(cPinMode)
 11783  00402C  D004               	goto	l757
 11784  00402E                     
 11785                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 11786  00402E  9489               	bcf	3977,2,c	;volatile
 11787                           
 11788                           ;SwSpiApp.c: 266: break;
 11789  004030  0012               	return	
 11790  004032                     
 11791                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 11792  004032  8489               	bsf	3977,2,c	;volatile
 11793                           
 11794                           ;SwSpiApp.c: 271: }
 11795                           
 11796                           ;SwSpiApp.c: 270: break;
 11797  004034  0012               	return	
 11798  004036                     l757:
 11799  004036  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 11800                           
 11801                           ; Switch size 1, requested type "space"
 11802                           ; Number of cases is 2, Range of values is 0 to 1
 11803                           ; switch strategies available:
 11804                           ; Name         Instructions Cycles
 11805                           ; simple_byte            7     4 (average)
 11806                           ;	Chosen strategy is simple_byte
 11807  004038  0A00               	xorlw	0	; case 0
 11808  00403A  B4D8               	btfsc	status,2,c
 11809  00403C  D7F8               	goto	l758
 11810  00403E  0A01               	xorlw	1	; case 1
 11811  004040  A4D8               	btfss	status,2,c
 11812  004042  0012               	return	
 11813  004044  D7F6               	goto	l762
 11814  004046                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 11815                           	opt stack 0
 11816                           tosu	equ	0xFFF
 11817                           tosh	equ	0xFFE
 11818                           tosl	equ	0xFFD
 11819                           pclath	equ	0xFFA
 11820                           tblptru	equ	0xFF8
 11821                           tblptrh	equ	0xFF7
 11822                           tblptrl	equ	0xFF6
 11823                           tablat	equ	0xFF5
 11824                           prodh	equ	0xFF4
 11825                           prodl	equ	0xFF3
 11826                           intcon	equ	0xFF2
 11827                           intcon2	equ	0xFF1
 11828                           postinc0	equ	0xFEE
 11829                           plusw0	equ	0xFEB
 11830                           wreg	equ	0xFE8
 11831                           indf1	equ	0xFE7
 11832                           postdec1	equ	0xFE5
 11833                           fsr1h	equ	0xFE2
 11834                           fsr1l	equ	0xFE1
 11835                           indf2	equ	0xFDF
 11836                           postinc2	equ	0xFDE
 11837                           postdec2	equ	0xFDD
 11838                           plusw2	equ	0xFDB
 11839                           fsr2h	equ	0xFDA
 11840                           fsr2l	equ	0xFD9
 11841                           status	equ	0xFD8
 11842                           
 11843 ;; *************** function _SWSPI_Synth_send_bits *****************
 11844 ;; Defined at:
 11845 ;;		line 67 in file "SwSpiApp.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;  phrType         1    wreg     enum E1
 11848 ;;  data            4   36[COMRAM] unsigned long 
 11849 ;; Auto vars:     Size  Location     Type
 11850 ;;  phrType         1   37[BANK0 ] enum E1
 11851 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 11852 ;;  mask            4   32[BANK0 ] unsigned long 
 11853 ;;  count           1   36[BANK0 ] unsigned char 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11863 ;;      Params:         4       0       0       0       0       0       0
 11864 ;;      Locals:         0      38       0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0
 11866 ;;      Totals:         4      38       0       0       0       0       0
 11867 ;;Total ram usage:       42 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    6
 11870 ;; This function calls:
 11871 ;;		_FillArray
 11872 ;;		_Make32bitsArray
 11873 ;;		_SwSpi_Clk_Pin
 11874 ;;		_SwSpi_Data_Pin
 11875 ;; This function is called by:
 11876 ;;		_SWSPI_send_word
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text66
 11881  0029D4                     __ptext66:
 11882                           	opt stack 0
 11883  0029D4                     _SWSPI_Synth_send_bits:
 11884                           	opt stack 20
 11885                           
 11886                           ;incstack = 0
 11887                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 11888  0029D4  0100               	movlb	0	; () banked
 11889  0029D6  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 11890                           
 11891                           ;SwSpiApp.c: 69: uint8_t count;
 11892                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 11893  0029D8  0E01               	movlw	1
 11894  0029DA  0100               	movlb	0	; () banked
 11895  0029DC  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 11896  0029DE  0E00               	movlw	0
 11897  0029E0  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 11898  0029E2  0E00               	movlw	0
 11899  0029E4  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 11900  0029E6  0E00               	movlw	0
 11901  0029E8  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;SwSpiApp.c: 72: bool bitArray[32];
 11905                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 11906  0029EA  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11907  0029EC  6E20               	movwf	FillArray@array,c
 11908  0029EE  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11909  0029F0  6E21               	movwf	FillArray@array+1,c
 11910  0029F2  0E00               	movlw	0
 11911  0029F4  6E23               	movwf	FillArray@size+1,c
 11912  0029F6  0E20               	movlw	32
 11913  0029F8  6E22               	movwf	FillArray@size,c
 11914  0029FA  0E00               	movlw	0
 11915  0029FC  6E24               	movwf	FillArray@value,c
 11916  0029FE  EC23  F020         	call	_FillArray	;wreg free
 11917                           
 11918                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 11919  002A02  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11920  002A04  6E18               	movwf	Make32bitsArray@array,c
 11921  002A06  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11922  002A08  6E19               	movwf	Make32bitsArray@array+1,c
 11923  002A0A  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 11924  002A0E  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 11925  002A12  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 11926  002A16  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 11927  002A1A  EC5F  F01B         	call	_Make32bitsArray	;wreg free
 11928                           
 11929                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 11930  002A1E  0E00               	movlw	0
 11931  002A20  0100               	movlb	0	; () banked
 11932  002A22  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 11933  002A24                     l7620:
 11934                           
 11935                           ; BSR set to: 0
 11936  002A24  0E1F               	movlw	31
 11937  002A26  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 11938  002A28  D001               	goto	l642
 11939  002A2A  D026               	goto	u7470
 11940  002A2C                     l642:
 11941                           
 11942                           ; BSR set to: 0
 11943                           ;SwSpiApp.c: 78: {
 11944                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 11945                           
 11946                           ; BSR set to: 0
 11947  002A2C  0E00               	movlw	0
 11948  002A2E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11949  002A30  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11950  002A32  ECE2  F01B         	call	_SwSpi_Clk_Pin
 11951                           
 11952                           ;SwSpiApp.c: 82: if (bitArray[count])
 11953  002A36  0100               	movlb	0	; () banked
 11954  002A38  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 11955  002A3A  0D01               	mullw	1
 11956  002A3C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11957  002A3E  24F3               	addwf	prodl,w,c
 11958  002A40  6ED9               	movwf	fsr2l,c
 11959  002A42  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11960  002A44  20F4               	addwfc	prodh,w,c
 11961  002A46  6EDA               	movwf	fsr2h,c
 11962  002A48  50DF               	movf	indf2,w,c
 11963  002A4A  B4D8               	btfsc	status,2,c
 11964  002A4C  D006               	goto	l644
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;SwSpiApp.c: 83: {
 11968                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 11969  002A4E  0E01               	movlw	1
 11970  002A50  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11971  002A52  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11972  002A54  ECB7  F01B         	call	_SwSpi_Data_Pin
 11973                           
 11974                           ;SwSpiApp.c: 85: }
 11975  002A58  D006               	goto	l645
 11976  002A5A                     l644:
 11977                           
 11978                           ;SwSpiApp.c: 86: else
 11979                           ;SwSpiApp.c: 87: {
 11980                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 11981  002A5A  0E00               	movlw	0
 11982  002A5C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11983  002A5E  0100               	movlb	0	; () banked
 11984  002A60  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11985  002A62  ECB7  F01B         	call	_SwSpi_Data_Pin
 11986  002A66                     l645:
 11987                           
 11988                           ;SwSpiApp.c: 89: }
 11989                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 11990  002A66  0E01               	movlw	1
 11991  002A68  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11992  002A6A  0100               	movlb	0	; () banked
 11993  002A6C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11994  002A6E  ECE2  F01B         	call	_SwSpi_Clk_Pin
 11995  002A72  0100               	movlb	0	; () banked
 11996  002A74  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 11997  002A76  D7D6               	goto	l7620
 11998  002A78                     u7470:
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;SwSpiApp.c: 92: }
 12002                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12003                           
 12004                           ; BSR set to: 0
 12005  002A78  0E21               	movlw	33
 12006  002A7A                     u9067:
 12007  002A7A  2EE8               	decfsz	wreg,f,c
 12008  002A7C  D7FE               	bra	u9067
 12009  002A7E  F000               	nop	
 12010                           
 12011                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12012  002A80  0E00               	movlw	0
 12013  002A82  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12014  002A84  0100               	movlb	0	; () banked
 12015  002A86  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12016  002A88  ECB7  F01B         	call	_SwSpi_Data_Pin
 12017                           
 12018                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12019  002A8C  0E00               	movlw	0
 12020  002A8E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12021  002A90  0100               	movlb	0	; () banked
 12022  002A92  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12023  002A94  ECE2  F01B         	call	_SwSpi_Clk_Pin
 12024  002A98  0012               	return		;funcret
 12025  002A9A                     __end_of_SWSPI_Synth_send_bits:
 12026                           	opt stack 0
 12027                           tosu	equ	0xFFF
 12028                           tosh	equ	0xFFE
 12029                           tosl	equ	0xFFD
 12030                           pclath	equ	0xFFA
 12031                           tblptru	equ	0xFF8
 12032                           tblptrh	equ	0xFF7
 12033                           tblptrl	equ	0xFF6
 12034                           tablat	equ	0xFF5
 12035                           prodh	equ	0xFF4
 12036                           prodl	equ	0xFF3
 12037                           intcon	equ	0xFF2
 12038                           intcon2	equ	0xFF1
 12039                           postinc0	equ	0xFEE
 12040                           plusw0	equ	0xFEB
 12041                           wreg	equ	0xFE8
 12042                           indf1	equ	0xFE7
 12043                           postdec1	equ	0xFE5
 12044                           fsr1h	equ	0xFE2
 12045                           fsr1l	equ	0xFE1
 12046                           indf2	equ	0xFDF
 12047                           postinc2	equ	0xFDE
 12048                           postdec2	equ	0xFDD
 12049                           plusw2	equ	0xFDB
 12050                           fsr2h	equ	0xFDA
 12051                           fsr2l	equ	0xFD9
 12052                           status	equ	0xFD8
 12053                           
 12054 ;; *************** function _Make32bitsArray *****************
 12055 ;; Defined at:
 12056 ;;		line 118 in file "SystemCommon.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;  array           2   23[COMRAM] PTR unsigned char 
 12059 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12060 ;;  data            4   25[COMRAM] unsigned long 
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;  idx             2   31[COMRAM] int 
 12063 ;; Return value:  Size  Location     Type
 12064 ;;                  1    wreg      void 
 12065 ;; Registers used:
 12066 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12067 ;; Tracked objects:
 12068 ;;		On entry : 0/0
 12069 ;;		On exit  : 0/0
 12070 ;;		Unchanged: 0/0
 12071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12072 ;;      Params:         6       0       0       0       0       0       0
 12073 ;;      Locals:         2       0       0       0       0       0       0
 12074 ;;      Temps:          2       0       0       0       0       0       0
 12075 ;;      Totals:        10       0       0       0       0       0       0
 12076 ;;Total ram usage:       10 bytes
 12077 ;; Hardware stack levels used:    1
 12078 ;; Hardware stack levels required when called:    4
 12079 ;; This function calls:
 12080 ;;		Nothing
 12081 ;; This function is called by:
 12082 ;;		_SWSPI_Synth_send_bits
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           	psect	text67
 12087  0036BE                     __ptext67:
 12088                           	opt stack 0
 12089  0036BE                     _Make32bitsArray:
 12090                           	opt stack 21
 12091                           
 12092                           ;SystemCommon.c: 120: for(int idx = 0; idx <= 32; idx++)
 12093                           
 12094                           ;incstack = 0
 12095  0036BE  0E00               	movlw	0
 12096  0036C0  6E21               	movwf	Make32bitsArray@idx+1,c
 12097  0036C2  0E00               	movlw	0
 12098  0036C4  6E20               	movwf	Make32bitsArray@idx,c
 12099  0036C6                     l7408:
 12100  0036C6  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12101  0036C8  D006               	goto	l1422
 12102  0036CA  5021               	movf	Make32bitsArray@idx+1,w,c
 12103  0036CC  E123               	bnz	l1424
 12104  0036CE  0E21               	movlw	33
 12105  0036D0  5C20               	subwf	Make32bitsArray@idx,w,c
 12106  0036D2  B0D8               	btfsc	status,0,c
 12107  0036D4  0012               	return	
 12108  0036D6                     l1422:
 12109                           
 12110                           ;SystemCommon.c: 121: {
 12111                           ;SystemCommon.c: 122: array[32 - idx - 1] = data % 2;
 12112  0036D6  0E01               	movlw	1
 12113  0036D8  2420               	addwf	Make32bitsArray@idx,w,c
 12114  0036DA  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12115  0036DC  0E00               	movlw	0
 12116  0036DE  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12117  0036E0  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12118  0036E2  1E1E               	comf	??_Make32bitsArray,f,c
 12119  0036E4  1E1F               	comf	??_Make32bitsArray+1,f,c
 12120  0036E6  4A1E               	infsnz	??_Make32bitsArray,f,c
 12121  0036E8  2A1F               	incf	??_Make32bitsArray+1,f,c
 12122  0036EA  0E20               	movlw	32
 12123  0036EC  261E               	addwf	??_Make32bitsArray,f,c
 12124  0036EE  0E00               	movlw	0
 12125  0036F0  221F               	addwfc	??_Make32bitsArray+1,f,c
 12126  0036F2  501E               	movf	??_Make32bitsArray,w,c
 12127  0036F4  2418               	addwf	Make32bitsArray@array,w,c
 12128  0036F6  6ED9               	movwf	fsr2l,c
 12129  0036F8  501F               	movf	??_Make32bitsArray+1,w,c
 12130  0036FA  2019               	addwfc	Make32bitsArray@array+1,w,c
 12131  0036FC  6EDA               	movwf	fsr2h,c
 12132  0036FE  501A               	movf	Make32bitsArray@data,w,c
 12133  003700  0B01               	andlw	1
 12134  003702  6EDF               	movwf	indf2,c
 12135                           
 12136                           ;SystemCommon.c: 123: data /= 2;
 12137  003704  90D8               	bcf	status,0,c
 12138  003706  321D               	rrcf	Make32bitsArray@data+3,f,c
 12139  003708  321C               	rrcf	Make32bitsArray@data+2,f,c
 12140  00370A  321B               	rrcf	Make32bitsArray@data+1,f,c
 12141  00370C  321A               	rrcf	Make32bitsArray@data,f,c
 12142  00370E  4A20               	infsnz	Make32bitsArray@idx,f,c
 12143  003710  2A21               	incf	Make32bitsArray@idx+1,f,c
 12144  003712  D7D9               	goto	l7408
 12145  003714                     l1424:
 12146  003714  0012               	return		;funcret
 12147  003716                     __end_of_Make32bitsArray:
 12148                           	opt stack 0
 12149                           tosu	equ	0xFFF
 12150                           tosh	equ	0xFFE
 12151                           tosl	equ	0xFFD
 12152                           pclath	equ	0xFFA
 12153                           tblptru	equ	0xFF8
 12154                           tblptrh	equ	0xFF7
 12155                           tblptrl	equ	0xFF6
 12156                           tablat	equ	0xFF5
 12157                           prodh	equ	0xFF4
 12158                           prodl	equ	0xFF3
 12159                           intcon	equ	0xFF2
 12160                           intcon2	equ	0xFF1
 12161                           postinc0	equ	0xFEE
 12162                           plusw0	equ	0xFEB
 12163                           wreg	equ	0xFE8
 12164                           indf1	equ	0xFE7
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           plusw2	equ	0xFDB
 12172                           fsr2h	equ	0xFDA
 12173                           fsr2l	equ	0xFD9
 12174                           status	equ	0xFD8
 12175                           
 12176 ;; *************** function _FillArray *****************
 12177 ;; Defined at:
 12178 ;;		line 29 in file "SystemCommon.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  array           2   31[COMRAM] PTR unsigned char 
 12181 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12182 ;;  size            2   33[COMRAM] int 
 12183 ;;  value           1   35[COMRAM] unsigned char 
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;		None
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      void 
 12188 ;; Registers used:
 12189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12195 ;;      Params:         5       0       0       0       0       0       0
 12196 ;;      Locals:         0       0       0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0
 12198 ;;      Totals:         5       0       0       0       0       0       0
 12199 ;;Total ram usage:        5 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    5
 12202 ;; This function calls:
 12203 ;;		_memset
 12204 ;; This function is called by:
 12205 ;;		_PLLInitialize
 12206 ;;		_SWSPI_Synth_send_bits
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	text68
 12211  004046                     __ptext68:
 12212                           	opt stack 0
 12213  004046                     _FillArray:
 12214                           	opt stack 20
 12215                           
 12216                           ;SystemCommon.c: 31: memset(array, value, size);
 12217                           
 12218                           ;incstack = 0
 12219  004046  C020  F018         	movff	FillArray@array,memset@p1
 12220  00404A  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12221  00404E  C024  F01A         	movff	FillArray@value,memset@c
 12222  004052  6A1B               	clrf	memset@c+1,c
 12223  004054  C022  F01C         	movff	FillArray@size,memset@n
 12224  004058  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12225  00405C  EC1C  F01F         	call	_memset	;wreg free
 12226  004060  0012               	return		;funcret
 12227  004062                     __end_of_FillArray:
 12228                           	opt stack 0
 12229                           tosu	equ	0xFFF
 12230                           tosh	equ	0xFFE
 12231                           tosl	equ	0xFFD
 12232                           pclath	equ	0xFFA
 12233                           tblptru	equ	0xFF8
 12234                           tblptrh	equ	0xFF7
 12235                           tblptrl	equ	0xFF6
 12236                           tablat	equ	0xFF5
 12237                           prodh	equ	0xFF4
 12238                           prodl	equ	0xFF3
 12239                           intcon	equ	0xFF2
 12240                           intcon2	equ	0xFF1
 12241                           postinc0	equ	0xFEE
 12242                           plusw0	equ	0xFEB
 12243                           wreg	equ	0xFE8
 12244                           indf1	equ	0xFE7
 12245                           postdec1	equ	0xFE5
 12246                           fsr1h	equ	0xFE2
 12247                           fsr1l	equ	0xFE1
 12248                           indf2	equ	0xFDF
 12249                           postinc2	equ	0xFDE
 12250                           postdec2	equ	0xFDD
 12251                           plusw2	equ	0xFDB
 12252                           fsr2h	equ	0xFDA
 12253                           fsr2l	equ	0xFD9
 12254                           status	equ	0xFD8
 12255                           
 12256 ;; *************** function _memset *****************
 12257 ;; Defined at:
 12258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;  p1              2   23[COMRAM] PTR void 
 12261 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 12262 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 12263 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdTxArray(12), 
 12264 ;;		 -> synthLdRxArray(12), 
 12265 ;;  c               2   25[COMRAM] int 
 12266 ;;  n               2   27[COMRAM] unsigned int 
 12267 ;; Auto vars:     Size  Location     Type
 12268 ;;  p               2   29[COMRAM] PTR unsigned char 
 12269 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 12270 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 12271 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdTxArray(12), 
 12272 ;;		 -> synthLdRxArray(12), 
 12273 ;; Return value:  Size  Location     Type
 12274 ;;                  2   23[COMRAM] PTR void 
 12275 ;; Registers used:
 12276 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12277 ;; Tracked objects:
 12278 ;;		On entry : 0/0
 12279 ;;		On exit  : 0/0
 12280 ;;		Unchanged: 0/0
 12281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12282 ;;      Params:         6       0       0       0       0       0       0
 12283 ;;      Locals:         2       0       0       0       0       0       0
 12284 ;;      Temps:          0       0       0       0       0       0       0
 12285 ;;      Totals:         8       0       0       0       0       0       0
 12286 ;;Total ram usage:        8 bytes
 12287 ;; Hardware stack levels used:    1
 12288 ;; Hardware stack levels required when called:    4
 12289 ;; This function calls:
 12290 ;;		Nothing
 12291 ;; This function is called by:
 12292 ;;		_ZeroArray
 12293 ;;		_FillArray
 12294 ;; This function uses a non-reentrant model
 12295 ;;
 12296                           
 12297                           	psect	text69
 12298  003E38                     __ptext69:
 12299                           	opt stack 0
 12300  003E38                     _memset:
 12301                           	opt stack 24
 12302                           
 12303                           ;incstack = 0
 12304  003E38  C018  F01E         	movff	memset@p1,memset@p
 12305  003E3C  C019  F01F         	movff	memset@p1+1,memset@p+1
 12306  003E40  D008               	goto	l2013
 12307  003E42                     l7190:
 12308  003E42  C01E  FFD9         	movff	memset@p,fsr2l
 12309  003E46  C01F  FFDA         	movff	memset@p+1,fsr2h
 12310  003E4A  C01A  FFDF         	movff	memset@c,indf2
 12311  003E4E  4A1E               	infsnz	memset@p,f,c
 12312  003E50  2A1F               	incf	memset@p+1,f,c
 12313  003E52                     l2013:
 12314  003E52  061C               	decf	memset@n,f,c
 12315  003E54  A0D8               	btfss	status,0,c
 12316  003E56  061D               	decf	memset@n+1,f,c
 12317  003E58  281C               	incf	memset@n,w,c
 12318  003E5A  E1F3               	bnz	l7190
 12319  003E5C  281D               	incf	memset@n+1,w,c
 12320  003E5E  B4D8               	btfsc	status,2,c
 12321  003E60  0012               	return	
 12322  003E62  D7EF               	goto	l2014
 12323  003E64                     __end_of_memset:
 12324                           	opt stack 0
 12325                           tosu	equ	0xFFF
 12326                           tosh	equ	0xFFE
 12327                           tosl	equ	0xFFD
 12328                           pclath	equ	0xFFA
 12329                           tblptru	equ	0xFF8
 12330                           tblptrh	equ	0xFF7
 12331                           tblptrl	equ	0xFF6
 12332                           tablat	equ	0xFF5
 12333                           prodh	equ	0xFF4
 12334                           prodl	equ	0xFF3
 12335                           intcon	equ	0xFF2
 12336                           intcon2	equ	0xFF1
 12337                           postinc0	equ	0xFEE
 12338                           plusw0	equ	0xFEB
 12339                           wreg	equ	0xFE8
 12340                           indf1	equ	0xFE7
 12341                           postdec1	equ	0xFE5
 12342                           fsr1h	equ	0xFE2
 12343                           fsr1l	equ	0xFE1
 12344                           indf2	equ	0xFDF
 12345                           postinc2	equ	0xFDE
 12346                           postdec2	equ	0xFDD
 12347                           plusw2	equ	0xFDB
 12348                           fsr2h	equ	0xFDA
 12349                           fsr2l	equ	0xFD9
 12350                           status	equ	0xFD8
 12351                           
 12352 ;; *************** function _SWSPI_DAC_send_bits *****************
 12353 ;; Defined at:
 12354 ;;		line 43 in file "SwSpiApp.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;  phrType         1    wreg     enum E1
 12357 ;;  data            1   25[COMRAM] unsigned char 
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;  phrType         1   27[COMRAM] enum E1
 12360 ;;  count           1   26[COMRAM] unsigned char 
 12361 ;; Return value:  Size  Location     Type
 12362 ;;                  1    wreg      void 
 12363 ;; Registers used:
 12364 ;;		wreg, status,2, status,0, cstack
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12370 ;;      Params:         1       0       0       0       0       0       0
 12371 ;;      Locals:         2       0       0       0       0       0       0
 12372 ;;      Temps:          0       0       0       0       0       0       0
 12373 ;;      Totals:         3       0       0       0       0       0       0
 12374 ;;Total ram usage:        3 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    5
 12377 ;; This function calls:
 12378 ;;		_SwSpi_Clk_Pin
 12379 ;;		_SwSpi_Data_Pin
 12380 ;; This function is called by:
 12381 ;;		_SWSPI_send_word
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text70
 12386  003716                     __ptext70:
 12387                           	opt stack 0
 12388  003716                     _SWSPI_DAC_send_bits:
 12389                           	opt stack 21
 12390                           
 12391                           ;incstack = 0
 12392                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 12393  003716  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 12394                           
 12395                           ;SwSpiApp.c: 45: uint8_t count;
 12396                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 12397  003718  0E08               	movlw	8
 12398  00371A  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 12399  00371C  D01A               	goto	l634
 12400  00371E                     
 12401                           ;SwSpiApp.c: 47: {
 12402                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 12403  00371E  0E01               	movlw	1
 12404  003720  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12405  003722  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12406  003724  ECE2  F01B         	call	_SwSpi_Clk_Pin
 12407                           
 12408                           ;SwSpiApp.c: 50: if (data & 0X80)
 12409  003728  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 12410  00372A  D006               	goto	l636
 12411                           
 12412                           ;SwSpiApp.c: 51: {
 12413                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 12414  00372C  0E01               	movlw	1
 12415  00372E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12416  003730  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12417  003732  ECB7  F01B         	call	_SwSpi_Data_Pin
 12418                           
 12419                           ;SwSpiApp.c: 54: }
 12420  003736  D005               	goto	l637
 12421  003738                     l636:
 12422                           
 12423                           ;SwSpiApp.c: 55: else
 12424                           ;SwSpiApp.c: 56: {
 12425                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 12426  003738  0E00               	movlw	0
 12427  00373A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12428  00373C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12429  00373E  ECB7  F01B         	call	_SwSpi_Data_Pin
 12430  003742                     l637:
 12431                           
 12432                           ;SwSpiApp.c: 58: }
 12433                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 12434  003742  0E00               	movlw	0
 12435  003744  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12436  003746  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12437  003748  ECE2  F01B         	call	_SwSpi_Clk_Pin
 12438  00374C  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 12439  00374E  90D8               	bcf	status,0,c
 12440  003750  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 12441  003752                     l634:
 12442  003752  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 12443  003754  A4D8               	btfss	status,2,c
 12444  003756  D7E3               	goto	l635
 12445                           
 12446                           ;SwSpiApp.c: 61: }
 12447                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 12448  003758  0E00               	movlw	0
 12449  00375A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12450  00375C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12451  00375E  ECB7  F01B         	call	_SwSpi_Data_Pin
 12452                           
 12453                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 12454  003762  0E00               	movlw	0
 12455  003764  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12456  003766  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12457  003768  ECE2  F01B         	call	_SwSpi_Clk_Pin
 12458  00376C  0012               	return		;funcret
 12459  00376E                     __end_of_SWSPI_DAC_send_bits:
 12460                           	opt stack 0
 12461                           tosu	equ	0xFFF
 12462                           tosh	equ	0xFFE
 12463                           tosl	equ	0xFFD
 12464                           pclath	equ	0xFFA
 12465                           tblptru	equ	0xFF8
 12466                           tblptrh	equ	0xFF7
 12467                           tblptrl	equ	0xFF6
 12468                           tablat	equ	0xFF5
 12469                           prodh	equ	0xFF4
 12470                           prodl	equ	0xFF3
 12471                           intcon	equ	0xFF2
 12472                           intcon2	equ	0xFF1
 12473                           postinc0	equ	0xFEE
 12474                           plusw0	equ	0xFEB
 12475                           wreg	equ	0xFE8
 12476                           indf1	equ	0xFE7
 12477                           postdec1	equ	0xFE5
 12478                           fsr1h	equ	0xFE2
 12479                           fsr1l	equ	0xFE1
 12480                           indf2	equ	0xFDF
 12481                           postinc2	equ	0xFDE
 12482                           postdec2	equ	0xFDD
 12483                           plusw2	equ	0xFDB
 12484                           fsr2h	equ	0xFDA
 12485                           fsr2l	equ	0xFD9
 12486                           status	equ	0xFD8
 12487                           
 12488 ;; *************** function _SwSpi_Data_Pin *****************
 12489 ;; Defined at:
 12490 ;;		line 103 in file "SwSpiApp.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;  phrType         1    wreg     enum E1
 12493 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  phrType         1   24[COMRAM] enum E1
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      void 
 12498 ;; Registers used:
 12499 ;;		wreg, status,2, status,0
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12505 ;;      Params:         1       0       0       0       0       0       0
 12506 ;;      Locals:         1       0       0       0       0       0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0
 12508 ;;      Totals:         2       0       0       0       0       0       0
 12509 ;;Total ram usage:        2 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    4
 12512 ;; This function calls:
 12513 ;;		Nothing
 12514 ;; This function is called by:
 12515 ;;		_SWSPI_DAC_send_bits
 12516 ;;		_SWSPI_Synth_send_bits
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text71
 12521  00376E                     __ptext71:
 12522                           	opt stack 0
 12523  00376E                     _SwSpi_Data_Pin:
 12524                           	opt stack 21
 12525                           
 12526                           ;incstack = 0
 12527                           ;SwSpi_Data_Pin@phrType stored from wreg
 12528  00376E  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 12529                           
 12530                           ;SwSpiApp.c: 105: switch(phrType)
 12531  003770  D01E               	goto	l649
 12532  003772                     
 12533                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 12534  003772  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12535  003774  A4D8               	btfss	status,2,c
 12536  003776  D002               	goto	l651
 12537                           
 12538                           ;SwSpiApp.c: 109: {
 12539                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 12540  003778  808C               	bsf	3980,0,c	;volatile
 12541                           
 12542                           ;SwSpiApp.c: 111: }
 12543  00377A  0012               	return	
 12544  00377C                     l651:
 12545                           
 12546                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 12547  00377C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12548  00377E  A4D8               	btfss	status,2,c
 12549  003780  0012               	return	
 12550                           
 12551                           ;SwSpiApp.c: 113: {
 12552                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 12553  003782  908C               	bcf	3980,0,c	;volatile
 12554                           
 12555                           ;SwSpiApp.c: 115: }
 12556                           ;SwSpiApp.c: 116: break;
 12557  003784  0012               	return	
 12558  003786                     
 12559                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 12560  003786  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12561  003788  A4D8               	btfss	status,2,c
 12562  00378A  D002               	goto	l660
 12563                           
 12564                           ;SwSpiApp.c: 120: {
 12565                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 12566  00378C  8A8B               	bsf	3979,5,c	;volatile
 12567                           
 12568                           ;SwSpiApp.c: 122: }
 12569  00378E  0012               	return	
 12570  003790                     l660:
 12571                           
 12572                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 12573  003790  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12574  003792  A4D8               	btfss	status,2,c
 12575  003794  0012               	return	
 12576                           
 12577                           ;SwSpiApp.c: 124: {
 12578                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 12579  003796  9A8B               	bcf	3979,5,c	;volatile
 12580                           
 12581                           ;SwSpiApp.c: 126: }
 12582                           ;SwSpiApp.c: 127: break;
 12583  003798  0012               	return	
 12584  00379A                     
 12585                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 12586  00379A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12587  00379C  A4D8               	btfss	status,2,c
 12588  00379E  D002               	goto	l668
 12589                           
 12590                           ;SwSpiApp.c: 131: {
 12591                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 12592  0037A0  8889               	bsf	3977,4,c	;volatile
 12593                           
 12594                           ;SwSpiApp.c: 133: }
 12595  0037A2  0012               	return	
 12596  0037A4                     l668:
 12597                           
 12598                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 12599  0037A4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12600  0037A6  A4D8               	btfss	status,2,c
 12601  0037A8  0012               	return	
 12602                           
 12603                           ;SwSpiApp.c: 135: {
 12604                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 12605  0037AA  9889               	bcf	3977,4,c	;volatile
 12606                           
 12607                           ;SwSpiApp.c: 139: }
 12608                           
 12609                           ;SwSpiApp.c: 137: }
 12610                           ;SwSpiApp.c: 138: break;
 12611  0037AC  0012               	return	
 12612  0037AE                     l649:
 12613  0037AE  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 12614                           
 12615                           ; Switch size 1, requested type "space"
 12616                           ; Number of cases is 3, Range of values is 0 to 2
 12617                           ; switch strategies available:
 12618                           ; Name         Instructions Cycles
 12619                           ; simple_byte           10     6 (average)
 12620                           ;	Chosen strategy is simple_byte
 12621  0037B0  0A00               	xorlw	0	; case 0
 12622  0037B2  B4D8               	btfsc	status,2,c
 12623  0037B4  D7DE               	goto	l650
 12624  0037B6  0A01               	xorlw	1	; case 1
 12625  0037B8  B4D8               	btfsc	status,2,c
 12626  0037BA  D7E5               	goto	l659
 12627  0037BC  0A03               	xorlw	3	; case 2
 12628  0037BE  A4D8               	btfss	status,2,c
 12629  0037C0  0012               	return	
 12630  0037C2  D7EB               	goto	l667
 12631  0037C4                     __end_of_SwSpi_Data_Pin:
 12632                           	opt stack 0
 12633                           tosu	equ	0xFFF
 12634                           tosh	equ	0xFFE
 12635                           tosl	equ	0xFFD
 12636                           pclath	equ	0xFFA
 12637                           tblptru	equ	0xFF8
 12638                           tblptrh	equ	0xFF7
 12639                           tblptrl	equ	0xFF6
 12640                           tablat	equ	0xFF5
 12641                           prodh	equ	0xFF4
 12642                           prodl	equ	0xFF3
 12643                           intcon	equ	0xFF2
 12644                           intcon2	equ	0xFF1
 12645                           postinc0	equ	0xFEE
 12646                           plusw0	equ	0xFEB
 12647                           wreg	equ	0xFE8
 12648                           indf1	equ	0xFE7
 12649                           postdec1	equ	0xFE5
 12650                           fsr1h	equ	0xFE2
 12651                           fsr1l	equ	0xFE1
 12652                           indf2	equ	0xFDF
 12653                           postinc2	equ	0xFDE
 12654                           postdec2	equ	0xFDD
 12655                           plusw2	equ	0xFDB
 12656                           fsr2h	equ	0xFDA
 12657                           fsr2l	equ	0xFD9
 12658                           status	equ	0xFD8
 12659                           
 12660 ;; *************** function _SwSpi_Clk_Pin *****************
 12661 ;; Defined at:
 12662 ;;		line 142 in file "SwSpiApp.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  phrType         1    wreg     enum E1
 12665 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12666 ;; Auto vars:     Size  Location     Type
 12667 ;;  phrType         1   24[COMRAM] enum E1
 12668 ;; Return value:  Size  Location     Type
 12669 ;;                  1    wreg      void 
 12670 ;; Registers used:
 12671 ;;		wreg, status,2, status,0
 12672 ;; Tracked objects:
 12673 ;;		On entry : 0/0
 12674 ;;		On exit  : 0/0
 12675 ;;		Unchanged: 0/0
 12676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12677 ;;      Params:         1       0       0       0       0       0       0
 12678 ;;      Locals:         1       0       0       0       0       0       0
 12679 ;;      Temps:          0       0       0       0       0       0       0
 12680 ;;      Totals:         2       0       0       0       0       0       0
 12681 ;;Total ram usage:        2 bytes
 12682 ;; Hardware stack levels used:    1
 12683 ;; Hardware stack levels required when called:    4
 12684 ;; This function calls:
 12685 ;;		Nothing
 12686 ;; This function is called by:
 12687 ;;		_SWSPI_DAC_send_bits
 12688 ;;		_SWSPI_Synth_send_bits
 12689 ;;		_SwSpi_Synth_Toggle_Clock
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           	psect	text72
 12694  0037C4                     __ptext72:
 12695                           	opt stack 0
 12696  0037C4                     _SwSpi_Clk_Pin:
 12697                           	opt stack 21
 12698                           
 12699                           ;incstack = 0
 12700                           ;SwSpi_Clk_Pin@phrType stored from wreg
 12701  0037C4  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 12702                           
 12703                           ;SwSpiApp.c: 144: switch(phrType)
 12704  0037C6  D01E               	goto	l678
 12705  0037C8                     
 12706                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 12707  0037C8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12708  0037CA  A4D8               	btfss	status,2,c
 12709  0037CC  D002               	goto	l680
 12710                           
 12711                           ;SwSpiApp.c: 148: {
 12712                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 12713  0037CE  868B               	bsf	3979,3,c	;volatile
 12714                           
 12715                           ;SwSpiApp.c: 150: }
 12716  0037D0  0012               	return	
 12717  0037D2                     l680:
 12718                           
 12719                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 12720  0037D2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12721  0037D4  A4D8               	btfss	status,2,c
 12722  0037D6  0012               	return	
 12723                           
 12724                           ;SwSpiApp.c: 152: {
 12725                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 12726  0037D8  968B               	bcf	3979,3,c	;volatile
 12727                           
 12728                           ;SwSpiApp.c: 154: }
 12729                           ;SwSpiApp.c: 155: break;
 12730  0037DA  0012               	return	
 12731  0037DC                     
 12732                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 12733  0037DC  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12734  0037DE  A4D8               	btfss	status,2,c
 12735  0037E0  D002               	goto	l689
 12736                           
 12737                           ;SwSpiApp.c: 159: {
 12738                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 12739  0037E2  888B               	bsf	3979,4,c	;volatile
 12740                           
 12741                           ;SwSpiApp.c: 161: }
 12742  0037E4  0012               	return	
 12743  0037E6                     l689:
 12744                           
 12745                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 12746  0037E6  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12747  0037E8  A4D8               	btfss	status,2,c
 12748  0037EA  0012               	return	
 12749                           
 12750                           ;SwSpiApp.c: 163: {
 12751                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 12752  0037EC  988B               	bcf	3979,4,c	;volatile
 12753                           
 12754                           ;SwSpiApp.c: 165: }
 12755                           ;SwSpiApp.c: 167: break;
 12756  0037EE  0012               	return	
 12757  0037F0                     
 12758                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 12759  0037F0  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12760  0037F2  A4D8               	btfss	status,2,c
 12761  0037F4  D002               	goto	l697
 12762                           
 12763                           ;SwSpiApp.c: 171: {
 12764                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 12765  0037F6  8689               	bsf	3977,3,c	;volatile
 12766                           
 12767                           ;SwSpiApp.c: 173: }
 12768  0037F8  0012               	return	
 12769  0037FA                     l697:
 12770                           
 12771                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 12772  0037FA  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12773  0037FC  A4D8               	btfss	status,2,c
 12774  0037FE  0012               	return	
 12775                           
 12776                           ;SwSpiApp.c: 175: {
 12777                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 12778  003800  9689               	bcf	3977,3,c	;volatile
 12779                           
 12780                           ;SwSpiApp.c: 179: }
 12781                           
 12782                           ;SwSpiApp.c: 177: }
 12783                           ;SwSpiApp.c: 178: break;
 12784  003802  0012               	return	
 12785  003804                     l678:
 12786  003804  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 12787                           
 12788                           ; Switch size 1, requested type "space"
 12789                           ; Number of cases is 3, Range of values is 0 to 2
 12790                           ; switch strategies available:
 12791                           ; Name         Instructions Cycles
 12792                           ; simple_byte           10     6 (average)
 12793                           ;	Chosen strategy is simple_byte
 12794  003806  0A00               	xorlw	0	; case 0
 12795  003808  B4D8               	btfsc	status,2,c
 12796  00380A  D7DE               	goto	l679
 12797  00380C  0A01               	xorlw	1	; case 1
 12798  00380E  B4D8               	btfsc	status,2,c
 12799  003810  D7E5               	goto	l688
 12800  003812  0A03               	xorlw	3	; case 2
 12801  003814  A4D8               	btfss	status,2,c
 12802  003816  0012               	return	
 12803  003818  D7EB               	goto	l696
 12804  00381A                     __end_of_SwSpi_Clk_Pin:
 12805                           	opt stack 0
 12806                           tosu	equ	0xFFF
 12807                           tosh	equ	0xFFE
 12808                           tosl	equ	0xFFD
 12809                           pclath	equ	0xFFA
 12810                           tblptru	equ	0xFF8
 12811                           tblptrh	equ	0xFF7
 12812                           tblptrl	equ	0xFF6
 12813                           tablat	equ	0xFF5
 12814                           prodh	equ	0xFF4
 12815                           prodl	equ	0xFF3
 12816                           intcon	equ	0xFF2
 12817                           intcon2	equ	0xFF1
 12818                           postinc0	equ	0xFEE
 12819                           plusw0	equ	0xFEB
 12820                           wreg	equ	0xFE8
 12821                           indf1	equ	0xFE7
 12822                           postdec1	equ	0xFE5
 12823                           fsr1h	equ	0xFE2
 12824                           fsr1l	equ	0xFE1
 12825                           indf2	equ	0xFDF
 12826                           postinc2	equ	0xFDE
 12827                           postdec2	equ	0xFDD
 12828                           plusw2	equ	0xFDB
 12829                           fsr2h	equ	0xFDA
 12830                           fsr2l	equ	0xFD9
 12831                           status	equ	0xFD8
 12832                           
 12833 ;; *************** function _ReadIntFromEeprom *****************
 12834 ;; Defined at:
 12835 ;;		line 136 in file "SystemCommon.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;  address         1    wreg     unsigned char 
 12838 ;;  numOfByes       2   81[BANK0 ] int 
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  address         1   98[BANK0 ] unsigned char 
 12841 ;;  base            4   88[BANK0 ] unsigned long 
 12842 ;;  idx             1  103[BANK0 ] unsigned char 
 12843 ;;  retVal          4   99[BANK0 ] unsigned long 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  4   81[BANK0 ] unsigned long 
 12846 ;; Registers used:
 12847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12853 ;;      Params:         0       4       0       0       0       0       0
 12854 ;;      Locals:         0      16       0       0       0       0       0
 12855 ;;      Temps:          0       3       0       0       0       0       0
 12856 ;;      Totals:         0      23       0       0       0       0       0
 12857 ;;Total ram usage:       23 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    9
 12860 ;; This function calls:
 12861 ;;		_EepromRead
 12862 ;;		___awtoft
 12863 ;;		___fttol
 12864 ;;		___lmul
 12865 ;;		_pow
 12866 ;; This function is called by:
 12867 ;;		_DacInit
 12868 ;;		_DacReadValue
 12869 ;;		_InitSynth
 12870 ;;		_SynthReadData
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text73
 12875  001D52                     __ptext73:
 12876                           	opt stack 0
 12877  001D52                     _ReadIntFromEeprom:
 12878                           	opt stack 18
 12879                           
 12880                           ;incstack = 0
 12881                           ;ReadIntFromEeprom@address stored from wreg
 12882  001D52  0100               	movlb	0	; () banked
 12883  001D54  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 12884                           
 12885                           ;SystemCommon.c: 138: uint32_t retVal = 0x00;
 12886  001D56  0E00               	movlw	0
 12887  001D58  0100               	movlb	0	; () banked
 12888  001D5A  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12889  001D5C  0E00               	movlw	0
 12890  001D5E  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12891  001D60  0E00               	movlw	0
 12892  001D62  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12893  001D64  0E00               	movlw	0
 12894  001D66  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;SystemCommon.c: 139: address -= numOfByes;
 12898  001D68  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12899  001D6A  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;SystemCommon.c: 141: for(uint8_t idx = 0; idx < numOfByes; idx++)
 12903  001D6C  0E00               	movlw	0
 12904  001D6E  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 12905  001D70  D06D               	goto	l1433
 12906  001D72                     
 12907                           ; BSR set to: 0
 12908                           ;SystemCommon.c: 142: {
 12909                           ;SystemCommon.c: 143: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12910                           
 12911                           ; BSR set to: 0
 12912  001D72  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12913  001D74  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12914  001D76  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12915  001D78  0E01               	movlw	1
 12916  001D7A  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12917  001D7C  0E00               	movlw	0
 12918  001D7E  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12919  001D80  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 12920  001D82  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12921  001D84  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 12922  001D86  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12923  001D88  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12924  001D8A  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12925  001D8C  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12926  001D8E  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12927  001D90  90D8               	bcf	status,0,c
 12928  001D92  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12929  001D94  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12930  001D96  90D8               	bcf	status,0,c
 12931  001D98  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12932  001D9A  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12933  001D9C  90D8               	bcf	status,0,c
 12934  001D9E  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12935  001DA0  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12936  001DA2  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 12937  001DA6  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 12938  001DAA  ECE7  F01D         	call	___awtoft	;wreg free
 12939  001DAE  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3584
 12940  001DB2  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3584+1
 12941  001DB6  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3584+2
 12942                           
 12943                           ;SystemCommon.c: 142: {
 12944                           ;SystemCommon.c: 143: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12945  001DBA  C0BC  F0A3         	movff	_ReadIntFromEeprom$3584,pow@y
 12946  001DBE  C0BD  F0A4         	movff	_ReadIntFromEeprom$3584+1,pow@y+1
 12947  001DC2  C0BE  F0A5         	movff	_ReadIntFromEeprom$3584+2,pow@y+2
 12948  001DC6  0E00               	movlw	0
 12949  001DC8  0100               	movlb	0	; () banked
 12950  001DCA  6FA0               	movwf	pow@x& (0+255),b
 12951  001DCC  0E00               	movlw	0
 12952  001DCE  6FA1               	movwf	(pow@x+1)& (0+255),b
 12953  001DD0  0E40               	movlw	64
 12954  001DD2  6FA2               	movwf	(pow@x+2)& (0+255),b
 12955  001DD4  ECEB  F00D         	call	_pow	;wreg free
 12956  001DD8  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3585
 12957  001DDC  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3585+1
 12958  001DE0  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3585+2
 12959                           
 12960                           ;SystemCommon.c: 142: {
 12961                           ;SystemCommon.c: 143: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12962  001DE4  C0BF  F078         	movff	_ReadIntFromEeprom$3585,___fttol@f1
 12963  001DE8  C0C0  F079         	movff	_ReadIntFromEeprom$3585+1,___fttol@f1+1
 12964  001DEC  C0C1  F07A         	movff	_ReadIntFromEeprom$3585+2,___fttol@f1+2
 12965  001DF0  ECD2  F010         	call	___fttol	;wreg free
 12966  001DF4  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 12967  001DF8  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 12968  001DFC  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 12969  001E00  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 12970                           
 12971                           ;SystemCommon.c: 144: retVal = retVal | EepromRead(address + idx) * base;
 12972  001E04  0100               	movlb	0	; () banked
 12973  001E06  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 12974  001E08  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 12975  001E0A  ECD0  F020         	call	_EepromRead
 12976  001E0E  0100               	movlb	0	; () banked
 12977  001E10  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12978  001E12  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 12979  001E14  6E1A               	movwf	___lmul@multiplier,c
 12980  001E16  6A1B               	clrf	___lmul@multiplier+1,c
 12981  001E18  6A1C               	clrf	___lmul@multiplier+2,c
 12982  001E1A  6A1D               	clrf	___lmul@multiplier+3,c
 12983  001E1C  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 12984  001E20  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 12985  001E24  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 12986  001E28  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 12987  001E2C  EC0D  F01C         	call	___lmul	;wreg free
 12988  001E30  0100               	movlb	0	; () banked
 12989  001E32  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 12990  001E34  101A               	iorwf	?___lmul,w,c
 12991  001E36  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12992  001E38  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 12993  001E3A  101B               	iorwf	?___lmul+1,w,c
 12994  001E3C  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12995  001E3E  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 12996  001E40  101C               	iorwf	?___lmul+2,w,c
 12997  001E42  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12998  001E44  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 12999  001E46  101D               	iorwf	?___lmul+3,w,c
 13000  001E48  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13001                           
 13002                           ; BSR set to: 0
 13003  001E4A  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13004  001E4C                     l1433:
 13005                           
 13006                           ; BSR set to: 0
 13007                           
 13008                           ; BSR set to: 0
 13009  001E4C  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13010  001E4E  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13011  001E50  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13012  001E52  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13013  001E54  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13014  001E56  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13015  001E58  0A80               	xorlw	128
 13016  001E5A  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13017  001E5C  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13018  001E5E  0A80               	xorlw	128
 13019  001E60  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13020  001E62  A0D8               	btfss	status,0,c
 13021  001E64  D786               	goto	l1434
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;SystemCommon.c: 145: }
 13025                           ;SystemCommon.c: 146: return retVal;
 13026  001E66  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13027  001E6A  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13028  001E6E  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13029  001E72  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13030                           
 13031                           ; BSR set to: 0
 13032  001E76  0012               	return		;funcret
 13033  001E78                     __end_of_ReadIntFromEeprom:
 13034                           	opt stack 0
 13035                           tosu	equ	0xFFF
 13036                           tosh	equ	0xFFE
 13037                           tosl	equ	0xFFD
 13038                           pclath	equ	0xFFA
 13039                           tblptru	equ	0xFF8
 13040                           tblptrh	equ	0xFF7
 13041                           tblptrl	equ	0xFF6
 13042                           tablat	equ	0xFF5
 13043                           prodh	equ	0xFF4
 13044                           prodl	equ	0xFF3
 13045                           intcon	equ	0xFF2
 13046                           intcon2	equ	0xFF1
 13047                           postinc0	equ	0xFEE
 13048                           plusw0	equ	0xFEB
 13049                           wreg	equ	0xFE8
 13050                           indf1	equ	0xFE7
 13051                           postdec1	equ	0xFE5
 13052                           fsr1h	equ	0xFE2
 13053                           fsr1l	equ	0xFE1
 13054                           indf2	equ	0xFDF
 13055                           postinc2	equ	0xFDE
 13056                           postdec2	equ	0xFDD
 13057                           plusw2	equ	0xFDB
 13058                           fsr2h	equ	0xFDA
 13059                           fsr2l	equ	0xFD9
 13060                           status	equ	0xFD8
 13061                           
 13062 ;; *************** function ___lmul *****************
 13063 ;; Defined at:
 13064 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  multiplier      4   25[COMRAM] unsigned long 
 13067 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;  product         4   33[COMRAM] unsigned long 
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  4   25[COMRAM] unsigned long 
 13072 ;; Registers used:
 13073 ;;		wreg, status,2, status,0
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13079 ;;      Params:         8       0       0       0       0       0       0
 13080 ;;      Locals:         4       0       0       0       0       0       0
 13081 ;;      Temps:          0       0       0       0       0       0       0
 13082 ;;      Totals:        12       0       0       0       0       0       0
 13083 ;;Total ram usage:       12 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    4
 13086 ;; This function calls:
 13087 ;;		Nothing
 13088 ;; This function is called by:
 13089 ;;		_ReadIntFromEeprom
 13090 ;;		_strtol
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           	psect	text74
 13095  00381A                     __ptext74:
 13096                           	opt stack 0
 13097  00381A                     ___lmul:
 13098                           	opt stack 21
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;incstack = 0
 13102  00381A  0E00               	movlw	0
 13103  00381C  6E22               	movwf	___lmul@product,c
 13104  00381E  0E00               	movlw	0
 13105  003820  6E23               	movwf	___lmul@product+1,c
 13106  003822  0E00               	movlw	0
 13107  003824  6E24               	movwf	___lmul@product+2,c
 13108  003826  0E00               	movlw	0
 13109  003828  6E25               	movwf	___lmul@product+3,c
 13110  00382A  A01A               	btfss	___lmul@multiplier,0,c
 13111  00382C  D008               	goto	l1598
 13112  00382E  501E               	movf	___lmul@multiplicand,w,c
 13113  003830  2622               	addwf	___lmul@product,f,c
 13114  003832  501F               	movf	___lmul@multiplicand+1,w,c
 13115  003834  2223               	addwfc	___lmul@product+1,f,c
 13116  003836  5020               	movf	___lmul@multiplicand+2,w,c
 13117  003838  2224               	addwfc	___lmul@product+2,f,c
 13118  00383A  5021               	movf	___lmul@multiplicand+3,w,c
 13119  00383C  2225               	addwfc	___lmul@product+3,f,c
 13120  00383E                     l1598:
 13121  00383E  90D8               	bcf	status,0,c
 13122  003840  361E               	rlcf	___lmul@multiplicand,f,c
 13123  003842  361F               	rlcf	___lmul@multiplicand+1,f,c
 13124  003844  3620               	rlcf	___lmul@multiplicand+2,f,c
 13125  003846  3621               	rlcf	___lmul@multiplicand+3,f,c
 13126  003848  90D8               	bcf	status,0,c
 13127  00384A  321D               	rrcf	___lmul@multiplier+3,f,c
 13128  00384C  321C               	rrcf	___lmul@multiplier+2,f,c
 13129  00384E  321B               	rrcf	___lmul@multiplier+1,f,c
 13130  003850  321A               	rrcf	___lmul@multiplier,f,c
 13131  003852  501A               	movf	___lmul@multiplier,w,c
 13132  003854  101B               	iorwf	___lmul@multiplier+1,w,c
 13133  003856  101C               	iorwf	___lmul@multiplier+2,w,c
 13134  003858  101D               	iorwf	___lmul@multiplier+3,w,c
 13135  00385A  A4D8               	btfss	status,2,c
 13136  00385C  D7E6               	goto	l1597
 13137  00385E  C022  F01A         	movff	___lmul@product,?___lmul
 13138  003862  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13139  003866  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13140  00386A  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13141  00386E  0012               	return		;funcret
 13142  003870                     __end_of___lmul:
 13143                           	opt stack 0
 13144                           tosu	equ	0xFFF
 13145                           tosh	equ	0xFFE
 13146                           tosl	equ	0xFFD
 13147                           pclath	equ	0xFFA
 13148                           tblptru	equ	0xFF8
 13149                           tblptrh	equ	0xFF7
 13150                           tblptrl	equ	0xFF6
 13151                           tablat	equ	0xFF5
 13152                           prodh	equ	0xFF4
 13153                           prodl	equ	0xFF3
 13154                           intcon	equ	0xFF2
 13155                           intcon2	equ	0xFF1
 13156                           postinc0	equ	0xFEE
 13157                           plusw0	equ	0xFEB
 13158                           wreg	equ	0xFE8
 13159                           indf1	equ	0xFE7
 13160                           postdec1	equ	0xFE5
 13161                           fsr1h	equ	0xFE2
 13162                           fsr1l	equ	0xFE1
 13163                           indf2	equ	0xFDF
 13164                           postinc2	equ	0xFDE
 13165                           postdec2	equ	0xFDD
 13166                           plusw2	equ	0xFDB
 13167                           fsr2h	equ	0xFDA
 13168                           fsr2l	equ	0xFD9
 13169                           status	equ	0xFD8
 13170                           
 13171 ;; *************** function _EepromRead *****************
 13172 ;; Defined at:
 13173 ;;		line 171 in file "FlashApp.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;  address         1    wreg     unsigned char 
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  address         1   24[COMRAM] unsigned char 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      unsigned char 
 13180 ;; Registers used:
 13181 ;;		wreg, status,2, cstack
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13187 ;;      Params:         0       0       0       0       0       0       0
 13188 ;;      Locals:         1       0       0       0       0       0       0
 13189 ;;      Temps:          0       0       0       0       0       0       0
 13190 ;;      Totals:         1       0       0       0       0       0       0
 13191 ;;Total ram usage:        1 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; Hardware stack levels required when called:    5
 13194 ;; This function calls:
 13195 ;;		_DATAEE_ReadByte
 13196 ;; This function is called by:
 13197 ;;		_ReadIntFromEeprom
 13198 ;; This function uses a non-reentrant model
 13199 ;;
 13200                           
 13201                           	psect	text75
 13202  0041A0                     __ptext75:
 13203                           	opt stack 0
 13204  0041A0                     _EepromRead:
 13205                           	opt stack 21
 13206                           
 13207                           ;incstack = 0
 13208                           ;EepromRead@address stored from wreg
 13209  0041A0  6E19               	movwf	EepromRead@address,c
 13210                           
 13211                           ;FlashApp.c: 173: return DATAEE_ReadByte(address);
 13212  0041A2  5019               	movf	EepromRead@address,w,c
 13213  0041A4  EC6A  F020         	call	_DATAEE_ReadByte
 13214  0041A8  0012               	return	
 13215  0041AA                     __end_of_EepromRead:
 13216                           	opt stack 0
 13217                           tosu	equ	0xFFF
 13218                           tosh	equ	0xFFE
 13219                           tosl	equ	0xFFD
 13220                           pclath	equ	0xFFA
 13221                           tblptru	equ	0xFF8
 13222                           tblptrh	equ	0xFF7
 13223                           tblptrl	equ	0xFF6
 13224                           tablat	equ	0xFF5
 13225                           prodh	equ	0xFF4
 13226                           prodl	equ	0xFF3
 13227                           intcon	equ	0xFF2
 13228                           intcon2	equ	0xFF1
 13229                           postinc0	equ	0xFEE
 13230                           plusw0	equ	0xFEB
 13231                           wreg	equ	0xFE8
 13232                           indf1	equ	0xFE7
 13233                           postdec1	equ	0xFE5
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           plusw2	equ	0xFDB
 13240                           fsr2h	equ	0xFDA
 13241                           fsr2l	equ	0xFD9
 13242                           status	equ	0xFD8
 13243                           
 13244 ;; *************** function _DATAEE_ReadByte *****************
 13245 ;; Defined at:
 13246 ;;		line 194 in file "mcc_generated_files/memory.c"
 13247 ;; Parameters:    Size  Location     Type
 13248 ;;  bAdd            1    wreg     unsigned char 
 13249 ;; Auto vars:     Size  Location     Type
 13250 ;;  bAdd            1   23[COMRAM] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  1    wreg      unsigned char 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13260 ;;      Params:         0       0       0       0       0       0       0
 13261 ;;      Locals:         1       0       0       0       0       0       0
 13262 ;;      Temps:          0       0       0       0       0       0       0
 13263 ;;      Totals:         1       0       0       0       0       0       0
 13264 ;;Total ram usage:        1 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    4
 13267 ;; This function calls:
 13268 ;;		Nothing
 13269 ;; This function is called by:
 13270 ;;		_EepromRead
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           	psect	text76
 13275  0040D4                     __ptext76:
 13276                           	opt stack 0
 13277  0040D4                     _DATAEE_ReadByte:
 13278                           	opt stack 21
 13279                           
 13280                           ;incstack = 0
 13281                           ;DATAEE_ReadByte@bAdd stored from wreg
 13282  0040D4  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13283                           
 13284                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13285  0040D6  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13286                           
 13287                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13288  0040DA  9CA6               	bcf	4006,6,c	;volsfr
 13289                           
 13290                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13291  0040DC  9EA6               	bcf	4006,7,c	;volsfr
 13292                           
 13293                           ;memory.c: 200: EECON1bits.RD = 1;
 13294  0040DE  80A6               	bsf	4006,0,c	;volsfr
 13295                           
 13296                           ;memory.c: 201: __nop();
 13297  0040E0  F000               	nop	
 13298                           
 13299                           ;memory.c: 202: __nop();
 13300  0040E2  F000               	nop	
 13301                           
 13302                           ;memory.c: 204: return (EEDATA);
 13303  0040E4  50A8               	movf	4008,w,c	;volatile
 13304  0040E6  0012               	return	
 13305  0040E8                     __end_of_DATAEE_ReadByte:
 13306                           	opt stack 0
 13307                           tosu	equ	0xFFF
 13308                           tosh	equ	0xFFE
 13309                           tosl	equ	0xFFD
 13310                           pclath	equ	0xFFA
 13311                           tblptru	equ	0xFF8
 13312                           tblptrh	equ	0xFF7
 13313                           tblptrl	equ	0xFF6
 13314                           tablat	equ	0xFF5
 13315                           prodh	equ	0xFF4
 13316                           prodl	equ	0xFF3
 13317                           intcon	equ	0xFF2
 13318                           intcon2	equ	0xFF1
 13319                           postinc0	equ	0xFEE
 13320                           plusw0	equ	0xFEB
 13321                           wreg	equ	0xFE8
 13322                           indf1	equ	0xFE7
 13323                           postdec1	equ	0xFE5
 13324                           fsr1h	equ	0xFE2
 13325                           fsr1l	equ	0xFE1
 13326                           indf2	equ	0xFDF
 13327                           postinc2	equ	0xFDE
 13328                           postdec2	equ	0xFDD
 13329                           plusw2	equ	0xFDB
 13330                           fsr2h	equ	0xFDA
 13331                           fsr2l	equ	0xFD9
 13332                           status	equ	0xFD8
 13333                           
 13334 ;; *************** function _ClearMcuRunTime *****************
 13335 ;; Defined at:
 13336 ;;		line 63 in file "SystemStatus.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;		None
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;		None
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      void 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13350 ;;      Params:         0       0       0       0       0       0       0
 13351 ;;      Locals:         0       0       0       0       0       0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0
 13353 ;;      Totals:         0       0       0       0       0       0       0
 13354 ;;Total ram usage:        0 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    4
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_InitSystemApplicationManagers
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text77
 13365  0040E8                     __ptext77:
 13366                           	opt stack 0
 13367  0040E8                     _ClearMcuRunTime:
 13368                           	opt stack 25
 13369                           
 13370                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 13371                           
 13372                           ;incstack = 0
 13373  0040E8  0E00               	movlw	0
 13374  0040EA  0100               	movlb	0	; () banked
 13375  0040EC  6FE1               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 13376  0040EE  0E00               	movlw	0
 13377  0040F0  6FE2               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 13378  0040F2  0E00               	movlw	0
 13379  0040F4  6FE3               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 13380  0040F6  0E00               	movlw	0
 13381  0040F8  6FE4               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 13382                           
 13383                           ; BSR set to: 0
 13384  0040FA  0012               	return		;funcret
 13385  0040FC                     __end_of_ClearMcuRunTime:
 13386                           	opt stack 0
 13387                           tosu	equ	0xFFF
 13388                           tosh	equ	0xFFE
 13389                           tosl	equ	0xFFD
 13390                           pclath	equ	0xFFA
 13391                           tblptru	equ	0xFF8
 13392                           tblptrh	equ	0xFF7
 13393                           tblptrl	equ	0xFF6
 13394                           tablat	equ	0xFF5
 13395                           prodh	equ	0xFF4
 13396                           prodl	equ	0xFF3
 13397                           intcon	equ	0xFF2
 13398                           intcon2	equ	0xFF1
 13399                           postinc0	equ	0xFEE
 13400                           plusw0	equ	0xFEB
 13401                           wreg	equ	0xFE8
 13402                           indf1	equ	0xFE7
 13403                           postdec1	equ	0xFE5
 13404                           fsr1h	equ	0xFE2
 13405                           fsr1l	equ	0xFE1
 13406                           indf2	equ	0xFDF
 13407                           postinc2	equ	0xFDE
 13408                           postdec2	equ	0xFDD
 13409                           plusw2	equ	0xFDB
 13410                           fsr2h	equ	0xFDA
 13411                           fsr2l	equ	0xFD9
 13412                           status	equ	0xFD8
 13413                           
 13414 ;; *************** function _CheckFlashPrecentage *****************
 13415 ;; Defined at:
 13416 ;;		line 161 in file "FlashApp.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;		None
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;  precentage      3   28[BANK0 ] void 
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      unsigned char 
 13423 ;; Registers used:
 13424 ;;		wreg, status,2, status,0, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13430 ;;      Params:         0       0       0       0       0       0       0
 13431 ;;      Locals:         0       3       0       0       0       0       0
 13432 ;;      Temps:          0       4       0       0       0       0       0
 13433 ;;      Totals:         0       7       0       0       0       0       0
 13434 ;;Total ram usage:        7 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    6
 13437 ;; This function calls:
 13438 ;;		___ftdiv
 13439 ;;		___ftge
 13440 ;;		___ftmul
 13441 ;;		___lltoft
 13442 ;; This function is called by:
 13443 ;;		_main
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           	psect	text78
 13448  002C1C                     __ptext78:
 13449                           	opt stack 0
 13450  002C1C                     _CheckFlashPrecentage:
 13451                           	opt stack 24
 13452                           
 13453                           ;FlashApp.c: 163: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;incstack = 0
 13457  002C1C  0EE0               	movlw	224
 13458  002C1E  6E2C               	movwf	___ftdiv@f2,c
 13459  002C20  0EFF               	movlw	255
 13460  002C22  6E2D               	movwf	___ftdiv@f2+1,c
 13461  002C24  0E46               	movlw	70
 13462  002C26  6E2E               	movwf	___ftdiv@f2+2,c
 13463  002C28  C03F  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 13464  002C2C  C040  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 13465  002C30  C041  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 13466  002C34  C042  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 13467  002C38  0100               	movlb	0	; () banked
 13468  002C3A  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 13469  002C3C  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 13470  002C3E  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 13471  002C40  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 13472  002C42  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 13473  002C44  0E00               	movlw	0
 13474  002C46  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 13475  002C48  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 13476  002C4A  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 13477  002C4C  0EF0               	movlw	240
 13478  002C4E  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 13479  002C50  6E20               	movwf	___lltoft@c,c
 13480  002C52  0E7F               	movlw	127
 13481  002C54  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 13482  002C56  6E21               	movwf	___lltoft@c+1,c
 13483  002C58  0E00               	movlw	0
 13484  002C5A  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 13485  002C5C  6E22               	movwf	___lltoft@c+2,c
 13486  002C5E  0E00               	movlw	0
 13487  002C60  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 13488  002C62  6E23               	movwf	___lltoft@c+3,c
 13489  002C64  EC31  F01B         	call	___lltoft	;wreg free
 13490  002C68  C020  F029         	movff	?___lltoft,___ftdiv@f1
 13491  002C6C  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 13492  002C70  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 13493  002C74  EC44  F012         	call	___ftdiv	;wreg free
 13494  002C78  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13495  002C7C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13496  002C80  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13497  002C84  0E00               	movlw	0
 13498  002C86  0100               	movlb	0	; () banked
 13499  002C88  6F6C               	movwf	___ftmul@f2& (0+255),b
 13500  002C8A  0EC8               	movlw	200
 13501  002C8C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13502  002C8E  0E42               	movlw	66
 13503  002C90  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13504  002C92  ECC9  F011         	call	___ftmul	;wreg free
 13505  002C96  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 13506  002C9A  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 13507  002C9E  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 13508                           
 13509                           ;FlashApp.c: 164: return (precentage > 75) ? 1 : 0;
 13510  002CA2  0E00               	movlw	0
 13511  002CA4  6E18               	movwf	___ftge@ff1,c
 13512  002CA6  0E96               	movlw	150
 13513  002CA8  6E19               	movwf	___ftge@ff1+1,c
 13514  002CAA  0E42               	movlw	66
 13515  002CAC  6E1A               	movwf	___ftge@ff1+2,c
 13516  002CAE  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 13517  002CB2  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 13518  002CB6  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 13519  002CBA  EC49  F018         	call	___ftge	;wreg free
 13520  002CBE  B0D8               	btfsc	status,0,c
 13521  002CC0  D002               	goto	u8890
 13522  002CC2  0E01               	movlw	1
 13523  002CC4  0012               	return	
 13524  002CC6                     u8890:
 13525  002CC6  0E00               	movlw	0
 13526  002CC8  0012               	return	
 13527  002CCA                     __end_of_CheckFlashPrecentage:
 13528                           	opt stack 0
 13529                           tosu	equ	0xFFF
 13530                           tosh	equ	0xFFE
 13531                           tosl	equ	0xFFD
 13532                           pclath	equ	0xFFA
 13533                           tblptru	equ	0xFF8
 13534                           tblptrh	equ	0xFF7
 13535                           tblptrl	equ	0xFF6
 13536                           tablat	equ	0xFF5
 13537                           prodh	equ	0xFF4
 13538                           prodl	equ	0xFF3
 13539                           intcon	equ	0xFF2
 13540                           intcon2	equ	0xFF1
 13541                           postinc0	equ	0xFEE
 13542                           plusw0	equ	0xFEB
 13543                           wreg	equ	0xFE8
 13544                           indf1	equ	0xFE7
 13545                           postdec1	equ	0xFE5
 13546                           fsr1h	equ	0xFE2
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           plusw2	equ	0xFDB
 13552                           fsr2h	equ	0xFDA
 13553                           fsr2l	equ	0xFD9
 13554                           status	equ	0xFD8
 13555                           
 13556 ;; *************** function _BlinkOkLeds *****************
 13557 ;; Defined at:
 13558 ;;		line 24 in file "LedsApp.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;  state           1    wreg     enum E7594
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  state           1   26[COMRAM] enum E7594
 13563 ;;  idx             2   27[COMRAM] int 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  1    wreg      void 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13573 ;;      Params:         0       0       0       0       0       0       0
 13574 ;;      Locals:         3       0       0       0       0       0       0
 13575 ;;      Temps:          3       0       0       0       0       0       0
 13576 ;;      Totals:         6       0       0       0       0       0       0
 13577 ;;Total ram usage:        6 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:    4
 13580 ;; This function calls:
 13581 ;;		Nothing
 13582 ;; This function is called by:
 13583 ;;		_main
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           	psect	text79
 13588  00354A                     __ptext79:
 13589                           	opt stack 0
 13590  00354A                     _BlinkOkLeds:
 13591                           	opt stack 26
 13592                           
 13593                           ;incstack = 0
 13594                           ;BlinkOkLeds@state stored from wreg
 13595  00354A  6E1B               	movwf	BlinkOkLeds@state,c
 13596                           
 13597                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 13598  00354C  0E00               	movlw	0
 13599  00354E  6E1D               	movwf	BlinkOkLeds@idx+1,c
 13600  003550  0E00               	movlw	0
 13601  003552  6E1C               	movwf	BlinkOkLeds@idx,c
 13602  003554                     l6492:
 13603  003554  501B               	movf	BlinkOkLeds@state,w,c
 13604  003556  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13605  003558  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 13606  00355A  5018               	movf	??_BlinkOkLeds,w,c
 13607  00355C  5C1C               	subwf	BlinkOkLeds@idx,w,c
 13608  00355E  501D               	movf	BlinkOkLeds@idx+1,w,c
 13609  003560  0A80               	xorlw	128
 13610  003562  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 13611  003564  5019               	movf	??_BlinkOkLeds+1,w,c
 13612  003566  0A80               	xorlw	128
 13613  003568  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 13614  00356A  B0D8               	btfsc	status,0,c
 13615  00356C  0012               	return	
 13616                           
 13617                           ;LedsApp.c: 27: {
 13618                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 13619  00356E  908B               	bcf	3979,0,c	;volatile
 13620                           
 13621                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 13622  003570  0E02               	movlw	2
 13623  003572  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 13624  003574  0E04               	movlw	4
 13625  003576  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13626  003578  0EBA               	movlw	186
 13627  00357A                     u9077:
 13628  00357A  2EE8               	decfsz	wreg,f,c
 13629  00357C  D7FE               	bra	u9077
 13630  00357E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 13631  003580  D7FC               	bra	u9077
 13632  003582  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 13633  003584  D7FA               	bra	u9077
 13634  003586  D000               	nop2	
 13635                           
 13636                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 13637  003588  808B               	bsf	3979,0,c	;volatile
 13638                           
 13639                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 13640  00358A  0E02               	movlw	2
 13641  00358C  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 13642  00358E  0E04               	movlw	4
 13643  003590  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13644  003592  0EBA               	movlw	186
 13645  003594                     u9087:
 13646  003594  2EE8               	decfsz	wreg,f,c
 13647  003596  D7FE               	bra	u9087
 13648  003598  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 13649  00359A  D7FC               	bra	u9087
 13650  00359C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 13651  00359E  D7FA               	bra	u9087
 13652  0035A0  D000               	nop2	
 13653  0035A2  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 13654  0035A4  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 13655  0035A6  D7D6               	goto	l6492
 13656  0035A8                     __end_of_BlinkOkLeds:
 13657                           	opt stack 0
 13658                           tosu	equ	0xFFF
 13659                           tosh	equ	0xFFE
 13660                           tosl	equ	0xFFD
 13661                           pclath	equ	0xFFA
 13662                           tblptru	equ	0xFF8
 13663                           tblptrh	equ	0xFF7
 13664                           tblptrl	equ	0xFF6
 13665                           tablat	equ	0xFF5
 13666                           prodh	equ	0xFF4
 13667                           prodl	equ	0xFF3
 13668                           intcon	equ	0xFF2
 13669                           intcon2	equ	0xFF1
 13670                           postinc0	equ	0xFEE
 13671                           plusw0	equ	0xFEB
 13672                           wreg	equ	0xFE8
 13673                           indf1	equ	0xFE7
 13674                           postdec1	equ	0xFE5
 13675                           fsr1h	equ	0xFE2
 13676                           fsr1l	equ	0xFE1
 13677                           indf2	equ	0xFDF
 13678                           postinc2	equ	0xFDE
 13679                           postdec2	equ	0xFDD
 13680                           plusw2	equ	0xFDB
 13681                           fsr2h	equ	0xFDA
 13682                           fsr2l	equ	0xFD9
 13683                           status	equ	0xFD8
 13684                           
 13685 ;; *************** function _BlinkErrorLeds *****************
 13686 ;; Defined at:
 13687 ;;		line 13 in file "LedsApp.c"
 13688 ;; Parameters:    Size  Location     Type
 13689 ;;  state           1    wreg     enum E7597
 13690 ;; Auto vars:     Size  Location     Type
 13691 ;;  state           1   26[COMRAM] enum E7597
 13692 ;;  idx             2   27[COMRAM] int 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      void 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13702 ;;      Params:         0       0       0       0       0       0       0
 13703 ;;      Locals:         3       0       0       0       0       0       0
 13704 ;;      Temps:          3       0       0       0       0       0       0
 13705 ;;      Totals:         6       0       0       0       0       0       0
 13706 ;;Total ram usage:        6 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    4
 13709 ;; This function calls:
 13710 ;;		Nothing
 13711 ;; This function is called by:
 13712 ;;		_main
 13713 ;;		_SynthLdDetect
 13714 ;; This function uses a non-reentrant model
 13715 ;;
 13716                           
 13717                           	psect	text80
 13718  0035A8                     __ptext80:
 13719                           	opt stack 0
 13720  0035A8                     _BlinkErrorLeds:
 13721                           	opt stack 26
 13722                           
 13723                           ;incstack = 0
 13724                           ;BlinkErrorLeds@state stored from wreg
 13725  0035A8  6E1B               	movwf	BlinkErrorLeds@state,c
 13726                           
 13727                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 13728  0035AA  0E00               	movlw	0
 13729  0035AC  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 13730  0035AE  0E00               	movlw	0
 13731  0035B0  6E1C               	movwf	BlinkErrorLeds@idx,c
 13732  0035B2                     l6480:
 13733  0035B2  501B               	movf	BlinkErrorLeds@state,w,c
 13734  0035B4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13735  0035B6  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 13736  0035B8  5018               	movf	??_BlinkErrorLeds,w,c
 13737  0035BA  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 13738  0035BC  501D               	movf	BlinkErrorLeds@idx+1,w,c
 13739  0035BE  0A80               	xorlw	128
 13740  0035C0  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 13741  0035C2  5019               	movf	??_BlinkErrorLeds+1,w,c
 13742  0035C4  0A80               	xorlw	128
 13743  0035C6  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 13744  0035C8  B0D8               	btfsc	status,0,c
 13745  0035CA  0012               	return	
 13746                           
 13747                           ;LedsApp.c: 16: {
 13748                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 13749  0035CC  988A               	bcf	3978,4,c	;volatile
 13750                           
 13751                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 13752  0035CE  0E02               	movlw	2
 13753  0035D0  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13754  0035D2  0E04               	movlw	4
 13755  0035D4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13756  0035D6  0EBA               	movlw	186
 13757  0035D8                     u9097:
 13758  0035D8  2EE8               	decfsz	wreg,f,c
 13759  0035DA  D7FE               	bra	u9097
 13760  0035DC  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13761  0035DE  D7FC               	bra	u9097
 13762  0035E0  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13763  0035E2  D7FA               	bra	u9097
 13764  0035E4  D000               	nop2	
 13765                           
 13766                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 13767  0035E6  888A               	bsf	3978,4,c	;volatile
 13768                           
 13769                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 13770  0035E8  0E02               	movlw	2
 13771  0035EA  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13772  0035EC  0E04               	movlw	4
 13773  0035EE  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13774  0035F0  0EBA               	movlw	186
 13775  0035F2                     u9107:
 13776  0035F2  2EE8               	decfsz	wreg,f,c
 13777  0035F4  D7FE               	bra	u9107
 13778  0035F6  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13779  0035F8  D7FC               	bra	u9107
 13780  0035FA  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13781  0035FC  D7FA               	bra	u9107
 13782  0035FE  D000               	nop2	
 13783  003600  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 13784  003602  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 13785  003604  D7D6               	goto	l6480
 13786  003606                     __end_of_BlinkErrorLeds:
 13787                           	opt stack 0
 13788                           tosu	equ	0xFFF
 13789                           tosh	equ	0xFFE
 13790                           tosl	equ	0xFFD
 13791                           pclath	equ	0xFFA
 13792                           tblptru	equ	0xFF8
 13793                           tblptrh	equ	0xFF7
 13794                           tblptrl	equ	0xFF6
 13795                           tablat	equ	0xFF5
 13796                           prodh	equ	0xFF4
 13797                           prodl	equ	0xFF3
 13798                           intcon	equ	0xFF2
 13799                           intcon2	equ	0xFF1
 13800                           postinc0	equ	0xFEE
 13801                           plusw0	equ	0xFEB
 13802                           wreg	equ	0xFE8
 13803                           indf1	equ	0xFE7
 13804                           postdec1	equ	0xFE5
 13805                           fsr1h	equ	0xFE2
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           postdec2	equ	0xFDD
 13810                           plusw2	equ	0xFDB
 13811                           fsr2h	equ	0xFDA
 13812                           fsr2l	equ	0xFD9
 13813                           status	equ	0xFD8
 13814                           
 13815 ;; *************** function _AdcConvert *****************
 13816 ;; Defined at:
 13817 ;;		line 43 in file "AdcApp.c"
 13818 ;; Parameters:    Size  Location     Type
 13819 ;;		None
 13820 ;; Auto vars:     Size  Location     Type
 13821 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 13822 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 13823 ;;  adcRes          2   94[BANK0 ] unsigned int 
 13824 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 13825 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 13826 ;;  idx             1   96[BANK0 ] unsigned char 
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  1    wreg      void 
 13829 ;; Registers used:
 13830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/0
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13836 ;;      Params:         0       0       0       0       0       0       0
 13837 ;;      Locals:         0      14       0       0       0       0       0
 13838 ;;      Temps:          0       2       0       0       0       0       0
 13839 ;;      Totals:         0      16       0       0       0       0       0
 13840 ;;Total ram usage:       16 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    9
 13843 ;; This function calls:
 13844 ;;		_ADC_GetConversion
 13845 ;;		_FlashSampleWrite
 13846 ;;		_GetUint16FromBitArray
 13847 ;;		___ftdiv
 13848 ;;		___ftmul
 13849 ;;		___fttol
 13850 ;;		___lwtoft
 13851 ;;		_pow
 13852 ;; This function is called by:
 13853 ;;		_main
 13854 ;; This function uses a non-reentrant model
 13855 ;;
 13856                           
 13857                           	psect	text81
 13858  000D0C                     __ptext81:
 13859                           	opt stack 0
 13860  000D0C                     _AdcConvert:
 13861                           	opt stack 21
 13862                           
 13863                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 13864                           
 13865                           ;incstack = 0
 13866  000D0C  0E00               	movlw	0
 13867  000D0E  0100               	movlb	0	; () banked
 13868  000D10  6FBF               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 13869  000D12  0E00               	movlw	0
 13870  000D14  6FBE               	movwf	AdcConvert@adcRes& (0+255),b
 13871                           
 13872                           ;AdcApp.c: 49: uint8_t idx = 0;
 13873  000D16  0E00               	movlw	0
 13874  000D18  6FC0               	movwf	AdcConvert@idx& (0+255),b
 13875                           
 13876                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 13877  000D1A  0E00               	movlw	0
 13878  000D1C  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 13879  000D1E  0E00               	movlw	0
 13880  000D20  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 13881  000D22  0E00               	movlw	0
 13882  000D24  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 13883  000D26  0E00               	movlw	0
 13884  000D28  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 13885                           
 13886                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 13887  000D2A  503A               	movf	_adcSampleMode,w,c
 13888  000D2C  A4D8               	btfss	status,2,c
 13889  000D2E  D0A3               	goto	l126
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;AdcApp.c: 52: {
 13893                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 13894  000D30  0E00               	movlw	0
 13895  000D32  6FC0               	movwf	AdcConvert@idx& (0+255),b
 13896  000D34                     l8622:
 13897                           
 13898                           ; BSR set to: 0
 13899  000D34  0E08               	movlw	8
 13900  000D36  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 13901  000D38  D001               	goto	l127
 13902  000D3A  D06D               	goto	u8750
 13903  000D3C                     l127:
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;AdcApp.c: 54: {
 13907                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 13908                           
 13909                           ; BSR set to: 0
 13910  000D3C  51C0               	movf	AdcConvert@idx& (0+255),w,b
 13911  000D3E  0D01               	mullw	1
 13912  000D40  0E42               	movlw	low _channelArr
 13913  000D42  24F3               	addwf	prodl,w,c
 13914  000D44  6EF6               	movwf	tblptrl,c
 13915  000D46  0E06               	movlw	high _channelArr
 13916  000D48  20F4               	addwfc	prodh,w,c
 13917  000D4A  6EF7               	movwf	tblptrh,c
 13918  000D4C                     	if	0	;There are less than 3 active tblptr bytes
 13919  000D4C                     	endif
 13920  000D4C  0008               	tblrd		*
 13921  000D4E  50F5               	movf	tablat,w,c
 13922  000D50  ECED  F01E         	call	_ADC_GetConversion
 13923  000D54  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 13924  000D58  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 13925                           
 13926                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13927  000D5C  0E00               	movlw	0
 13928  000D5E  0100               	movlb	0	; () banked
 13929  000D60  6FA3               	movwf	pow@y& (0+255),b
 13930  000D62  0E20               	movlw	32
 13931  000D64  6FA4               	movwf	(pow@y+1)& (0+255),b
 13932  000D66  0E41               	movlw	65
 13933  000D68  6FA5               	movwf	(pow@y+2)& (0+255),b
 13934  000D6A  0E00               	movlw	0
 13935  000D6C  6FA0               	movwf	pow@x& (0+255),b
 13936  000D6E  0E00               	movlw	0
 13937  000D70  6FA1               	movwf	(pow@x+1)& (0+255),b
 13938  000D72  0E40               	movlw	64
 13939  000D74  6FA2               	movwf	(pow@x+2)& (0+255),b
 13940  000D76  ECEB  F00D         	call	_pow	;wreg free
 13941  000D7A  C0A0  F0BB         	movff	?_pow,_AdcConvert$3583
 13942  000D7E  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3583+1
 13943  000D82  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3583+2
 13944                           
 13945                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13946  000D86  0EC0               	movlw	192
 13947  000D88  0100               	movlb	0	; () banked
 13948  000D8A  6F6C               	movwf	___ftmul@f2& (0+255),b
 13949  000D8C  0E50               	movlw	80
 13950  000D8E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13951  000D90  0E45               	movlw	69
 13952  000D92  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13953  000D94  C0BB  F02C         	movff	_AdcConvert$3583,___ftdiv@f2
 13954  000D98  C0BC  F02D         	movff	_AdcConvert$3583+1,___ftdiv@f2+1
 13955  000D9C  C0BD  F02E         	movff	_AdcConvert$3583+2,___ftdiv@f2+2
 13956  000DA0  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 13957  000DA4  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 13958  000DA8  ECA4  F01F         	call	___lwtoft	;wreg free
 13959  000DAC  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 13960  000DB0  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13961  000DB4  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13962  000DB8  EC44  F012         	call	___ftdiv	;wreg free
 13963  000DBC  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13964  000DC0  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13965  000DC4  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13966  000DC8  ECC9  F011         	call	___ftmul	;wreg free
 13967  000DCC  C069  F078         	movff	?___ftmul,___fttol@f1
 13968  000DD0  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13969  000DD4  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13970  000DD8  ECD2  F010         	call	___fttol	;wreg free
 13971  000DDC  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 13972  000DE0  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 13973                           
 13974                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 13975  000DE4  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13976  000DE8  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13977  000DEC  0100               	movlb	0	; () banked
 13978  000DEE  29C0               	incf	AdcConvert@idx& (0+255),w,b
 13979  000DF0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13980  000DF2  EC53  F010         	call	_FlashSampleWrite	;wreg free
 13981                           
 13982                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 13983  000DF6  0E03               	movlw	3
 13984  000DF8  0100               	movlb	0	; () banked
 13985  000DFA  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 13986  000DFC  0E8A               	movlw	138
 13987  000DFE  6FB1               	movwf	??_AdcConvert& (0+255),b
 13988  000E00  0E55               	movlw	85
 13989  000E02                     u9117:
 13990  000E02  2EE8               	decfsz	wreg,f,c
 13991  000E04  D7FE               	bra	u9117
 13992  000E06  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 13993  000E08  D7FC               	bra	u9117
 13994  000E0A  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 13995  000E0C  D7FA               	bra	u9117
 13996  000E0E  D000               	nop2	
 13997  000E10  0100               	movlb	0	; () banked
 13998  000E12  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 13999  000E14  D78F               	goto	l8622
 14000  000E16                     u8750:
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;AdcApp.c: 59: }
 14004                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14005                           
 14006                           ; BSR set to: 0
 14007  000E16  0EA0               	movlw	low _synthLdRxArray
 14008  000E18  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14009  000E1A  0E01               	movlw	high _synthLdRxArray
 14010  000E1C  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14011  000E1E  0E00               	movlw	0
 14012  000E20  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14013  000E22  0E0C               	movlw	12
 14014  000E24  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14015  000E26  ECD7  F018         	call	_GetUint16FromBitArray	;wreg free
 14016  000E2A  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14017  000E2E  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14018                           
 14019                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14020  000E32  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14021  000E36  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14022  000E3A  0100               	movlb	0	; () banked
 14023  000E3C  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14024  000E3E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14025  000E40  EC53  F010         	call	_FlashSampleWrite	;wreg free
 14026                           
 14027                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14028  000E44  0E94               	movlw	low _synthLdTxArray
 14029  000E46  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14030  000E48  0E01               	movlw	high _synthLdTxArray
 14031  000E4A  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14032  000E4C  0E00               	movlw	0
 14033  000E4E  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14034  000E50  0E0C               	movlw	12
 14035  000E52  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14036  000E54  ECD7  F018         	call	_GetUint16FromBitArray	;wreg free
 14037  000E58  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14038  000E5C  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14039                           
 14040                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14041  000E60  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14042  000E64  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14043  000E68  0100               	movlb	0	; () banked
 14044  000E6A  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14045  000E6C  0F02               	addlw	2
 14046  000E6E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14047  000E70  EC53  F010         	call	_FlashSampleWrite	;wreg free
 14048                           
 14049                           ;AdcApp.c: 67: }
 14050  000E74  0012               	return	
 14051  000E76                     l126:
 14052                           
 14053                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14054  000E76  043A               	decf	_adcSampleMode,w,c
 14055  000E78  A4D8               	btfss	status,2,c
 14056  000E7A  0012               	return	
 14057                           
 14058                           ;AdcApp.c: 69: {
 14059                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14060  000E7C  0100               	movlb	0	; () banked
 14061  000E7E  51F9               	movf	_channel& (0+255),w,b
 14062  000E80  0D01               	mullw	1
 14063  000E82  0E42               	movlw	low _channelArr
 14064  000E84  24F3               	addwf	prodl,w,c
 14065  000E86  6EF6               	movwf	tblptrl,c
 14066  000E88  0E06               	movlw	high _channelArr
 14067  000E8A  20F4               	addwfc	prodh,w,c
 14068  000E8C  6EF7               	movwf	tblptrh,c
 14069  000E8E                     	if	0	;There are less than 3 active tblptr bytes
 14070  000E8E                     	endif
 14071  000E8E  0008               	tblrd		*
 14072  000E90  50F5               	movf	tablat,w,c
 14073  000E92  ECED  F01E         	call	_ADC_GetConversion
 14074  000E96  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_348
 14075  000E9A  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_348+1
 14076                           
 14077                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14078  000E9E  0E00               	movlw	0
 14079  000EA0  0100               	movlb	0	; () banked
 14080  000EA2  6FA3               	movwf	pow@y& (0+255),b
 14081  000EA4  0E20               	movlw	32
 14082  000EA6  6FA4               	movwf	(pow@y+1)& (0+255),b
 14083  000EA8  0E41               	movlw	65
 14084  000EAA  6FA5               	movwf	(pow@y+2)& (0+255),b
 14085  000EAC  0E00               	movlw	0
 14086  000EAE  6FA0               	movwf	pow@x& (0+255),b
 14087  000EB0  0E00               	movlw	0
 14088  000EB2  6FA1               	movwf	(pow@x+1)& (0+255),b
 14089  000EB4  0E40               	movlw	64
 14090  000EB6  6FA2               	movwf	(pow@x+2)& (0+255),b
 14091  000EB8  ECEB  F00D         	call	_pow	;wreg free
 14092  000EBC  C0A0  F0BB         	movff	?_pow,_AdcConvert$3583
 14093  000EC0  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3583+1
 14094  000EC4  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3583+2
 14095                           
 14096                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14097  000EC8  0EC0               	movlw	192
 14098  000ECA  0100               	movlb	0	; () banked
 14099  000ECC  6F6C               	movwf	___ftmul@f2& (0+255),b
 14100  000ECE  0E50               	movlw	80
 14101  000ED0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14102  000ED2  0E45               	movlw	69
 14103  000ED4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14104  000ED6  C0BB  F02C         	movff	_AdcConvert$3583,___ftdiv@f2
 14105  000EDA  C0BC  F02D         	movff	_AdcConvert$3583+1,___ftdiv@f2+1
 14106  000EDE  C0BD  F02E         	movff	_AdcConvert$3583+2,___ftdiv@f2+2
 14107  000EE2  C0B5  F020         	movff	AdcConvert@_adcResult_348,___lwtoft@c
 14108  000EE6  C0B6  F021         	movff	AdcConvert@_adcResult_348+1,___lwtoft@c+1
 14109  000EEA  ECA4  F01F         	call	___lwtoft	;wreg free
 14110  000EEE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14111  000EF2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14112  000EF6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14113  000EFA  EC44  F012         	call	___ftdiv	;wreg free
 14114  000EFE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14115  000F02  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14116  000F06  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14117  000F0A  ECC9  F011         	call	___ftmul	;wreg free
 14118  000F0E  C069  F078         	movff	?___ftmul,___fttol@f1
 14119  000F12  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14120  000F16  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14121  000F1A  ECD2  F010         	call	___fttol	;wreg free
 14122  000F1E  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14123  000F22  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14124                           
 14125                           ;AdcApp.c: 72: FlashSampleWrite(adcRes, 1);
 14126  000F26  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14127  000F2A  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14128  000F2E  0E01               	movlw	1
 14129  000F30  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14130  000F32  EC53  F010         	call	_FlashSampleWrite	;wreg free
 14131  000F36  0012               	return	
 14132  000F38                     __end_of_AdcConvert:
 14133                           	opt stack 0
 14134                           tosu	equ	0xFFF
 14135                           tosh	equ	0xFFE
 14136                           tosl	equ	0xFFD
 14137                           pclath	equ	0xFFA
 14138                           tblptru	equ	0xFF8
 14139                           tblptrh	equ	0xFF7
 14140                           tblptrl	equ	0xFF6
 14141                           tablat	equ	0xFF5
 14142                           prodh	equ	0xFF4
 14143                           prodl	equ	0xFF3
 14144                           intcon	equ	0xFF2
 14145                           intcon2	equ	0xFF1
 14146                           postinc0	equ	0xFEE
 14147                           plusw0	equ	0xFEB
 14148                           wreg	equ	0xFE8
 14149                           indf1	equ	0xFE7
 14150                           postdec1	equ	0xFE5
 14151                           fsr1h	equ	0xFE2
 14152                           fsr1l	equ	0xFE1
 14153                           indf2	equ	0xFDF
 14154                           postinc2	equ	0xFDE
 14155                           postdec2	equ	0xFDD
 14156                           plusw2	equ	0xFDB
 14157                           fsr2h	equ	0xFDA
 14158                           fsr2l	equ	0xFD9
 14159                           status	equ	0xFD8
 14160                           
 14161 ;; *************** function _pow *****************
 14162 ;; Defined at:
 14163 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;  x               3   64[BANK0 ] void 
 14166 ;;  y               3   67[BANK0 ] void 
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;  yi              4   77[BANK0 ] unsigned long 
 14169 ;;  sign            1   76[BANK0 ] unsigned char 
 14170 ;; Return value:  Size  Location     Type
 14171 ;;                  3   64[BANK0 ] unsigned char 
 14172 ;; Registers used:
 14173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14174 ;; Tracked objects:
 14175 ;;		On entry : 0/0
 14176 ;;		On exit  : 0/0
 14177 ;;		Unchanged: 0/0
 14178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14179 ;;      Params:         0       6       0       0       0       0       0
 14180 ;;      Locals:         0      11       0       0       0       0       0
 14181 ;;      Temps:          0       0       0       0       0       0       0
 14182 ;;      Totals:         0      17       0       0       0       0       0
 14183 ;;Total ram usage:       17 bytes
 14184 ;; Hardware stack levels used:    1
 14185 ;; Hardware stack levels required when called:    8
 14186 ;; This function calls:
 14187 ;;		___ftge
 14188 ;;		___ftmul
 14189 ;;		___ftneg
 14190 ;;		___fttol
 14191 ;;		___lltoft
 14192 ;;		_exp
 14193 ;;		_log
 14194 ;; This function is called by:
 14195 ;;		_AdcConvert
 14196 ;;		_ReadIntFromEeprom
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199                           
 14200                           	psect	text82
 14201  001BD6                     __ptext82:
 14202                           	opt stack 0
 14203  001BD6                     _pow:
 14204                           	opt stack 18
 14205                           
 14206                           ;incstack = 0
 14207  001BD6  0E00               	movlw	0
 14208  001BD8  0100               	movlb	0	; () banked
 14209  001BDA  6FAC               	movwf	pow@sign& (0+255),b
 14210                           
 14211                           ; BSR set to: 0
 14212  001BDC  51A0               	movf	pow@x& (0+255),w,b
 14213  001BDE  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14214  001BE0  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14215  001BE2  A4D8               	btfss	status,2,c
 14216  001BE4  D01D               	goto	l2025
 14217                           
 14218                           ; BSR set to: 0
 14219  001BE6  0E00               	movlw	0
 14220  001BE8  6E18               	movwf	___ftge@ff1,c
 14221  001BEA  0E00               	movlw	0
 14222  001BEC  6E19               	movwf	___ftge@ff1+1,c
 14223  001BEE  0E00               	movlw	0
 14224  001BF0  6E1A               	movwf	___ftge@ff1+2,c
 14225  001BF2  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14226  001BF6  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14227  001BFA  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14228  001BFE  EC49  F018         	call	___ftge	;wreg free
 14229  001C02  A0D8               	btfss	status,0,c
 14230  001C04  D005               	goto	l2026
 14231  001C06  0E00               	movlw	0
 14232  001C08  0100               	movlb	0	; () banked
 14233  001C0A  6FEA               	movwf	(_errno+1)& (0+255),b
 14234  001C0C  0E21               	movlw	33
 14235  001C0E  6FE9               	movwf	_errno& (0+255),b
 14236  001C10                     l2026:
 14237  001C10  0E00               	movlw	0
 14238  001C12  0100               	movlb	0	; () banked
 14239  001C14  6FA0               	movwf	?_pow& (0+255),b
 14240  001C16  0E00               	movlw	0
 14241  001C18  6FA1               	movwf	(?_pow+1)& (0+255),b
 14242  001C1A  0E00               	movlw	0
 14243  001C1C  6FA2               	movwf	(?_pow+2)& (0+255),b
 14244                           
 14245                           ; BSR set to: 0
 14246  001C1E  0012               	return	
 14247  001C20                     l2025:
 14248                           
 14249                           ; BSR set to: 0
 14250                           
 14251                           ; BSR set to: 0
 14252  001C20  51A3               	movf	pow@y& (0+255),w,b
 14253  001C22  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14254  001C24  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14255  001C26  A4D8               	btfss	status,2,c
 14256  001C28  D007               	goto	l2028
 14257                           
 14258                           ; BSR set to: 0
 14259  001C2A  0E00               	movlw	0
 14260  001C2C  6FA0               	movwf	?_pow& (0+255),b
 14261  001C2E  0E80               	movlw	128
 14262  001C30  6FA1               	movwf	(?_pow+1)& (0+255),b
 14263  001C32  0E3F               	movlw	63
 14264  001C34  6FA2               	movwf	(?_pow+2)& (0+255),b
 14265                           
 14266                           ; BSR set to: 0
 14267  001C36  0012               	return	
 14268  001C38                     l2028:
 14269                           
 14270                           ; BSR set to: 0
 14271                           
 14272                           ; BSR set to: 0
 14273  001C38  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14274  001C3A  D041               	goto	l2029
 14275                           
 14276                           ; BSR set to: 0
 14277  001C3C  C0A3  F078         	movff	pow@y,___fttol@f1
 14278  001C40  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14279  001C44  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14280  001C48  ECD2  F010         	call	___fttol	;wreg free
 14281  001C4C  C078  F0AD         	movff	?___fttol,pow@yi
 14282  001C50  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14283  001C54  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14284  001C58  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14285  001C5C  C0AD  F020         	movff	pow@yi,___lltoft@c
 14286  001C60  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14287  001C64  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14288  001C68  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14289  001C6C  EC31  F01B         	call	___lltoft	;wreg free
 14290  001C70  0100               	movlb	0	; () banked
 14291  001C72  51A3               	movf	pow@y& (0+255),w,b
 14292  001C74  1820               	xorwf	?___lltoft,w,c
 14293  001C76  E107               	bnz	u7350
 14294  001C78  51A4               	movf	(pow@y+1)& (0+255),w,b
 14295  001C7A  1821               	xorwf	?___lltoft+1,w,c
 14296  001C7C  E104               	bnz	u7350
 14297  001C7E  51A5               	movf	(pow@y+2)& (0+255),w,b
 14298  001C80  1822               	xorwf	?___lltoft+2,w,c
 14299  001C82  B4D8               	btfsc	status,2,c
 14300  001C84  D00B               	goto	l2030
 14301  001C86                     u7350:
 14302                           
 14303                           ; BSR set to: 0
 14304  001C86  0E00               	movlw	0
 14305  001C88  6FEA               	movwf	(_errno+1)& (0+255),b
 14306  001C8A  0E21               	movlw	33
 14307  001C8C  6FE9               	movwf	_errno& (0+255),b
 14308  001C8E  0E00               	movlw	0
 14309  001C90  6FA0               	movwf	?_pow& (0+255),b
 14310  001C92  0E00               	movlw	0
 14311  001C94  6FA1               	movwf	(?_pow+1)& (0+255),b
 14312  001C96  0E00               	movlw	0
 14313  001C98  6FA2               	movwf	(?_pow+2)& (0+255),b
 14314                           
 14315                           ; BSR set to: 0
 14316  001C9A  0012               	return	
 14317  001C9C                     l2030:
 14318                           
 14319                           ; BSR set to: 0
 14320                           
 14321                           ; BSR set to: 0
 14322  001C9C  51AD               	movf	pow@yi& (0+255),w,b
 14323  001C9E  0B01               	andlw	1
 14324  001CA0  6FAC               	movwf	pow@sign& (0+255),b
 14325                           
 14326                           ; BSR set to: 0
 14327  001CA2  C0A0  F018         	movff	pow@x,___ftneg@f1
 14328  001CA6  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14329  001CAA  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14330  001CAE  EC92  F01F         	call	___ftneg	;wreg free
 14331  001CB2  C018  F0A0         	movff	?___ftneg,pow@x
 14332  001CB6  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14333  001CBA  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14334  001CBE                     l2029:
 14335  001CBE  C0A0  F08E         	movff	pow@x,log@x
 14336  001CC2  C0A1  F08F         	movff	pow@x+1,log@x+1
 14337  001CC6  C0A2  F090         	movff	pow@x+2,log@x+2
 14338  001CCA  EC3C  F00F         	call	_log	;wreg free
 14339  001CCE  C08E  F0A6         	movff	?_log,_pow$3586
 14340  001CD2  C08F  F0A7         	movff	?_log+1,_pow$3586+1
 14341  001CD6  C090  F0A8         	movff	?_log+2,_pow$3586+2
 14342  001CDA  C0A6  F069         	movff	_pow$3586,___ftmul@f1
 14343  001CDE  C0A7  F06A         	movff	_pow$3586+1,___ftmul@f1+1
 14344  001CE2  C0A8  F06B         	movff	_pow$3586+2,___ftmul@f1+2
 14345  001CE6  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14346  001CEA  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14347  001CEE  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14348  001CF2  ECC9  F011         	call	___ftmul	;wreg free
 14349  001CF6  C069  F0A9         	movff	?___ftmul,_pow$3587
 14350  001CFA  C06A  F0AA         	movff	?___ftmul+1,_pow$3587+1
 14351  001CFE  C06B  F0AB         	movff	?___ftmul+2,_pow$3587+2
 14352  001D02  C0A9  F097         	movff	_pow$3587,exp@x
 14353  001D06  C0AA  F098         	movff	_pow$3587+1,exp@x+1
 14354  001D0A  C0AB  F099         	movff	_pow$3587+2,exp@x+2
 14355  001D0E  EC9C  F007         	call	_exp	;wreg free
 14356  001D12  C097  F0A0         	movff	?_exp,pow@x
 14357  001D16  C098  F0A1         	movff	?_exp+1,pow@x+1
 14358  001D1A  C099  F0A2         	movff	?_exp+2,pow@x+2
 14359  001D1E  0100               	movlb	0	; () banked
 14360  001D20  51AC               	movf	pow@sign& (0+255),w,b
 14361  001D22  B4D8               	btfsc	status,2,c
 14362  001D24  D00F               	goto	l2031
 14363                           
 14364                           ; BSR set to: 0
 14365  001D26  C0A0  F018         	movff	pow@x,___ftneg@f1
 14366  001D2A  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14367  001D2E  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14368  001D32  EC92  F01F         	call	___ftneg	;wreg free
 14369  001D36  C018  F0A0         	movff	?___ftneg,?_pow
 14370  001D3A  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14371  001D3E  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14372  001D42  0012               	return	
 14373  001D44                     l2031:
 14374                           
 14375                           ; BSR set to: 0
 14376  001D44  C0A0  F0A0         	movff	pow@x,?_pow
 14377  001D48  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14378  001D4C  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14379  001D50  0012               	return		;funcret
 14380  001D52                     __end_of_pow:
 14381                           	opt stack 0
 14382                           tosu	equ	0xFFF
 14383                           tosh	equ	0xFFE
 14384                           tosl	equ	0xFFD
 14385                           pclath	equ	0xFFA
 14386                           tblptru	equ	0xFF8
 14387                           tblptrh	equ	0xFF7
 14388                           tblptrl	equ	0xFF6
 14389                           tablat	equ	0xFF5
 14390                           prodh	equ	0xFF4
 14391                           prodl	equ	0xFF3
 14392                           intcon	equ	0xFF2
 14393                           intcon2	equ	0xFF1
 14394                           postinc0	equ	0xFEE
 14395                           plusw0	equ	0xFEB
 14396                           wreg	equ	0xFE8
 14397                           indf1	equ	0xFE7
 14398                           postdec1	equ	0xFE5
 14399                           fsr1h	equ	0xFE2
 14400                           fsr1l	equ	0xFE1
 14401                           indf2	equ	0xFDF
 14402                           postinc2	equ	0xFDE
 14403                           postdec2	equ	0xFDD
 14404                           plusw2	equ	0xFDB
 14405                           fsr2h	equ	0xFDA
 14406                           fsr2l	equ	0xFD9
 14407                           status	equ	0xFD8
 14408                           
 14409 ;; *************** function _log *****************
 14410 ;; Defined at:
 14411 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;  x               3   46[BANK0 ] unsigned char 
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  exponent        2   49[BANK0 ] int 
 14416 ;; Return value:  Size  Location     Type
 14417 ;;                  3   46[BANK0 ] int 
 14418 ;; Registers used:
 14419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14425 ;;      Params:         0       3       0       0       0       0       0
 14426 ;;      Locals:         0       2       0       0       0       0       0
 14427 ;;      Temps:          0       0       0       0       0       0       0
 14428 ;;      Totals:         0       5       0       0       0       0       0
 14429 ;;Total ram usage:        5 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; Hardware stack levels required when called:    7
 14432 ;; This function calls:
 14433 ;;		___awtoft
 14434 ;;		___ftadd
 14435 ;;		___ftmul
 14436 ;;		_eval_poly
 14437 ;;		_frexp
 14438 ;; This function is called by:
 14439 ;;		_pow
 14440 ;; This function uses a non-reentrant model
 14441 ;;
 14442                           
 14443                           	psect	text83
 14444  001E78                     __ptext83:
 14445                           	opt stack 0
 14446  001E78                     _log:
 14447                           	opt stack 18
 14448                           
 14449                           ;incstack = 0
 14450  001E78  0100               	movlb	0	; () banked
 14451  001E7A  AF90               	btfss	(log@x+2)& (0+255),7,b
 14452  001E7C  D00B               	goto	l2287
 14453                           
 14454                           ; BSR set to: 0
 14455  001E7E  0E00               	movlw	0
 14456  001E80  6FEA               	movwf	(_errno+1)& (0+255),b
 14457  001E82  0E21               	movlw	33
 14458  001E84  6FE9               	movwf	_errno& (0+255),b
 14459  001E86  0E00               	movlw	0
 14460  001E88  6F8E               	movwf	?_log& (0+255),b
 14461  001E8A  0E00               	movlw	0
 14462  001E8C  6F8F               	movwf	(?_log+1)& (0+255),b
 14463  001E8E  0E00               	movlw	0
 14464  001E90  6F90               	movwf	(?_log+2)& (0+255),b
 14465                           
 14466                           ; BSR set to: 0
 14467  001E92  0012               	return	
 14468  001E94                     l2287:
 14469                           
 14470                           ; BSR set to: 0
 14471                           
 14472                           ; BSR set to: 0
 14473  001E94  518E               	movf	log@x& (0+255),w,b
 14474  001E96  118F               	iorwf	(log@x+1)& (0+255),w,b
 14475  001E98  1190               	iorwf	(log@x+2)& (0+255),w,b
 14476  001E9A  A4D8               	btfss	status,2,c
 14477  001E9C  D00B               	goto	l2289
 14478                           
 14479                           ; BSR set to: 0
 14480  001E9E  0E00               	movlw	0
 14481  001EA0  6FEA               	movwf	(_errno+1)& (0+255),b
 14482  001EA2  0E22               	movlw	34
 14483  001EA4  6FE9               	movwf	_errno& (0+255),b
 14484  001EA6  0E00               	movlw	0
 14485  001EA8  6F8E               	movwf	?_log& (0+255),b
 14486  001EAA  0E00               	movlw	0
 14487  001EAC  6F8F               	movwf	(?_log+1)& (0+255),b
 14488  001EAE  0E00               	movlw	0
 14489  001EB0  6F90               	movwf	(?_log+2)& (0+255),b
 14490                           
 14491                           ; BSR set to: 0
 14492  001EB2  0012               	return	
 14493  001EB4                     l2289:
 14494                           
 14495                           ; BSR set to: 0
 14496                           
 14497                           ; BSR set to: 0
 14498  001EB4  0E00               	movlw	0
 14499  001EB6  6F6C               	movwf	___ftmul@f2& (0+255),b
 14500  001EB8  0E00               	movlw	0
 14501  001EBA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14502  001EBC  0E40               	movlw	64
 14503  001EBE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14504  001EC0  0E91               	movlw	low log@exponent
 14505  001EC2  6E1B               	movwf	frexp@eptr,c
 14506  001EC4  0E00               	movlw	high log@exponent
 14507  001EC6  6E1C               	movwf	frexp@eptr+1,c
 14508  001EC8  C08E  F018         	movff	log@x,frexp@value
 14509  001ECC  C08F  F019         	movff	log@x+1,frexp@value+1
 14510  001ED0  C090  F01A         	movff	log@x+2,frexp@value+2
 14511  001ED4  EC01  F018         	call	_frexp	;wreg free
 14512  001ED8  C018  F069         	movff	?_frexp,___ftmul@f1
 14513  001EDC  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 14514  001EE0  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 14515  001EE4  ECC9  F011         	call	___ftmul	;wreg free
 14516  001EE8  C069  F078         	movff	?___ftmul,___ftadd@f1
 14517  001EEC  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14518  001EF0  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14519  001EF4  0E00               	movlw	0
 14520  001EF6  0100               	movlb	0	; () banked
 14521  001EF8  6F7B               	movwf	___ftadd@f2& (0+255),b
 14522  001EFA  0E80               	movlw	128
 14523  001EFC  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14524  001EFE  0EBF               	movlw	191
 14525  001F00  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14526  001F02  EC56  F00C         	call	___ftadd	;wreg free
 14527  001F06  C078  F08E         	movff	?___ftadd,log@x
 14528  001F0A  C079  F08F         	movff	?___ftadd+1,log@x+1
 14529  001F0E  C07A  F090         	movff	?___ftadd+2,log@x+2
 14530  001F12  0100               	movlb	0	; () banked
 14531  001F14  0791               	decf	log@exponent& (0+255),f,b
 14532  001F16  A0D8               	btfss	status,0,c
 14533  001F18  0792               	decf	(log@exponent+1)& (0+255),f,b
 14534                           
 14535                           ; BSR set to: 0
 14536  001F1A  C08E  F084         	movff	log@x,eval_poly@x
 14537  001F1E  C08F  F085         	movff	log@x+1,eval_poly@x+1
 14538  001F22  C090  F086         	movff	log@x+2,eval_poly@x+2
 14539  001F26  0E75               	movlw	low log@coeff
 14540  001F28  6F87               	movwf	eval_poly@d& (0+255),b
 14541  001F2A  0E06               	movlw	high log@coeff
 14542  001F2C  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 14543  001F2E  0E00               	movlw	0
 14544  001F30  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 14545  001F32  0E08               	movlw	8
 14546  001F34  6F89               	movwf	eval_poly@n& (0+255),b
 14547  001F36  EC7F  F014         	call	_eval_poly	;wreg free
 14548  001F3A  C084  F08E         	movff	?_eval_poly,log@x
 14549  001F3E  C085  F08F         	movff	?_eval_poly+1,log@x+1
 14550  001F42  C086  F090         	movff	?_eval_poly+2,log@x+2
 14551  001F46  0E72               	movlw	114
 14552  001F48  0100               	movlb	0	; () banked
 14553  001F4A  6F6C               	movwf	___ftmul@f2& (0+255),b
 14554  001F4C  0E31               	movlw	49
 14555  001F4E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14556  001F50  0E3F               	movlw	63
 14557  001F52  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14558  001F54  C091  F020         	movff	log@exponent,___awtoft@c
 14559  001F58  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 14560  001F5C  ECE7  F01D         	call	___awtoft	;wreg free
 14561  001F60  C020  F069         	movff	?___awtoft,___ftmul@f1
 14562  001F64  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 14563  001F68  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 14564  001F6C  ECC9  F011         	call	___ftmul	;wreg free
 14565  001F70  C069  F078         	movff	?___ftmul,___ftadd@f1
 14566  001F74  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14567  001F78  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14568  001F7C  C08E  F07B         	movff	log@x,___ftadd@f2
 14569  001F80  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 14570  001F84  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 14571  001F88  EC56  F00C         	call	___ftadd	;wreg free
 14572  001F8C  C078  F08E         	movff	?___ftadd,?_log
 14573  001F90  C079  F08F         	movff	?___ftadd+1,?_log+1
 14574  001F94  C07A  F090         	movff	?___ftadd+2,?_log+2
 14575  001F98  0012               	return	
 14576  001F9A                     __end_of_log:
 14577                           	opt stack 0
 14578                           tosu	equ	0xFFF
 14579                           tosh	equ	0xFFE
 14580                           tosl	equ	0xFFD
 14581                           pclath	equ	0xFFA
 14582                           tblptru	equ	0xFF8
 14583                           tblptrh	equ	0xFF7
 14584                           tblptrl	equ	0xFF6
 14585                           tablat	equ	0xFF5
 14586                           prodh	equ	0xFF4
 14587                           prodl	equ	0xFF3
 14588                           intcon	equ	0xFF2
 14589                           intcon2	equ	0xFF1
 14590                           postinc0	equ	0xFEE
 14591                           plusw0	equ	0xFEB
 14592                           wreg	equ	0xFE8
 14593                           indf1	equ	0xFE7
 14594                           postdec1	equ	0xFE5
 14595                           fsr1h	equ	0xFE2
 14596                           fsr1l	equ	0xFE1
 14597                           indf2	equ	0xFDF
 14598                           postinc2	equ	0xFDE
 14599                           postdec2	equ	0xFDD
 14600                           plusw2	equ	0xFDB
 14601                           fsr2h	equ	0xFDA
 14602                           fsr2l	equ	0xFD9
 14603                           status	equ	0xFD8
 14604                           
 14605 ;; *************** function _exp *****************
 14606 ;; Defined at:
 14607 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;  x               3   55[BANK0 ] int 
 14610 ;; Auto vars:     Size  Location     Type
 14611 ;;  exponent        2   61[BANK0 ] int 
 14612 ;;  sign            1   63[BANK0 ] unsigned char 
 14613 ;; Return value:  Size  Location     Type
 14614 ;;                  3   55[BANK0 ] unsigned char 
 14615 ;; Registers used:
 14616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14617 ;; Tracked objects:
 14618 ;;		On entry : 0/0
 14619 ;;		On exit  : 0/0
 14620 ;;		Unchanged: 0/0
 14621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14622 ;;      Params:         0       3       0       0       0       0       0
 14623 ;;      Locals:         0       6       0       0       0       0       0
 14624 ;;      Temps:          0       0       0       0       0       0       0
 14625 ;;      Totals:         0       9       0       0       0       0       0
 14626 ;;Total ram usage:        9 bytes
 14627 ;; Hardware stack levels used:    1
 14628 ;; Hardware stack levels required when called:    7
 14629 ;; This function calls:
 14630 ;;		___awtoft
 14631 ;;		___ftdiv
 14632 ;;		___ftge
 14633 ;;		___ftmul
 14634 ;;		___ftneg
 14635 ;;		___ftsub
 14636 ;;		___fttol
 14637 ;;		_eval_poly
 14638 ;;		_floor
 14639 ;;		_ldexp
 14640 ;; This function is called by:
 14641 ;;		_pow
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text84
 14646  000F38                     __ptext84:
 14647                           	opt stack 0
 14648  000F38                     _exp:
 14649                           	opt stack 18
 14650                           
 14651                           ;incstack = 0
 14652  000F38  0100               	movlb	0	; () banked
 14653  000F3A  5197               	movf	exp@x& (0+255),w,b
 14654  000F3C  1198               	iorwf	(exp@x+1)& (0+255),w,b
 14655  000F3E  1199               	iorwf	(exp@x+2)& (0+255),w,b
 14656  000F40  A4D8               	btfss	status,2,c
 14657  000F42  D007               	goto	l2223
 14658                           
 14659                           ; BSR set to: 0
 14660  000F44  0E00               	movlw	0
 14661  000F46  6F97               	movwf	?_exp& (0+255),b
 14662  000F48  0E80               	movlw	128
 14663  000F4A  6F98               	movwf	(?_exp+1)& (0+255),b
 14664  000F4C  0E3F               	movlw	63
 14665  000F4E  6F99               	movwf	(?_exp+2)& (0+255),b
 14666                           
 14667                           ; BSR set to: 0
 14668  000F50  0012               	return	
 14669  000F52                     l2223:
 14670                           
 14671                           ; BSR set to: 0
 14672                           
 14673                           ; BSR set to: 0
 14674  000F52  0E72               	movlw	114
 14675  000F54  6E18               	movwf	___ftge@ff1,c
 14676  000F56  0E31               	movlw	49
 14677  000F58  6E19               	movwf	___ftge@ff1+1,c
 14678  000F5A  0E44               	movlw	68
 14679  000F5C  6E1A               	movwf	___ftge@ff1+2,c
 14680  000F5E  C097  F01B         	movff	exp@x,___ftge@ff2
 14681  000F62  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 14682  000F66  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 14683  000F6A  EC49  F018         	call	___ftge	;wreg free
 14684  000F6E  B0D8               	btfsc	status,0,c
 14685  000F70  D00C               	goto	l2225
 14686  000F72  0E00               	movlw	0
 14687  000F74  0100               	movlb	0	; () banked
 14688  000F76  6FEA               	movwf	(_errno+1)& (0+255),b
 14689  000F78  0E22               	movlw	34
 14690  000F7A  6FE9               	movwf	_errno& (0+255),b
 14691  000F7C  0EFF               	movlw	255
 14692  000F7E  6F97               	movwf	?_exp& (0+255),b
 14693  000F80  0E7F               	movlw	127
 14694  000F82  6F98               	movwf	(?_exp+1)& (0+255),b
 14695  000F84  0E7F               	movlw	127
 14696  000F86  6F99               	movwf	(?_exp+2)& (0+255),b
 14697                           
 14698                           ; BSR set to: 0
 14699  000F88  0012               	return	
 14700  000F8A                     l2225:
 14701                           
 14702                           ; BSR set to: 0
 14703  000F8A  C097  F018         	movff	exp@x,___ftge@ff1
 14704  000F8E  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 14705  000F92  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 14706  000F96  0E49               	movlw	73
 14707  000F98  6E1B               	movwf	___ftge@ff2,c
 14708  000F9A  0E3A               	movlw	58
 14709  000F9C  6E1C               	movwf	___ftge@ff2+1,c
 14710  000F9E  0EC4               	movlw	196
 14711  000FA0  6E1D               	movwf	___ftge@ff2+2,c
 14712  000FA2  EC49  F018         	call	___ftge	;wreg free
 14713  000FA6  B0D8               	btfsc	status,0,c
 14714  000FA8  D00C               	goto	l2226
 14715  000FAA  0E00               	movlw	0
 14716  000FAC  0100               	movlb	0	; () banked
 14717  000FAE  6FEA               	movwf	(_errno+1)& (0+255),b
 14718  000FB0  0E22               	movlw	34
 14719  000FB2  6FE9               	movwf	_errno& (0+255),b
 14720  000FB4  0E00               	movlw	0
 14721  000FB6  6F97               	movwf	?_exp& (0+255),b
 14722  000FB8  0E00               	movlw	0
 14723  000FBA  6F98               	movwf	(?_exp+1)& (0+255),b
 14724  000FBC  0E00               	movlw	0
 14725  000FBE  6F99               	movwf	(?_exp+2)& (0+255),b
 14726                           
 14727                           ; BSR set to: 0
 14728  000FC0  0012               	return	
 14729  000FC2                     l2226:
 14730                           
 14731                           ; BSR set to: 0
 14732  000FC2  0100               	movlb	0	; () banked
 14733  000FC4  AF99               	btfss	(exp@x+2)& (0+255),7,b
 14734  000FC6  D002               	goto	u7240
 14735  000FC8  0E01               	movlw	1
 14736  000FCA  D001               	goto	u7250
 14737  000FCC                     u7240:
 14738  000FCC  0E00               	movlw	0
 14739  000FCE                     u7250:
 14740  000FCE  6F9F               	movwf	exp@sign& (0+255),b
 14741                           
 14742                           ; BSR set to: 0
 14743  000FD0  519F               	movf	exp@sign& (0+255),w,b
 14744  000FD2  B4D8               	btfsc	status,2,c
 14745  000FD4  D00E               	goto	l2227
 14746                           
 14747                           ; BSR set to: 0
 14748  000FD6  C097  F018         	movff	exp@x,___ftneg@f1
 14749  000FDA  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 14750  000FDE  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 14751  000FE2  EC92  F01F         	call	___ftneg	;wreg free
 14752  000FE6  C018  F097         	movff	?___ftneg,exp@x
 14753  000FEA  C019  F098         	movff	?___ftneg+1,exp@x+1
 14754  000FEE  C01A  F099         	movff	?___ftneg+2,exp@x+2
 14755  000FF2                     l2227:
 14756  000FF2  C097  F069         	movff	exp@x,___ftmul@f1
 14757  000FF6  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 14758  000FFA  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 14759  000FFE  0EAA               	movlw	170
 14760  001000  0100               	movlb	0	; () banked
 14761  001002  6F6C               	movwf	___ftmul@f2& (0+255),b
 14762  001004  0EB8               	movlw	184
 14763  001006  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14764  001008  0E3F               	movlw	63
 14765  00100A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14766  00100C  ECC9  F011         	call	___ftmul	;wreg free
 14767  001010  C069  F097         	movff	?___ftmul,exp@x
 14768  001014  C06A  F098         	movff	?___ftmul+1,exp@x+1
 14769  001018  C06B  F099         	movff	?___ftmul+2,exp@x+2
 14770  00101C  C097  F08F         	movff	exp@x,floor@x
 14771  001020  C098  F090         	movff	exp@x+1,floor@x+1
 14772  001024  C099  F091         	movff	exp@x+2,floor@x+2
 14773  001028  EC0E  F014         	call	_floor	;wreg free
 14774  00102C  C08F  F09A         	movff	?_floor,_exp$3588
 14775  001030  C090  F09B         	movff	?_floor+1,_exp$3588+1
 14776  001034  C091  F09C         	movff	?_floor+2,_exp$3588+2
 14777  001038  C09A  F078         	movff	_exp$3588,___fttol@f1
 14778  00103C  C09B  F079         	movff	_exp$3588+1,___fttol@f1+1
 14779  001040  C09C  F07A         	movff	_exp$3588+2,___fttol@f1+2
 14780  001044  ECD2  F010         	call	___fttol	;wreg free
 14781  001048  C078  F09D         	movff	?___fttol,exp@exponent
 14782  00104C  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 14783  001050  C097  F084         	movff	exp@x,___ftsub@f1
 14784  001054  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 14785  001058  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 14786  00105C  C09D  F020         	movff	exp@exponent,___awtoft@c
 14787  001060  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 14788  001064  ECE7  F01D         	call	___awtoft	;wreg free
 14789  001068  C020  F087         	movff	?___awtoft,___ftsub@f2
 14790  00106C  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 14791  001070  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 14792  001074  ECF5  F01C         	call	___ftsub	;wreg free
 14793  001078  C084  F097         	movff	?___ftsub,exp@x
 14794  00107C  C085  F098         	movff	?___ftsub+1,exp@x+1
 14795  001080  C086  F099         	movff	?___ftsub+2,exp@x+2
 14796  001084  C097  F084         	movff	exp@x,eval_poly@x
 14797  001088  C098  F085         	movff	exp@x+1,eval_poly@x+1
 14798  00108C  C099  F086         	movff	exp@x+2,eval_poly@x+2
 14799  001090  0E57               	movlw	low exp@coeff
 14800  001092  0100               	movlb	0	; () banked
 14801  001094  6F87               	movwf	eval_poly@d& (0+255),b
 14802  001096  0E06               	movlw	high exp@coeff
 14803  001098  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 14804  00109A  0E00               	movlw	0
 14805  00109C  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 14806  00109E  0E09               	movlw	9
 14807  0010A0  6F89               	movwf	eval_poly@n& (0+255),b
 14808  0010A2  EC7F  F014         	call	_eval_poly	;wreg free
 14809  0010A6  C084  F08E         	movff	?_eval_poly,ldexp@value
 14810  0010AA  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 14811  0010AE  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 14812  0010B2  C09D  F091         	movff	exp@exponent,ldexp@newexp
 14813  0010B6  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 14814  0010BA  EC4D  F015         	call	_ldexp	;wreg free
 14815  0010BE  C08E  F097         	movff	?_ldexp,exp@x
 14816  0010C2  C08F  F098         	movff	?_ldexp+1,exp@x+1
 14817  0010C6  C090  F099         	movff	?_ldexp+2,exp@x+2
 14818  0010CA  0100               	movlb	0	; () banked
 14819  0010CC  519F               	movf	exp@sign& (0+255),w,b
 14820  0010CE  B4D8               	btfsc	status,2,c
 14821  0010D0  D025               	goto	l2228
 14822                           
 14823                           ; BSR set to: 0
 14824  0010D2  2997               	incf	exp@x& (0+255),w,b
 14825  0010D4  E10E               	bnz	l7492
 14826  0010D6  0E7F               	movlw	127
 14827  0010D8  1998               	xorwf	(exp@x+1)& (0+255),w,b
 14828  0010DA  E10B               	bnz	l7492
 14829  0010DC  0E7F               	movlw	127
 14830  0010DE  1999               	xorwf	(exp@x+2)& (0+255),w,b
 14831  0010E0  A4D8               	btfss	status,2,c
 14832  0010E2  D007               	goto	l2229
 14833                           
 14834                           ; BSR set to: 0
 14835  0010E4  0E00               	movlw	0
 14836  0010E6  6F97               	movwf	?_exp& (0+255),b
 14837  0010E8  0E00               	movlw	0
 14838  0010EA  6F98               	movwf	(?_exp+1)& (0+255),b
 14839  0010EC  0E00               	movlw	0
 14840  0010EE  6F99               	movwf	(?_exp+2)& (0+255),b
 14841                           
 14842                           ; BSR set to: 0
 14843  0010F0  0012               	return	
 14844  0010F2                     l2229:
 14845  0010F2                     l7492:
 14846                           
 14847                           ; BSR set to: 0
 14848  0010F2  0E00               	movlw	0
 14849  0010F4  6E29               	movwf	___ftdiv@f1,c
 14850  0010F6  0E80               	movlw	128
 14851  0010F8  6E2A               	movwf	___ftdiv@f1+1,c
 14852  0010FA  0E3F               	movlw	63
 14853  0010FC  6E2B               	movwf	___ftdiv@f1+2,c
 14854  0010FE  C097  F02C         	movff	exp@x,___ftdiv@f2
 14855  001102  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 14856  001106  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 14857  00110A  EC44  F012         	call	___ftdiv	;wreg free
 14858  00110E  C029  F097         	movff	?___ftdiv,?_exp
 14859  001112  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 14860  001116  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 14861  00111A  0012               	return	
 14862  00111C                     l2228:
 14863                           
 14864                           ; BSR set to: 0
 14865  00111C  C097  F097         	movff	exp@x,?_exp
 14866  001120  C098  F098         	movff	exp@x+1,?_exp+1
 14867  001124  C099  F099         	movff	exp@x+2,?_exp+2
 14868  001128  0012               	return		;funcret
 14869  00112A                     __end_of_exp:
 14870                           	opt stack 0
 14871                           tosu	equ	0xFFF
 14872                           tosh	equ	0xFFE
 14873                           tosl	equ	0xFFD
 14874                           pclath	equ	0xFFA
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           intcon	equ	0xFF2
 14882                           intcon2	equ	0xFF1
 14883                           postinc0	equ	0xFEE
 14884                           plusw0	equ	0xFEB
 14885                           wreg	equ	0xFE8
 14886                           indf1	equ	0xFE7
 14887                           postdec1	equ	0xFE5
 14888                           fsr1h	equ	0xFE2
 14889                           fsr1l	equ	0xFE1
 14890                           indf2	equ	0xFDF
 14891                           postinc2	equ	0xFDE
 14892                           postdec2	equ	0xFDD
 14893                           plusw2	equ	0xFDB
 14894                           fsr2h	equ	0xFDA
 14895                           fsr2l	equ	0xFD9
 14896                           status	equ	0xFD8
 14897                           
 14898 ;; *************** function _ldexp *****************
 14899 ;; Defined at:
 14900 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;  value           3   46[BANK0 ] unsigned char 
 14903 ;;  newexp          2   49[BANK0 ] int 
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;		None
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  3   46[BANK0 ] int 
 14908 ;; Registers used:
 14909 ;;		wreg, status,2, status,0
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14915 ;;      Params:         0       5       0       0       0       0       0
 14916 ;;      Locals:         0       0       0       0       0       0       0
 14917 ;;      Temps:          0       2       0       0       0       0       0
 14918 ;;      Totals:         0       7       0       0       0       0       0
 14919 ;;Total ram usage:        7 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:    4
 14922 ;; This function calls:
 14923 ;;		Nothing
 14924 ;; This function is called by:
 14925 ;;		_exp
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text85
 14930  002A9A                     __ptext85:
 14931                           	opt stack 0
 14932  002A9A                     _ldexp:
 14933                           	opt stack 20
 14934                           
 14935                           ;incstack = 0
 14936  002A9A  0100               	movlb	0	; () banked
 14937  002A9C  518E               	movf	ldexp@value& (0+255),w,b
 14938  002A9E  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 14939  002AA0  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 14940  002AA2  A4D8               	btfss	status,2,c
 14941  002AA4  D007               	goto	l2247
 14942                           
 14943                           ; BSR set to: 0
 14944  002AA6  0E00               	movlw	0
 14945  002AA8  6F8E               	movwf	?_ldexp& (0+255),b
 14946  002AAA  0E00               	movlw	0
 14947  002AAC  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14948  002AAE  0E00               	movlw	0
 14949  002AB0  6F90               	movwf	(?_ldexp+2)& (0+255),b
 14950                           
 14951                           ; BSR set to: 0
 14952  002AB2  0012               	return	
 14953  002AB4                     l2247:
 14954                           
 14955                           ; BSR set to: 0
 14956                           
 14957                           ; BSR set to: 0
 14958  002AB4  5190               	movf	(ldexp@value+2)& (0+255),w,b
 14959  002AB6  0B7F               	andlw	127
 14960  002AB8  6F93               	movwf	??_ldexp& (0+255),b
 14961  002ABA  6B94               	clrf	(??_ldexp+1)& (0+255),b
 14962  002ABC  90D8               	bcf	status,0,c
 14963  002ABE  3793               	rlcf	??_ldexp& (0+255),f,b
 14964  002AC0  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 14965  002AC2  5193               	movf	??_ldexp& (0+255),w,b
 14966  002AC4  2791               	addwf	ldexp@newexp& (0+255),f,b
 14967  002AC6  5194               	movf	(??_ldexp+1)& (0+255),w,b
 14968  002AC8  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 14969  002ACA  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 14970  002ACC  D003               	goto	u6980
 14971  002ACE  6B93               	clrf	??_ldexp& (0+255),b
 14972  002AD0  2B93               	incf	??_ldexp& (0+255),f,b
 14973  002AD2  D002               	goto	u6988
 14974  002AD4                     u6980:
 14975  002AD4  0100               	movlb	0	; () banked
 14976  002AD6  6B93               	clrf	??_ldexp& (0+255),b
 14977  002AD8                     u6988:
 14978  002AD8  5193               	movf	??_ldexp& (0+255),w,b
 14979  002ADA  2791               	addwf	ldexp@newexp& (0+255),f,b
 14980  002ADC  0E00               	movlw	0
 14981  002ADE  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 14982  002AE0  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 14983  002AE2  D00B               	goto	l2249
 14984                           
 14985                           ; BSR set to: 0
 14986  002AE4  0E00               	movlw	0
 14987  002AE6  6FEA               	movwf	(_errno+1)& (0+255),b
 14988  002AE8  0E22               	movlw	34
 14989  002AEA  6FE9               	movwf	_errno& (0+255),b
 14990  002AEC  0E00               	movlw	0
 14991  002AEE  6F8E               	movwf	?_ldexp& (0+255),b
 14992  002AF0  0E00               	movlw	0
 14993  002AF2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14994  002AF4  0E00               	movlw	0
 14995  002AF6                     L2:
 14996  002AF6  6F90               	movwf	(?_ldexp+2)& (0+255),b
 14997                           
 14998                           ; BSR set to: 0
 14999  002AF8  0012               	return	
 15000  002AFA                     l2249:
 15001                           
 15002                           ; BSR set to: 0
 15003                           
 15004                           ; BSR set to: 0
 15005  002AFA  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15006  002AFC  D015               	goto	l2251
 15007  002AFE  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15008  002B00  A0D8               	btfss	status,0,c
 15009  002B02  D012               	goto	l2251
 15010                           
 15011                           ; BSR set to: 0
 15012  002B04  0E00               	movlw	0
 15013  002B06  6FEA               	movwf	(_errno+1)& (0+255),b
 15014  002B08  0E22               	movlw	34
 15015  002B0A  6FE9               	movwf	_errno& (0+255),b
 15016                           
 15017                           ; BSR set to: 0
 15018  002B0C  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15019  002B0E  D006               	goto	l2252
 15020                           
 15021                           ; BSR set to: 0
 15022  002B10  0EFF               	movlw	255
 15023  002B12  6F8E               	movwf	?_ldexp& (0+255),b
 15024  002B14  0E7F               	movlw	127
 15025  002B16  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15026  002B18  0EFF               	movlw	255
 15027  002B1A  D7ED               	goto	L2
 15028  002B1C                     l2252:
 15029                           
 15030                           ; BSR set to: 0
 15031                           
 15032                           ; BSR set to: 0
 15033  002B1C  0EFF               	movlw	255
 15034  002B1E  6F8E               	movwf	?_ldexp& (0+255),b
 15035  002B20  0E7F               	movlw	127
 15036  002B22  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15037  002B24  0E7F               	movlw	127
 15038  002B26  D7E7               	goto	L2
 15039  002B28                     l2251:
 15040                           
 15041                           ; BSR set to: 0
 15042                           
 15043                           ; BSR set to: 0
 15044  002B28  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15045  002B2A  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15046  002B2C  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15047  002B2E  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15048  002B30  6F93               	movwf	??_ldexp& (0+255),b
 15049  002B32  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15050  002B34  1993               	xorwf	??_ldexp& (0+255),w,b
 15051  002B36  0B80               	andlw	-128
 15052  002B38  1993               	xorwf	??_ldexp& (0+255),w,b
 15053  002B3A  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15054  002B3C  C091  F093         	movff	ldexp@newexp,??_ldexp
 15055  002B40  0E01               	movlw	1
 15056  002B42  1793               	andwf	??_ldexp& (0+255),f,b
 15057  002B44  3393               	rrcf	??_ldexp& (0+255),f,b
 15058  002B46  3393               	rrcf	??_ldexp& (0+255),f,b
 15059  002B48  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15060  002B4A  1993               	xorwf	??_ldexp& (0+255),w,b
 15061  002B4C  0B7F               	andlw	-129
 15062  002B4E  1993               	xorwf	??_ldexp& (0+255),w,b
 15063  002B50  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15064                           
 15065                           ; BSR set to: 0
 15066                           
 15067                           ; BSR set to: 0
 15068                           
 15069                           ; BSR set to: 0
 15070  002B52  C08E  F08E         	movff	ldexp@value,?_ldexp
 15071  002B56  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15072  002B5A  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15073  002B5E  0012               	return	
 15074  002B60                     __end_of_ldexp:
 15075                           	opt stack 0
 15076                           tosu	equ	0xFFF
 15077                           tosh	equ	0xFFE
 15078                           tosl	equ	0xFFD
 15079                           pclath	equ	0xFFA
 15080                           tblptru	equ	0xFF8
 15081                           tblptrh	equ	0xFF7
 15082                           tblptrl	equ	0xFF6
 15083                           tablat	equ	0xFF5
 15084                           prodh	equ	0xFF4
 15085                           prodl	equ	0xFF3
 15086                           intcon	equ	0xFF2
 15087                           intcon2	equ	0xFF1
 15088                           postinc0	equ	0xFEE
 15089                           plusw0	equ	0xFEB
 15090                           wreg	equ	0xFE8
 15091                           indf1	equ	0xFE7
 15092                           postdec1	equ	0xFE5
 15093                           fsr1h	equ	0xFE2
 15094                           fsr1l	equ	0xFE1
 15095                           indf2	equ	0xFDF
 15096                           postinc2	equ	0xFDE
 15097                           postdec2	equ	0xFDD
 15098                           plusw2	equ	0xFDB
 15099                           fsr2h	equ	0xFDA
 15100                           fsr2l	equ	0xFD9
 15101                           status	equ	0xFD8
 15102                           
 15103 ;; *************** function _floor *****************
 15104 ;; Defined at:
 15105 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15106 ;; Parameters:    Size  Location     Type
 15107 ;;  x               3   47[BANK0 ] int 
 15108 ;; Auto vars:     Size  Location     Type
 15109 ;;  i               3   50[BANK0 ] int 
 15110 ;;  expon           2   53[BANK0 ] int 
 15111 ;; Return value:  Size  Location     Type
 15112 ;;                  3   47[BANK0 ] int 
 15113 ;; Registers used:
 15114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15115 ;; Tracked objects:
 15116 ;;		On entry : 0/0
 15117 ;;		On exit  : 0/0
 15118 ;;		Unchanged: 0/0
 15119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15120 ;;      Params:         0       3       0       0       0       0       0
 15121 ;;      Locals:         0       5       0       0       0       0       0
 15122 ;;      Temps:          0       0       0       0       0       0       0
 15123 ;;      Totals:         0       8       0       0       0       0       0
 15124 ;;Total ram usage:        8 bytes
 15125 ;; Hardware stack levels used:    1
 15126 ;; Hardware stack levels required when called:    6
 15127 ;; This function calls:
 15128 ;;		___altoft
 15129 ;;		___ftadd
 15130 ;;		___ftge
 15131 ;;		___fttol
 15132 ;;		_frexp
 15133 ;; This function is called by:
 15134 ;;		_exp
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           	psect	text86
 15139  00281C                     __ptext86:
 15140                           	opt stack 0
 15141  00281C                     _floor:
 15142                           	opt stack 18
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;incstack = 0
 15146  00281C  C08F  F018         	movff	floor@x,frexp@value
 15147  002820  C090  F019         	movff	floor@x+1,frexp@value+1
 15148  002824  C091  F01A         	movff	floor@x+2,frexp@value+2
 15149  002828  0E95               	movlw	low floor@expon
 15150  00282A  6E1B               	movwf	frexp@eptr,c
 15151  00282C  0E00               	movlw	high floor@expon
 15152  00282E  6E1C               	movwf	frexp@eptr+1,c
 15153  002830  EC01  F018         	call	_frexp	;wreg free
 15154  002834  0100               	movlb	0	; () banked
 15155  002836  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15156  002838  D010               	goto	l2234
 15157                           
 15158                           ; BSR set to: 0
 15159  00283A  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15160  00283C  D007               	goto	l2235
 15161                           
 15162                           ; BSR set to: 0
 15163  00283E  0E00               	movlw	0
 15164  002840  6F8F               	movwf	?_floor& (0+255),b
 15165  002842  0E80               	movlw	128
 15166  002844  6F90               	movwf	(?_floor+1)& (0+255),b
 15167  002846  0EBF               	movlw	191
 15168  002848  6F91               	movwf	(?_floor+2)& (0+255),b
 15169                           
 15170                           ; BSR set to: 0
 15171  00284A  0012               	return	
 15172  00284C                     l2235:
 15173                           
 15174                           ; BSR set to: 0
 15175                           
 15176                           ; BSR set to: 0
 15177  00284C  0E00               	movlw	0
 15178  00284E  6F8F               	movwf	?_floor& (0+255),b
 15179  002850  0E00               	movlw	0
 15180  002852  6F90               	movwf	(?_floor+1)& (0+255),b
 15181  002854  0E00               	movlw	0
 15182  002856  6F91               	movwf	(?_floor+2)& (0+255),b
 15183                           
 15184                           ; BSR set to: 0
 15185  002858  0012               	return	
 15186  00285A                     l2234:
 15187                           
 15188                           ; BSR set to: 0
 15189                           
 15190                           ; BSR set to: 0
 15191  00285A  5196               	movf	(floor@expon+1)& (0+255),w,b
 15192  00285C  E104               	bnz	u6940
 15193  00285E  0E15               	movlw	21
 15194  002860  5D95               	subwf	floor@expon& (0+255),w,b
 15195  002862  A0D8               	btfss	status,0,c
 15196  002864  D007               	goto	l2237
 15197  002866                     u6940:
 15198                           
 15199                           ; BSR set to: 0
 15200  002866  C08F  F08F         	movff	floor@x,?_floor
 15201  00286A  C090  F090         	movff	floor@x+1,?_floor+1
 15202  00286E  C091  F091         	movff	floor@x+2,?_floor+2
 15203  002872  0012               	return	
 15204  002874                     l2237:
 15205                           
 15206                           ; BSR set to: 0
 15207                           
 15208                           ; BSR set to: 0
 15209  002874  C08F  F078         	movff	floor@x,___fttol@f1
 15210  002878  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15211  00287C  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15212  002880  ECD2  F010         	call	___fttol	;wreg free
 15213  002884  C078  F087         	movff	?___fttol,___altoft@c
 15214  002888  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15215  00288C  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15216  002890  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15217  002894  EC9A  F019         	call	___altoft	;wreg free
 15218  002898  C087  F092         	movff	?___altoft,floor@i
 15219  00289C  C088  F093         	movff	?___altoft+1,floor@i+1
 15220  0028A0  C089  F094         	movff	?___altoft+2,floor@i+2
 15221  0028A4  C08F  F018         	movff	floor@x,___ftge@ff1
 15222  0028A8  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15223  0028AC  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15224  0028B0  C092  F01B         	movff	floor@i,___ftge@ff2
 15225  0028B4  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15226  0028B8  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15227  0028BC  EC49  F018         	call	___ftge	;wreg free
 15228  0028C0  B0D8               	btfsc	status,0,c
 15229  0028C2  D016               	goto	l2238
 15230  0028C4  C092  F078         	movff	floor@i,___ftadd@f1
 15231  0028C8  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15232  0028CC  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15233  0028D0  0E00               	movlw	0
 15234  0028D2  0100               	movlb	0	; () banked
 15235  0028D4  6F7B               	movwf	___ftadd@f2& (0+255),b
 15236  0028D6  0E80               	movlw	128
 15237  0028D8  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15238  0028DA  0EBF               	movlw	191
 15239  0028DC  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15240  0028DE  EC56  F00C         	call	___ftadd	;wreg free
 15241  0028E2  C078  F08F         	movff	?___ftadd,?_floor
 15242  0028E6  C079  F090         	movff	?___ftadd+1,?_floor+1
 15243  0028EA  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15244  0028EE  0012               	return	
 15245  0028F0                     l2238:
 15246  0028F0  C092  F08F         	movff	floor@i,?_floor
 15247  0028F4  C093  F090         	movff	floor@i+1,?_floor+1
 15248  0028F8  C094  F091         	movff	floor@i+2,?_floor+2
 15249  0028FC  0012               	return		;funcret
 15250  0028FE                     __end_of_floor:
 15251                           	opt stack 0
 15252                           tosu	equ	0xFFF
 15253                           tosh	equ	0xFFE
 15254                           tosl	equ	0xFFD
 15255                           pclath	equ	0xFFA
 15256                           tblptru	equ	0xFF8
 15257                           tblptrh	equ	0xFF7
 15258                           tblptrl	equ	0xFF6
 15259                           tablat	equ	0xFF5
 15260                           prodh	equ	0xFF4
 15261                           prodl	equ	0xFF3
 15262                           intcon	equ	0xFF2
 15263                           intcon2	equ	0xFF1
 15264                           postinc0	equ	0xFEE
 15265                           plusw0	equ	0xFEB
 15266                           wreg	equ	0xFE8
 15267                           indf1	equ	0xFE7
 15268                           postdec1	equ	0xFE5
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function _frexp *****************
 15280 ;; Defined at:
 15281 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  value           3   23[COMRAM] int 
 15284 ;;  eptr            2   26[COMRAM] PTR int 
 15285 ;;		 -> log@exponent(2), floor@expon(2), 
 15286 ;; Auto vars:     Size  Location     Type
 15287 ;;		None
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  3   23[COMRAM] PTR int 
 15290 ;; Registers used:
 15291 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15297 ;;      Params:         5       0       0       0       0       0       0
 15298 ;;      Locals:         0       0       0       0       0       0       0
 15299 ;;      Temps:          2       0       0       0       0       0       0
 15300 ;;      Totals:         7       0       0       0       0       0       0
 15301 ;;Total ram usage:        7 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    4
 15304 ;; This function calls:
 15305 ;;		Nothing
 15306 ;; This function is called by:
 15307 ;;		_floor
 15308 ;;		_log
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text87
 15313  003002                     __ptext87:
 15314                           	opt stack 0
 15315  003002                     _frexp:
 15316                           	opt stack 20
 15317                           
 15318                           ;incstack = 0
 15319  003002  5018               	movf	frexp@value,w,c
 15320  003004  1019               	iorwf	frexp@value+1,w,c
 15321  003006  101A               	iorwf	frexp@value+2,w,c
 15322  003008  A4D8               	btfss	status,2,c
 15323  00300A  D00F               	goto	l2243
 15324  00300C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15325  003010  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15326  003014  0E00               	movlw	0
 15327  003016  6EDE               	movwf	postinc2,c
 15328  003018  0E00               	movlw	0
 15329  00301A  6EDD               	movwf	postdec2,c
 15330  00301C  0E00               	movlw	0
 15331  00301E  6E18               	movwf	?_frexp,c
 15332  003020  0E00               	movlw	0
 15333  003022  6E19               	movwf	?_frexp+1,c
 15334  003024  0E00               	movlw	0
 15335  003026  6E1A               	movwf	?_frexp+2,c
 15336  003028  0012               	return	
 15337  00302A                     l2243:
 15338  00302A  501A               	movf	frexp@value+2,w,c
 15339  00302C  0B7F               	andlw	127
 15340  00302E  6E1D               	movwf	??_frexp& (0+255),c
 15341  003030  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15342  003032  90D8               	bcf	status,0,c
 15343  003034  361D               	rlcf	??_frexp,f,c
 15344  003036  361E               	rlcf	??_frexp+1,f,c
 15345  003038  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15346  00303C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15347  003040  C01D  FFDE         	movff	??_frexp,postinc2
 15348  003044  C01E  FFDD         	movff	??_frexp+1,postdec2
 15349  003048  AE19               	btfss	frexp@value+1,7,c
 15350  00304A  D003               	goto	u6820
 15351  00304C  6A1D               	clrf	??_frexp& (0+255),c
 15352  00304E  2A1D               	incf	??_frexp& (0+255),f,c
 15353  003050  D001               	goto	u6828
 15354  003052                     u6820:
 15355  003052  6A1D               	clrf	??_frexp& (0+255),c
 15356  003054                     u6828:
 15357  003054  501D               	movf	??_frexp,w,c
 15358  003056  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15359  00305A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15360  00305E  12DE               	iorwf	postinc2,f,c
 15361  003060  0E00               	movlw	0
 15362  003062  12DD               	iorwf	postdec2,f,c
 15363  003064  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15364  003068  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15365  00306C  0E82               	movlw	130
 15366  00306E  26DE               	addwf	postinc2,f,c
 15367  003070  0EFF               	movlw	255
 15368  003072  22DD               	addwfc	postdec2,f,c
 15369  003074  801A               	bsf	frexp@value+2,0,c
 15370  003076  821A               	bsf	frexp@value+2,1,c
 15371  003078  841A               	bsf	frexp@value+2,2,c
 15372  00307A  861A               	bsf	frexp@value+2,3,c
 15373  00307C  881A               	bsf	frexp@value+2,4,c
 15374  00307E  8A1A               	bsf	frexp@value+2,5,c
 15375  003080  9C1A               	bcf	frexp@value+2,6,c
 15376  003082  9E19               	bcf	frexp@value+1,7,c
 15377  003084  C018  F018         	movff	frexp@value,?_frexp
 15378  003088  C019  F019         	movff	frexp@value+1,?_frexp+1
 15379  00308C  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15380  003090  0012               	return	
 15381  003092                     __end_of_frexp:
 15382                           	opt stack 0
 15383                           tosu	equ	0xFFF
 15384                           tosh	equ	0xFFE
 15385                           tosl	equ	0xFFD
 15386                           pclath	equ	0xFFA
 15387                           tblptru	equ	0xFF8
 15388                           tblptrh	equ	0xFF7
 15389                           tblptrl	equ	0xFF6
 15390                           tablat	equ	0xFF5
 15391                           prodh	equ	0xFF4
 15392                           prodl	equ	0xFF3
 15393                           intcon	equ	0xFF2
 15394                           intcon2	equ	0xFF1
 15395                           postinc0	equ	0xFEE
 15396                           plusw0	equ	0xFEB
 15397                           wreg	equ	0xFE8
 15398                           indf1	equ	0xFE7
 15399                           postdec1	equ	0xFE5
 15400                           fsr1h	equ	0xFE2
 15401                           fsr1l	equ	0xFE1
 15402                           indf2	equ	0xFDF
 15403                           postinc2	equ	0xFDE
 15404                           postdec2	equ	0xFDD
 15405                           plusw2	equ	0xFDB
 15406                           fsr2h	equ	0xFDA
 15407                           fsr2l	equ	0xFD9
 15408                           status	equ	0xFD8
 15409                           
 15410 ;; *************** function ___fttol *****************
 15411 ;; Defined at:
 15412 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;  f1              3   24[BANK0 ] float 
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;  lval            4   34[BANK0 ] unsigned long 
 15417 ;;  exp1            1   38[BANK0 ] unsigned char 
 15418 ;;  sign1           1   33[BANK0 ] unsigned char 
 15419 ;; Return value:  Size  Location     Type
 15420 ;;                  4   24[BANK0 ] long 
 15421 ;; Registers used:
 15422 ;;		wreg, status,2, status,0
 15423 ;; Tracked objects:
 15424 ;;		On entry : 0/0
 15425 ;;		On exit  : 0/0
 15426 ;;		Unchanged: 0/0
 15427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15428 ;;      Params:         0       4       0       0       0       0       0
 15429 ;;      Locals:         0       6       0       0       0       0       0
 15430 ;;      Temps:          0       5       0       0       0       0       0
 15431 ;;      Totals:         0      15       0       0       0       0       0
 15432 ;;Total ram usage:       15 bytes
 15433 ;; Hardware stack levels used:    1
 15434 ;; Hardware stack levels required when called:    4
 15435 ;; This function calls:
 15436 ;;		Nothing
 15437 ;; This function is called by:
 15438 ;;		_AdcConvert
 15439 ;;		_ReadIntFromEeprom
 15440 ;;		_pow
 15441 ;;		_exp
 15442 ;;		_floor
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text88
 15447  0021A4                     __ptext88:
 15448                           	opt stack 0
 15449  0021A4                     ___fttol:
 15450                           	opt stack 19
 15451                           
 15452                           ;incstack = 0
 15453  0021A4  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 15454  0021A8  0100               	movlb	0	; () banked
 15455  0021AA  6B7D               	clrf	(??___fttol+1)& (0+255),b
 15456  0021AC  6B7E               	clrf	(??___fttol+2)& (0+255),b
 15457  0021AE  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15458  0021B0  377C               	rlcf	??___fttol& (0+255),f,b
 15459  0021B2  E301               	bnc	u6731
 15460  0021B4  817D               	bsf	(??___fttol+1)& (0+255),0,b
 15461  0021B6                     u6731:
 15462  0021B6  517C               	movf	??___fttol& (0+255),w,b
 15463  0021B8  6F86               	movwf	___fttol@exp1& (0+255),b
 15464  0021BA  5186               	movf	___fttol@exp1& (0+255),w,b
 15465  0021BC  A4D8               	btfss	status,2,c
 15466  0021BE  D009               	goto	l1900
 15467                           
 15468                           ; BSR set to: 0
 15469  0021C0  0E00               	movlw	0
 15470  0021C2  6F78               	movwf	?___fttol& (0+255),b
 15471  0021C4  0E00               	movlw	0
 15472  0021C6  6F79               	movwf	(?___fttol+1)& (0+255),b
 15473  0021C8  0E00               	movlw	0
 15474  0021CA  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15475  0021CC  0E00               	movlw	0
 15476  0021CE  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15477                           
 15478                           ; BSR set to: 0
 15479  0021D0  0012               	return	
 15480  0021D2                     l1900:
 15481                           
 15482                           ; BSR set to: 0
 15483                           
 15484                           ; BSR set to: 0
 15485  0021D2  0E17               	movlw	23
 15486  0021D4  6F7C               	movwf	??___fttol& (0+255),b
 15487  0021D6  C078  F07D         	movff	___fttol@f1,??___fttol+1
 15488  0021DA  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 15489  0021DE  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 15490  0021E2  297C               	incf	??___fttol& (0+255),w,b
 15491  0021E4  6F80               	movwf	(??___fttol+4)& (0+255),b
 15492  0021E6  D004               	goto	u6750
 15493  0021E8                     u6755:
 15494  0021E8  90D8               	bcf	status,0,c
 15495  0021EA  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 15496  0021EC  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 15497  0021EE  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 15498  0021F0                     u6750:
 15499  0021F0  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 15500  0021F2  D7FA               	goto	u6755
 15501  0021F4  0100               	movlb	0	; () banked
 15502  0021F6  517D               	movf	(??___fttol+1)& (0+255),w,b
 15503  0021F8  6F81               	movwf	___fttol@sign1& (0+255),b
 15504                           
 15505                           ; BSR set to: 0
 15506  0021FA  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 15507                           
 15508                           ; BSR set to: 0
 15509  0021FC  0EFF               	movlw	255
 15510  0021FE  1778               	andwf	___fttol@f1& (0+255),f,b
 15511  002200  0EFF               	movlw	255
 15512  002202  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 15513  002204  0E00               	movlw	0
 15514  002206  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 15515                           
 15516                           ; BSR set to: 0
 15517  002208  5178               	movf	___fttol@f1& (0+255),w,b
 15518  00220A  6F82               	movwf	___fttol@lval& (0+255),b
 15519  00220C  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 15520  00220E  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 15521  002210  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 15522  002212  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 15523  002214  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 15524                           
 15525                           ; BSR set to: 0
 15526  002216  0E8E               	movlw	142
 15527  002218  5F86               	subwf	___fttol@exp1& (0+255),f,b
 15528                           
 15529                           ; BSR set to: 0
 15530  00221A  AF86               	btfss	___fttol@exp1& (0+255),7,b
 15531  00221C  D016               	goto	l1902
 15532                           
 15533                           ; BSR set to: 0
 15534  00221E  5186               	movf	___fttol@exp1& (0+255),w,b
 15535  002220  0A80               	xorlw	128
 15536  002222  0F8F               	addlw	143
 15537  002224  B0D8               	btfsc	status,0,c
 15538  002226  D009               	goto	l1903
 15539                           
 15540                           ; BSR set to: 0
 15541  002228  0E00               	movlw	0
 15542  00222A  6F78               	movwf	?___fttol& (0+255),b
 15543  00222C  0E00               	movlw	0
 15544  00222E  6F79               	movwf	(?___fttol+1)& (0+255),b
 15545  002230  0E00               	movlw	0
 15546  002232  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15547  002234  0E00               	movlw	0
 15548  002236  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15549                           
 15550                           ; BSR set to: 0
 15551  002238  0012               	return	
 15552  00223A                     l1903:
 15553                           
 15554                           ; BSR set to: 0
 15555                           
 15556                           ; BSR set to: 0
 15557                           
 15558                           ; BSR set to: 0
 15559  00223A  90D8               	bcf	status,0,c
 15560  00223C  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 15561  00223E  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 15562  002240  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 15563  002242  3382               	rrcf	___fttol@lval& (0+255),f,b
 15564                           
 15565                           ; BSR set to: 0
 15566  002244  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 15567  002246  D7F9               	goto	l1903
 15568                           
 15569                           ; BSR set to: 0
 15570  002248  D015               	goto	u6790
 15571  00224A                     l1902:
 15572                           
 15573                           ; BSR set to: 0
 15574                           
 15575                           ; BSR set to: 0
 15576  00224A  0E17               	movlw	23
 15577  00224C  6586               	cpfsgt	___fttol@exp1& (0+255),b
 15578  00224E  D00F               	goto	l1908
 15579                           
 15580                           ; BSR set to: 0
 15581  002250  0E00               	movlw	0
 15582  002252  6F78               	movwf	?___fttol& (0+255),b
 15583  002254  0E00               	movlw	0
 15584  002256  6F79               	movwf	(?___fttol+1)& (0+255),b
 15585  002258  0E00               	movlw	0
 15586  00225A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15587  00225C  0E00               	movlw	0
 15588  00225E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15589                           
 15590                           ; BSR set to: 0
 15591  002260  0012               	return	
 15592  002262                     
 15593                           ; BSR set to: 0
 15594                           
 15595                           ; BSR set to: 0
 15596  002262  90D8               	bcf	status,0,c
 15597  002264  3782               	rlcf	___fttol@lval& (0+255),f,b
 15598  002266  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 15599  002268  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 15600  00226A  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 15601  00226C  0786               	decf	___fttol@exp1& (0+255),f,b
 15602  00226E                     l1908:
 15603                           
 15604                           ; BSR set to: 0
 15605                           
 15606                           ; BSR set to: 0
 15607  00226E  5186               	movf	___fttol@exp1& (0+255),w,b
 15608  002270  A4D8               	btfss	status,2,c
 15609  002272  D7F7               	goto	l1909
 15610  002274                     u6790:
 15611                           
 15612                           ; BSR set to: 0
 15613                           
 15614                           ; BSR set to: 0
 15615                           
 15616                           ; BSR set to: 0
 15617  002274  5181               	movf	___fttol@sign1& (0+255),w,b
 15618  002276  B4D8               	btfsc	status,2,c
 15619  002278  D008               	goto	l1911
 15620                           
 15621                           ; BSR set to: 0
 15622  00227A  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 15623  00227C  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 15624  00227E  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 15625  002280  6D82               	negf	___fttol@lval& (0+255),b
 15626  002282  0E00               	movlw	0
 15627  002284  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 15628  002286  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 15629  002288  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 15630  00228A                     l1911:
 15631                           
 15632                           ; BSR set to: 0
 15633                           
 15634                           ; BSR set to: 0
 15635  00228A  C082  F078         	movff	___fttol@lval,?___fttol
 15636  00228E  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 15637  002292  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 15638  002296  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 15639  00229A  0012               	return	
 15640  00229C                     __end_of___fttol:
 15641                           	opt stack 0
 15642                           tosu	equ	0xFFF
 15643                           tosh	equ	0xFFE
 15644                           tosl	equ	0xFFD
 15645                           pclath	equ	0xFFA
 15646                           tblptru	equ	0xFF8
 15647                           tblptrh	equ	0xFF7
 15648                           tblptrl	equ	0xFF6
 15649                           tablat	equ	0xFF5
 15650                           prodh	equ	0xFF4
 15651                           prodl	equ	0xFF3
 15652                           intcon	equ	0xFF2
 15653                           intcon2	equ	0xFF1
 15654                           postinc0	equ	0xFEE
 15655                           plusw0	equ	0xFEB
 15656                           wreg	equ	0xFE8
 15657                           indf1	equ	0xFE7
 15658                           postdec1	equ	0xFE5
 15659                           fsr1h	equ	0xFE2
 15660                           fsr1l	equ	0xFE1
 15661                           indf2	equ	0xFDF
 15662                           postinc2	equ	0xFDE
 15663                           postdec2	equ	0xFDD
 15664                           plusw2	equ	0xFDB
 15665                           fsr2h	equ	0xFDA
 15666                           fsr2l	equ	0xFD9
 15667                           status	equ	0xFD8
 15668                           
 15669 ;; *************** function ___ftge *****************
 15670 ;; Defined at:
 15671 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 15672 ;; Parameters:    Size  Location     Type
 15673 ;;  ff1             3   23[COMRAM] float 
 15674 ;;  ff2             3   26[COMRAM] float 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;		None
 15677 ;; Return value:  Size  Location     Type
 15678 ;;		None               void
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15686 ;;      Params:         6       0       0       0       0       0       0
 15687 ;;      Locals:         0       0       0       0       0       0       0
 15688 ;;      Temps:          3       0       0       0       0       0       0
 15689 ;;      Totals:         9       0       0       0       0       0       0
 15690 ;;Total ram usage:        9 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    4
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_CheckFlashPrecentage
 15697 ;;		_pow
 15698 ;;		_exp
 15699 ;;		_floor
 15700 ;; This function uses a non-reentrant model
 15701 ;;
 15702                           
 15703                           	psect	text89
 15704  003092                     __ptext89:
 15705                           	opt stack 0
 15706  003092                     ___ftge:
 15707                           	opt stack 19
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;incstack = 0
 15711  003092  AE1A               	btfss	___ftge@ff1+2,7,c
 15712  003094  D016               	goto	l1872
 15713  003096  C018  F01E         	movff	___ftge@ff1,??___ftge
 15714  00309A  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 15715  00309E  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 15716  0030A2  1E1E               	comf	??___ftge,f,c
 15717  0030A4  1E1F               	comf	??___ftge+1,f,c
 15718  0030A6  1E20               	comf	??___ftge+2,f,c
 15719  0030A8  2A1E               	incf	??___ftge,f,c
 15720  0030AA  0E00               	movlw	0
 15721  0030AC  221F               	addwfc	??___ftge+1,f,c
 15722  0030AE  2220               	addwfc	??___ftge+2,f,c
 15723  0030B0  0E00               	movlw	0
 15724  0030B2  241E               	addwf	??___ftge,w,c
 15725  0030B4  6E18               	movwf	___ftge@ff1,c
 15726  0030B6  0E00               	movlw	0
 15727  0030B8  201F               	addwfc	??___ftge+1,w,c
 15728  0030BA  6E19               	movwf	___ftge@ff1+1,c
 15729  0030BC  0E80               	movlw	128
 15730  0030BE  2020               	addwfc	??___ftge+2,w,c
 15731  0030C0  6E1A               	movwf	___ftge@ff1+2,c
 15732  0030C2                     l1872:
 15733  0030C2  AE1D               	btfss	___ftge@ff2+2,7,c
 15734  0030C4  D016               	goto	l1873
 15735  0030C6  C01B  F01E         	movff	___ftge@ff2,??___ftge
 15736  0030CA  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 15737  0030CE  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 15738  0030D2  1E1E               	comf	??___ftge,f,c
 15739  0030D4  1E1F               	comf	??___ftge+1,f,c
 15740  0030D6  1E20               	comf	??___ftge+2,f,c
 15741  0030D8  2A1E               	incf	??___ftge,f,c
 15742  0030DA  0E00               	movlw	0
 15743  0030DC  221F               	addwfc	??___ftge+1,f,c
 15744  0030DE  2220               	addwfc	??___ftge+2,f,c
 15745  0030E0  0E00               	movlw	0
 15746  0030E2  241E               	addwf	??___ftge,w,c
 15747  0030E4  6E1B               	movwf	___ftge@ff2,c
 15748  0030E6  0E00               	movlw	0
 15749  0030E8  201F               	addwfc	??___ftge+1,w,c
 15750  0030EA  6E1C               	movwf	___ftge@ff2+1,c
 15751  0030EC  0E80               	movlw	128
 15752  0030EE  2020               	addwfc	??___ftge+2,w,c
 15753  0030F0  6E1D               	movwf	___ftge@ff2+2,c
 15754  0030F2                     l1873:
 15755  0030F2  0E00               	movlw	0
 15756  0030F4  1A18               	xorwf	___ftge@ff1,f,c
 15757  0030F6  0E00               	movlw	0
 15758  0030F8  1A19               	xorwf	___ftge@ff1+1,f,c
 15759  0030FA  0E80               	movlw	128
 15760  0030FC  1A1A               	xorwf	___ftge@ff1+2,f,c
 15761  0030FE  0E00               	movlw	0
 15762  003100  1A1B               	xorwf	___ftge@ff2,f,c
 15763  003102  0E00               	movlw	0
 15764  003104  1A1C               	xorwf	___ftge@ff2+1,f,c
 15765  003106  0E80               	movlw	128
 15766  003108  1A1D               	xorwf	___ftge@ff2+2,f,c
 15767  00310A  501B               	movf	___ftge@ff2,w,c
 15768  00310C  5C18               	subwf	___ftge@ff1,w,c
 15769  00310E  501C               	movf	___ftge@ff2+1,w,c
 15770  003110  5819               	subwfb	___ftge@ff1+1,w,c
 15771  003112  501D               	movf	___ftge@ff2+2,w,c
 15772  003114  581A               	subwfb	___ftge@ff1+2,w,c
 15773  003116  B0D8               	btfsc	status,0,c
 15774  003118  D002               	goto	l6924
 15775  00311A  90D8               	bcf	status,0,c
 15776  00311C  0012               	return	
 15777  00311E                     l6924:
 15778  00311E  80D8               	bsf	status,0,c
 15779  003120  0012               	return	
 15780  003122                     __end_of___ftge:
 15781                           	opt stack 0
 15782                           tosu	equ	0xFFF
 15783                           tosh	equ	0xFFE
 15784                           tosl	equ	0xFFD
 15785                           pclath	equ	0xFFA
 15786                           tblptru	equ	0xFF8
 15787                           tblptrh	equ	0xFF7
 15788                           tblptrl	equ	0xFF6
 15789                           tablat	equ	0xFF5
 15790                           prodh	equ	0xFF4
 15791                           prodl	equ	0xFF3
 15792                           intcon	equ	0xFF2
 15793                           intcon2	equ	0xFF1
 15794                           postinc0	equ	0xFEE
 15795                           plusw0	equ	0xFEB
 15796                           wreg	equ	0xFE8
 15797                           indf1	equ	0xFE7
 15798                           postdec1	equ	0xFE5
 15799                           fsr1h	equ	0xFE2
 15800                           fsr1l	equ	0xFE1
 15801                           indf2	equ	0xFDF
 15802                           postinc2	equ	0xFDE
 15803                           postdec2	equ	0xFDD
 15804                           plusw2	equ	0xFDB
 15805                           fsr2h	equ	0xFDA
 15806                           fsr2l	equ	0xFD9
 15807                           status	equ	0xFD8
 15808                           
 15809 ;; *************** function ___altoft *****************
 15810 ;; Defined at:
 15811 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;  c               4   39[BANK0 ] long 
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;  sign            1   47[COMRAM] unsigned char 
 15816 ;;  exp             1   46[COMRAM] unsigned char 
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  3   39[BANK0 ] float 
 15819 ;; Registers used:
 15820 ;;		wreg, status,2, status,0, cstack
 15821 ;; Tracked objects:
 15822 ;;		On entry : 0/0
 15823 ;;		On exit  : 0/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15826 ;;      Params:         0       4       0       0       0       0       0
 15827 ;;      Locals:         2       0       0       0       0       0       0
 15828 ;;      Temps:          0       4       0       0       0       0       0
 15829 ;;      Totals:         2       8       0       0       0       0       0
 15830 ;;Total ram usage:       10 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; Hardware stack levels required when called:    5
 15833 ;; This function calls:
 15834 ;;		___ftpack
 15835 ;; This function is called by:
 15836 ;;		_floor
 15837 ;; This function uses a non-reentrant model
 15838 ;;
 15839                           
 15840                           	psect	text90
 15841  003334                     __ptext90:
 15842                           	opt stack 0
 15843  003334                     ___altoft:
 15844                           	opt stack 18
 15845                           
 15846                           ;incstack = 0
 15847  003334  0E00               	movlw	0
 15848  003336  6E30               	movwf	___altoft@sign,c
 15849  003338  0E8E               	movlw	142
 15850  00333A  6E2F               	movwf	___altoft@exp,c
 15851  00333C  0100               	movlb	0	; () banked
 15852  00333E  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 15853  003340  D011               	goto	l1670
 15854                           
 15855                           ; BSR set to: 0
 15856  003342  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 15857  003344  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 15858  003346  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 15859  003348  6D87               	negf	___altoft@c& (0+255),b
 15860  00334A  0E00               	movlw	0
 15861  00334C  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 15862  00334E  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 15863  003350  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 15864                           
 15865                           ; BSR set to: 0
 15866  003352  0E01               	movlw	1
 15867  003354  6E30               	movwf	___altoft@sign,c
 15868                           
 15869                           ; BSR set to: 0
 15870  003356  D006               	goto	l1670
 15871  003358                     
 15872                           ; BSR set to: 0
 15873                           
 15874                           ; BSR set to: 0
 15875  003358  90D8               	bcf	status,0,c
 15876  00335A  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 15877  00335C  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 15878  00335E  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 15879  003360  3387               	rrcf	___altoft@c& (0+255),f,b
 15880  003362  2A2F               	incf	___altoft@exp,f,c
 15881  003364                     l1670:
 15882                           
 15883                           ; BSR set to: 0
 15884                           
 15885                           ; BSR set to: 0
 15886  003364  0E00               	movlw	0
 15887  003366  1587               	andwf	___altoft@c& (0+255),w,b
 15888  003368  6F8B               	movwf	??___altoft& (0+255),b
 15889  00336A  0E00               	movlw	0
 15890  00336C  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 15891  00336E  6F8C               	movwf	(??___altoft+1)& (0+255),b
 15892  003370  0E00               	movlw	0
 15893  003372  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 15894  003374  6F8D               	movwf	(??___altoft+2)& (0+255),b
 15895  003376  0EFF               	movlw	255
 15896  003378  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 15897  00337A  6F8E               	movwf	(??___altoft+3)& (0+255),b
 15898  00337C  518B               	movf	??___altoft& (0+255),w,b
 15899  00337E  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 15900  003380  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 15901  003382  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 15902  003384  A4D8               	btfss	status,2,c
 15903  003386  D7E8               	goto	l1671
 15904                           
 15905                           ; BSR set to: 0
 15906                           
 15907                           ; BSR set to: 0
 15908  003388  C087  F018         	movff	___altoft@c,___ftpack@arg
 15909  00338C  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 15910  003390  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 15911  003394  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 15912  003398  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 15913  00339C  EC65  F016         	call	___ftpack	;wreg free
 15914  0033A0  C018  F087         	movff	?___ftpack,?___altoft
 15915  0033A4  C019  F088         	movff	?___ftpack+1,?___altoft+1
 15916  0033A8  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 15917  0033AC  0012               	return	
 15918  0033AE                     __end_of___altoft:
 15919                           	opt stack 0
 15920                           tosu	equ	0xFFF
 15921                           tosh	equ	0xFFE
 15922                           tosl	equ	0xFFD
 15923                           pclath	equ	0xFFA
 15924                           tblptru	equ	0xFF8
 15925                           tblptrh	equ	0xFF7
 15926                           tblptrl	equ	0xFF6
 15927                           tablat	equ	0xFF5
 15928                           prodh	equ	0xFF4
 15929                           prodl	equ	0xFF3
 15930                           intcon	equ	0xFF2
 15931                           intcon2	equ	0xFF1
 15932                           postinc0	equ	0xFEE
 15933                           plusw0	equ	0xFEB
 15934                           wreg	equ	0xFE8
 15935                           indf1	equ	0xFE7
 15936                           postdec1	equ	0xFE5
 15937                           fsr1h	equ	0xFE2
 15938                           fsr1l	equ	0xFE1
 15939                           indf2	equ	0xFDF
 15940                           postinc2	equ	0xFDE
 15941                           postdec2	equ	0xFDD
 15942                           plusw2	equ	0xFDB
 15943                           fsr2h	equ	0xFDA
 15944                           fsr2l	equ	0xFD9
 15945                           status	equ	0xFD8
 15946                           
 15947 ;; *************** function _eval_poly *****************
 15948 ;; Defined at:
 15949 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 15950 ;; Parameters:    Size  Location     Type
 15951 ;;  x               3   36[BANK0 ] float 
 15952 ;;  d               2   39[BANK0 ] PTR const 
 15953 ;;		 -> log@coeff(27), exp@coeff(30), 
 15954 ;;  n               2   41[BANK0 ] int 
 15955 ;; Auto vars:     Size  Location     Type
 15956 ;;  res             3   43[BANK0 ] int 
 15957 ;; Return value:  Size  Location     Type
 15958 ;;                  3   36[BANK0 ] int 
 15959 ;; Registers used:
 15960 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15961 ;; Tracked objects:
 15962 ;;		On entry : 0/0
 15963 ;;		On exit  : 0/0
 15964 ;;		Unchanged: 0/0
 15965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15966 ;;      Params:         0       7       0       0       0       0       0
 15967 ;;      Locals:         0       3       0       0       0       0       0
 15968 ;;      Temps:          2       0       0       0       0       0       0
 15969 ;;      Totals:         2      10       0       0       0       0       0
 15970 ;;Total ram usage:       12 bytes
 15971 ;; Hardware stack levels used:    1
 15972 ;; Hardware stack levels required when called:    6
 15973 ;; This function calls:
 15974 ;;		___ftadd
 15975 ;;		___ftmul
 15976 ;;		___wmul
 15977 ;; This function is called by:
 15978 ;;		_exp
 15979 ;;		_log
 15980 ;; This function uses a non-reentrant model
 15981 ;;
 15982                           
 15983                           	psect	text91
 15984  0028FE                     __ptext91:
 15985                           	opt stack 0
 15986  0028FE                     _eval_poly:
 15987                           	opt stack 18
 15988                           
 15989                           ;incstack = 0
 15990  0028FE  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 15991  002902  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 15992  002906  0E00               	movlw	0
 15993  002908  6E1B               	movwf	___wmul@multiplicand+1,c
 15994  00290A  0E03               	movlw	3
 15995  00290C  6E1A               	movwf	___wmul@multiplicand,c
 15996  00290E  EC6D  F01F         	call	___wmul	;wreg free
 15997  002912  C087  F02F         	movff	eval_poly@d,??_eval_poly
 15998  002916  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 15999  00291A  5018               	movf	?___wmul,w,c
 16000  00291C  262F               	addwf	??_eval_poly,f,c
 16001  00291E  5019               	movf	?___wmul+1,w,c
 16002  002920  2230               	addwfc	??_eval_poly+1,f,c
 16003  002922  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16004  002926  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16005  00292A                     	if	0	;tblptru may be non-zero
 16006  00292A                     	endif
 16007  00292A                     	if	0	;tblptru may be non-zero
 16008  00292A                     	endif
 16009  00292A  0009               	tblrd		*+
 16010  00292C  CFF5 F08B          	movff	tablat,eval_poly@res
 16011  002930  0009               	tblrd		*+
 16012  002932  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16013  002936  000A               	tblrd		*-
 16014  002938  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16015  00293C  D03F               	goto	l2295
 16016  00293E  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16017  002942  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16018  002946  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16019  00294A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16020  00294E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16021  002952  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16022  002956  ECC9  F011         	call	___ftmul	;wreg free
 16023  00295A  C069  F078         	movff	?___ftmul,___ftadd@f1
 16024  00295E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16025  002962  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16026  002966  0E00               	movlw	0
 16027  002968  6E1B               	movwf	___wmul@multiplicand+1,c
 16028  00296A  0E03               	movlw	3
 16029  00296C  6E1A               	movwf	___wmul@multiplicand,c
 16030  00296E  0100               	movlb	0	; () banked
 16031  002970  0789               	decf	eval_poly@n& (0+255),f,b
 16032  002972  A0D8               	btfss	status,0,c
 16033  002974  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16034  002976  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16035  00297A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16036  00297E  EC6D  F01F         	call	___wmul	;wreg free
 16037  002982  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16038  002986  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16039  00298A  5018               	movf	?___wmul,w,c
 16040  00298C  262F               	addwf	??_eval_poly,f,c
 16041  00298E  5019               	movf	?___wmul+1,w,c
 16042  002990  2230               	addwfc	??_eval_poly+1,f,c
 16043  002992  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16044  002996  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16045  00299A                     	if	0	;tblptru may be non-zero
 16046  00299A                     	endif
 16047  00299A                     	if	0	;tblptru may be non-zero
 16048  00299A                     	endif
 16049  00299A  0009               	tblrd		*+
 16050  00299C  CFF5 F07B          	movff	tablat,___ftadd@f2
 16051  0029A0  0009               	tblrd		*+
 16052  0029A2  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16053  0029A6  000A               	tblrd		*-
 16054  0029A8  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16055  0029AC  EC56  F00C         	call	___ftadd	;wreg free
 16056  0029B0  C078  F08B         	movff	?___ftadd,eval_poly@res
 16057  0029B4  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16058  0029B8  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16059  0029BC                     l2295:
 16060  0029BC  0100               	movlb	0	; () banked
 16061  0029BE  5189               	movf	eval_poly@n& (0+255),w,b
 16062  0029C0  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16063  0029C2  A4D8               	btfss	status,2,c
 16064  0029C4  D7BC               	goto	l2296
 16065                           
 16066                           ; BSR set to: 0
 16067  0029C6  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16068  0029CA  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16069  0029CE  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16070                           
 16071                           ; BSR set to: 0
 16072  0029D2  0012               	return		;funcret
 16073  0029D4                     __end_of_eval_poly:
 16074                           	opt stack 0
 16075                           tosu	equ	0xFFF
 16076                           tosh	equ	0xFFE
 16077                           tosl	equ	0xFFD
 16078                           pclath	equ	0xFFA
 16079                           tblptru	equ	0xFF8
 16080                           tblptrh	equ	0xFF7
 16081                           tblptrl	equ	0xFF6
 16082                           tablat	equ	0xFF5
 16083                           prodh	equ	0xFF4
 16084                           prodl	equ	0xFF3
 16085                           intcon	equ	0xFF2
 16086                           intcon2	equ	0xFF1
 16087                           postinc0	equ	0xFEE
 16088                           plusw0	equ	0xFEB
 16089                           wreg	equ	0xFE8
 16090                           indf1	equ	0xFE7
 16091                           postdec1	equ	0xFE5
 16092                           fsr1h	equ	0xFE2
 16093                           fsr1l	equ	0xFE1
 16094                           indf2	equ	0xFDF
 16095                           postinc2	equ	0xFDE
 16096                           postdec2	equ	0xFDD
 16097                           plusw2	equ	0xFDB
 16098                           fsr2h	equ	0xFDA
 16099                           fsr2l	equ	0xFD9
 16100                           status	equ	0xFD8
 16101                           
 16102 ;; *************** function ___wmul *****************
 16103 ;; Defined at:
 16104 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16105 ;; Parameters:    Size  Location     Type
 16106 ;;  multiplier      2   23[COMRAM] unsigned int 
 16107 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16108 ;; Auto vars:     Size  Location     Type
 16109 ;;  product         2   27[COMRAM] unsigned int 
 16110 ;; Return value:  Size  Location     Type
 16111 ;;                  2   23[COMRAM] unsigned int 
 16112 ;; Registers used:
 16113 ;;		wreg, status,2, status,0, prodl, prodh
 16114 ;; Tracked objects:
 16115 ;;		On entry : 0/0
 16116 ;;		On exit  : 0/0
 16117 ;;		Unchanged: 0/0
 16118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16119 ;;      Params:         4       0       0       0       0       0       0
 16120 ;;      Locals:         2       0       0       0       0       0       0
 16121 ;;      Temps:          0       0       0       0       0       0       0
 16122 ;;      Totals:         6       0       0       0       0       0       0
 16123 ;;Total ram usage:        6 bytes
 16124 ;; Hardware stack levels used:    1
 16125 ;; Hardware stack levels required when called:    4
 16126 ;; This function calls:
 16127 ;;		Nothing
 16128 ;; This function is called by:
 16129 ;;		_GetMcuFwVersion
 16130 ;;		_eval_poly
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           	psect	text92
 16135  003EDA                     __ptext92:
 16136                           	opt stack 0
 16137  003EDA                     ___wmul:
 16138                           	opt stack 19
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;incstack = 0
 16142  003EDA  5018               	movf	___wmul@multiplier,w,c
 16143  003EDC  021A               	mulwf	___wmul@multiplicand,c
 16144  003EDE  CFF3 F01C          	movff	prodl,___wmul@product
 16145  003EE2  CFF4 F01D          	movff	prodh,___wmul@product+1
 16146  003EE6  5018               	movf	___wmul@multiplier,w,c
 16147  003EE8  021B               	mulwf	___wmul@multiplicand+1,c
 16148  003EEA  50F3               	movf	prodl,w,c
 16149  003EEC  261D               	addwf	___wmul@product+1,f,c
 16150  003EEE  5019               	movf	___wmul@multiplier+1,w,c
 16151  003EF0  021A               	mulwf	___wmul@multiplicand,c
 16152  003EF2  50F3               	movf	prodl,w,c
 16153  003EF4  261D               	addwf	___wmul@product+1,f,c
 16154  003EF6  C01C  F018         	movff	___wmul@product,?___wmul
 16155  003EFA  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16156  003EFE  0012               	return	
 16157  003F00                     __end_of___wmul:
 16158                           	opt stack 0
 16159                           tosu	equ	0xFFF
 16160                           tosh	equ	0xFFE
 16161                           tosl	equ	0xFFD
 16162                           pclath	equ	0xFFA
 16163                           tblptru	equ	0xFF8
 16164                           tblptrh	equ	0xFF7
 16165                           tblptrl	equ	0xFF6
 16166                           tablat	equ	0xFF5
 16167                           prodh	equ	0xFF4
 16168                           prodl	equ	0xFF3
 16169                           intcon	equ	0xFF2
 16170                           intcon2	equ	0xFF1
 16171                           postinc0	equ	0xFEE
 16172                           plusw0	equ	0xFEB
 16173                           wreg	equ	0xFE8
 16174                           indf1	equ	0xFE7
 16175                           postdec1	equ	0xFE5
 16176                           fsr1h	equ	0xFE2
 16177                           fsr1l	equ	0xFE1
 16178                           indf2	equ	0xFDF
 16179                           postinc2	equ	0xFDE
 16180                           postdec2	equ	0xFDD
 16181                           plusw2	equ	0xFDB
 16182                           fsr2h	equ	0xFDA
 16183                           fsr2l	equ	0xFD9
 16184                           status	equ	0xFD8
 16185                           
 16186 ;; *************** function ___ftmul *****************
 16187 ;; Defined at:
 16188 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;  f1              3    9[BANK0 ] float 
 16191 ;;  f2              3   12[BANK0 ] float 
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16194 ;;  sign            1   23[BANK0 ] unsigned char 
 16195 ;;  cntr            1   22[BANK0 ] unsigned char 
 16196 ;;  exp             1   18[BANK0 ] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;                  3    9[BANK0 ] float 
 16199 ;; Registers used:
 16200 ;;		wreg, status,2, status,0, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16206 ;;      Params:         0       6       0       0       0       0       0
 16207 ;;      Locals:         0       6       0       0       0       0       0
 16208 ;;      Temps:          0       3       0       0       0       0       0
 16209 ;;      Totals:         0      15       0       0       0       0       0
 16210 ;;Total ram usage:       15 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    5
 16213 ;; This function calls:
 16214 ;;		___ftpack
 16215 ;; This function is called by:
 16216 ;;		_AdcConvert
 16217 ;;		_CheckFlashPrecentage
 16218 ;;		_pow
 16219 ;;		_exp
 16220 ;;		_log
 16221 ;;		_eval_poly
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           	psect	text93
 16226  002392                     __ptext93:
 16227                           	opt stack 0
 16228  002392                     ___ftmul:
 16229                           	opt stack 18
 16230                           
 16231                           ;incstack = 0
 16232  002392  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16233  002396  0100               	movlb	0	; () banked
 16234  002398  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16235  00239A  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16236  00239C  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16237  00239E  376F               	rlcf	??___ftmul& (0+255),f,b
 16238  0023A0  E301               	bnc	u6641
 16239  0023A2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16240  0023A4                     u6641:
 16241  0023A4  516F               	movf	??___ftmul& (0+255),w,b
 16242  0023A6  6F72               	movwf	___ftmul@exp& (0+255),b
 16243  0023A8  5172               	movf	___ftmul@exp& (0+255),w,b
 16244  0023AA  A4D8               	btfss	status,2,c
 16245  0023AC  D007               	goto	l1879
 16246                           
 16247                           ; BSR set to: 0
 16248  0023AE  0E00               	movlw	0
 16249  0023B0  6F69               	movwf	?___ftmul& (0+255),b
 16250  0023B2  0E00               	movlw	0
 16251  0023B4  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16252  0023B6  0E00               	movlw	0
 16253  0023B8  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16254                           
 16255                           ; BSR set to: 0
 16256  0023BA  0012               	return	
 16257  0023BC                     l1879:
 16258                           
 16259                           ; BSR set to: 0
 16260                           
 16261                           ; BSR set to: 0
 16262  0023BC  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16263  0023C0  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16264  0023C2  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16265  0023C4  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16266  0023C6  376F               	rlcf	??___ftmul& (0+255),f,b
 16267  0023C8  E301               	bnc	u6661
 16268  0023CA  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16269  0023CC                     u6661:
 16270  0023CC  516F               	movf	??___ftmul& (0+255),w,b
 16271  0023CE  6F77               	movwf	___ftmul@sign& (0+255),b
 16272  0023D0  5177               	movf	___ftmul@sign& (0+255),w,b
 16273  0023D2  A4D8               	btfss	status,2,c
 16274  0023D4  D007               	goto	l1881
 16275                           
 16276                           ; BSR set to: 0
 16277  0023D6  0E00               	movlw	0
 16278  0023D8  6F69               	movwf	?___ftmul& (0+255),b
 16279  0023DA  0E00               	movlw	0
 16280  0023DC  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16281  0023DE  0E00               	movlw	0
 16282  0023E0  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16283                           
 16284                           ; BSR set to: 0
 16285  0023E2  0012               	return	
 16286  0023E4                     l1881:
 16287                           
 16288                           ; BSR set to: 0
 16289                           
 16290                           ; BSR set to: 0
 16291  0023E4  5177               	movf	___ftmul@sign& (0+255),w,b
 16292  0023E6  0F7B               	addlw	123
 16293  0023E8  2772               	addwf	___ftmul@exp& (0+255),f,b
 16294                           
 16295                           ; BSR set to: 0
 16296  0023EA  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16297  0023EE  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16298  0023F0  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16299  0023F2  0E80               	movlw	128
 16300  0023F4  1777               	andwf	___ftmul@sign& (0+255),f,b
 16301                           
 16302                           ; BSR set to: 0
 16303  0023F6  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16304                           
 16305                           ; BSR set to: 0
 16306  0023F8  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16307                           
 16308                           ; BSR set to: 0
 16309  0023FA  0EFF               	movlw	255
 16310  0023FC  176C               	andwf	___ftmul@f2& (0+255),f,b
 16311  0023FE  0EFF               	movlw	255
 16312  002400  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16313  002402  0E00               	movlw	0
 16314  002404  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16315                           
 16316                           ; BSR set to: 0
 16317  002406  0E00               	movlw	0
 16318  002408  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16319  00240A  0E00               	movlw	0
 16320  00240C  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16321  00240E  0E00               	movlw	0
 16322  002410  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16323                           
 16324                           ; BSR set to: 0
 16325  002412  0E07               	movlw	7
 16326  002414  6F76               	movwf	___ftmul@cntr& (0+255),b
 16327  002416                     
 16328                           ; BSR set to: 0
 16329                           
 16330                           ; BSR set to: 0
 16331  002416  A169               	btfss	___ftmul@f1& (0+255),0,b
 16332  002418  D006               	goto	l1883
 16333                           
 16334                           ; BSR set to: 0
 16335  00241A  516C               	movf	___ftmul@f2& (0+255),w,b
 16336  00241C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16337  00241E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16338  002420  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16339  002422  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16340  002424  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16341  002426                     l1883:
 16342                           
 16343                           ; BSR set to: 0
 16344                           
 16345                           ; BSR set to: 0
 16346  002426  90D8               	bcf	status,0,c
 16347  002428  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16348  00242A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16349  00242C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16350  00242E  90D8               	bcf	status,0,c
 16351  002430  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16352  002432  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16353  002434  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16354                           
 16355                           ; BSR set to: 0
 16356  002436  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16357  002438  D7EE               	goto	l1882
 16358                           
 16359                           ; BSR set to: 0
 16360                           
 16361                           ; BSR set to: 0
 16362  00243A  0E09               	movlw	9
 16363  00243C  6F76               	movwf	___ftmul@cntr& (0+255),b
 16364  00243E                     
 16365                           ; BSR set to: 0
 16366                           
 16367                           ; BSR set to: 0
 16368  00243E  A169               	btfss	___ftmul@f1& (0+255),0,b
 16369  002440  D006               	goto	l1886
 16370                           
 16371                           ; BSR set to: 0
 16372  002442  516C               	movf	___ftmul@f2& (0+255),w,b
 16373  002444  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16374  002446  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16375  002448  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16376  00244A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16377  00244C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16378  00244E                     l1886:
 16379                           
 16380                           ; BSR set to: 0
 16381                           
 16382                           ; BSR set to: 0
 16383  00244E  90D8               	bcf	status,0,c
 16384  002450  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16385  002452  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16386  002454  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16387  002456  90D8               	bcf	status,0,c
 16388  002458  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16389  00245A  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16390  00245C  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16391                           
 16392                           ; BSR set to: 0
 16393  00245E  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16394  002460  D7EE               	goto	l1885
 16395                           
 16396                           ; BSR set to: 0
 16397                           
 16398                           ; BSR set to: 0
 16399  002462  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16400  002466  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16401  00246A  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16402  00246E  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16403  002472  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16404  002476  EC65  F016         	call	___ftpack	;wreg free
 16405  00247A  C018  F069         	movff	?___ftpack,?___ftmul
 16406  00247E  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16407  002482  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16408  002486  0012               	return	
 16409  002488                     __end_of___ftmul:
 16410                           	opt stack 0
 16411                           tosu	equ	0xFFF
 16412                           tosh	equ	0xFFE
 16413                           tosl	equ	0xFFD
 16414                           pclath	equ	0xFFA
 16415                           tblptru	equ	0xFF8
 16416                           tblptrh	equ	0xFF7
 16417                           tblptrl	equ	0xFF6
 16418                           tablat	equ	0xFF5
 16419                           prodh	equ	0xFF4
 16420                           prodl	equ	0xFF3
 16421                           intcon	equ	0xFF2
 16422                           intcon2	equ	0xFF1
 16423                           postinc0	equ	0xFEE
 16424                           plusw0	equ	0xFEB
 16425                           wreg	equ	0xFE8
 16426                           indf1	equ	0xFE7
 16427                           postdec1	equ	0xFE5
 16428                           fsr1h	equ	0xFE2
 16429                           fsr1l	equ	0xFE1
 16430                           indf2	equ	0xFDF
 16431                           postinc2	equ	0xFDE
 16432                           postdec2	equ	0xFDD
 16433                           plusw2	equ	0xFDB
 16434                           fsr2h	equ	0xFDA
 16435                           fsr2l	equ	0xFD9
 16436                           status	equ	0xFD8
 16437                           
 16438 ;; *************** function ___ftsub *****************
 16439 ;; Defined at:
 16440 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  f1              3   36[BANK0 ] float 
 16443 ;;  f2              3   39[BANK0 ] float 
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;		None
 16446 ;; Return value:  Size  Location     Type
 16447 ;;                  3   36[BANK0 ] float 
 16448 ;; Registers used:
 16449 ;;		wreg, status,2, status,0, cstack
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16455 ;;      Params:         0       6       0       0       0       0       0
 16456 ;;      Locals:         0       0       0       0       0       0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0
 16458 ;;      Totals:         0       6       0       0       0       0       0
 16459 ;;Total ram usage:        6 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:    6
 16462 ;; This function calls:
 16463 ;;		___ftadd
 16464 ;; This function is called by:
 16465 ;;		_exp
 16466 ;; This function uses a non-reentrant model
 16467 ;;
 16468                           
 16469                           	psect	text94
 16470  0039EA                     __ptext94:
 16471                           	opt stack 0
 16472  0039EA                     ___ftsub:
 16473                           	opt stack 18
 16474                           
 16475                           ;incstack = 0
 16476  0039EA  0100               	movlb	0	; () banked
 16477  0039EC  5187               	movf	___ftsub@f2& (0+255),w,b
 16478  0039EE  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 16479  0039F0  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 16480  0039F2  B4D8               	btfsc	status,2,c
 16481  0039F4  D006               	goto	l1896
 16482                           
 16483                           ; BSR set to: 0
 16484  0039F6  0E00               	movlw	0
 16485  0039F8  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 16486  0039FA  0E00               	movlw	0
 16487  0039FC  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 16488  0039FE  0E80               	movlw	128
 16489  003A00  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 16490  003A02                     l1896:
 16491                           
 16492                           ; BSR set to: 0
 16493                           
 16494                           ; BSR set to: 0
 16495  003A02  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 16496  003A06  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 16497  003A0A  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 16498  003A0E  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 16499  003A12  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 16500  003A16  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 16501  003A1A  EC56  F00C         	call	___ftadd	;wreg free
 16502  003A1E  C078  F084         	movff	?___ftadd,?___ftsub
 16503  003A22  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 16504  003A26  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 16505  003A2A  0012               	return	
 16506  003A2C                     __end_of___ftsub:
 16507                           	opt stack 0
 16508                           tosu	equ	0xFFF
 16509                           tosh	equ	0xFFE
 16510                           tosl	equ	0xFFD
 16511                           pclath	equ	0xFFA
 16512                           tblptru	equ	0xFF8
 16513                           tblptrh	equ	0xFF7
 16514                           tblptrl	equ	0xFF6
 16515                           tablat	equ	0xFF5
 16516                           prodh	equ	0xFF4
 16517                           prodl	equ	0xFF3
 16518                           intcon	equ	0xFF2
 16519                           intcon2	equ	0xFF1
 16520                           postinc0	equ	0xFEE
 16521                           plusw0	equ	0xFEB
 16522                           wreg	equ	0xFE8
 16523                           indf1	equ	0xFE7
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           plusw2	equ	0xFDB
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           
 16535 ;; *************** function ___ftadd *****************
 16536 ;; Defined at:
 16537 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;  f1              3   24[BANK0 ] float 
 16540 ;;  f2              3   27[BANK0 ] float 
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;  exp1            1   35[BANK0 ] unsigned char 
 16543 ;;  exp2            1   34[BANK0 ] unsigned char 
 16544 ;;  sign            1   33[BANK0 ] unsigned char 
 16545 ;; Return value:  Size  Location     Type
 16546 ;;                  3   24[BANK0 ] float 
 16547 ;; Registers used:
 16548 ;;		wreg, status,2, status,0, cstack
 16549 ;; Tracked objects:
 16550 ;;		On entry : 0/0
 16551 ;;		On exit  : 0/0
 16552 ;;		Unchanged: 0/0
 16553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16554 ;;      Params:         0       6       0       0       0       0       0
 16555 ;;      Locals:         0       3       0       0       0       0       0
 16556 ;;      Temps:          0       3       0       0       0       0       0
 16557 ;;      Totals:         0      12       0       0       0       0       0
 16558 ;;Total ram usage:       12 bytes
 16559 ;; Hardware stack levels used:    1
 16560 ;; Hardware stack levels required when called:    5
 16561 ;; This function calls:
 16562 ;;		___ftpack
 16563 ;; This function is called by:
 16564 ;;		___ftsub
 16565 ;;		_floor
 16566 ;;		_log
 16567 ;;		_eval_poly
 16568 ;; This function uses a non-reentrant model
 16569 ;;
 16570                           
 16571                           	psect	text95
 16572  0018AC                     __ptext95:
 16573                           	opt stack 0
 16574  0018AC                     ___ftadd:
 16575                           	opt stack 18
 16576                           
 16577                           ;incstack = 0
 16578  0018AC  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 16579  0018B0  0100               	movlb	0	; () banked
 16580  0018B2  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 16581  0018B4  6B80               	clrf	(??___ftadd+2)& (0+255),b
 16582  0018B6  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 16583  0018B8  377E               	rlcf	??___ftadd& (0+255),f,b
 16584  0018BA  E301               	bnc	u6431
 16585  0018BC  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 16586  0018BE                     u6431:
 16587  0018BE  517E               	movf	??___ftadd& (0+255),w,b
 16588  0018C0  6F83               	movwf	___ftadd@exp1& (0+255),b
 16589  0018C2  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 16590  0018C6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 16591  0018C8  6B80               	clrf	(??___ftadd+2)& (0+255),b
 16592  0018CA  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 16593  0018CC  377E               	rlcf	??___ftadd& (0+255),f,b
 16594  0018CE  E301               	bnc	u6441
 16595  0018D0  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 16596  0018D2                     u6441:
 16597  0018D2  517E               	movf	??___ftadd& (0+255),w,b
 16598  0018D4  6F82               	movwf	___ftadd@exp2& (0+255),b
 16599                           
 16600                           ; BSR set to: 0
 16601  0018D6  5183               	movf	___ftadd@exp1& (0+255),w,b
 16602  0018D8  B4D8               	btfsc	status,2,c
 16603  0018DA  D00B               	goto	u6470
 16604                           
 16605                           ; BSR set to: 0
 16606  0018DC  5182               	movf	___ftadd@exp2& (0+255),w,b
 16607  0018DE  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 16608  0018E0  B0D8               	btfsc	status,0,c
 16609  0018E2  D00E               	goto	l1831
 16610                           
 16611                           ; BSR set to: 0
 16612  0018E4  5183               	movf	___ftadd@exp1& (0+255),w,b
 16613  0018E6  0800               	sublw	0
 16614  0018E8  2582               	addwf	___ftadd@exp2& (0+255),w,b
 16615  0018EA  6F7E               	movwf	??___ftadd& (0+255),b
 16616  0018EC  0E18               	movlw	24
 16617  0018EE  657E               	cpfsgt	??___ftadd& (0+255),b
 16618  0018F0  D007               	goto	l1831
 16619  0018F2                     u6470:
 16620                           
 16621                           ; BSR set to: 0
 16622  0018F2  C07B  F078         	movff	___ftadd@f2,?___ftadd
 16623  0018F6  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 16624  0018FA  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 16625  0018FE  0012               	return	
 16626  001900                     l1831:
 16627                           
 16628                           ; BSR set to: 0
 16629                           
 16630                           ; BSR set to: 0
 16631  001900  5182               	movf	___ftadd@exp2& (0+255),w,b
 16632  001902  B4D8               	btfsc	status,2,c
 16633  001904  D00B               	goto	u6500
 16634                           
 16635                           ; BSR set to: 0
 16636  001906  5183               	movf	___ftadd@exp1& (0+255),w,b
 16637  001908  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 16638  00190A  B0D8               	btfsc	status,0,c
 16639  00190C  D00E               	goto	l1835
 16640                           
 16641                           ; BSR set to: 0
 16642  00190E  5182               	movf	___ftadd@exp2& (0+255),w,b
 16643  001910  0800               	sublw	0
 16644  001912  2583               	addwf	___ftadd@exp1& (0+255),w,b
 16645  001914  6F7E               	movwf	??___ftadd& (0+255),b
 16646  001916  0E18               	movlw	24
 16647  001918  657E               	cpfsgt	??___ftadd& (0+255),b
 16648  00191A  D007               	goto	l1835
 16649  00191C                     u6500:
 16650                           
 16651                           ; BSR set to: 0
 16652  00191C  C078  F078         	movff	___ftadd@f1,?___ftadd
 16653  001920  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 16654  001924  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 16655  001928  0012               	return	
 16656  00192A                     l1835:
 16657                           
 16658                           ; BSR set to: 0
 16659                           
 16660                           ; BSR set to: 0
 16661  00192A  0E06               	movlw	6
 16662  00192C  6F81               	movwf	___ftadd@sign& (0+255),b
 16663                           
 16664                           ; BSR set to: 0
 16665  00192E  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 16666                           
 16667                           ; BSR set to: 0
 16668  001930  8F81               	bsf	___ftadd@sign& (0+255),7,b
 16669                           
 16670                           ; BSR set to: 0
 16671                           
 16672                           ; BSR set to: 0
 16673  001932  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 16674                           
 16675                           ; BSR set to: 0
 16676  001934  8D81               	bsf	___ftadd@sign& (0+255),6,b
 16677                           
 16678                           ; BSR set to: 0
 16679  001936  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 16680                           
 16681                           ; BSR set to: 0
 16682  001938  0EFF               	movlw	255
 16683  00193A  1778               	andwf	___ftadd@f1& (0+255),f,b
 16684  00193C  0EFF               	movlw	255
 16685  00193E  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 16686  001940  0E00               	movlw	0
 16687  001942  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 16688  001944  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 16689                           
 16690                           ; BSR set to: 0
 16691  001946  0EFF               	movlw	255
 16692  001948  177B               	andwf	___ftadd@f2& (0+255),f,b
 16693  00194A  0EFF               	movlw	255
 16694  00194C  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 16695  00194E  0E00               	movlw	0
 16696  001950  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 16697                           
 16698                           ; BSR set to: 0
 16699  001952  5182               	movf	___ftadd@exp2& (0+255),w,b
 16700  001954  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 16701  001956  B0D8               	btfsc	status,0,c
 16702  001958  D01B               	goto	l1840
 16703  00195A                     u6530:
 16704                           
 16705                           ; BSR set to: 0
 16706                           
 16707                           ; BSR set to: 0
 16708  00195A  90D8               	bcf	status,0,c
 16709  00195C  377B               	rlcf	___ftadd@f2& (0+255),f,b
 16710  00195E  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 16711  001960  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 16712  001962  0782               	decf	___ftadd@exp2& (0+255),f,b
 16713                           
 16714                           ; BSR set to: 0
 16715  001964  5183               	movf	___ftadd@exp1& (0+255),w,b
 16716  001966  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16717  001968  B4D8               	btfsc	status,2,c
 16718  00196A  D00D               	goto	l1845
 16719                           
 16720                           ; BSR set to: 0
 16721  00196C  0781               	decf	___ftadd@sign& (0+255),f,b
 16722  00196E  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16723  001972  0E07               	movlw	7
 16724  001974  177E               	andwf	??___ftadd& (0+255),f,b
 16725  001976  B4D8               	btfsc	status,2,c
 16726  001978  D006               	goto	l1845
 16727  00197A  D7EF               	goto	u6530
 16728  00197C                     
 16729                           ; BSR set to: 0
 16730                           
 16731                           ; BSR set to: 0
 16732  00197C  90D8               	bcf	status,0,c
 16733  00197E  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 16734  001980  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 16735  001982  3378               	rrcf	___ftadd@f1& (0+255),f,b
 16736  001984  2B83               	incf	___ftadd@exp1& (0+255),f,b
 16737  001986                     l1845:
 16738                           
 16739                           ; BSR set to: 0
 16740                           
 16741                           ; BSR set to: 0
 16742  001986  5182               	movf	___ftadd@exp2& (0+255),w,b
 16743  001988  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16744  00198A  B4D8               	btfsc	status,2,c
 16745  00198C  D01F               	goto	u6600
 16746  00198E  D7F6               	goto	l1846
 16747  001990                     l1840:
 16748                           
 16749                           ; BSR set to: 0
 16750                           
 16751                           ; BSR set to: 0
 16752  001990  5183               	movf	___ftadd@exp1& (0+255),w,b
 16753  001992  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 16754  001994  B0D8               	btfsc	status,0,c
 16755  001996  D01A               	goto	u6600
 16756  001998                     u6570:
 16757                           
 16758                           ; BSR set to: 0
 16759                           
 16760                           ; BSR set to: 0
 16761  001998  90D8               	bcf	status,0,c
 16762  00199A  3778               	rlcf	___ftadd@f1& (0+255),f,b
 16763  00199C  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 16764  00199E  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 16765  0019A0  0783               	decf	___ftadd@exp1& (0+255),f,b
 16766                           
 16767                           ; BSR set to: 0
 16768  0019A2  5183               	movf	___ftadd@exp1& (0+255),w,b
 16769  0019A4  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16770  0019A6  B4D8               	btfsc	status,2,c
 16771  0019A8  D00D               	goto	l1854
 16772                           
 16773                           ; BSR set to: 0
 16774  0019AA  0781               	decf	___ftadd@sign& (0+255),f,b
 16775  0019AC  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16776  0019B0  0E07               	movlw	7
 16777  0019B2  177E               	andwf	??___ftadd& (0+255),f,b
 16778  0019B4  B4D8               	btfsc	status,2,c
 16779  0019B6  D006               	goto	l1854
 16780  0019B8  D7EF               	goto	u6570
 16781  0019BA                     
 16782                           ; BSR set to: 0
 16783                           
 16784                           ; BSR set to: 0
 16785  0019BA  90D8               	bcf	status,0,c
 16786  0019BC  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 16787  0019BE  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 16788  0019C0  337B               	rrcf	___ftadd@f2& (0+255),f,b
 16789  0019C2  2B82               	incf	___ftadd@exp2& (0+255),f,b
 16790  0019C4                     l1854:
 16791                           
 16792                           ; BSR set to: 0
 16793                           
 16794                           ; BSR set to: 0
 16795  0019C4  5182               	movf	___ftadd@exp2& (0+255),w,b
 16796  0019C6  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16797  0019C8  A4D8               	btfss	status,2,c
 16798  0019CA  D7F7               	goto	l1855
 16799  0019CC                     u6600:
 16800                           
 16801                           ; BSR set to: 0
 16802                           
 16803                           ; BSR set to: 0
 16804                           
 16805                           ; BSR set to: 0
 16806  0019CC  AF81               	btfss	___ftadd@sign& (0+255),7,b
 16807  0019CE  D00C               	goto	l1857
 16808                           
 16809                           ; BSR set to: 0
 16810  0019D0  0EFF               	movlw	255
 16811  0019D2  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 16812  0019D4  0EFF               	movlw	255
 16813  0019D6  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 16814  0019D8  0EFF               	movlw	255
 16815  0019DA  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 16816  0019DC  0E01               	movlw	1
 16817  0019DE  2778               	addwf	___ftadd@f1& (0+255),f,b
 16818  0019E0  0E00               	movlw	0
 16819  0019E2  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 16820  0019E4  0E00               	movlw	0
 16821  0019E6  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 16822  0019E8                     l1857:
 16823                           
 16824                           ; BSR set to: 0
 16825  0019E8  AD81               	btfss	___ftadd@sign& (0+255),6,b
 16826  0019EA  D00C               	goto	l1858
 16827                           
 16828                           ; BSR set to: 0
 16829  0019EC  0EFF               	movlw	255
 16830  0019EE  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16831  0019F0  0EFF               	movlw	255
 16832  0019F2  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16833  0019F4  0EFF               	movlw	255
 16834  0019F6  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16835  0019F8  0E01               	movlw	1
 16836  0019FA  277B               	addwf	___ftadd@f2& (0+255),f,b
 16837  0019FC  0E00               	movlw	0
 16838  0019FE  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16839  001A00  0E00               	movlw	0
 16840  001A02  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16841  001A04                     l1858:
 16842                           
 16843                           ; BSR set to: 0
 16844                           
 16845                           ; BSR set to: 0
 16846  001A04  0E00               	movlw	0
 16847  001A06  6F81               	movwf	___ftadd@sign& (0+255),b
 16848                           
 16849                           ; BSR set to: 0
 16850  001A08  5178               	movf	___ftadd@f1& (0+255),w,b
 16851  001A0A  277B               	addwf	___ftadd@f2& (0+255),f,b
 16852  001A0C  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 16853  001A0E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16854  001A10  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 16855  001A12  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16856                           
 16857                           ; BSR set to: 0
 16858  001A14  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 16859  001A16  D00E               	goto	l1859
 16860                           
 16861                           ; BSR set to: 0
 16862  001A18  0EFF               	movlw	255
 16863  001A1A  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16864  001A1C  0EFF               	movlw	255
 16865  001A1E  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16866  001A20  0EFF               	movlw	255
 16867  001A22  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16868  001A24  0E01               	movlw	1
 16869  001A26  277B               	addwf	___ftadd@f2& (0+255),f,b
 16870  001A28  0E00               	movlw	0
 16871  001A2A  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16872  001A2C  0E00               	movlw	0
 16873  001A2E  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16874                           
 16875                           ; BSR set to: 0
 16876  001A30  0E01               	movlw	1
 16877  001A32  6F81               	movwf	___ftadd@sign& (0+255),b
 16878  001A34                     l1859:
 16879                           
 16880                           ; BSR set to: 0
 16881                           
 16882                           ; BSR set to: 0
 16883  001A34  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 16884  001A38  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 16885  001A3C  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 16886  001A40  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 16887  001A44  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 16888  001A48  EC65  F016         	call	___ftpack	;wreg free
 16889  001A4C  C018  F078         	movff	?___ftpack,?___ftadd
 16890  001A50  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 16891  001A54  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 16892  001A58  0012               	return	
 16893  001A5A                     __end_of___ftadd:
 16894                           	opt stack 0
 16895                           tosu	equ	0xFFF
 16896                           tosh	equ	0xFFE
 16897                           tosl	equ	0xFFD
 16898                           pclath	equ	0xFFA
 16899                           tblptru	equ	0xFF8
 16900                           tblptrh	equ	0xFF7
 16901                           tblptrl	equ	0xFF6
 16902                           tablat	equ	0xFF5
 16903                           prodh	equ	0xFF4
 16904                           prodl	equ	0xFF3
 16905                           intcon	equ	0xFF2
 16906                           intcon2	equ	0xFF1
 16907                           postinc0	equ	0xFEE
 16908                           plusw0	equ	0xFEB
 16909                           wreg	equ	0xFE8
 16910                           indf1	equ	0xFE7
 16911                           postdec1	equ	0xFE5
 16912                           fsr1h	equ	0xFE2
 16913                           fsr1l	equ	0xFE1
 16914                           indf2	equ	0xFDF
 16915                           postinc2	equ	0xFDE
 16916                           postdec2	equ	0xFDD
 16917                           plusw2	equ	0xFDB
 16918                           fsr2h	equ	0xFDA
 16919                           fsr2l	equ	0xFD9
 16920                           status	equ	0xFD8
 16921                           
 16922 ;; *************** function ___ftneg *****************
 16923 ;; Defined at:
 16924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 16925 ;; Parameters:    Size  Location     Type
 16926 ;;  f1              3   23[COMRAM] float 
 16927 ;; Auto vars:     Size  Location     Type
 16928 ;;		None
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  3   23[COMRAM] float 
 16931 ;; Registers used:
 16932 ;;		wreg, status,2, status,0
 16933 ;; Tracked objects:
 16934 ;;		On entry : 0/0
 16935 ;;		On exit  : 0/0
 16936 ;;		Unchanged: 0/0
 16937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16938 ;;      Params:         3       0       0       0       0       0       0
 16939 ;;      Locals:         0       0       0       0       0       0       0
 16940 ;;      Temps:          0       0       0       0       0       0       0
 16941 ;;      Totals:         3       0       0       0       0       0       0
 16942 ;;Total ram usage:        3 bytes
 16943 ;; Hardware stack levels used:    1
 16944 ;; Hardware stack levels required when called:    4
 16945 ;; This function calls:
 16946 ;;		Nothing
 16947 ;; This function is called by:
 16948 ;;		_pow
 16949 ;;		_exp
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           	psect	text96
 16954  003F24                     __ptext96:
 16955                           	opt stack 0
 16956  003F24                     ___ftneg:
 16957                           	opt stack 20
 16958                           
 16959                           ;incstack = 0
 16960  003F24  5018               	movf	___ftneg@f1,w,c
 16961  003F26  1019               	iorwf	___ftneg@f1+1,w,c
 16962  003F28  101A               	iorwf	___ftneg@f1+2,w,c
 16963  003F2A  B4D8               	btfsc	status,2,c
 16964  003F2C  D006               	goto	l1890
 16965  003F2E  0E00               	movlw	0
 16966  003F30  1A18               	xorwf	___ftneg@f1,f,c
 16967  003F32  0E00               	movlw	0
 16968  003F34  1A19               	xorwf	___ftneg@f1+1,f,c
 16969  003F36  0E80               	movlw	128
 16970  003F38  1A1A               	xorwf	___ftneg@f1+2,f,c
 16971  003F3A                     l1890:
 16972  003F3A  C018  F018         	movff	___ftneg@f1,?___ftneg
 16973  003F3E  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 16974  003F42  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 16975  003F46  0012               	return		;funcret
 16976  003F48                     __end_of___ftneg:
 16977                           	opt stack 0
 16978                           tosu	equ	0xFFF
 16979                           tosh	equ	0xFFE
 16980                           tosl	equ	0xFFD
 16981                           pclath	equ	0xFFA
 16982                           tblptru	equ	0xFF8
 16983                           tblptrh	equ	0xFF7
 16984                           tblptrl	equ	0xFF6
 16985                           tablat	equ	0xFF5
 16986                           prodh	equ	0xFF4
 16987                           prodl	equ	0xFF3
 16988                           intcon	equ	0xFF2
 16989                           intcon2	equ	0xFF1
 16990                           postinc0	equ	0xFEE
 16991                           plusw0	equ	0xFEB
 16992                           wreg	equ	0xFE8
 16993                           indf1	equ	0xFE7
 16994                           postdec1	equ	0xFE5
 16995                           fsr1h	equ	0xFE2
 16996                           fsr1l	equ	0xFE1
 16997                           indf2	equ	0xFDF
 16998                           postinc2	equ	0xFDE
 16999                           postdec2	equ	0xFDD
 17000                           plusw2	equ	0xFDB
 17001                           fsr2h	equ	0xFDA
 17002                           fsr2l	equ	0xFD9
 17003                           status	equ	0xFD8
 17004                           
 17005 ;; *************** function ___ftdiv *****************
 17006 ;; Defined at:
 17007 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17008 ;; Parameters:    Size  Location     Type
 17009 ;;  f1              3   40[COMRAM] float 
 17010 ;;  f2              3   43[COMRAM] float 
 17011 ;; Auto vars:     Size  Location     Type
 17012 ;;  f3              3    4[BANK0 ] float 
 17013 ;;  sign            1    8[BANK0 ] unsigned char 
 17014 ;;  exp             1    7[BANK0 ] unsigned char 
 17015 ;;  cntr            1    3[BANK0 ] unsigned char 
 17016 ;; Return value:  Size  Location     Type
 17017 ;;                  3   40[COMRAM] float 
 17018 ;; Registers used:
 17019 ;;		wreg, status,2, status,0, cstack
 17020 ;; Tracked objects:
 17021 ;;		On entry : 0/0
 17022 ;;		On exit  : 0/0
 17023 ;;		Unchanged: 0/0
 17024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17025 ;;      Params:         6       0       0       0       0       0       0
 17026 ;;      Locals:         0       6       0       0       0       0       0
 17027 ;;      Temps:          0       3       0       0       0       0       0
 17028 ;;      Totals:         6       9       0       0       0       0       0
 17029 ;;Total ram usage:       15 bytes
 17030 ;; Hardware stack levels used:    1
 17031 ;; Hardware stack levels required when called:    5
 17032 ;; This function calls:
 17033 ;;		___ftpack
 17034 ;; This function is called by:
 17035 ;;		_AdcConvert
 17036 ;;		_CheckFlashPrecentage
 17037 ;;		_exp
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           	psect	text97
 17042  002488                     __ptext97:
 17043                           	opt stack 0
 17044  002488                     ___ftdiv:
 17045                           	opt stack 19
 17046                           
 17047                           ;incstack = 0
 17048  002488  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17049  00248C  0100               	movlb	0	; () banked
 17050  00248E  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17051  002490  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17052  002492  342A               	rlcf	___ftdiv@f1+1,w,c
 17053  002494  3760               	rlcf	??___ftdiv& (0+255),f,b
 17054  002496  E301               	bnc	u6841
 17055  002498  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17056  00249A                     u6841:
 17057  00249A  5160               	movf	??___ftdiv& (0+255),w,b
 17058  00249C  6F67               	movwf	___ftdiv@exp& (0+255),b
 17059  00249E  5167               	movf	___ftdiv@exp& (0+255),w,b
 17060  0024A0  A4D8               	btfss	status,2,c
 17061  0024A2  D007               	goto	l1864
 17062                           
 17063                           ; BSR set to: 0
 17064  0024A4  0E00               	movlw	0
 17065  0024A6  6E29               	movwf	?___ftdiv,c
 17066  0024A8  0E00               	movlw	0
 17067  0024AA  6E2A               	movwf	?___ftdiv+1,c
 17068  0024AC  0E00               	movlw	0
 17069  0024AE  6E2B               	movwf	?___ftdiv+2,c
 17070                           
 17071                           ; BSR set to: 0
 17072  0024B0  0012               	return	
 17073  0024B2                     l1864:
 17074                           
 17075                           ; BSR set to: 0
 17076                           
 17077                           ; BSR set to: 0
 17078  0024B2  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17079  0024B6  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17080  0024B8  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17081  0024BA  342D               	rlcf	___ftdiv@f2+1,w,c
 17082  0024BC  3760               	rlcf	??___ftdiv& (0+255),f,b
 17083  0024BE  E301               	bnc	u6861
 17084  0024C0  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17085  0024C2                     u6861:
 17086  0024C2  5160               	movf	??___ftdiv& (0+255),w,b
 17087  0024C4  6F68               	movwf	___ftdiv@sign& (0+255),b
 17088  0024C6  5168               	movf	___ftdiv@sign& (0+255),w,b
 17089  0024C8  A4D8               	btfss	status,2,c
 17090  0024CA  D007               	goto	l1866
 17091                           
 17092                           ; BSR set to: 0
 17093  0024CC  0E00               	movlw	0
 17094  0024CE  6E29               	movwf	?___ftdiv,c
 17095  0024D0  0E00               	movlw	0
 17096  0024D2  6E2A               	movwf	?___ftdiv+1,c
 17097  0024D4  0E00               	movlw	0
 17098  0024D6  6E2B               	movwf	?___ftdiv+2,c
 17099                           
 17100                           ; BSR set to: 0
 17101  0024D8  0012               	return	
 17102  0024DA                     l1866:
 17103                           
 17104                           ; BSR set to: 0
 17105                           
 17106                           ; BSR set to: 0
 17107  0024DA  0E00               	movlw	0
 17108  0024DC  6F64               	movwf	___ftdiv@f3& (0+255),b
 17109  0024DE  0E00               	movlw	0
 17110  0024E0  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17111  0024E2  0E00               	movlw	0
 17112  0024E4  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17113                           
 17114                           ; BSR set to: 0
 17115  0024E6  5168               	movf	___ftdiv@sign& (0+255),w,b
 17116  0024E8  0F89               	addlw	137
 17117  0024EA  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17118                           
 17119                           ; BSR set to: 0
 17120  0024EC  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17121                           
 17122                           ; BSR set to: 0
 17123  0024F0  502E               	movf	___ftdiv@f2+2,w,c
 17124  0024F2  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17125                           
 17126                           ; BSR set to: 0
 17127  0024F4  0E80               	movlw	128
 17128  0024F6  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17129                           
 17130                           ; BSR set to: 0
 17131  0024F8  8E2A               	bsf	___ftdiv@f1+1,7,c
 17132                           
 17133                           ; BSR set to: 0
 17134  0024FA  0EFF               	movlw	255
 17135  0024FC  1629               	andwf	___ftdiv@f1,f,c
 17136  0024FE  0EFF               	movlw	255
 17137  002500  162A               	andwf	___ftdiv@f1+1,f,c
 17138  002502  0E00               	movlw	0
 17139  002504  162B               	andwf	___ftdiv@f1+2,f,c
 17140                           
 17141                           ; BSR set to: 0
 17142  002506  8E2D               	bsf	___ftdiv@f2+1,7,c
 17143                           
 17144                           ; BSR set to: 0
 17145  002508  0EFF               	movlw	255
 17146  00250A  162C               	andwf	___ftdiv@f2,f,c
 17147  00250C  0EFF               	movlw	255
 17148  00250E  162D               	andwf	___ftdiv@f2+1,f,c
 17149  002510  0E00               	movlw	0
 17150  002512  162E               	andwf	___ftdiv@f2+2,f,c
 17151                           
 17152                           ; BSR set to: 0
 17153  002514  0E18               	movlw	24
 17154  002516  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17155  002518                     
 17156                           ; BSR set to: 0
 17157                           
 17158                           ; BSR set to: 0
 17159  002518  90D8               	bcf	status,0,c
 17160  00251A  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17161  00251C  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17162  00251E  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17163                           
 17164                           ; BSR set to: 0
 17165  002520  502C               	movf	___ftdiv@f2,w,c
 17166  002522  5C29               	subwf	___ftdiv@f1,w,c
 17167  002524  502D               	movf	___ftdiv@f2+1,w,c
 17168  002526  582A               	subwfb	___ftdiv@f1+1,w,c
 17169  002528  502E               	movf	___ftdiv@f2+2,w,c
 17170  00252A  582B               	subwfb	___ftdiv@f1+2,w,c
 17171  00252C  A0D8               	btfss	status,0,c
 17172  00252E  D007               	goto	l1868
 17173                           
 17174                           ; BSR set to: 0
 17175  002530  502C               	movf	___ftdiv@f2,w,c
 17176  002532  5E29               	subwf	___ftdiv@f1,f,c
 17177  002534  502D               	movf	___ftdiv@f2+1,w,c
 17178  002536  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17179  002538  502E               	movf	___ftdiv@f2+2,w,c
 17180  00253A  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17181                           
 17182                           ; BSR set to: 0
 17183  00253C  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17184  00253E                     l1868:
 17185                           
 17186                           ; BSR set to: 0
 17187  00253E  90D8               	bcf	status,0,c
 17188  002540  3629               	rlcf	___ftdiv@f1,f,c
 17189  002542  362A               	rlcf	___ftdiv@f1+1,f,c
 17190  002544  362B               	rlcf	___ftdiv@f1+2,f,c
 17191                           
 17192                           ; BSR set to: 0
 17193  002546  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17194  002548  D7E7               	goto	l1867
 17195                           
 17196                           ; BSR set to: 0
 17197                           
 17198                           ; BSR set to: 0
 17199  00254A  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17200  00254E  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17201  002552  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17202  002556  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17203  00255A  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17204  00255E  EC65  F016         	call	___ftpack	;wreg free
 17205  002562  C018  F029         	movff	?___ftpack,?___ftdiv
 17206  002566  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17207  00256A  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17208  00256E  0012               	return	
 17209  002570                     __end_of___ftdiv:
 17210                           	opt stack 0
 17211                           tosu	equ	0xFFF
 17212                           tosh	equ	0xFFE
 17213                           tosl	equ	0xFFD
 17214                           pclath	equ	0xFFA
 17215                           tblptru	equ	0xFF8
 17216                           tblptrh	equ	0xFF7
 17217                           tblptrl	equ	0xFF6
 17218                           tablat	equ	0xFF5
 17219                           prodh	equ	0xFF4
 17220                           prodl	equ	0xFF3
 17221                           intcon	equ	0xFF2
 17222                           intcon2	equ	0xFF1
 17223                           postinc0	equ	0xFEE
 17224                           plusw0	equ	0xFEB
 17225                           wreg	equ	0xFE8
 17226                           indf1	equ	0xFE7
 17227                           postdec1	equ	0xFE5
 17228                           fsr1h	equ	0xFE2
 17229                           fsr1l	equ	0xFE1
 17230                           indf2	equ	0xFDF
 17231                           postinc2	equ	0xFDE
 17232                           postdec2	equ	0xFDD
 17233                           plusw2	equ	0xFDB
 17234                           fsr2h	equ	0xFDA
 17235                           fsr2l	equ	0xFD9
 17236                           status	equ	0xFD8
 17237                           
 17238 ;; *************** function ___awtoft *****************
 17239 ;; Defined at:
 17240 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17241 ;; Parameters:    Size  Location     Type
 17242 ;;  c               2   31[COMRAM] int 
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;  sign            1   34[COMRAM] unsigned char 
 17245 ;; Return value:  Size  Location     Type
 17246 ;;                  3   31[COMRAM] float 
 17247 ;; Registers used:
 17248 ;;		wreg, status,2, status,0, cstack
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17254 ;;      Params:         3       0       0       0       0       0       0
 17255 ;;      Locals:         1       0       0       0       0       0       0
 17256 ;;      Temps:          0       0       0       0       0       0       0
 17257 ;;      Totals:         4       0       0       0       0       0       0
 17258 ;;Total ram usage:        4 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; Hardware stack levels required when called:    5
 17261 ;; This function calls:
 17262 ;;		___ftpack
 17263 ;; This function is called by:
 17264 ;;		_ReadIntFromEeprom
 17265 ;;		_exp
 17266 ;;		_log
 17267 ;; This function uses a non-reentrant model
 17268 ;;
 17269                           
 17270                           	psect	text98
 17271  003BCE                     __ptext98:
 17272                           	opt stack 0
 17273  003BCE                     ___awtoft:
 17274                           	opt stack 19
 17275                           
 17276                           ;incstack = 0
 17277  003BCE  0E00               	movlw	0
 17278  003BD0  6E23               	movwf	___awtoft@sign,c
 17279  003BD2  AE21               	btfss	___awtoft@c+1,7,c
 17280  003BD4  D006               	goto	l1781
 17281  003BD6  6C20               	negf	___awtoft@c,c
 17282  003BD8  1E21               	comf	___awtoft@c+1,f,c
 17283  003BDA  B0D8               	btfsc	status,0,c
 17284  003BDC  2A21               	incf	___awtoft@c+1,f,c
 17285  003BDE  0E01               	movlw	1
 17286  003BE0  6E23               	movwf	___awtoft@sign,c
 17287  003BE2                     l1781:
 17288  003BE2  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17289  003BE6  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17290  003BEA  6A1A               	clrf	___ftpack@arg+2,c
 17291  003BEC  0E8E               	movlw	142
 17292  003BEE  6E1B               	movwf	___ftpack@exp,c
 17293  003BF0  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17294  003BF4  EC65  F016         	call	___ftpack	;wreg free
 17295  003BF8  C018  F020         	movff	?___ftpack,?___awtoft
 17296  003BFC  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17297  003C00  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17298  003C04  0012               	return	
 17299  003C06                     __end_of___awtoft:
 17300                           	opt stack 0
 17301                           tosu	equ	0xFFF
 17302                           tosh	equ	0xFFE
 17303                           tosl	equ	0xFFD
 17304                           pclath	equ	0xFFA
 17305                           tblptru	equ	0xFF8
 17306                           tblptrh	equ	0xFF7
 17307                           tblptrl	equ	0xFF6
 17308                           tablat	equ	0xFF5
 17309                           prodh	equ	0xFF4
 17310                           prodl	equ	0xFF3
 17311                           intcon	equ	0xFF2
 17312                           intcon2	equ	0xFF1
 17313                           postinc0	equ	0xFEE
 17314                           plusw0	equ	0xFEB
 17315                           wreg	equ	0xFE8
 17316                           indf1	equ	0xFE7
 17317                           postdec1	equ	0xFE5
 17318                           fsr1h	equ	0xFE2
 17319                           fsr1l	equ	0xFE1
 17320                           indf2	equ	0xFDF
 17321                           postinc2	equ	0xFDE
 17322                           postdec2	equ	0xFDD
 17323                           plusw2	equ	0xFDB
 17324                           fsr2h	equ	0xFDA
 17325                           fsr2l	equ	0xFD9
 17326                           status	equ	0xFD8
 17327                           
 17328 ;; *************** function ___lltoft *****************
 17329 ;; Defined at:
 17330 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17331 ;; Parameters:    Size  Location     Type
 17332 ;;  c               4   31[COMRAM] unsigned long 
 17333 ;; Auto vars:     Size  Location     Type
 17334 ;;  exp             1   39[COMRAM] unsigned char 
 17335 ;; Return value:  Size  Location     Type
 17336 ;;                  3   31[COMRAM] float 
 17337 ;; Registers used:
 17338 ;;		wreg, status,2, status,0, cstack
 17339 ;; Tracked objects:
 17340 ;;		On entry : 0/0
 17341 ;;		On exit  : 0/0
 17342 ;;		Unchanged: 0/0
 17343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17344 ;;      Params:         4       0       0       0       0       0       0
 17345 ;;      Locals:         1       0       0       0       0       0       0
 17346 ;;      Temps:          4       0       0       0       0       0       0
 17347 ;;      Totals:         9       0       0       0       0       0       0
 17348 ;;Total ram usage:        9 bytes
 17349 ;; Hardware stack levels used:    1
 17350 ;; Hardware stack levels required when called:    5
 17351 ;; This function calls:
 17352 ;;		___ftpack
 17353 ;; This function is called by:
 17354 ;;		_CheckFlashPrecentage
 17355 ;;		_pow
 17356 ;; This function uses a non-reentrant model
 17357 ;;
 17358                           
 17359                           	psect	text99
 17360  003662                     __ptext99:
 17361                           	opt stack 0
 17362  003662                     ___lltoft:
 17363                           	opt stack 20
 17364                           
 17365                           ;incstack = 0
 17366  003662  0E8E               	movlw	142
 17367  003664  6E28               	movwf	___lltoft@exp,c
 17368  003666  D006               	goto	l1957
 17369  003668  90D8               	bcf	status,0,c
 17370  00366A  3223               	rrcf	___lltoft@c+3,f,c
 17371  00366C  3222               	rrcf	___lltoft@c+2,f,c
 17372  00366E  3221               	rrcf	___lltoft@c+1,f,c
 17373  003670  3220               	rrcf	___lltoft@c,f,c
 17374  003672  2A28               	incf	___lltoft@exp,f,c
 17375  003674                     l1957:
 17376  003674  0E00               	movlw	0
 17377  003676  1420               	andwf	___lltoft@c,w,c
 17378  003678  6E24               	movwf	??___lltoft& (0+255),c
 17379  00367A  0E00               	movlw	0
 17380  00367C  1421               	andwf	___lltoft@c+1,w,c
 17381  00367E  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17382  003680  0E00               	movlw	0
 17383  003682  1422               	andwf	___lltoft@c+2,w,c
 17384  003684  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17385  003686  0EFF               	movlw	255
 17386  003688  1423               	andwf	___lltoft@c+3,w,c
 17387  00368A  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17388  00368C  5024               	movf	??___lltoft,w,c
 17389  00368E  1025               	iorwf	??___lltoft+1,w,c
 17390  003690  1026               	iorwf	??___lltoft+2,w,c
 17391  003692  1027               	iorwf	??___lltoft+3,w,c
 17392  003694  A4D8               	btfss	status,2,c
 17393  003696  D7E8               	goto	l1958
 17394  003698  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17395  00369C  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17396  0036A0  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17397  0036A4  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17398  0036A8  0E00               	movlw	0
 17399  0036AA  6E1C               	movwf	___ftpack@sign,c
 17400  0036AC  EC65  F016         	call	___ftpack	;wreg free
 17401  0036B0  C018  F020         	movff	?___ftpack,?___lltoft
 17402  0036B4  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17403  0036B8  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17404  0036BC  0012               	return	
 17405  0036BE                     __end_of___lltoft:
 17406                           	opt stack 0
 17407                           tosu	equ	0xFFF
 17408                           tosh	equ	0xFFE
 17409                           tosl	equ	0xFFD
 17410                           pclath	equ	0xFFA
 17411                           tblptru	equ	0xFF8
 17412                           tblptrh	equ	0xFF7
 17413                           tblptrl	equ	0xFF6
 17414                           tablat	equ	0xFF5
 17415                           prodh	equ	0xFF4
 17416                           prodl	equ	0xFF3
 17417                           intcon	equ	0xFF2
 17418                           intcon2	equ	0xFF1
 17419                           postinc0	equ	0xFEE
 17420                           plusw0	equ	0xFEB
 17421                           wreg	equ	0xFE8
 17422                           indf1	equ	0xFE7
 17423                           postdec1	equ	0xFE5
 17424                           fsr1h	equ	0xFE2
 17425                           fsr1l	equ	0xFE1
 17426                           indf2	equ	0xFDF
 17427                           postinc2	equ	0xFDE
 17428                           postdec2	equ	0xFDD
 17429                           plusw2	equ	0xFDB
 17430                           fsr2h	equ	0xFDA
 17431                           fsr2l	equ	0xFD9
 17432                           status	equ	0xFD8
 17433                           
 17434 ;; *************** function ___lwtoft *****************
 17435 ;; Defined at:
 17436 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 17437 ;; Parameters:    Size  Location     Type
 17438 ;;  c               2   31[COMRAM] unsigned int 
 17439 ;; Auto vars:     Size  Location     Type
 17440 ;;		None
 17441 ;; Return value:  Size  Location     Type
 17442 ;;                  3   31[COMRAM] float 
 17443 ;; Registers used:
 17444 ;;		wreg, status,2, status,0, cstack
 17445 ;; Tracked objects:
 17446 ;;		On entry : 0/0
 17447 ;;		On exit  : 0/0
 17448 ;;		Unchanged: 0/0
 17449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17450 ;;      Params:         3       0       0       0       0       0       0
 17451 ;;      Locals:         0       0       0       0       0       0       0
 17452 ;;      Temps:          0       0       0       0       0       0       0
 17453 ;;      Totals:         3       0       0       0       0       0       0
 17454 ;;Total ram usage:        3 bytes
 17455 ;; Hardware stack levels used:    1
 17456 ;; Hardware stack levels required when called:    5
 17457 ;; This function calls:
 17458 ;;		___ftpack
 17459 ;; This function is called by:
 17460 ;;		_AdcConvert
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text100
 17465  003F48                     __ptext100:
 17466                           	opt stack 0
 17467  003F48                     ___lwtoft:
 17468                           	opt stack 24
 17469                           
 17470                           ;incstack = 0
 17471  003F48  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 17472  003F4C  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 17473  003F50  6A1A               	clrf	___ftpack@arg+2,c
 17474  003F52  0E8E               	movlw	142
 17475  003F54  6E1B               	movwf	___ftpack@exp,c
 17476  003F56  0E00               	movlw	0
 17477  003F58  6E1C               	movwf	___ftpack@sign,c
 17478  003F5A  EC65  F016         	call	___ftpack	;wreg free
 17479  003F5E  C018  F020         	movff	?___ftpack,?___lwtoft
 17480  003F62  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 17481  003F66  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 17482  003F6A  0012               	return	
 17483  003F6C                     __end_of___lwtoft:
 17484                           	opt stack 0
 17485                           tosu	equ	0xFFF
 17486                           tosh	equ	0xFFE
 17487                           tosl	equ	0xFFD
 17488                           pclath	equ	0xFFA
 17489                           tblptru	equ	0xFF8
 17490                           tblptrh	equ	0xFF7
 17491                           tblptrl	equ	0xFF6
 17492                           tablat	equ	0xFF5
 17493                           prodh	equ	0xFF4
 17494                           prodl	equ	0xFF3
 17495                           intcon	equ	0xFF2
 17496                           intcon2	equ	0xFF1
 17497                           postinc0	equ	0xFEE
 17498                           plusw0	equ	0xFEB
 17499                           wreg	equ	0xFE8
 17500                           indf1	equ	0xFE7
 17501                           postdec1	equ	0xFE5
 17502                           fsr1h	equ	0xFE2
 17503                           fsr1l	equ	0xFE1
 17504                           indf2	equ	0xFDF
 17505                           postinc2	equ	0xFDE
 17506                           postdec2	equ	0xFDD
 17507                           plusw2	equ	0xFDB
 17508                           fsr2h	equ	0xFDA
 17509                           fsr2l	equ	0xFD9
 17510                           status	equ	0xFD8
 17511                           
 17512 ;; *************** function ___ftpack *****************
 17513 ;; Defined at:
 17514 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 17515 ;; Parameters:    Size  Location     Type
 17516 ;;  arg             3   23[COMRAM] unsigned um
 17517 ;;  exp             1   26[COMRAM] unsigned char 
 17518 ;;  sign            1   27[COMRAM] unsigned char 
 17519 ;; Auto vars:     Size  Location     Type
 17520 ;;		None
 17521 ;; Return value:  Size  Location     Type
 17522 ;;                  3   23[COMRAM] float 
 17523 ;; Registers used:
 17524 ;;		wreg, status,2, status,0
 17525 ;; Tracked objects:
 17526 ;;		On entry : 0/0
 17527 ;;		On exit  : 0/0
 17528 ;;		Unchanged: 0/0
 17529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17530 ;;      Params:         5       0       0       0       0       0       0
 17531 ;;      Locals:         0       0       0       0       0       0       0
 17532 ;;      Temps:          3       0       0       0       0       0       0
 17533 ;;      Totals:         8       0       0       0       0       0       0
 17534 ;;Total ram usage:        8 bytes
 17535 ;; Hardware stack levels used:    1
 17536 ;; Hardware stack levels required when called:    4
 17537 ;; This function calls:
 17538 ;;		Nothing
 17539 ;; This function is called by:
 17540 ;;		___altoft
 17541 ;;		___awtoft
 17542 ;;		___ftadd
 17543 ;;		___ftdiv
 17544 ;;		___ftmul
 17545 ;;		___lltoft
 17546 ;;		___lwtoft
 17547 ;; This function uses a non-reentrant model
 17548 ;;
 17549                           
 17550                           	psect	text101
 17551  002CCA                     __ptext101:
 17552                           	opt stack 0
 17553  002CCA                     ___ftpack:
 17554                           	opt stack 18
 17555                           
 17556                           ;incstack = 0
 17557  002CCA  501B               	movf	___ftpack@exp,w,c
 17558  002CCC  B4D8               	btfsc	status,2,c
 17559  002CCE  D005               	goto	u6340
 17560  002CD0  5018               	movf	___ftpack@arg,w,c
 17561  002CD2  1019               	iorwf	___ftpack@arg+1,w,c
 17562  002CD4  101A               	iorwf	___ftpack@arg+2,w,c
 17563  002CD6  A4D8               	btfss	status,2,c
 17564  002CD8  D00C               	goto	l1800
 17565  002CDA                     u6340:
 17566  002CDA  0E00               	movlw	0
 17567  002CDC  6E18               	movwf	?___ftpack,c
 17568  002CDE  0E00               	movlw	0
 17569  002CE0  6E19               	movwf	?___ftpack+1,c
 17570  002CE2  0E00               	movlw	0
 17571  002CE4  6E1A               	movwf	?___ftpack+2,c
 17572  002CE6  0012               	return	
 17573  002CE8  2A1B               	incf	___ftpack@exp,f,c
 17574  002CEA  90D8               	bcf	status,0,c
 17575  002CEC  321A               	rrcf	___ftpack@arg+2,f,c
 17576  002CEE  3219               	rrcf	___ftpack@arg+1,f,c
 17577  002CF0  3218               	rrcf	___ftpack@arg,f,c
 17578  002CF2                     l1800:
 17579  002CF2  0E00               	movlw	0
 17580  002CF4  1418               	andwf	___ftpack@arg,w,c
 17581  002CF6  6E1D               	movwf	??___ftpack& (0+255),c
 17582  002CF8  0E00               	movlw	0
 17583  002CFA  1419               	andwf	___ftpack@arg+1,w,c
 17584  002CFC  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 17585  002CFE  0EFE               	movlw	254
 17586  002D00  141A               	andwf	___ftpack@arg+2,w,c
 17587  002D02  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 17588  002D04  501D               	movf	??___ftpack,w,c
 17589  002D06  101E               	iorwf	??___ftpack+1,w,c
 17590  002D08  101F               	iorwf	??___ftpack+2,w,c
 17591  002D0A  B4D8               	btfsc	status,2,c
 17592  002D0C  D00C               	goto	l1803
 17593  002D0E  D7EC               	goto	l1801
 17594  002D10  2A1B               	incf	___ftpack@exp,f,c
 17595  002D12  0E01               	movlw	1
 17596  002D14  2618               	addwf	___ftpack@arg,f,c
 17597  002D16  0E00               	movlw	0
 17598  002D18  2219               	addwfc	___ftpack@arg+1,f,c
 17599  002D1A  0E00               	movlw	0
 17600  002D1C  221A               	addwfc	___ftpack@arg+2,f,c
 17601  002D1E  90D8               	bcf	status,0,c
 17602  002D20  321A               	rrcf	___ftpack@arg+2,f,c
 17603  002D22  3219               	rrcf	___ftpack@arg+1,f,c
 17604  002D24  3218               	rrcf	___ftpack@arg,f,c
 17605  002D26                     l1803:
 17606  002D26  0E00               	movlw	0
 17607  002D28  1418               	andwf	___ftpack@arg,w,c
 17608  002D2A  6E1D               	movwf	??___ftpack& (0+255),c
 17609  002D2C  0E00               	movlw	0
 17610  002D2E  1419               	andwf	___ftpack@arg+1,w,c
 17611  002D30  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 17612  002D32  0EFF               	movlw	255
 17613  002D34  141A               	andwf	___ftpack@arg+2,w,c
 17614  002D36  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 17615  002D38  501D               	movf	??___ftpack,w,c
 17616  002D3A  101E               	iorwf	??___ftpack+1,w,c
 17617  002D3C  101F               	iorwf	??___ftpack+2,w,c
 17618  002D3E  B4D8               	btfsc	status,2,c
 17619  002D40  D006               	goto	l1806
 17620  002D42  D7E6               	goto	l1804
 17621  002D44  061B               	decf	___ftpack@exp,f,c
 17622  002D46  90D8               	bcf	status,0,c
 17623  002D48  3618               	rlcf	___ftpack@arg,f,c
 17624  002D4A  3619               	rlcf	___ftpack@arg+1,f,c
 17625  002D4C  361A               	rlcf	___ftpack@arg+2,f,c
 17626  002D4E                     l1806:
 17627  002D4E  BE19               	btfsc	___ftpack@arg+1,7,c
 17628  002D50  D003               	goto	u6380
 17629  002D52  0E02               	movlw	2
 17630  002D54  601B               	cpfslt	___ftpack@exp,c
 17631  002D56  D7F6               	goto	l1807
 17632  002D58                     u6380:
 17633  002D58  A01B               	btfss	___ftpack@exp,0,c
 17634  002D5A  9E19               	bcf	___ftpack@arg+1,7,c
 17635  002D5C  90D8               	bcf	status,0,c
 17636  002D5E  321B               	rrcf	___ftpack@exp,f,c
 17637  002D60  501B               	movf	___ftpack@exp,w,c
 17638  002D62  121A               	iorwf	___ftpack@arg+2,f,c
 17639  002D64  501C               	movf	___ftpack@sign,w,c
 17640  002D66  A4D8               	btfss	status,2,c
 17641  002D68  8E1A               	bsf	___ftpack@arg+2,7,c
 17642  002D6A  C018  F018         	movff	___ftpack@arg,?___ftpack
 17643  002D6E  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 17644  002D72  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 17645  002D76  0012               	return	
 17646  002D78                     __end_of___ftpack:
 17647                           	opt stack 0
 17648                           tosu	equ	0xFFF
 17649                           tosh	equ	0xFFE
 17650                           tosl	equ	0xFFD
 17651                           pclath	equ	0xFFA
 17652                           tblptru	equ	0xFF8
 17653                           tblptrh	equ	0xFF7
 17654                           tblptrl	equ	0xFF6
 17655                           tablat	equ	0xFF5
 17656                           prodh	equ	0xFF4
 17657                           prodl	equ	0xFF3
 17658                           intcon	equ	0xFF2
 17659                           intcon2	equ	0xFF1
 17660                           postinc0	equ	0xFEE
 17661                           plusw0	equ	0xFEB
 17662                           wreg	equ	0xFE8
 17663                           indf1	equ	0xFE7
 17664                           postdec1	equ	0xFE5
 17665                           fsr1h	equ	0xFE2
 17666                           fsr1l	equ	0xFE1
 17667                           indf2	equ	0xFDF
 17668                           postinc2	equ	0xFDE
 17669                           postdec2	equ	0xFDD
 17670                           plusw2	equ	0xFDB
 17671                           fsr2h	equ	0xFDA
 17672                           fsr2l	equ	0xFD9
 17673                           status	equ	0xFD8
 17674                           
 17675 ;; *************** function _GetUint16FromBitArray *****************
 17676 ;; Defined at:
 17677 ;;		line 34 in file "SystemCommon.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 17680 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 17681 ;;  numOfBits       2   25[COMRAM] int 
 17682 ;; Auto vars:     Size  Location     Type
 17683 ;;  state           1   30[COMRAM] unsigned char 
 17684 ;;  i               2   33[COMRAM] int 
 17685 ;;  res             2   31[COMRAM] unsigned int 
 17686 ;; Return value:  Size  Location     Type
 17687 ;;                  2   23[COMRAM] unsigned int 
 17688 ;; Registers used:
 17689 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17690 ;; Tracked objects:
 17691 ;;		On entry : 0/0
 17692 ;;		On exit  : 0/0
 17693 ;;		Unchanged: 0/0
 17694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17695 ;;      Params:         4       0       0       0       0       0       0
 17696 ;;      Locals:         5       0       0       0       0       0       0
 17697 ;;      Temps:          3       0       0       0       0       0       0
 17698 ;;      Totals:        12       0       0       0       0       0       0
 17699 ;;Total ram usage:       12 bytes
 17700 ;; Hardware stack levels used:    1
 17701 ;; Hardware stack levels required when called:    4
 17702 ;; This function calls:
 17703 ;;		Nothing
 17704 ;; This function is called by:
 17705 ;;		_AdcConvert
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           	psect	text102
 17710  0031AE                     __ptext102:
 17711                           	opt stack 0
 17712  0031AE                     _GetUint16FromBitArray:
 17713                           	opt stack 25
 17714                           
 17715                           ;SystemCommon.c: 36: uint16_t res = 0;
 17716                           
 17717                           ;incstack = 0
 17718  0031AE  0E00               	movlw	0
 17719  0031B0  6E21               	movwf	GetUint16FromBitArray@res+1,c
 17720  0031B2  0E00               	movlw	0
 17721  0031B4  6E20               	movwf	GetUint16FromBitArray@res,c
 17722                           
 17723                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 17724  0031B6  0E00               	movlw	0
 17725  0031B8  6E23               	movwf	GetUint16FromBitArray@i+1,c
 17726  0031BA  0E00               	movlw	0
 17727  0031BC  6E22               	movwf	GetUint16FromBitArray@i,c
 17728  0031BE  D02C               	goto	l1393
 17729  0031C0                     
 17730                           ;SystemCommon.c: 38: {
 17731                           ;SystemCommon.c: 39: bool state = bitarray[i];
 17732  0031C0  5022               	movf	GetUint16FromBitArray@i,w,c
 17733  0031C2  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 17734  0031C4  6ED9               	movwf	fsr2l,c
 17735  0031C6  5023               	movf	GetUint16FromBitArray@i+1,w,c
 17736  0031C8  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 17737  0031CA  6EDA               	movwf	fsr2h,c
 17738  0031CC  50DF               	movf	indf2,w,c
 17739  0031CE  6E1F               	movwf	GetUint16FromBitArray@state,c
 17740                           
 17741                           ;SystemCommon.c: 40: if(state == 0xFF)
 17742  0031D0  281F               	incf	GetUint16FromBitArray@state,w,c
 17743  0031D2  A4D8               	btfss	status,2,c
 17744  0031D4  D005               	goto	l1395
 17745                           
 17746                           ;SystemCommon.c: 41: {
 17747                           ;SystemCommon.c: 42: return res;
 17748  0031D6  C020  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 17749  0031DA  C021  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 17750  0031DE  0012               	return	
 17751  0031E0                     l1395:
 17752                           
 17753                           ;SystemCommon.c: 43: }
 17754                           ;SystemCommon.c: 44: if (bitarray[i])
 17755  0031E0  5022               	movf	GetUint16FromBitArray@i,w,c
 17756  0031E2  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 17757  0031E4  6ED9               	movwf	fsr2l,c
 17758  0031E6  5023               	movf	GetUint16FromBitArray@i+1,w,c
 17759  0031E8  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 17760  0031EA  6EDA               	movwf	fsr2h,c
 17761  0031EC  50DF               	movf	indf2,w,c
 17762  0031EE  B4D8               	btfsc	status,2,c
 17763  0031F0  D011               	goto	l1397
 17764                           
 17765                           ;SystemCommon.c: 45: {
 17766                           ;SystemCommon.c: 46: res |= (uint16_t)(1 << i);
 17767  0031F2  C022  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 17768  0031F6  0E01               	movlw	1
 17769  0031F8  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 17770  0031FA  0E00               	movlw	0
 17771  0031FC  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 17772  0031FE  2A1C               	incf	??_GetUint16FromBitArray,f,c
 17773  003200  D003               	goto	u5524
 17774  003202                     u5525:
 17775  003202  90D8               	bcf	status,0,c
 17776  003204  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 17777  003206  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 17778  003208                     u5524:
 17779  003208  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 17780  00320A  D7FB               	goto	u5525
 17781  00320C  501D               	movf	??_GetUint16FromBitArray+1,w,c
 17782  00320E  1220               	iorwf	GetUint16FromBitArray@res,f,c
 17783  003210  501E               	movf	??_GetUint16FromBitArray+2,w,c
 17784  003212  1221               	iorwf	GetUint16FromBitArray@res+1,f,c
 17785  003214                     l1397:
 17786  003214  4A22               	infsnz	GetUint16FromBitArray@i,f,c
 17787  003216  2A23               	incf	GetUint16FromBitArray@i+1,f,c
 17788  003218                     l1393:
 17789  003218  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 17790  00321A  5C22               	subwf	GetUint16FromBitArray@i,w,c
 17791  00321C  5023               	movf	GetUint16FromBitArray@i+1,w,c
 17792  00321E  0A80               	xorlw	128
 17793  003220  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 17794  003222  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 17795  003224  0A80               	xorlw	128
 17796  003226  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 17797  003228  A0D8               	btfss	status,0,c
 17798  00322A  D7CA               	goto	l1394
 17799                           
 17800                           ;SystemCommon.c: 47: }
 17801                           ;SystemCommon.c: 48: }
 17802                           ;SystemCommon.c: 49: return res;
 17803  00322C  C020  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 17804  003230  C021  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 17805  003234  0012               	return		;funcret
 17806  003236                     __end_of_GetUint16FromBitArray:
 17807                           	opt stack 0
 17808                           tosu	equ	0xFFF
 17809                           tosh	equ	0xFFE
 17810                           tosl	equ	0xFFD
 17811                           pclath	equ	0xFFA
 17812                           tblptru	equ	0xFF8
 17813                           tblptrh	equ	0xFF7
 17814                           tblptrl	equ	0xFF6
 17815                           tablat	equ	0xFF5
 17816                           prodh	equ	0xFF4
 17817                           prodl	equ	0xFF3
 17818                           intcon	equ	0xFF2
 17819                           intcon2	equ	0xFF1
 17820                           postinc0	equ	0xFEE
 17821                           plusw0	equ	0xFEB
 17822                           wreg	equ	0xFE8
 17823                           indf1	equ	0xFE7
 17824                           postdec1	equ	0xFE5
 17825                           fsr1h	equ	0xFE2
 17826                           fsr1l	equ	0xFE1
 17827                           indf2	equ	0xFDF
 17828                           postinc2	equ	0xFDE
 17829                           postdec2	equ	0xFDD
 17830                           plusw2	equ	0xFDB
 17831                           fsr2h	equ	0xFDA
 17832                           fsr2l	equ	0xFD9
 17833                           status	equ	0xFD8
 17834                           
 17835 ;; *************** function _FlashSampleWrite *****************
 17836 ;; Defined at:
 17837 ;;		line 29 in file "FlashApp.c"
 17838 ;; Parameters:    Size  Location     Type
 17839 ;;  sampleData      2   44[COMRAM] unsigned int 
 17840 ;;  channelNum      1   46[COMRAM] unsigned char 
 17841 ;; Auto vars:     Size  Location     Type
 17842 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 17843 ;; Return value:  Size  Location     Type
 17844 ;;                  1    wreg      void 
 17845 ;; Registers used:
 17846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17847 ;; Tracked objects:
 17848 ;;		On entry : 0/0
 17849 ;;		On exit  : 0/0
 17850 ;;		Unchanged: 0/0
 17851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17852 ;;      Params:         3       0       0       0       0       0       0
 17853 ;;      Locals:         0       2       0       0       0       0       0
 17854 ;;      Temps:          0       2       0       0       0       0       0
 17855 ;;      Totals:         3       4       0       0       0       0       0
 17856 ;;Total ram usage:        7 bytes
 17857 ;; Hardware stack levels used:    1
 17858 ;; Hardware stack levels required when called:    6
 17859 ;; This function calls:
 17860 ;;		_FLASH_IsWriteDone
 17861 ;;		_FLASH_WriteBlock
 17862 ;; This function is called by:
 17863 ;;		_AdcConvert
 17864 ;; This function uses a non-reentrant model
 17865 ;;
 17866                           
 17867                           	psect	text103
 17868  0020A6                     __ptext103:
 17869                           	opt stack 0
 17870  0020A6                     _FlashSampleWrite:
 17871                           	opt stack 23
 17872                           
 17873                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 17874                           
 17875                           ;incstack = 0
 17876  0020A6  502F               	movf	FlashSampleWrite@channelNum,w,c
 17877  0020A8  0100               	movlb	0	; () banked
 17878  0020AA  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 17879  0020AC  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 17880  0020AE  0E0C               	movlw	12
 17881  0020B0                     u8625:
 17882  0020B0  90D8               	bcf	status,0,c
 17883  0020B2  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17884  0020B4  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17885  0020B6  2EE8               	decfsz	wreg,f,c
 17886  0020B8  D7FB               	goto	u8625
 17887  0020BA  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 17888  0020BE  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 17889                           
 17890                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 17891  0020C2  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 17892  0020C4  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 17893  0020C6  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 17894  0020C8  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 17895                           
 17896                           ; BSR set to: 0
 17897                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 17898  0020CA  90D8               	bcf	status,0,c
 17899  0020CC  35EB               	rlcf	_sampleCount& (0+255),w,b
 17900  0020CE  6ED9               	movwf	fsr2l,c
 17901  0020D0  35EC               	rlcf	(_sampleCount+1)& (0+255),w,b
 17902  0020D2  6EDA               	movwf	fsr2h,c
 17903  0020D4  0E2C               	movlw	low _sampleArray
 17904  0020D6  26D9               	addwf	fsr2l,f,c
 17905  0020D8  0E01               	movlw	high _sampleArray
 17906  0020DA  22DA               	addwfc	fsr2h,f,c
 17907  0020DC  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 17908  0020E0  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;FlashApp.c: 35: sampleCount ++;
 17912  0020E4  4BEB               	infsnz	_sampleCount& (0+255),f,b
 17913  0020E6  2BEC               	incf	(_sampleCount+1)& (0+255),f,b
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 17917  0020E8  C0EB  F060         	movff	_sampleCount,??_FlashSampleWrite
 17918  0020EC  C0EC  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 17919  0020F0  90D8               	bcf	status,0,c
 17920  0020F2  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17921  0020F4  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17922  0020F6  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 17923  0020F8  E104               	bnz	u8630
 17924  0020FA  0E40               	movlw	64
 17925  0020FC  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 17926  0020FE  A0D8               	btfss	status,0,c
 17927  002100  0012               	return	
 17928  002102                     u8630:
 17929                           
 17930                           ; BSR set to: 0
 17931  002102  ECA4  F020         	call	_FLASH_IsWriteDone	;wreg free
 17932  002106  0900               	iorlw	0
 17933  002108  B4D8               	btfsc	status,2,c
 17934  00210A  0012               	return	
 17935                           
 17936                           ;FlashApp.c: 38: {
 17937                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 17938  00210C  C03F  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 17939  002110  C040  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 17940  002114  C041  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 17941  002118  C042  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 17942  00211C  0E2C               	movlw	low _sampleArray
 17943  00211E  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 17944  002120  0E01               	movlw	high _sampleArray
 17945  002122  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 17946  002124  ECB0  F015         	call	_FLASH_WriteBlock	;wreg free
 17947                           
 17948                           ;FlashApp.c: 40: writeAddress += (64);
 17949  002128  0E40               	movlw	64
 17950  00212A  263F               	addwf	_writeAddress,f,c
 17951  00212C  0E00               	movlw	0
 17952  00212E  2240               	addwfc	_writeAddress+1,f,c
 17953  002130  2241               	addwfc	_writeAddress+2,f,c
 17954  002132  2242               	addwfc	_writeAddress+3,f,c
 17955                           
 17956                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 17957  002134  5042               	movf	_writeAddress+3,w,c
 17958  002136  1041               	iorwf	_writeAddress+2,w,c
 17959  002138  E106               	bnz	u8650
 17960  00213A  0EF0               	movlw	240
 17961  00213C  5C3F               	subwf	_writeAddress,w,c
 17962  00213E  0E7F               	movlw	127
 17963  002140  5840               	subwfb	_writeAddress+1,w,c
 17964  002142  A0D8               	btfss	status,0,c
 17965  002144  D019               	goto	l317
 17966  002146                     u8650:
 17967                           
 17968                           ;FlashApp.c: 42: {
 17969                           ;FlashApp.c: 43: writeAddress = 0x4580;
 17970  002146  0E80               	movlw	128
 17971  002148  6E3F               	movwf	_writeAddress,c
 17972  00214A  0E45               	movlw	69
 17973  00214C  6E40               	movwf	_writeAddress+1,c
 17974  00214E  0E00               	movlw	0
 17975  002150  6E41               	movwf	_writeAddress+2,c
 17976  002152  0E00               	movlw	0
 17977  002154  6E42               	movwf	_writeAddress+3,c
 17978                           
 17979                           ;FlashApp.c: 44: isReWriteDone = 1;
 17980  002156  0E01               	movlw	1
 17981  002158  6E38               	movwf	_isReWriteDone,c
 17982                           
 17983                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 17984  00215A  0E80               	movlw	128
 17985  00215C  183B               	xorwf	_readAddress,w,c
 17986  00215E  E10C               	bnz	l316
 17987  002160  0E45               	movlw	69
 17988  002162  183C               	xorwf	_readAddress+1,w,c
 17989  002164  103D               	iorwf	_readAddress+2,w,c
 17990  002166  103E               	iorwf	_readAddress+3,w,c
 17991  002168  A4D8               	btfss	status,2,c
 17992  00216A  D006               	goto	l317
 17993                           
 17994                           ;FlashApp.c: 46: {
 17995                           ;FlashApp.c: 47: readAddress += (64);
 17996  00216C  0E40               	movlw	64
 17997  00216E  263B               	addwf	_readAddress,f,c
 17998  002170  0E00               	movlw	0
 17999  002172  223C               	addwfc	_readAddress+1,f,c
 18000  002174  223D               	addwfc	_readAddress+2,f,c
 18001  002176  223E               	addwfc	_readAddress+3,f,c
 18002  002178                     l317:
 18003  002178                     l316:
 18004                           
 18005                           ;FlashApp.c: 48: }
 18006                           ;FlashApp.c: 49: }
 18007                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18008  002178  0E17               	movlw	23
 18009  00217A  0100               	movlb	0	; () banked
 18010  00217C  5DE5               	subwf	_numOfValidateSamples& (0+255),w,b
 18011  00217E  0EFF               	movlw	255
 18012  002180  59E6               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18013  002182  0EFF               	movlw	255
 18014  002184  59E7               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18015  002186  0EFF               	movlw	255
 18016  002188  59E8               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18017  00218A  B0D8               	btfsc	status,0,c
 18018  00218C  D006               	goto	l318
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;FlashApp.c: 53: {
 18022                           ;FlashApp.c: 54: numOfValidateSamples++;
 18023  00218E  0E01               	movlw	1
 18024  002190  27E5               	addwf	_numOfValidateSamples& (0+255),f,b
 18025  002192  0E00               	movlw	0
 18026  002194  23E6               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18027  002196  23E7               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18028  002198  23E8               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18029  00219A                     l318:
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;FlashApp.c: 55: }
 18033                           ;FlashApp.c: 56: sampleCount = 0;
 18034                           
 18035                           ; BSR set to: 0
 18036  00219A  0E00               	movlw	0
 18037  00219C  6FEC               	movwf	(_sampleCount+1)& (0+255),b
 18038  00219E  0E00               	movlw	0
 18039  0021A0  6FEB               	movwf	_sampleCount& (0+255),b
 18040  0021A2  0012               	return	
 18041  0021A4                     __end_of_FlashSampleWrite:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           intcon2	equ	0xFF1
 18055                           postinc0	equ	0xFEE
 18056                           plusw0	equ	0xFEB
 18057                           wreg	equ	0xFE8
 18058                           indf1	equ	0xFE7
 18059                           postdec1	equ	0xFE5
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function _FLASH_WriteBlock *****************
 18071 ;; Defined at:
 18072 ;;		line 93 in file "mcc_generated_files/memory.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18075 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18076 ;;		 -> sampleArray(64), 
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18079 ;;  i               1   43[COMRAM] unsigned char 
 18080 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18081 ;; Return value:  Size  Location     Type
 18082 ;;                  1    wreg      char 
 18083 ;; Registers used:
 18084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18090 ;;      Params:         6       0       0       0       0       0       0
 18091 ;;      Locals:         6       0       0       0       0       0       0
 18092 ;;      Temps:          4       0       0       0       0       0       0
 18093 ;;      Totals:        16       0       0       0       0       0       0
 18094 ;;Total ram usage:       16 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    5
 18097 ;; This function calls:
 18098 ;;		_FLASH_EraseBlock
 18099 ;; This function is called by:
 18100 ;;		_FlashSampleWrite
 18101 ;;		_FLASH_WriteByte
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text104
 18106  002B60                     __ptext104:
 18107                           	opt stack 0
 18108  002B60                     _FLASH_WriteBlock:
 18109                           	opt stack 23
 18110                           
 18111                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18112                           
 18113                           ;incstack = 0
 18114  002B60  0EC0               	movlw	192
 18115  002B62  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18116  002B64  0E7F               	movlw	127
 18117  002B66  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18118  002B68  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18119  002B6C  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18120  002B70  5023               	movf	??_FLASH_WriteBlock,w,c
 18121  002B72  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18122  002B74  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18123  002B76  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18124  002B78  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18125  002B7C  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18126  002B80  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18127  002B82  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18128                           
 18129                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18130  002B84  0E00               	movlw	0
 18131  002B86  BEF2               	btfsc	intcon,7,c	;volatile
 18132  002B88  0E01               	movlw	1
 18133  002B8A  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18134                           
 18135                           ;memory.c: 97: uint8_t i;
 18136                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18137  002B8C  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18138  002B8E  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18139  002B90  E144               	bnz	l1037
 18140  002B92  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18141  002B94  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18142  002B96  E141               	bnz	l1037
 18143  002B98  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18144  002B9A  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18145  002B9C  E13E               	bnz	l1037
 18146  002B9E  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18147  002BA0  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18148  002BA2  A4D8               	btfss	status,2,c
 18149  002BA4  0012               	return	
 18150                           
 18151                           ;memory.c: 103: }
 18152                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18153                           
 18154                           ;memory.c: 101: {
 18155                           ;memory.c: 102: return -1;
 18156                           ;	Return value of _FLASH_WriteBlock is never used
 18157  002BA6  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18158  002BAA  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18159  002BAE  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18160  002BB2  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18161  002BB6  ECA3  F01E         	call	_FLASH_EraseBlock	;wreg free
 18162                           
 18163                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18164  002BBA  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18165                           
 18166                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18167  002BBE  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18168                           
 18169                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18170  002BC2  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18171                           
 18172                           ;memory.c: 114: for (i=0; i<(64); i++)
 18173  002BC6  0E00               	movlw	0
 18174  002BC8  6E2C               	movwf	FLASH_WriteBlock@i,c
 18175  002BCA                     l8140:
 18176  002BCA  0E3F               	movlw	63
 18177  002BCC  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18178  002BCE  D001               	goto	l1038
 18179  002BD0  D013               	goto	u8240
 18180  002BD2                     l1038:
 18181                           
 18182                           ;memory.c: 115: {
 18183                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18184  002BD2  502C               	movf	FLASH_WriteBlock@i,w,c
 18185  002BD4  0D01               	mullw	1
 18186  002BD6  50F3               	movf	prodl,w,c
 18187  002BD8  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18188  002BDA  6ED9               	movwf	fsr2l,c
 18189  002BDC  50F4               	movf	prodh,w,c
 18190  002BDE  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18191  002BE0  6EDA               	movwf	fsr2h,c
 18192  002BE2  50DF               	movf	indf2,w,c
 18193  002BE4  6EF5               	movwf	tablat,c	;volatile
 18194                           
 18195                           ;memory.c: 118: if (i == ((64)-1))
 18196  002BE6  0E3F               	movlw	63
 18197  002BE8  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18198  002BEA  A4D8               	btfss	status,2,c
 18199  002BEC  D002               	goto	l1040
 18200  002BEE  000C               	tblwt		*	;# 
 18201                           
 18202                           ;memory.c: 121: }
 18203  002BF0  D001               	goto	l1041
 18204  002BF2                     l1040:
 18205  002BF2  000D               	tblwt		*+	;# 
 18206  002BF4                     l1041:
 18207  002BF4  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18208  002BF6  D7E9               	goto	l8140
 18209  002BF8                     u8240:
 18210                           
 18211                           ;memory.c: 125: }
 18212                           ;memory.c: 126: }
 18213                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18214  002BF8  88A1               	bsf	4001,4,c	;volatile
 18215                           
 18216                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18217  002BFA  8EA6               	bsf	4006,7,c	;volsfr
 18218                           
 18219                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18220  002BFC  9CA6               	bcf	4006,6,c	;volsfr
 18221                           
 18222                           ;memory.c: 131: EECON1bits.WREN = 1;
 18223  002BFE  84A6               	bsf	4006,2,c	;volsfr
 18224                           
 18225                           ;memory.c: 132: INTCONbits.GIE = 0;
 18226  002C00  9EF2               	bcf	intcon,7,c	;volatile
 18227                           
 18228                           ;memory.c: 133: EECON2 = 0x55;
 18229  002C02  0E55               	movlw	85
 18230  002C04  6EA7               	movwf	4007,c	;volsfr
 18231                           
 18232                           ;memory.c: 134: EECON2 = 0xAA;
 18233  002C06  0EAA               	movlw	170
 18234  002C08  6EA7               	movwf	4007,c	;volsfr
 18235                           
 18236                           ;memory.c: 135: EECON1bits.WR = 1;
 18237  002C0A  82A6               	bsf	4006,1,c	;volsfr
 18238                           
 18239                           ;memory.c: 137: EECON1bits.WREN = 0;
 18240  002C0C  94A6               	bcf	4006,2,c	;volsfr
 18241                           
 18242                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18243  002C0E  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18244  002C10  D002               	bra	u8255
 18245  002C12  9EF2               	bcf	intcon,7,c	;volatile
 18246  002C14  D001               	bra	u8256
 18247  002C16                     u8255:
 18248  002C16  8EF2               	bsf	intcon,7,c	;volatile
 18249  002C18                     u8256:
 18250  002C18  0012               	return	
 18251  002C1A                     l1037:
 18252  002C1A  0012               	return		;funcret
 18253  002C1C                     __end_of_FLASH_WriteBlock:
 18254                           	opt stack 0
 18255                           tosu	equ	0xFFF
 18256                           tosh	equ	0xFFE
 18257                           tosl	equ	0xFFD
 18258                           pclath	equ	0xFFA
 18259                           tblptru	equ	0xFF8
 18260                           tblptrh	equ	0xFF7
 18261                           tblptrl	equ	0xFF6
 18262                           tablat	equ	0xFF5
 18263                           prodh	equ	0xFF4
 18264                           prodl	equ	0xFF3
 18265                           intcon	equ	0xFF2
 18266                           intcon2	equ	0xFF1
 18267                           postinc0	equ	0xFEE
 18268                           plusw0	equ	0xFEB
 18269                           wreg	equ	0xFE8
 18270                           indf1	equ	0xFE7
 18271                           postdec1	equ	0xFE5
 18272                           fsr1h	equ	0xFE2
 18273                           fsr1l	equ	0xFE1
 18274                           indf2	equ	0xFDF
 18275                           postinc2	equ	0xFDE
 18276                           postdec2	equ	0xFDD
 18277                           plusw2	equ	0xFDB
 18278                           fsr2h	equ	0xFDA
 18279                           fsr2l	equ	0xFD9
 18280                           status	equ	0xFD8
 18281                           
 18282 ;; *************** function _FLASH_EraseBlock *****************
 18283 ;; Defined at:
 18284 ;;		line 144 in file "mcc_generated_files/memory.c"
 18285 ;; Parameters:    Size  Location     Type
 18286 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18287 ;; Auto vars:     Size  Location     Type
 18288 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18289 ;; Return value:  Size  Location     Type
 18290 ;;                  1    wreg      void 
 18291 ;; Registers used:
 18292 ;;		wreg, status,2
 18293 ;; Tracked objects:
 18294 ;;		On entry : 0/0
 18295 ;;		On exit  : 0/0
 18296 ;;		Unchanged: 0/0
 18297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18298 ;;      Params:         4       0       0       0       0       0       0
 18299 ;;      Locals:         1       0       0       0       0       0       0
 18300 ;;      Temps:          0       0       0       0       0       0       0
 18301 ;;      Totals:         5       0       0       0       0       0       0
 18302 ;;Total ram usage:        5 bytes
 18303 ;; Hardware stack levels used:    1
 18304 ;; Hardware stack levels required when called:    4
 18305 ;; This function calls:
 18306 ;;		Nothing
 18307 ;; This function is called by:
 18308 ;;		_FLASH_WriteBlock
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text105
 18313  003D46                     __ptext105:
 18314                           	opt stack 0
 18315  003D46                     _FLASH_EraseBlock:
 18316                           	opt stack 23
 18317                           
 18318                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18319                           
 18320                           ;incstack = 0
 18321  003D46  0E00               	movlw	0
 18322  003D48  BEF2               	btfsc	intcon,7,c	;volatile
 18323  003D4A  0E01               	movlw	1
 18324  003D4C  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18325                           
 18326                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18327  003D4E  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18328                           
 18329                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18330  003D52  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18331                           
 18332                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18333  003D56  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18334                           
 18335                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18336  003D5A  8EA6               	bsf	4006,7,c	;volsfr
 18337                           
 18338                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18339  003D5C  9CA6               	bcf	4006,6,c	;volsfr
 18340                           
 18341                           ;memory.c: 154: EECON1bits.WREN = 1;
 18342  003D5E  84A6               	bsf	4006,2,c	;volsfr
 18343                           
 18344                           ;memory.c: 155: EECON1bits.FREE = 1;
 18345  003D60  88A6               	bsf	4006,4,c	;volsfr
 18346                           
 18347                           ;memory.c: 156: INTCONbits.GIE = 0;
 18348  003D62  9EF2               	bcf	intcon,7,c	;volatile
 18349                           
 18350                           ;memory.c: 157: EECON2 = 0x55;
 18351  003D64  0E55               	movlw	85
 18352  003D66  6EA7               	movwf	4007,c	;volsfr
 18353                           
 18354                           ;memory.c: 158: EECON2 = 0xAA;
 18355  003D68  0EAA               	movlw	170
 18356  003D6A  6EA7               	movwf	4007,c	;volsfr
 18357                           
 18358                           ;memory.c: 159: EECON1bits.WR = 1;
 18359  003D6C  82A6               	bsf	4006,1,c	;volsfr
 18360                           
 18361                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18362  003D6E  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18363  003D70  D002               	bra	u8115
 18364  003D72  9EF2               	bcf	intcon,7,c	;volatile
 18365  003D74  D001               	bra	u8116
 18366  003D76                     u8115:
 18367  003D76  8EF2               	bsf	intcon,7,c	;volatile
 18368  003D78                     u8116:
 18369  003D78  0012               	return		;funcret
 18370  003D7A                     __end_of_FLASH_EraseBlock:
 18371                           	opt stack 0
 18372                           tosu	equ	0xFFF
 18373                           tosh	equ	0xFFE
 18374                           tosl	equ	0xFFD
 18375                           pclath	equ	0xFFA
 18376                           tblptru	equ	0xFF8
 18377                           tblptrh	equ	0xFF7
 18378                           tblptrl	equ	0xFF6
 18379                           tablat	equ	0xFF5
 18380                           prodh	equ	0xFF4
 18381                           prodl	equ	0xFF3
 18382                           intcon	equ	0xFF2
 18383                           intcon2	equ	0xFF1
 18384                           postinc0	equ	0xFEE
 18385                           plusw0	equ	0xFEB
 18386                           wreg	equ	0xFE8
 18387                           indf1	equ	0xFE7
 18388                           postdec1	equ	0xFE5
 18389                           fsr1h	equ	0xFE2
 18390                           fsr1l	equ	0xFE1
 18391                           indf2	equ	0xFDF
 18392                           postinc2	equ	0xFDE
 18393                           postdec2	equ	0xFDD
 18394                           plusw2	equ	0xFDB
 18395                           fsr2h	equ	0xFDA
 18396                           fsr2l	equ	0xFD9
 18397                           status	equ	0xFD8
 18398                           
 18399 ;; *************** function _FLASH_IsWriteDone *****************
 18400 ;; Defined at:
 18401 ;;		line 189 in file "mcc_generated_files/memory.c"
 18402 ;; Parameters:    Size  Location     Type
 18403 ;;		None
 18404 ;; Auto vars:     Size  Location     Type
 18405 ;;		None
 18406 ;; Return value:  Size  Location     Type
 18407 ;;                  1    wreg      unsigned char 
 18408 ;; Registers used:
 18409 ;;		wreg
 18410 ;; Tracked objects:
 18411 ;;		On entry : 0/0
 18412 ;;		On exit  : 0/0
 18413 ;;		Unchanged: 0/0
 18414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18415 ;;      Params:         0       0       0       0       0       0       0
 18416 ;;      Locals:         0       0       0       0       0       0       0
 18417 ;;      Temps:          0       0       0       0       0       0       0
 18418 ;;      Totals:         0       0       0       0       0       0       0
 18419 ;;Total ram usage:        0 bytes
 18420 ;; Hardware stack levels used:    1
 18421 ;; Hardware stack levels required when called:    4
 18422 ;; This function calls:
 18423 ;;		Nothing
 18424 ;; This function is called by:
 18425 ;;		_FlashSampleWrite
 18426 ;;		_FlashReadUart
 18427 ;; This function uses a non-reentrant model
 18428 ;;
 18429                           
 18430                           	psect	text106
 18431  004148                     __ptext106:
 18432                           	opt stack 0
 18433  004148                     _FLASH_IsWriteDone:
 18434                           	opt stack 23
 18435                           
 18436                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18437                           
 18438                           ;incstack = 0
 18439  004148  A2A6               	btfss	4006,1,c	;volsfr
 18440  00414A  D001               	goto	u7901
 18441  00414C  D002               	goto	u7900
 18442  00414E                     u7901:
 18443  00414E  0E01               	movlw	1
 18444  004150  0012               	return	
 18445  004152                     u7900:
 18446  004152  0E00               	movlw	0
 18447  004154  0012               	return	
 18448  004156                     __end_of_FLASH_IsWriteDone:
 18449                           	opt stack 0
 18450                           tosu	equ	0xFFF
 18451                           tosh	equ	0xFFE
 18452                           tosl	equ	0xFFD
 18453                           pclath	equ	0xFFA
 18454                           tblptru	equ	0xFF8
 18455                           tblptrh	equ	0xFF7
 18456                           tblptrl	equ	0xFF6
 18457                           tablat	equ	0xFF5
 18458                           prodh	equ	0xFF4
 18459                           prodl	equ	0xFF3
 18460                           intcon	equ	0xFF2
 18461                           intcon2	equ	0xFF1
 18462                           postinc0	equ	0xFEE
 18463                           plusw0	equ	0xFEB
 18464                           wreg	equ	0xFE8
 18465                           indf1	equ	0xFE7
 18466                           postdec1	equ	0xFE5
 18467                           fsr1h	equ	0xFE2
 18468                           fsr1l	equ	0xFE1
 18469                           indf2	equ	0xFDF
 18470                           postinc2	equ	0xFDE
 18471                           postdec2	equ	0xFDD
 18472                           plusw2	equ	0xFDB
 18473                           fsr2h	equ	0xFDA
 18474                           fsr2l	equ	0xFD9
 18475                           status	equ	0xFD8
 18476                           
 18477 ;; *************** function _ADC_GetConversion *****************
 18478 ;; Defined at:
 18479 ;;		line 106 in file "mcc_generated_files/adc.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;  channel         1    wreg     enum E6975
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;  channel         1   27[COMRAM] enum E6975
 18484 ;; Return value:  Size  Location     Type
 18485 ;;                  2   23[COMRAM] unsigned int 
 18486 ;; Registers used:
 18487 ;;		wreg, status,2, status,0
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18493 ;;      Params:         2       0       0       0       0       0       0
 18494 ;;      Locals:         1       0       0       0       0       0       0
 18495 ;;      Temps:          2       0       0       0       0       0       0
 18496 ;;      Totals:         5       0       0       0       0       0       0
 18497 ;;Total ram usage:        5 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    4
 18500 ;; This function calls:
 18501 ;;		Nothing
 18502 ;; This function is called by:
 18503 ;;		_AdcConvert
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           	psect	text107
 18508  003DDA                     __ptext107:
 18509                           	opt stack 0
 18510  003DDA                     _ADC_GetConversion:
 18511                           	opt stack 25
 18512                           
 18513                           ;incstack = 0
 18514                           ;ADC_GetConversion@channel stored from wreg
 18515  003DDA  6E1C               	movwf	ADC_GetConversion@channel,c
 18516                           
 18517                           ;adc.c: 109: ADCON0bits.CHS = channel;
 18518  003DDC  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 18519  003DE0  461A               	rlncf	??_ADC_GetConversion,f,c
 18520  003DE2  461A               	rlncf	??_ADC_GetConversion,f,c
 18521  003DE4  50C2               	movf	4034,w,c	;volatile
 18522  003DE6  181A               	xorwf	??_ADC_GetConversion,w,c
 18523  003DE8  0B83               	andlw	-125
 18524  003DEA  181A               	xorwf	??_ADC_GetConversion,w,c
 18525  003DEC  6EC2               	movwf	4034,c	;volatile
 18526                           
 18527                           ;adc.c: 112: ADCON0bits.ADON = 1;
 18528  003DEE  80C2               	bsf	4034,0,c	;volatile
 18529                           
 18530                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 18531  003DF0  82C2               	bsf	4034,1,c	;volatile
 18532  003DF2                     
 18533                           ;adc.c: 119: {
 18534  003DF2  B2C2               	btfsc	4034,1,c	;volatile
 18535  003DF4  D7FE               	goto	l1154
 18536                           
 18537                           ;adc.c: 120: }
 18538                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 18539  003DF6  50C4               	movf	4036,w,c	;volatile
 18540  003DF8  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 18541  003DFA  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 18542  003DFC  50C3               	movf	4035,w,c	;volatile
 18543  003DFE  241A               	addwf	??_ADC_GetConversion,w,c
 18544  003E00  6E18               	movwf	?_ADC_GetConversion,c
 18545  003E02  0E00               	movlw	0
 18546  003E04  201B               	addwfc	??_ADC_GetConversion+1,w,c
 18547  003E06  6E19               	movwf	?_ADC_GetConversion+1,c
 18548  003E08  0012               	return	
 18549  003E0A                     __end_of_ADC_GetConversion:
 18550                           	opt stack 0
 18551                           tosu	equ	0xFFF
 18552                           tosh	equ	0xFFE
 18553                           tosl	equ	0xFFD
 18554                           pclath	equ	0xFFA
 18555                           tblptru	equ	0xFF8
 18556                           tblptrh	equ	0xFF7
 18557                           tblptrl	equ	0xFF6
 18558                           tablat	equ	0xFF5
 18559                           prodh	equ	0xFF4
 18560                           prodl	equ	0xFF3
 18561                           intcon	equ	0xFF2
 18562                           intcon2	equ	0xFF1
 18563                           postinc0	equ	0xFEE
 18564                           plusw0	equ	0xFEB
 18565                           wreg	equ	0xFE8
 18566                           indf1	equ	0xFE7
 18567                           postdec1	equ	0xFE5
 18568                           fsr1h	equ	0xFE2
 18569                           fsr1l	equ	0xFE1
 18570                           indf2	equ	0xFDF
 18571                           postinc2	equ	0xFDE
 18572                           postdec2	equ	0xFDD
 18573                           plusw2	equ	0xFDB
 18574                           fsr2h	equ	0xFDA
 18575                           fsr2l	equ	0xFD9
 18576                           status	equ	0xFD8
 18577                           
 18578 ;; *************** function _INTERRUPT_InterruptManager *****************
 18579 ;; Defined at:
 18580 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;		None
 18583 ;; Auto vars:     Size  Location     Type
 18584 ;;		None
 18585 ;; Return value:  Size  Location     Type
 18586 ;;                  1    wreg      void 
 18587 ;; Registers used:
 18588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 18589 ;; Tracked objects:
 18590 ;;		On entry : 0/0
 18591 ;;		On exit  : 0/0
 18592 ;;		Unchanged: 0/0
 18593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18594 ;;      Params:         0       0       0       0       0       0       0
 18595 ;;      Locals:         0       0       0       0       0       0       0
 18596 ;;      Temps:         18       0       0       0       0       0       0
 18597 ;;      Totals:        18       0       0       0       0       0       0
 18598 ;;Total ram usage:       18 bytes
 18599 ;; Hardware stack levels used:    1
 18600 ;; Hardware stack levels required when called:    3
 18601 ;; This function calls:
 18602 ;;		_EUSART1_Receive_ISR
 18603 ;;		_EUSART1_Transmit_ISR
 18604 ;;		_MEMORY_ISR
 18605 ;;		_PIN_MANAGER_IOC
 18606 ;;		_TMR0_ISR
 18607 ;; This function is called by:
 18608 ;;		Interrupt level 2
 18609 ;; This function uses a non-reentrant model
 18610 ;;
 18611                           
 18612                           	psect	intcode
 18613  000008                     __pintcode:
 18614                           	opt stack 0
 18615  000008                     _INTERRUPT_InterruptManager:
 18616                           	opt stack 17
 18617                           
 18618                           ;incstack = 0
 18619  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18620  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 18621  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 18622  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 18623  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 18624  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 18625  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 18626  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 18627  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 18628  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 18629  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 18630  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 18631  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 18632  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 18633  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 18634  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 18635  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 18636  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 18637  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 18638                           
 18639                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 18640  000052  B6F2               	btfsc	intcon,3,c	;volatile
 18641  000054  A0F2               	btfss	intcon,0,c	;volatile
 18642  000056  D003               	goto	i2l835
 18643                           
 18644                           ;interrupt_manager.c: 61: {
 18645                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 18646  000058  EC87  F020         	call	_PIN_MANAGER_IOC	;wreg free
 18647                           
 18648                           ;interrupt_manager.c: 63: }
 18649  00005C  D019               	goto	i2l844
 18650  00005E                     i2l835:
 18651                           
 18652                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 18653  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 18654  000060  A4F2               	btfss	intcon,2,c	;volatile
 18655  000062  D003               	goto	i2l837
 18656                           
 18657                           ;interrupt_manager.c: 65: {
 18658                           ;interrupt_manager.c: 66: TMR0_ISR();
 18659  000064  ECBC  F016         	call	_TMR0_ISR	;wreg free
 18660                           
 18661                           ;interrupt_manager.c: 67: }
 18662  000068  D013               	goto	i2l844
 18663  00006A                     i2l837:
 18664                           
 18665                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 18666  00006A  ACF2               	btfss	intcon,6,c	;volatile
 18667  00006C  D011               	goto	i2l844
 18668                           
 18669                           ;interrupt_manager.c: 69: {
 18670                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 18671  00006E  B8A0               	btfsc	4000,4,c	;volatile
 18672  000070  A8A1               	btfss	4001,4,c	;volatile
 18673  000072  D003               	goto	i2l840
 18674                           
 18675                           ;interrupt_manager.c: 71: {
 18676                           ;interrupt_manager.c: 72: MEMORY_ISR();
 18677  000074  ECDC  F020         	call	_MEMORY_ISR	;wreg free
 18678                           
 18679                           ;interrupt_manager.c: 73: }
 18680  000078  D00B               	goto	i2l844
 18681  00007A                     i2l840:
 18682                           
 18683                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 18684  00007A  B89D               	btfsc	3997,4,c	;volatile
 18685  00007C  A89E               	btfss	3998,4,c	;volatile
 18686  00007E  D003               	goto	i2l842
 18687                           
 18688                           ;interrupt_manager.c: 75: {
 18689                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 18690  000080  EC54  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 18691                           
 18692                           ;interrupt_manager.c: 77: }
 18693  000084  D005               	goto	i2l844
 18694  000086                     i2l842:
 18695                           
 18696                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 18697  000086  BA9D               	btfsc	3997,5,c	;volatile
 18698  000088  AA9E               	btfss	3998,5,c	;volatile
 18699  00008A  D002               	goto	i2l844
 18700                           
 18701                           ;interrupt_manager.c: 79: {
 18702                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 18703  00008C  EC05  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 18704  000090                     i2l844:
 18705                           
 18706                           ;interrupt_manager.c: 87: else
 18707                           ;interrupt_manager.c: 88: {
 18708                           
 18709                           ;interrupt_manager.c: 85: }
 18710                           ;interrupt_manager.c: 86: }
 18711                           
 18712                           ;interrupt_manager.c: 82: else
 18713                           ;interrupt_manager.c: 83: {
 18714  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 18715  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 18716  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 18717  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 18718  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 18719  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 18720  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 18721  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 18722  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 18723  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 18724  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 18725  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 18726  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 18727  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 18728  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 18729  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 18730  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 18731  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 18732  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18733  0000DA  0011               	retfie		f
 18734  0000DC                     __end_of_INTERRUPT_InterruptManager:
 18735                           	opt stack 0
 18736                           tosu	equ	0xFFF
 18737                           tosh	equ	0xFFE
 18738                           tosl	equ	0xFFD
 18739                           pclatu	equ	0xFFB
 18740                           pclath	equ	0xFFA
 18741                           tblptru	equ	0xFF8
 18742                           tblptrh	equ	0xFF7
 18743                           tblptrl	equ	0xFF6
 18744                           tablat	equ	0xFF5
 18745                           prodh	equ	0xFF4
 18746                           prodl	equ	0xFF3
 18747                           intcon	equ	0xFF2
 18748                           intcon2	equ	0xFF1
 18749                           postinc0	equ	0xFEE
 18750                           plusw0	equ	0xFEB
 18751                           fsr0h	equ	0xFEA
 18752                           fsr0l	equ	0xFE9
 18753                           wreg	equ	0xFE8
 18754                           indf1	equ	0xFE7
 18755                           postdec1	equ	0xFE5
 18756                           fsr1h	equ	0xFE2
 18757                           fsr1l	equ	0xFE1
 18758                           indf2	equ	0xFDF
 18759                           postinc2	equ	0xFDE
 18760                           postdec2	equ	0xFDD
 18761                           plusw2	equ	0xFDB
 18762                           fsr2h	equ	0xFDA
 18763                           fsr2l	equ	0xFD9
 18764                           status	equ	0xFD8
 18765                           
 18766 ;; *************** function _TMR0_ISR *****************
 18767 ;; Defined at:
 18768 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;		None
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;		None
 18773 ;; Return value:  Size  Location     Type
 18774 ;;                  1    wreg      void 
 18775 ;; Registers used:
 18776 ;;		wreg, status,2, status,0, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18782 ;;      Params:         0       0       0       0       0       0       0
 18783 ;;      Locals:         0       0       0       0       0       0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0
 18785 ;;      Totals:         0       0       0       0       0       0       0
 18786 ;;Total ram usage:        0 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    1
 18789 ;; This function calls:
 18790 ;;		___lwmod
 18791 ;; This function is called by:
 18792 ;;		_INTERRUPT_InterruptManager
 18793 ;; This function uses a non-reentrant model
 18794 ;;
 18795                           
 18796                           	psect	text109
 18797  002D78                     __ptext109:
 18798                           	opt stack 0
 18799  002D78                     _TMR0_ISR:
 18800                           	opt stack 18
 18801                           
 18802                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 18803                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 18804                           
 18805                           ;incstack = 0
 18806  002D78  94F2               	bcf	intcon,2,c	;volatile
 18807                           
 18808                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 18809  002D7A  5046               	movf	_timer0ReloadVal+1,w,c	;volatile
 18810  002D7C  6ED7               	movwf	4055,c	;volatile
 18811                           
 18812                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 18813  002D7E  C045  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 18814                           
 18815                           ;tmr0.c: 144: CountCallBack++;
 18816  002D82  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 18817  002D84  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 18818                           
 18819                           ;tmr0.c: 145: if ((CountCallBack % 240) == 0)
 18820  002D86  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18821  002D8A  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18822  002D8E  0E00               	movlw	0
 18823  002D90  6E04               	movwf	___lwmod@divisor+1,c
 18824  002D92  0EF0               	movlw	240
 18825  002D94  6E03               	movwf	___lwmod@divisor,c
 18826  002D96  EC16  F01D         	call	___lwmod	;wreg free
 18827  002D9A  5001               	movf	?___lwmod,w,c
 18828  002D9C  1002               	iorwf	?___lwmod+1,w,c
 18829  002D9E  A4D8               	btfss	status,2,c
 18830  002DA0  D003               	goto	i2l1108
 18831                           
 18832                           ;tmr0.c: 146: {
 18833                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 18834  002DA2  0E01               	movlw	1
 18835  002DA4  0100               	movlb	0	; () banked
 18836  002DA6  6FFD               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 18837  002DA8                     i2l1108:
 18838                           
 18839                           ;tmr0.c: 148: }
 18840                           ;tmr0.c: 149: if ((CountCallBack % 100) == 0)
 18841                           
 18842                           ; BSR set to: 0
 18843  002DA8  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18844  002DAC  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18845  002DB0  0E00               	movlw	0
 18846  002DB2  6E04               	movwf	___lwmod@divisor+1,c
 18847  002DB4  0E64               	movlw	100
 18848  002DB6  6E03               	movwf	___lwmod@divisor,c
 18849  002DB8  EC16  F01D         	call	___lwmod	;wreg free
 18850  002DBC  5001               	movf	?___lwmod,w,c
 18851  002DBE  1002               	iorwf	?___lwmod+1,w,c
 18852  002DC0  A4D8               	btfss	status,2,c
 18853  002DC2  D003               	goto	i2l1109
 18854                           
 18855                           ;tmr0.c: 150: {
 18856                           ;tmr0.c: 151: Timer0_Sampling = 1;
 18857  002DC4  0E01               	movlw	1
 18858  002DC6  0100               	movlb	0	; () banked
 18859  002DC8  6FFC               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 18860  002DCA                     i2l1109:
 18861                           
 18862                           ;tmr0.c: 152: }
 18863                           ;tmr0.c: 153: if ((CountCallBack % 200) == 0)
 18864                           
 18865                           ; BSR set to: 0
 18866  002DCA  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18867  002DCE  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18868  002DD2  0E00               	movlw	0
 18869  002DD4  6E04               	movwf	___lwmod@divisor+1,c
 18870  002DD6  0EC8               	movlw	200
 18871  002DD8  6E03               	movwf	___lwmod@divisor,c
 18872  002DDA  EC16  F01D         	call	___lwmod	;wreg free
 18873  002DDE  5001               	movf	?___lwmod,w,c
 18874  002DE0  1002               	iorwf	?___lwmod+1,w,c
 18875  002DE2  A4D8               	btfss	status,2,c
 18876  002DE4  D003               	goto	i2l1110
 18877                           
 18878                           ;tmr0.c: 154: {
 18879                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 18880  002DE6  0E01               	movlw	1
 18881  002DE8  0100               	movlb	0	; () banked
 18882  002DEA  6FFB               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 18883  002DEC                     i2l1110:
 18884                           
 18885                           ;tmr0.c: 156: }
 18886                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 18887                           
 18888                           ; BSR set to: 0
 18889  002DEC  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18890  002DF0  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18891  002DF4  0E00               	movlw	0
 18892  002DF6  6E04               	movwf	___lwmod@divisor+1,c
 18893  002DF8  0E0A               	movlw	10
 18894  002DFA  6E03               	movwf	___lwmod@divisor,c
 18895  002DFC  EC16  F01D         	call	___lwmod	;wreg free
 18896  002E00  5001               	movf	?___lwmod,w,c
 18897  002E02  1002               	iorwf	?___lwmod+1,w,c
 18898  002E04  A4D8               	btfss	status,2,c
 18899  002E06  D003               	goto	i2l1111
 18900                           
 18901                           ;tmr0.c: 158: {
 18902                           ;tmr0.c: 159: Timer0_OneSec = 1;
 18903  002E08  0E01               	movlw	1
 18904  002E0A  0100               	movlb	0	; () banked
 18905  002E0C  6FFA               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 18906  002E0E                     i2l1111:
 18907                           
 18908                           ;tmr0.c: 160: }
 18909                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 18910                           
 18911                           ; BSR set to: 0
 18912  002E0E  0EB8               	movlw	184
 18913  002E10  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 18914  002E12  0E88               	movlw	136
 18915  002E14  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 18916  002E16  A0D8               	btfss	status,0,c
 18917  002E18  0012               	return	
 18918                           
 18919                           ;tmr0.c: 163: {
 18920                           ;tmr0.c: 165: CountCallBack = 0;
 18921  002E1A  0E00               	movlw	0
 18922  002E1C  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 18923  002E1E  0E00               	movlw	0
 18924  002E20  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 18925  002E22  0012               	return	
 18926  002E24                     __end_of_TMR0_ISR:
 18927                           	opt stack 0
 18928                           tosu	equ	0xFFF
 18929                           tosh	equ	0xFFE
 18930                           tosl	equ	0xFFD
 18931                           pclatu	equ	0xFFB
 18932                           pclath	equ	0xFFA
 18933                           tblptru	equ	0xFF8
 18934                           tblptrh	equ	0xFF7
 18935                           tblptrl	equ	0xFF6
 18936                           tablat	equ	0xFF5
 18937                           prodh	equ	0xFF4
 18938                           prodl	equ	0xFF3
 18939                           intcon	equ	0xFF2
 18940                           intcon2	equ	0xFF1
 18941                           postinc0	equ	0xFEE
 18942                           plusw0	equ	0xFEB
 18943                           fsr0h	equ	0xFEA
 18944                           fsr0l	equ	0xFE9
 18945                           wreg	equ	0xFE8
 18946                           indf1	equ	0xFE7
 18947                           postdec1	equ	0xFE5
 18948                           fsr1h	equ	0xFE2
 18949                           fsr1l	equ	0xFE1
 18950                           indf2	equ	0xFDF
 18951                           postinc2	equ	0xFDE
 18952                           postdec2	equ	0xFDD
 18953                           plusw2	equ	0xFDB
 18954                           fsr2h	equ	0xFDA
 18955                           fsr2l	equ	0xFD9
 18956                           status	equ	0xFD8
 18957                           
 18958 ;; *************** function ___lwmod *****************
 18959 ;; Defined at:
 18960 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18961 ;; Parameters:    Size  Location     Type
 18962 ;;  dividend        2    0[COMRAM] unsigned int 
 18963 ;;  divisor         2    2[COMRAM] unsigned int 
 18964 ;; Auto vars:     Size  Location     Type
 18965 ;;  counter         1    4[COMRAM] unsigned char 
 18966 ;; Return value:  Size  Location     Type
 18967 ;;                  2    0[COMRAM] unsigned int 
 18968 ;; Registers used:
 18969 ;;		wreg, status,2, status,0
 18970 ;; Tracked objects:
 18971 ;;		On entry : 0/0
 18972 ;;		On exit  : 0/0
 18973 ;;		Unchanged: 0/0
 18974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18975 ;;      Params:         4       0       0       0       0       0       0
 18976 ;;      Locals:         1       0       0       0       0       0       0
 18977 ;;      Temps:          0       0       0       0       0       0       0
 18978 ;;      Totals:         5       0       0       0       0       0       0
 18979 ;;Total ram usage:        5 bytes
 18980 ;; Hardware stack levels used:    1
 18981 ;; This function calls:
 18982 ;;		Nothing
 18983 ;; This function is called by:
 18984 ;;		_TMR0_ISR
 18985 ;; This function uses a non-reentrant model
 18986 ;;
 18987                           
 18988                           	psect	text110
 18989  003A2C                     __ptext110:
 18990                           	opt stack 0
 18991  003A2C                     ___lwmod:
 18992                           	opt stack 18
 18993                           
 18994                           ;incstack = 0
 18995  003A2C  5003               	movf	___lwmod@divisor,w,c
 18996  003A2E  1004               	iorwf	___lwmod@divisor+1,w,c
 18997  003A30  B4D8               	btfsc	status,2,c
 18998  003A32  D018               	goto	i2l2004
 18999  003A34  0E01               	movlw	1
 19000  003A36  6E05               	movwf	___lwmod@counter,c
 19001  003A38  D004               	goto	i2l1999
 19002  003A3A  90D8               	bcf	status,0,c
 19003  003A3C  3603               	rlcf	___lwmod@divisor,f,c
 19004  003A3E  3604               	rlcf	___lwmod@divisor+1,f,c
 19005  003A40  2A05               	incf	___lwmod@counter,f,c
 19006  003A42                     i2l1999:
 19007  003A42  AE04               	btfss	___lwmod@divisor+1,7,c
 19008  003A44  D7FA               	goto	i2l2000
 19009  003A46                     i2u564_40:
 19010  003A46  5003               	movf	___lwmod@divisor,w,c
 19011  003A48  5C01               	subwf	___lwmod@dividend,w,c
 19012  003A4A  5004               	movf	___lwmod@divisor+1,w,c
 19013  003A4C  5802               	subwfb	___lwmod@dividend+1,w,c
 19014  003A4E  A0D8               	btfss	status,0,c
 19015  003A50  D004               	goto	i2l2003
 19016  003A52  5003               	movf	___lwmod@divisor,w,c
 19017  003A54  5E01               	subwf	___lwmod@dividend,f,c
 19018  003A56  5004               	movf	___lwmod@divisor+1,w,c
 19019  003A58  5A02               	subwfb	___lwmod@dividend+1,f,c
 19020  003A5A                     i2l2003:
 19021  003A5A  90D8               	bcf	status,0,c
 19022  003A5C  3204               	rrcf	___lwmod@divisor+1,f,c
 19023  003A5E  3203               	rrcf	___lwmod@divisor,f,c
 19024  003A60  2E05               	decfsz	___lwmod@counter,f,c
 19025  003A62  D7F1               	goto	i2u564_40
 19026  003A64                     i2l2004:
 19027  003A64  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19028  003A68  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19029  003A6C  0012               	return		;funcret
 19030  003A6E                     __end_of___lwmod:
 19031                           	opt stack 0
 19032                           tosu	equ	0xFFF
 19033                           tosh	equ	0xFFE
 19034                           tosl	equ	0xFFD
 19035                           pclatu	equ	0xFFB
 19036                           pclath	equ	0xFFA
 19037                           tblptru	equ	0xFF8
 19038                           tblptrh	equ	0xFF7
 19039                           tblptrl	equ	0xFF6
 19040                           tablat	equ	0xFF5
 19041                           prodh	equ	0xFF4
 19042                           prodl	equ	0xFF3
 19043                           intcon	equ	0xFF2
 19044                           intcon2	equ	0xFF1
 19045                           postinc0	equ	0xFEE
 19046                           plusw0	equ	0xFEB
 19047                           fsr0h	equ	0xFEA
 19048                           fsr0l	equ	0xFE9
 19049                           wreg	equ	0xFE8
 19050                           indf1	equ	0xFE7
 19051                           postdec1	equ	0xFE5
 19052                           fsr1h	equ	0xFE2
 19053                           fsr1l	equ	0xFE1
 19054                           indf2	equ	0xFDF
 19055                           postinc2	equ	0xFDE
 19056                           postdec2	equ	0xFDD
 19057                           plusw2	equ	0xFDB
 19058                           fsr2h	equ	0xFDA
 19059                           fsr2l	equ	0xFD9
 19060                           status	equ	0xFD8
 19061                           
 19062 ;; *************** function _PIN_MANAGER_IOC *****************
 19063 ;; Defined at:
 19064 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;		None
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;		None
 19069 ;; Return value:  Size  Location     Type
 19070 ;;                  1    wreg      void 
 19071 ;; Registers used:
 19072 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19078 ;;      Params:         0       0       0       0       0       0       0
 19079 ;;      Locals:         0       0       0       0       0       0       0
 19080 ;;      Temps:          0       0       0       0       0       0       0
 19081 ;;      Totals:         0       0       0       0       0       0       0
 19082 ;;Total ram usage:        0 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; Hardware stack levels required when called:    2
 19085 ;; This function calls:
 19086 ;;		_IOCB4_ISR
 19087 ;;		_IOCB5_ISR
 19088 ;; This function is called by:
 19089 ;;		_INTERRUPT_InterruptManager
 19090 ;; This function uses a non-reentrant model
 19091 ;;
 19092                           
 19093                           	psect	text111
 19094  00410E                     __ptext111:
 19095                           	opt stack 0
 19096  00410E                     _PIN_MANAGER_IOC:
 19097                           	opt stack 17
 19098                           
 19099                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19100                           
 19101                           ;incstack = 0
 19102  00410E  B862               	btfsc	3938,4,c	;volatile
 19103                           
 19104                           ;pin_manager.c: 112: {
 19105                           ;pin_manager.c: 113: IOCB4_ISR();
 19106  004110  ECC7  F01F         	call	_IOCB4_ISR	;wreg free
 19107                           
 19108                           ;pin_manager.c: 114: }
 19109                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19110  004114  BA62               	btfsc	3938,5,c	;volatile
 19111                           
 19112                           ;pin_manager.c: 117: {
 19113                           ;pin_manager.c: 118: IOCB5_ISR();
 19114  004116  ECB6  F01F         	call	_IOCB5_ISR	;wreg free
 19115                           
 19116                           ;pin_manager.c: 119: }
 19117                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19118  00411A  90F2               	bcf	intcon,0,c	;volatile
 19119  00411C  0012               	return		;funcret
 19120  00411E                     __end_of_PIN_MANAGER_IOC:
 19121                           	opt stack 0
 19122                           tosu	equ	0xFFF
 19123                           tosh	equ	0xFFE
 19124                           tosl	equ	0xFFD
 19125                           pclatu	equ	0xFFB
 19126                           pclath	equ	0xFFA
 19127                           tblptru	equ	0xFF8
 19128                           tblptrh	equ	0xFF7
 19129                           tblptrl	equ	0xFF6
 19130                           tablat	equ	0xFF5
 19131                           prodh	equ	0xFF4
 19132                           prodl	equ	0xFF3
 19133                           intcon	equ	0xFF2
 19134                           intcon2	equ	0xFF1
 19135                           postinc0	equ	0xFEE
 19136                           plusw0	equ	0xFEB
 19137                           fsr0h	equ	0xFEA
 19138                           fsr0l	equ	0xFE9
 19139                           wreg	equ	0xFE8
 19140                           indf1	equ	0xFE7
 19141                           postdec1	equ	0xFE5
 19142                           fsr1h	equ	0xFE2
 19143                           fsr1l	equ	0xFE1
 19144                           indf2	equ	0xFDF
 19145                           postinc2	equ	0xFDE
 19146                           postdec2	equ	0xFDD
 19147                           plusw2	equ	0xFDB
 19148                           fsr2h	equ	0xFDA
 19149                           fsr2l	equ	0xFD9
 19150                           status	equ	0xFD8
 19151                           
 19152 ;; *************** function _IOCB5_ISR *****************
 19153 ;; Defined at:
 19154 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19155 ;; Parameters:    Size  Location     Type
 19156 ;;		None
 19157 ;; Auto vars:     Size  Location     Type
 19158 ;;		None
 19159 ;; Return value:  Size  Location     Type
 19160 ;;                  1    wreg      void 
 19161 ;; Registers used:
 19162 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19163 ;; Tracked objects:
 19164 ;;		On entry : 0/0
 19165 ;;		On exit  : 0/0
 19166 ;;		Unchanged: 0/0
 19167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19168 ;;      Params:         0       0       0       0       0       0       0
 19169 ;;      Locals:         0       0       0       0       0       0       0
 19170 ;;      Temps:          0       0       0       0       0       0       0
 19171 ;;      Totals:         0       0       0       0       0       0       0
 19172 ;;Total ram usage:        0 bytes
 19173 ;; Hardware stack levels used:    1
 19174 ;; Hardware stack levels required when called:    1
 19175 ;; This function calls:
 19176 ;;		Absolute function
 19177 ;;		_IOCB5_DefaultInterruptHandler
 19178 ;; This function is called by:
 19179 ;;		_PIN_MANAGER_IOC
 19180 ;; This function uses a non-reentrant model
 19181 ;;
 19182                           
 19183                           	psect	text112
 19184  003F6C                     __ptext112:
 19185                           	opt stack 0
 19186  003F6C                     _IOCB5_ISR:
 19187                           	opt stack 17
 19188                           
 19189                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19190                           
 19191                           ;incstack = 0
 19192  003F6C  0101               	movlb	1	; () banked
 19193  003F6E  51DF               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19194  003F70  11E0               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19195  003F72  B4D8               	btfsc	status,2,c
 19196  003F74  0012               	return	
 19197                           
 19198                           ; BSR set to: 1
 19199                           ;pin_manager.c: 164: {
 19200                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19201  003F76  D801               	call	i2u562_48
 19202  003F78  0012               	return	
 19203  003F7A                     i2u562_48:
 19204  003F7A  0005               	push	
 19205  003F7C  6EFA               	movwf	pclath,c
 19206  003F7E  51DF               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19207  003F80  6EFD               	movwf	tosl,c
 19208  003F82  51E0               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19209  003F84  6EFE               	movwf	tosh,c
 19210  003F86  50F8               	movf	tblptru,w,c
 19211  003F88  6EFF               	movwf	tosu,c
 19212  003F8A  50FA               	movf	pclath,w,c
 19213  003F8C  0012               	return		;indir
 19214  003F8E                     __end_of_IOCB5_ISR:
 19215                           	opt stack 0
 19216                           tosu	equ	0xFFF
 19217                           tosh	equ	0xFFE
 19218                           tosl	equ	0xFFD
 19219                           pclatu	equ	0xFFB
 19220                           pclath	equ	0xFFA
 19221                           tblptru	equ	0xFF8
 19222                           tblptrh	equ	0xFF7
 19223                           tblptrl	equ	0xFF6
 19224                           tablat	equ	0xFF5
 19225                           prodh	equ	0xFF4
 19226                           prodl	equ	0xFF3
 19227                           intcon	equ	0xFF2
 19228                           intcon2	equ	0xFF1
 19229                           postinc0	equ	0xFEE
 19230                           plusw0	equ	0xFEB
 19231                           fsr0h	equ	0xFEA
 19232                           fsr0l	equ	0xFE9
 19233                           wreg	equ	0xFE8
 19234                           indf1	equ	0xFE7
 19235                           postdec1	equ	0xFE5
 19236                           fsr1h	equ	0xFE2
 19237                           fsr1l	equ	0xFE1
 19238                           indf2	equ	0xFDF
 19239                           postinc2	equ	0xFDE
 19240                           postdec2	equ	0xFDD
 19241                           plusw2	equ	0xFDB
 19242                           fsr2h	equ	0xFDA
 19243                           fsr2l	equ	0xFD9
 19244                           status	equ	0xFD8
 19245                           
 19246 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19247 ;; Defined at:
 19248 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19249 ;; Parameters:    Size  Location     Type
 19250 ;;		None
 19251 ;; Auto vars:     Size  Location     Type
 19252 ;;		None
 19253 ;; Return value:  Size  Location     Type
 19254 ;;                  1    wreg      void 
 19255 ;; Registers used:
 19256 ;;		None
 19257 ;; Tracked objects:
 19258 ;;		On entry : 0/0
 19259 ;;		On exit  : 0/0
 19260 ;;		Unchanged: 0/0
 19261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19262 ;;      Params:         0       0       0       0       0       0       0
 19263 ;;      Locals:         0       0       0       0       0       0       0
 19264 ;;      Temps:          0       0       0       0       0       0       0
 19265 ;;      Totals:         0       0       0       0       0       0       0
 19266 ;;Total ram usage:        0 bytes
 19267 ;; Hardware stack levels used:    1
 19268 ;; This function calls:
 19269 ;;		Nothing
 19270 ;; This function is called by:
 19271 ;;		_PIN_MANAGER_Initialize
 19272 ;;		_IOCB5_ISR
 19273 ;; This function uses a non-reentrant model
 19274 ;;
 19275                           
 19276                           	psect	text113
 19277  0041BE                     __ptext113:
 19278                           	opt stack 0
 19279  0041BE                     _IOCB5_DefaultInterruptHandler:
 19280                           	opt stack 17
 19281                           
 19282                           ;incstack = 0
 19283  0041BE  0012               	return		;funcret
 19284  0041C0                     __end_of_IOCB5_DefaultInterruptHandler:
 19285                           	opt stack 0
 19286                           tosu	equ	0xFFF
 19287                           tosh	equ	0xFFE
 19288                           tosl	equ	0xFFD
 19289                           pclatu	equ	0xFFB
 19290                           pclath	equ	0xFFA
 19291                           tblptru	equ	0xFF8
 19292                           tblptrh	equ	0xFF7
 19293                           tblptrl	equ	0xFF6
 19294                           tablat	equ	0xFF5
 19295                           prodh	equ	0xFF4
 19296                           prodl	equ	0xFF3
 19297                           intcon	equ	0xFF2
 19298                           intcon2	equ	0xFF1
 19299                           postinc0	equ	0xFEE
 19300                           plusw0	equ	0xFEB
 19301                           fsr0h	equ	0xFEA
 19302                           fsr0l	equ	0xFE9
 19303                           wreg	equ	0xFE8
 19304                           indf1	equ	0xFE7
 19305                           postdec1	equ	0xFE5
 19306                           fsr1h	equ	0xFE2
 19307                           fsr1l	equ	0xFE1
 19308                           indf2	equ	0xFDF
 19309                           postinc2	equ	0xFDE
 19310                           postdec2	equ	0xFDD
 19311                           plusw2	equ	0xFDB
 19312                           fsr2h	equ	0xFDA
 19313                           fsr2l	equ	0xFD9
 19314                           status	equ	0xFD8
 19315                           
 19316 ;; *************** function _IOCB4_ISR *****************
 19317 ;; Defined at:
 19318 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19319 ;; Parameters:    Size  Location     Type
 19320 ;;		None
 19321 ;; Auto vars:     Size  Location     Type
 19322 ;;		None
 19323 ;; Return value:  Size  Location     Type
 19324 ;;                  1    wreg      void 
 19325 ;; Registers used:
 19326 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19327 ;; Tracked objects:
 19328 ;;		On entry : 0/0
 19329 ;;		On exit  : 0/0
 19330 ;;		Unchanged: 0/0
 19331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19332 ;;      Params:         0       0       0       0       0       0       0
 19333 ;;      Locals:         0       0       0       0       0       0       0
 19334 ;;      Temps:          0       0       0       0       0       0       0
 19335 ;;      Totals:         0       0       0       0       0       0       0
 19336 ;;Total ram usage:        0 bytes
 19337 ;; Hardware stack levels used:    1
 19338 ;; Hardware stack levels required when called:    1
 19339 ;; This function calls:
 19340 ;;		Absolute function
 19341 ;;		_IOCB4_DefaultInterruptHandler
 19342 ;; This function is called by:
 19343 ;;		_PIN_MANAGER_IOC
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text114
 19348  003F8E                     __ptext114:
 19349                           	opt stack 0
 19350  003F8E                     _IOCB4_ISR:
 19351                           	opt stack 17
 19352                           
 19353                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19354                           
 19355                           ;incstack = 0
 19356  003F8E  0101               	movlb	1	; () banked
 19357  003F90  51E1               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19358  003F92  11E2               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19359  003F94  B4D8               	btfsc	status,2,c
 19360  003F96  0012               	return	
 19361                           
 19362                           ; BSR set to: 1
 19363                           ;pin_manager.c: 135: {
 19364                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19365  003F98  D801               	call	i2u560_48
 19366  003F9A  0012               	return	
 19367  003F9C                     i2u560_48:
 19368  003F9C  0005               	push	
 19369  003F9E  6EFA               	movwf	pclath,c
 19370  003FA0  51E1               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19371  003FA2  6EFD               	movwf	tosl,c
 19372  003FA4  51E2               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19373  003FA6  6EFE               	movwf	tosh,c
 19374  003FA8  50F8               	movf	tblptru,w,c
 19375  003FAA  6EFF               	movwf	tosu,c
 19376  003FAC  50FA               	movf	pclath,w,c
 19377  003FAE  0012               	return		;indir
 19378  003FB0                     __end_of_IOCB4_ISR:
 19379                           	opt stack 0
 19380                           tosu	equ	0xFFF
 19381                           tosh	equ	0xFFE
 19382                           tosl	equ	0xFFD
 19383                           pclatu	equ	0xFFB
 19384                           pclath	equ	0xFFA
 19385                           tblptru	equ	0xFF8
 19386                           tblptrh	equ	0xFF7
 19387                           tblptrl	equ	0xFF6
 19388                           tablat	equ	0xFF5
 19389                           prodh	equ	0xFF4
 19390                           prodl	equ	0xFF3
 19391                           intcon	equ	0xFF2
 19392                           intcon2	equ	0xFF1
 19393                           postinc0	equ	0xFEE
 19394                           plusw0	equ	0xFEB
 19395                           fsr0h	equ	0xFEA
 19396                           fsr0l	equ	0xFE9
 19397                           wreg	equ	0xFE8
 19398                           indf1	equ	0xFE7
 19399                           postdec1	equ	0xFE5
 19400                           fsr1h	equ	0xFE2
 19401                           fsr1l	equ	0xFE1
 19402                           indf2	equ	0xFDF
 19403                           postinc2	equ	0xFDE
 19404                           postdec2	equ	0xFDD
 19405                           plusw2	equ	0xFDB
 19406                           fsr2h	equ	0xFDA
 19407                           fsr2l	equ	0xFD9
 19408                           status	equ	0xFD8
 19409                           
 19410 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19411 ;; Defined at:
 19412 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19413 ;; Parameters:    Size  Location     Type
 19414 ;;		None
 19415 ;; Auto vars:     Size  Location     Type
 19416 ;;		None
 19417 ;; Return value:  Size  Location     Type
 19418 ;;                  1    wreg      void 
 19419 ;; Registers used:
 19420 ;;		None
 19421 ;; Tracked objects:
 19422 ;;		On entry : 0/0
 19423 ;;		On exit  : 0/0
 19424 ;;		Unchanged: 0/0
 19425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19426 ;;      Params:         0       0       0       0       0       0       0
 19427 ;;      Locals:         0       0       0       0       0       0       0
 19428 ;;      Temps:          0       0       0       0       0       0       0
 19429 ;;      Totals:         0       0       0       0       0       0       0
 19430 ;;Total ram usage:        0 bytes
 19431 ;; Hardware stack levels used:    1
 19432 ;; This function calls:
 19433 ;;		Nothing
 19434 ;; This function is called by:
 19435 ;;		_PIN_MANAGER_Initialize
 19436 ;;		_IOCB4_ISR
 19437 ;; This function uses a non-reentrant model
 19438 ;;
 19439                           
 19440                           	psect	text115
 19441  0041C0                     __ptext115:
 19442                           	opt stack 0
 19443  0041C0                     _IOCB4_DefaultInterruptHandler:
 19444                           	opt stack 17
 19445                           
 19446                           ;incstack = 0
 19447  0041C0  0012               	return		;funcret
 19448  0041C2                     __end_of_IOCB4_DefaultInterruptHandler:
 19449                           	opt stack 0
 19450                           tosu	equ	0xFFF
 19451                           tosh	equ	0xFFE
 19452                           tosl	equ	0xFFD
 19453                           pclatu	equ	0xFFB
 19454                           pclath	equ	0xFFA
 19455                           tblptru	equ	0xFF8
 19456                           tblptrh	equ	0xFF7
 19457                           tblptrl	equ	0xFF6
 19458                           tablat	equ	0xFF5
 19459                           prodh	equ	0xFF4
 19460                           prodl	equ	0xFF3
 19461                           intcon	equ	0xFF2
 19462                           intcon2	equ	0xFF1
 19463                           postinc0	equ	0xFEE
 19464                           plusw0	equ	0xFEB
 19465                           fsr0h	equ	0xFEA
 19466                           fsr0l	equ	0xFE9
 19467                           wreg	equ	0xFE8
 19468                           indf1	equ	0xFE7
 19469                           postdec1	equ	0xFE5
 19470                           fsr1h	equ	0xFE2
 19471                           fsr1l	equ	0xFE1
 19472                           indf2	equ	0xFDF
 19473                           postinc2	equ	0xFDE
 19474                           postdec2	equ	0xFDD
 19475                           plusw2	equ	0xFDB
 19476                           fsr2h	equ	0xFDA
 19477                           fsr2l	equ	0xFD9
 19478                           status	equ	0xFD8
 19479                           
 19480 ;; *************** function _MEMORY_ISR *****************
 19481 ;; Defined at:
 19482 ;;		line 206 in file "mcc_generated_files/memory.c"
 19483 ;; Parameters:    Size  Location     Type
 19484 ;;		None
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;		None
 19487 ;; Return value:  Size  Location     Type
 19488 ;;                  1    wreg      void 
 19489 ;; Registers used:
 19490 ;;		None
 19491 ;; Tracked objects:
 19492 ;;		On entry : 0/0
 19493 ;;		On exit  : 0/0
 19494 ;;		Unchanged: 0/0
 19495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19496 ;;      Params:         0       0       0       0       0       0       0
 19497 ;;      Locals:         0       0       0       0       0       0       0
 19498 ;;      Temps:          0       0       0       0       0       0       0
 19499 ;;      Totals:         0       0       0       0       0       0       0
 19500 ;;Total ram usage:        0 bytes
 19501 ;; Hardware stack levels used:    1
 19502 ;; This function calls:
 19503 ;;		Nothing
 19504 ;; This function is called by:
 19505 ;;		_INTERRUPT_InterruptManager
 19506 ;; This function uses a non-reentrant model
 19507 ;;
 19508                           
 19509                           	psect	text116
 19510  0041B8                     __ptext116:
 19511                           	opt stack 0
 19512  0041B8                     _MEMORY_ISR:
 19513                           	opt stack 19
 19514                           
 19515                           ;memory.c: 209: PIR2bits.EEIF = 0;
 19516                           
 19517                           ;incstack = 0
 19518  0041B8  98A1               	bcf	4001,4,c	;volatile
 19519  0041BA  0012               	return		;funcret
 19520  0041BC                     __end_of_MEMORY_ISR:
 19521                           	opt stack 0
 19522                           tosu	equ	0xFFF
 19523                           tosh	equ	0xFFE
 19524                           tosl	equ	0xFFD
 19525                           pclatu	equ	0xFFB
 19526                           pclath	equ	0xFFA
 19527                           tblptru	equ	0xFF8
 19528                           tblptrh	equ	0xFF7
 19529                           tblptrl	equ	0xFF6
 19530                           tablat	equ	0xFF5
 19531                           prodh	equ	0xFF4
 19532                           prodl	equ	0xFF3
 19533                           intcon	equ	0xFF2
 19534                           intcon2	equ	0xFF1
 19535                           postinc0	equ	0xFEE
 19536                           plusw0	equ	0xFEB
 19537                           fsr0h	equ	0xFEA
 19538                           fsr0l	equ	0xFE9
 19539                           wreg	equ	0xFE8
 19540                           indf1	equ	0xFE7
 19541                           postdec1	equ	0xFE5
 19542                           fsr1h	equ	0xFE2
 19543                           fsr1l	equ	0xFE1
 19544                           indf2	equ	0xFDF
 19545                           postinc2	equ	0xFDE
 19546                           postdec2	equ	0xFDD
 19547                           plusw2	equ	0xFDB
 19548                           fsr2h	equ	0xFDA
 19549                           fsr2l	equ	0xFD9
 19550                           status	equ	0xFD8
 19551                           
 19552 ;; *************** function _EUSART1_Transmit_ISR *****************
 19553 ;; Defined at:
 19554 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 19555 ;; Parameters:    Size  Location     Type
 19556 ;;		None
 19557 ;; Auto vars:     Size  Location     Type
 19558 ;;		None
 19559 ;; Return value:  Size  Location     Type
 19560 ;;                  1    wreg      void 
 19561 ;; Registers used:
 19562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19563 ;; Tracked objects:
 19564 ;;		On entry : 0/0
 19565 ;;		On exit  : 0/0
 19566 ;;		Unchanged: 0/0
 19567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19568 ;;      Params:         0       0       0       0       0       0       0
 19569 ;;      Locals:         0       0       0       0       0       0       0
 19570 ;;      Temps:          0       0       0       0       0       0       0
 19571 ;;      Totals:         0       0       0       0       0       0       0
 19572 ;;Total ram usage:        0 bytes
 19573 ;; Hardware stack levels used:    1
 19574 ;; This function calls:
 19575 ;;		Nothing
 19576 ;; This function is called by:
 19577 ;;		_INTERRUPT_InterruptManager
 19578 ;; This function uses a non-reentrant model
 19579 ;;
 19580                           
 19581                           	psect	text117
 19582  003CA8                     __ptext117:
 19583                           	opt stack 0
 19584  003CA8                     _EUSART1_Transmit_ISR:
 19585                           	opt stack 19
 19586                           
 19587                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 19588                           
 19589                           ;incstack = 0
 19590  003CA8  0E46               	movlw	70
 19591  003CAA  6047               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 19592  003CAC  D012               	goto	i2l906
 19593                           
 19594                           ;eusart1.c: 186: {
 19595                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 19596  003CAE  5035               	movf	_eusart1TxTail,w,c	;volatile
 19597  003CB0  0D01               	mullw	1
 19598  003CB2  0E59               	movlw	low _eusart1TxBuffer
 19599  003CB4  24F3               	addwf	prodl,w,c
 19600  003CB6  6ED9               	movwf	fsr2l,c
 19601  003CB8  0E02               	movlw	high _eusart1TxBuffer
 19602  003CBA  20F4               	addwfc	prodh,w,c
 19603  003CBC  6EDA               	movwf	fsr2h,c
 19604  003CBE  50DF               	movf	indf2,w,c
 19605  003CC0  6EAD               	movwf	4013,c	;volatile
 19606  003CC2  2A35               	incf	_eusart1TxTail,f,c	;volatile
 19607                           
 19608                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 19609  003CC4  0E45               	movlw	69
 19610  003CC6  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 19611  003CC8  D002               	goto	i2l907
 19612                           
 19613                           ;eusart1.c: 189: {
 19614                           ;eusart1.c: 190: eusart1TxTail = 0;
 19615  003CCA  0E00               	movlw	0
 19616  003CCC  6E35               	movwf	_eusart1TxTail,c	;volatile
 19617  003CCE                     i2l907:
 19618                           
 19619                           ;eusart1.c: 191: }
 19620                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 19621  003CCE  2A47               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 19622                           
 19623                           ;eusart1.c: 193: }
 19624  003CD0  0012               	return	
 19625  003CD2                     i2l906:
 19626                           
 19627                           ;eusart1.c: 194: else
 19628                           ;eusart1.c: 195: {
 19629                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 19630  003CD2  989D               	bcf	3997,4,c	;volatile
 19631                           
 19632                           ;eusart1.c: 197: eusart1TxTail = 0;
 19633  003CD4  0E00               	movlw	0
 19634  003CD6  6E35               	movwf	_eusart1TxTail,c	;volatile
 19635                           
 19636                           ;eusart1.c: 198: eusart1TxHead = 0;
 19637  003CD8  0E00               	movlw	0
 19638  003CDA  6E36               	movwf	_eusart1TxHead,c	;volatile
 19639  003CDC  0012               	return	
 19640  003CDE                     __end_of_EUSART1_Transmit_ISR:
 19641                           	opt stack 0
 19642                           tosu	equ	0xFFF
 19643                           tosh	equ	0xFFE
 19644                           tosl	equ	0xFFD
 19645                           pclatu	equ	0xFFB
 19646                           pclath	equ	0xFFA
 19647                           tblptru	equ	0xFF8
 19648                           tblptrh	equ	0xFF7
 19649                           tblptrl	equ	0xFF6
 19650                           tablat	equ	0xFF5
 19651                           prodh	equ	0xFF4
 19652                           prodl	equ	0xFF3
 19653                           intcon	equ	0xFF2
 19654                           intcon2	equ	0xFF1
 19655                           postinc0	equ	0xFEE
 19656                           plusw0	equ	0xFEB
 19657                           fsr0h	equ	0xFEA
 19658                           fsr0l	equ	0xFE9
 19659                           wreg	equ	0xFE8
 19660                           indf1	equ	0xFE7
 19661                           postdec1	equ	0xFE5
 19662                           fsr1h	equ	0xFE2
 19663                           fsr1l	equ	0xFE1
 19664                           indf2	equ	0xFDF
 19665                           postinc2	equ	0xFDE
 19666                           postdec2	equ	0xFDD
 19667                           plusw2	equ	0xFDB
 19668                           fsr2h	equ	0xFDA
 19669                           fsr2l	equ	0xFD9
 19670                           status	equ	0xFD8
 19671                           
 19672 ;; *************** function _EUSART1_Receive_ISR *****************
 19673 ;; Defined at:
 19674 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 19675 ;; Parameters:    Size  Location     Type
 19676 ;;		None
 19677 ;; Auto vars:     Size  Location     Type
 19678 ;;		None
 19679 ;; Return value:  Size  Location     Type
 19680 ;;                  1    wreg      void 
 19681 ;; Registers used:
 19682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19683 ;; Tracked objects:
 19684 ;;		On entry : 0/0
 19685 ;;		On exit  : 0/0
 19686 ;;		Unchanged: 0/0
 19687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19688 ;;      Params:         0       0       0       0       0       0       0
 19689 ;;      Locals:         0       0       0       0       0       0       0
 19690 ;;      Temps:          0       0       0       0       0       0       0
 19691 ;;      Totals:         0       0       0       0       0       0       0
 19692 ;;Total ram usage:        0 bytes
 19693 ;; Hardware stack levels used:    1
 19694 ;; This function calls:
 19695 ;;		Nothing
 19696 ;; This function is called by:
 19697 ;;		_INTERRUPT_InterruptManager
 19698 ;; This function uses a non-reentrant model
 19699 ;;
 19700                           
 19701                           	psect	text118
 19702  003E0A                     __ptext118:
 19703                           	opt stack 0
 19704  003E0A                     _EUSART1_Receive_ISR:
 19705                           	opt stack 19
 19706                           
 19707                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 19708                           
 19709                           ;incstack = 0
 19710  003E0A  A2AB               	btfss	4011,1,c	;volatile
 19711  003E0C  D002               	goto	i2l912
 19712                           
 19713                           ;eusart1.c: 206: {
 19714                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 19715  003E0E  98AB               	bcf	4011,4,c	;volatile
 19716                           
 19717                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 19718  003E10  88AB               	bsf	4011,4,c	;volatile
 19719  003E12                     i2l912:
 19720                           
 19721                           ;eusart1.c: 210: }
 19722                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 19723  003E12  5034               	movf	_eusart1RxHead,w,c	;volatile
 19724  003E14  0D01               	mullw	1
 19725  003E16  0E00               	movlw	low _eusart1RxBuffer
 19726  003E18  24F3               	addwf	prodl,w,c
 19727  003E1A  6ED9               	movwf	fsr2l,c
 19728  003E1C  0E01               	movlw	high _eusart1RxBuffer
 19729  003E1E  20F4               	addwfc	prodh,w,c
 19730  003E20  6EDA               	movwf	fsr2h,c
 19731  003E22  CFAE FFDF          	movff	4014,indf2	;volatile
 19732  003E26  2A34               	incf	_eusart1RxHead,f,c	;volatile
 19733                           
 19734                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 19735  003E28  0E27               	movlw	39
 19736  003E2A  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 19737  003E2C  D002               	goto	i2l913
 19738                           
 19739                           ;eusart1.c: 217: {
 19740                           ;eusart1.c: 218: eusart1RxHead = 0;
 19741  003E2E  0E00               	movlw	0
 19742  003E30  6E34               	movwf	_eusart1RxHead,c	;volatile
 19743  003E32                     i2l913:
 19744                           
 19745                           ;eusart1.c: 219: }
 19746                           ;eusart1.c: 220: eusart1RxCount++;
 19747  003E32  0100               	movlb	0	; () banked
 19748  003E34  2BF8               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 19749                           
 19750                           ; BSR set to: 0
 19751  003E36  0012               	return		;funcret
 19752  003E38                     __end_of_EUSART1_Receive_ISR:
 19753                           	opt stack 0
 19754                           tosu	equ	0xFFF
 19755                           tosh	equ	0xFFE
 19756                           tosl	equ	0xFFD
 19757                           pclatu	equ	0xFFB
 19758                           pclath	equ	0xFFA
 19759                           tblptru	equ	0xFF8
 19760                           tblptrh	equ	0xFF7
 19761                           tblptrl	equ	0xFF6
 19762                           tablat	equ	0xFF5
 19763                           prodh	equ	0xFF4
 19764                           prodl	equ	0xFF3
 19765                           intcon	equ	0xFF2
 19766                           intcon2	equ	0xFF1
 19767                           postinc0	equ	0xFEE
 19768                           plusw0	equ	0xFEB
 19769                           fsr0h	equ	0xFEA
 19770                           fsr0l	equ	0xFE9
 19771                           wreg	equ	0xFE8
 19772                           indf1	equ	0xFE7
 19773                           postdec1	equ	0xFE5
 19774                           fsr1h	equ	0xFE2
 19775                           fsr1l	equ	0xFE1
 19776                           indf2	equ	0xFDF
 19777                           postinc2	equ	0xFDE
 19778                           postdec2	equ	0xFDD
 19779                           plusw2	equ	0xFDB
 19780                           fsr2h	equ	0xFDA
 19781                           fsr2l	equ	0xFD9
 19782                           status	equ	0xFD8
 19783                           tosu	equ	0xFFF
 19784                           tosh	equ	0xFFE
 19785                           tosl	equ	0xFFD
 19786                           pclatu	equ	0xFFB
 19787                           pclath	equ	0xFFA
 19788                           tblptru	equ	0xFF8
 19789                           tblptrh	equ	0xFF7
 19790                           tblptrl	equ	0xFF6
 19791                           tablat	equ	0xFF5
 19792                           prodh	equ	0xFF4
 19793                           prodl	equ	0xFF3
 19794                           intcon	equ	0xFF2
 19795                           intcon2	equ	0xFF1
 19796                           postinc0	equ	0xFEE
 19797                           plusw0	equ	0xFEB
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           indf1	equ	0xFE7
 19802                           postdec1	equ	0xFE5
 19803                           fsr1h	equ	0xFE2
 19804                           fsr1l	equ	0xFE1
 19805                           indf2	equ	0xFDF
 19806                           postinc2	equ	0xFDE
 19807                           postdec2	equ	0xFDD
 19808                           plusw2	equ	0xFDB
 19809                           fsr2h	equ	0xFDA
 19810                           fsr2l	equ	0xFD9
 19811                           status	equ	0xFD8
 19812                           
 19813                           	psect	text119
 19814  000000                     __ptext119:
 19815                           	opt stack 0
 19816                           tosu	equ	0xFFF
 19817                           tosh	equ	0xFFE
 19818                           tosl	equ	0xFFD
 19819                           pclatu	equ	0xFFB
 19820                           pclath	equ	0xFFA
 19821                           tblptru	equ	0xFF8
 19822                           tblptrh	equ	0xFF7
 19823                           tblptrl	equ	0xFF6
 19824                           tablat	equ	0xFF5
 19825                           prodh	equ	0xFF4
 19826                           prodl	equ	0xFF3
 19827                           intcon	equ	0xFF2
 19828                           intcon2	equ	0xFF1
 19829                           postinc0	equ	0xFEE
 19830                           plusw0	equ	0xFEB
 19831                           fsr0h	equ	0xFEA
 19832                           fsr0l	equ	0xFE9
 19833                           wreg	equ	0xFE8
 19834                           indf1	equ	0xFE7
 19835                           postdec1	equ	0xFE5
 19836                           fsr1h	equ	0xFE2
 19837                           fsr1l	equ	0xFE1
 19838                           indf2	equ	0xFDF
 19839                           postinc2	equ	0xFDE
 19840                           postdec2	equ	0xFDD
 19841                           plusw2	equ	0xFDB
 19842                           fsr2h	equ	0xFDA
 19843                           fsr2l	equ	0xFD9
 19844                           status	equ	0xFD8
 19845                           
 19846                           	psect	rparam
 19847  0000                     tosu	equ	0xFFF
 19848                           tosh	equ	0xFFE
 19849                           tosl	equ	0xFFD
 19850                           pclatu	equ	0xFFB
 19851                           pclath	equ	0xFFA
 19852                           tblptru	equ	0xFF8
 19853                           tblptrh	equ	0xFF7
 19854                           tblptrl	equ	0xFF6
 19855                           tablat	equ	0xFF5
 19856                           prodh	equ	0xFF4
 19857                           prodl	equ	0xFF3
 19858                           intcon	equ	0xFF2
 19859                           intcon2	equ	0xFF1
 19860                           postinc0	equ	0xFEE
 19861                           plusw0	equ	0xFEB
 19862                           fsr0h	equ	0xFEA
 19863                           fsr0l	equ	0xFE9
 19864                           wreg	equ	0xFE8
 19865                           indf1	equ	0xFE7
 19866                           postdec1	equ	0xFE5
 19867                           fsr1h	equ	0xFE2
 19868                           fsr1l	equ	0xFE1
 19869                           indf2	equ	0xFDF
 19870                           postinc2	equ	0xFDE
 19871                           postdec2	equ	0xFDD
 19872                           plusw2	equ	0xFDB
 19873                           fsr2h	equ	0xFDA
 19874                           fsr2l	equ	0xFD9
 19875                           status	equ	0xFD8
 19876                           
 19877                           	psect	temp
 19878  000048                     btemp:
 19879                           	opt stack 0
 19880  000048                     	ds	1
 19881  0000                     int$flags	set	btemp
 19882  0000                     wtemp6	set	btemp+1
 19883                           tosu	equ	0xFFF
 19884                           tosh	equ	0xFFE
 19885                           tosl	equ	0xFFD
 19886                           pclatu	equ	0xFFB
 19887                           pclath	equ	0xFFA
 19888                           tblptru	equ	0xFF8
 19889                           tblptrh	equ	0xFF7
 19890                           tblptrl	equ	0xFF6
 19891                           tablat	equ	0xFF5
 19892                           prodh	equ	0xFF4
 19893                           prodl	equ	0xFF3
 19894                           intcon	equ	0xFF2
 19895                           intcon2	equ	0xFF1
 19896                           postinc0	equ	0xFEE
 19897                           plusw0	equ	0xFEB
 19898                           fsr0h	equ	0xFEA
 19899                           fsr0l	equ	0xFE9
 19900                           wreg	equ	0xFE8
 19901                           indf1	equ	0xFE7
 19902                           postdec1	equ	0xFE5
 19903                           fsr1h	equ	0xFE2
 19904                           fsr1l	equ	0xFE1
 19905                           indf2	equ	0xFDF
 19906                           postinc2	equ	0xFDE
 19907                           postdec2	equ	0xFDD
 19908                           plusw2	equ	0xFDB
 19909                           fsr2h	equ	0xFDA
 19910                           fsr2l	equ	0xFD9
 19911                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         281
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    129     160
    BANK1           256     37     227
    BANK2           256     89     159
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3590	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdTxArray(BANK1[12]), 
		 -> synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdTxArray(BANK1[12]), 
		 -> synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdTxArray(BANK1[12]), 
		 -> synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _FlashReadUart->_GetIntFromUartData
    _GroupDAC->_DacReadValue
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupFlashMemory->_FlashReadUart

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  806779
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  456924
                                            125 BANK0      4     4      0
                                             34 BANK1      3     3      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2719
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  250930
                                            122 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   28439
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       36    34      2  103787
                                            104 BANK0      2     0      2
                                              0 BANK1     34    34      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  118549
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13446
                                            122 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    8917
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   31485
                                            122 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13655
                                             39 BANK0      8     6      2
                                              0 BANK2     89    89      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     453
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7780
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9988
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  131626
                                            122 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   28160
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6661
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103308
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14637
                                            122 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7337
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7269
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7483
                                            122 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7421
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7269
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7269
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2719
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  221799
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  112249
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  110669
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109550
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10200
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95314
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105600
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               12     8      4     529
                                             23 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1811
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     59      9F       8       62.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     25      E3       6       88.7%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     81      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     269       9        0.0%
DATA                 0      0     269      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 22:30:22 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4094                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 0047                         readUartMessage@idx 01CE  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3D7A  
                            ___altoft@sign 0030                 __size_of_FLASH_IsWriteDone 000E  
                                       l60 33C6                   GetIntFromUartData@recVal 007B  
                 GetIntFromUartData@retVal 007C                        __end_of_BlinkOkLeds 35A8  
                          _SWSPI_send_word 2E24                        ___wmul@multiplicand 001A  
       __size_of_IOCB4_SetInterruptHandler 000A                            _timer0ReloadVal 0045  
               ?_IOCB4_SetInterruptHandler 0018                               __CFG_CP0$OFF 000000  
                             __CFG_CP1$OFF 000000                               __CFG_CP2$OFF 000000  
                             __CFG_CP3$OFF 000000                               ___ftadd@exp1 0083  
                             ___ftadd@exp2 0082                               ___ftadd@sign 0081  
                              ?_MEMORY_ISR 0001                                        l122 3DCE  
                                      l202 12E4                                        l211 1172  
                                      l203 1132                                        l221 122E  
                                      l213 118A                                        l126 0E76  
                                      l222 11EE                                        l206 1140  
                                      l127 0D3C                                        l215 11A2  
                                      l207 116C                                        l224 1254  
                                      l217 11C0                                        l234 3C5C  
                                      l330 15C6                                        l226 128C  
                                      l235 3C46                                        l331 1604  
                                      l219 11C6                                        l316 2178  
                                      l324 15BA                                        l228 1292  
                                      l317 2178                                        l333 1688  
                                      l318 219A                                        l502 0AC8  
                                      l326 1592                                        l408 2800  
                                      l504 0CD2                                        l512 0CB4  
                                      l416 26D4                                        l328 15A2  
                                      l409 2816                                        l329 16BA  
                                      l521 2362                                        l514 0D06  
                                      l530 32E0                                        l507 0BE4  
                                      l531 32EC                                        l523 237E  
                                      l508 0BC6                                        l541 1454  
                                      l534 331C                                        l542 1462  
                                      l518 2366                                        l535 3328  
                                      l519 2320                                        l624 2E68  
                                      l544 146E                                        l529 32F8  
                                      l650 3772                                        l634 3752  
                                      l642 2A2C                                        l651 377C  
                                      l635 371E                                        l715 3AD8  
                                      l539 13C4                                        l660 3790  
                                      l636 3738                                        l644 2A5A  
                                      l628 2ECA                                        l716 3AB0  
                                      l900 3B36                                        l637 3742  
                                      l645 2A66                                        l725 3AC4  
                                      l717 3ABA                                        l901 3B5A  
                                      l726 3ACE                                        l902 3B58  
                                      l680 37D2                                        l736 3B14  
                                      l649 37AE                                        l737 3AEC  
                                      l762 4032                                        l746 3B00  
                                      l738 3AF6                                        l667 379A  
                                      l659 3786                                        l747 3B0A  
                                      l668 37A4                                        l757 4036  
                                      l678 3804                                        l758 402E  
                                      l679 37C8                                        l696 37F0  
                                      l688 37DC                                        l697 37FA  
                                      l689 37E6                                        l887 3976  
                                      l889 399C                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 01D0  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 0F38                                        _log 1E78  
                                      _pow 1BD6                                        prod 000FF3  
                                      tosl 000FFD                                        wreg 000FE8  
           ?_InitSystemApplicationManagers 0001                               __CFG_LVP$OFF 000000  
               __end_of_FlashReadCondition 20A6                             InitSynth@cType 00CC  
                             ___ftdiv@cntr 0063                         __size_of_IOCB4_ISR 0022  
                       __size_of_IOCB5_ISR 0022                               ___ftdiv@sign 0068  
                                     l1040 2BF2                                       l1041 2BF4  
                                     l1037 2C1A                                       l2013 3E52  
                                     l1038 2BD2                                       l2030 1C9C  
                                     l2014 3E42                                       l1302 3178  
                                     l1310 3158                                       l2031 1D44  
                                     l1311 3168                                       l1048 3C96  
                                     l1320 3B70                                       l2025 1C20  
                                     l1401 1AAA                                       l1154 3DF2  
                                     l2026 1C10                                       l1306 3128  
                                     l1403 1ACA                                       l1307 3138  
                                     l2028 1C38                                       l1412 3646  
                                     l1308 3148                                       l1316 3B7E  
                                     l2029 1CBE                                       l1413 3608  
                                     l1405 1B40                                       l1309 3150  
                                     l1317 3B64                                       l1325 3D00  
                                     l1422 36D6                                       l1326 3CE4  
                                     l2223 0F52                                       l1415 360C  
                                     l1319 3B6A                                       l1424 3714  
                                     l1416 3610                                       l1280 3D86  
                                     l1328 3CF2                                       l2225 0F8A  
                                     l1433 1E4C                                       l1417 3614  
                                     l2234 285A                                       l2226 0FC2  
                                     l1434 1D72                                       l1418 3642  
                                     l1290 3F0C                                       l2243 302A  
                                     l2235 284C                                       l2251 2B28  
                                     l2227 0FF2                                       l1427 3BC6  
                                     l2252 2B1C                                       l2228 111C  
                                     l1428 3B9C                                       l2260 3EAC  
                                     l2180 17CE                                       l2164 1716  
                                     l1508 25AA                                       l2237 2874  
                                     l2229 10F2                                       l1381 3942  
                                     l2181 183A                                       l1277 3D8C  
                                     l2238 28F0                                       l1382 3926  
                                     l2270 3ED2                                       l2174 1792  
                                     l2166 172E                                       l1278 3D80  
                                     l2247 2AB4                                       l2183 185E  
                                     l2175 17A2                                       l1287 3F12  
                                     l1295 3FC4                                       l1800 2CF2  
                                     l2184 189A                                       l2168 1782  
                                     l1288 3F06                                       l1296 3FB6  
                                     l1393 3218                                       l1801 2CE8  
                                     l2249 2AFA                                       l2265 3FE6  
                                     l2177 17BC                                       l1394 31C0  
                                     l1395 31E0                                       l1803 2D26  
                                     l2275 4004                                       l1804 2D10  
                                     l1900 21D2                                       l2188 40D0  
                                     l1492 083E                                       l1580 3474  
                                     l1397 3214                                       l1806 2D4E  
                                     l1670 3364                                       l1902 224A  
                                     l1494 086C                                       l1574 342A  
                                     l1807 2D44                                       l1831 1900  
                                     l2295 29BC                                       l1671 3358  
                                     l1911 228A                                       l1903 223A  
                                     l2287 1E94                                       l1575 3442  
                                     l1840 1990                                       l2296 293E  
                                     l1496 08B8                                       l2289 1EB4  
                                     l1577 3468                                       l1498 08E6  
                                     l1578 345C                                       l1835 192A  
                                     l1908 226E                                       l1940 3298  
                                     l1781 3BE2                                       l1845 1986  
                                     l1909 2262                                       l1597 382A  
                                     l1941 32A6                                       l1854 19C4  
                                     l1846 197C                                       l1598 383E  
                                     l1950 34C6                                       l1855 19BA  
                                     l1951 34D4                                       l1864 24B2  
                                     l1872 30C2                                       l1936 3264  
                                     l1857 19E8                                       l1881 23E4  
                                     l1873 30F2                                       l1937 3258  
                                     l1866 24DA                                       l1890 3F3A  
                                     l1858 1A04                                       l1882 2416  
                                     l1946 349E                                       l1867 2518  
                                     l1859 1A34                                       l1883 2426  
                                     l1947 3492                                       l1868 253E  
                                     l1957 3674                                       l1885 243E  
                                     l1958 3668                                       l1886 244E  
                                     l1879 23BC                                       l1896 3A02  
                                     l8010 0BC6                                       l8022 0CB4  
                                     l8110 340C                                       l8140 2BCA  
                                     l8204 165A                                       ?_exp 0097  
                                     ?_log 008E                                       l7190 3E42  
                                     l6480 35B2                                       l7408 36C6  
                                     l6492 3554                                       l7620 2A24  
                                     l8270 26C4                                       l8096 33B6  
                                     l8280 270A                                       l8522 273E  
                                     l8194 15F4                                       l8450 259A  
                                     l8370 1466                                       l6924 311E  
                                     l7492 10F2                                       l7548 3B26  
                                     l8364 145A                                       l8622 0D34  
                                     l8534 2800                                       l8462 2626  
                                     l7922 1AA2                                       l7790 2E94  
                                     l7944 1B30                                       l7786 2E86  
                                     l7962 1B94                                       ?_pow 00A0  
                                     l7982 0AC0                                       STR_1 0690  
                                     STR_2 0690                                       STR_3 0690  
                                     STR_4 0690                                       STR_5 0690  
                                     STR_6 0690                                       STR_7 0690  
                                     STR_8 0690                                       STR_9 0690  
                       EepromWrite@address 001C                                       _LATA 000F89  
                                     _LATB 000F8A                                       _LATC 000F8B  
                                     _LATD 000F8C                                       _LATE 000F8D  
                                     u7035 3CA4                                       u5524 3208  
                                     u6340 2CDA                                       u6500 191C  
                                     u7036 3CA6                                       u5700 4086  
                                     u5525 3202                                       u6431 18BE  
                                     u6600 19CC                                       u7240 0FCC  
                                     u7400 363A                                       u6441 18D2  
                                     u6530 195A                                       u7250 0FCE  
                                     u8050 0AFC                                       u8130 3268  
                                     u8115 3D76                                       u8116 3D78  
                                     u6380 2D58                                       u7405 3630  
                                     u6470 18F2                                       u7350 1C86  
                                     u5718 4088                                       u8310 165A  
                                     u8240 2BF8                                       u8160 34A2  
                                     u8320 1678                                       u6641 23A4  
                                     u6570 1998                                       u6731 21B6  
                                     u9107 35F2                                       u9027 33CE  
                                     u6820 3052                                       u7540 3ECE  
                                     u8500 330C                                       u6661 23CC  
                                     u9117 0E02                                       u9037 33DE  
                                     u8341 2EE2                                       u8261 1526  
                                     u6750 21F0                                       u7470 2A78  
                                     u8190 340C                                       u8350 2F24  
                                     u8255 2C16                                       u9047 33EE  
                                     u8256 2C18                                       u7560 3E9E  
                                     u7800 1758                                       u6841 249A  
                                     u9057 33FE                                       u8370 270A  
                                     u8610 2626                                       u8450 32CE  
                                     u6755 21E8                                       u9067 2A7A  
                                     u8355 2F18                                       u7900 4152  
                                     u6828 3054                                       u6940 2866  
                                     u7660 2E38                                       u7820 1768  
                                     u8460 32D0                                       u7901 414E  
                                     u6861 24C2                                       u9077 357A  
                                     u8630 2102                                       u6790 2274  
                                     u9087 3594                                       u8391 22BA  
                                     u8560 14C2                                       u8625 20B0  
                                     u9097 35D8                                       u8650 2146  
                                     u7690 2EC4                                       u7770 171E  
                                     u8490 330A                                       u8570 14C6  
                                     u6980 2AD4                                       u7940 1AE4  
                                     u8750 0E16                                       u7970 1B94  
                                     u6988 2AD8                                       u7981 1BCC  
                                     u8890 2CC6                                       u8888 12BE  
                                     u8889 12DC                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3B24  
                                     _crc8 3914                    ??_InitAdcApplicationMgr 0018  
                                     _data 0039                                       _main 3418  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 41B4  
                          __end_of_DacInit 281C                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00DA  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 4148                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003A                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 35A8                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3D46  
                   _ReadIntFromEeprom$3584 00BC                     _ReadIntFromEeprom$3585 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 413A  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1A5A                     GetUint16FromBitArray@i 0022  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_12 0690                                      STR_20 069C  
                                    STR_13 0690                                      STR_21 069C  
                                    STR_14 0690                                      STR_22 069C  
                                    STR_15 0690                                      STR_23 069C  
                                    STR_16 0690                                      STR_24 069C  
                                    STR_17 0690                                      STR_25 069C  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                                    STR_29 069C                            __end_of___ftdiv 2570  
        __end_of_IOCB4_SetInterruptHandler 41A0                            __end_of___ftneg 3F48  
                          __end_of___lldiv 32B8                                 _EepromRead 41A0  
                          __end_of___ftmul 2488                                      _T0CON 000FD5  
                          __end_of___llmod 34E6                            __end_of___ftsub 3A2C  
                          __end_of___fttol 229C                               _SYNTH_ADDRES 0635  
                           __CFG_DEBUG$OFF 000000                            InitSynth@regNum 00CE  
                          __end_of___lwmod 3A6E                        StoreIntInEeprom@idx 0029  
                                    i2l912 3E12                                      i2l840 007A  
                                    i2l913 3E32                                      i2l906 3CD2  
                                    i2l842 0086                                      i2l907 3CCE  
                                    i2l835 005E                                      i2l844 0090  
                                    i2l837 006A                        StoreIntInEeprom@val 0028  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96                        _SWSPI_DAC_send_bits 3716  
        __size_of_TMR0_SetInterruptHandler 000A                              __CFG_WRT0$OFF 000000  
                            __CFG_WRT1$OFF 000000                 __end_of_GetIntFromUartData 1BD6  
                            __CFG_WRT2$OFF 000000                        ___lmul@multiplicand 001E  
                ?_TMR0_SetInterruptHandler 0018                              __CFG_WRT3$OFF 000000  
                             ___lltoft@exp 0028                       _EUSART1_Transmit_ISR 3CA8  
                           __CFG_EBTR0$OFF 000000                             __CFG_FCMEN$OFF 000000  
                           __CFG_EBTR1$OFF 000000                             __CFG_EBTR2$OFF 000000  
                           __CFG_EBTR3$OFF 000000                          ?_WriteUartMessage 0019  
                         __end_of_TMR0_ISR 2E24                              __CFG_WRTB$OFF 000000  
                            __CFG_WRTC$OFF 000000                              __CFG_WRTD$OFF 000000  
                          DacSetValue@data 008A                            _DATAEE_ReadByte 40D4  
                           __CFG_EBTRB$OFF 000000                              ___awtoft@sign 0023  
                  __end_of_PIN_MANAGER_IOC 411E                                      crc8@i 001F  
                                    _make8 3606             __size_of_SWSPI_Synth_send_bits 00C6  
                    __end_of_GetMcuRunTime 2654                                      _count 00ED  
                                    _floor 281C                                      _ldexp 2A9A  
                                    _frexp 3002                                      _errno 00E9  
            __end_of_SWSPI_Synth_send_bits 2A9A                            __end_of_isalpha 3EB4  
                          __end_of_isdigit 3FEE                                      _group 00F6  
           __size_of_GetUint16FromBitArray 0088                         ??_WriteUartMessage 001D  
                       __CFG_MCLRE$EXTMCLR 000000                              ___ftpack@sign 001C  
                  ??_GroupStatusAndVersion 0031              __end_of_GetUint16FromBitArray 3236  
                          __end_of_isspace 3EDA                             ?_EUSART1_Write 0001  
                              ?_AdcConvert 0001                             __CFG_BOREN$OFF 000000  
                          __end_of_isupper 400C                                      pclath 000FFA  
                                    tablat 000FF5                          ??_UpdateSynthFreq 0030  
                                    pow@yi 00AD                             ??_EUSART1_Read 0018  
                           FillArray@array 0020                                      plusw0 000FEB  
                                    plusw2 000FDB                                      status 000FD8  
                           FillArray@value 0024                                      wtemp6 0049  
                     ReadIntFromEeprom@idx 00C7                             __CFG_HFOFST$ON 000000  
                          __end_of_toupper 40D4             SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                  __end_of_GroupControlMcu 3DAA                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3606            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 2ECE  
                              _BlinkOkLeds 354A                    WriteUartMessage@dataBuf 0019  
                          __initialization 2F6C                                log@exponent 0091  
                             __end_of_crc8 3962                 __end_of_EUSART1_Initialize 3C3C  
                             __end_of_main 3480                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 3FB0                          __end_of_IOCB5_ISR 3F8E  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3D12                     __size_of_SynthReadData 01DE  
                          _readUartMessage 112A                           __end_of_GroupAdc 3FD0  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 412C                         __size_of_FillArray 001C  
                             _writeAddress 003F                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 41B8  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 33AE                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3C06  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2D78  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 36BE  
                        _FlashReadUart$605 024F                          ?_FlashSampleWrite 002D  
                                   i2l1110 2DEC                                     i2l1111 2E0E  
                                   i2l2000 3A3A                                     i2l2003 3A5A  
                                   i2l2004 3A64                                     i2l1108 2DA8  
                                   i2l1109 2DCA                             __CFG_WDTEN$OFF 000000  
                     StoreIntInEeprom@data 0021                                     i2l1999 3A42  
                                   _TABLAT 000FF5                                _EepromWrite 413A  
                                   _RCREG1 000FAE                           __end_of___lwtoft 3F6C  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 402A  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00DC  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FD  
                 __end_of_GroupFlashMemory 3B96                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 00FF                               _synthLdTxCnt 00FE  
                                   _cState 00F7                                     ___ftge 3092  
                                   ___lmul 381A                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 3EDA                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___ftdiv 0060  
                                ??___ftneg 001B                                  ??___lldiv 0020  
                                ??___ftmul 006F                      __end_of_PLLInitialize 3AAC  
                                ??___llmod 0020                                  ??___ftsub 002F  
                                ??___fttol 007C                                  ??___lwmod 0005  
           SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                           ?_TMR0_Initialize 0001  
                                   _memset 3E38                         __end_of_DAC_ADDRES 0657  
                                   clear_0 2FCA                                     clear_1 2FD6  
                                   clear_2 2FE2                                     clear_3 2FEE  
                      __size_of_AdcConvert 022C                    __end_of_DATAEE_ReadByte 40E8  
                              ?_EepromRead 0001                                     _strtol 16D6  
                                   floor@i 0092                      __end_of_SwSpi_Clk_Pin 381A  
                                   floor@x 008F                      ___ftmul@f3_as_product 0073  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003B                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 16D6  
                         __end_of_testLeds 3418                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 131A                            _eusart1TxBuffer 0259  
                          _GetMcuFwVersion 06A6                           __end_ofexp@coeff 0675  
                        _SYSTEM_Initialize 4062                           __end_oflog@coeff 0690  
                               __accesstop 0060                    __end_of__initialization 2FF4  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00DA               GroupStatusAndVersion@request 00DD  
                             InitSynth@idx 00CD                          __end_of_FillArray 4062  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 131A                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 36BE  
                           __pcstackCOMRAM 0001                               __pidataBANK0 41BC  
                             __pidataBANK1 4156                        ??_SYSTEM_Initialize 001C  
                                ?_TMR0_ISR 0001                        DacReadValue@byteIdx 00D8  
                               ___lltoft@c 0020                        DacReadValue@byteNum 00CD  
                            __end_of_make8 3662                        DacReadValue@readVal 00CE  
                         _DATAEE_WriteByte 3C72                              __end_of_floor 28FE  
                            __end_of_ldexp 2B60                              __end_of_frexp 3092  
    __end_of_IOCB4_DefaultInterruptHandler 41C2     __size_of_IOCB4_DefaultInterruptHandler 0002  
            _IOCB4_DefaultInterruptHandler 41C0                     _SwSpi_Set_Synth_Le_Pin 3AE8  
                     GroupFlashMemory@data 00DA                                 ___lwtoft@c 0020  
              ??_IOCB4_SetInterruptHandler 001A            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 39A6                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0D0C  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00DC  
                       _keepAliveSignalLed 407C                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 3E38                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00DA                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 407C  
                          _AdcConvert$3583 00BB                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00E1                                 __pbssBANK1 0100  
                               __pbssBANK2 0259                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00DA                                 __pnvCOMRAM 0045  
                                ?_GroupAdc 00DA             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 416E              __end_of_InitAdcApplicationMgr 41B0  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 41BC  
                                ?_ResetMcu 0001                         _FlashReadCondition 1F9A  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 0253  
         __end_of_TMR0_SetInterruptHandler 418C                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 402A  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 1D52                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00DA                           FlashReadUart@idx 0257  
                 GetUint16FromBitArray@res 0020                           FlashReadUart@val 0247  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 00F0                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 40FC                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2CCA                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 229C  
                          _Timer0_Sampling 00FC                         SynthReadData@TxMsg 01AC  
                  __end_of_GetMcuFwVersion 0A96                         SynthReadData@cType 01BF  
                                  _OSCCON2 000FD2                             ??_SetSynthOper 0031  
                                  _TBLPTRH 000FF7                                    _TBLPTRL 000FF6  
                                  _TBLPTRU 000FF8                                    _OSCTUNE 000F9B  
                                  _SPBRGH1 000FB0                          _synthLdTxArrayCnt 00EF  
                      ??_ReadIntFromEeprom 00B5                                    _DacInit 2738  
                    GetIntFromUartData@num 007A                           GetMcuRunTime@idx 006D  
                             ??_AdcConvert 00B1                       ??_FlashReadCondition 0024  
                           _FlashEreaseMem 3870                           _FLASH_EraseBlock 3D46  
           __size_of_GroupStatusAndVersion 0024                             _SwSpi_Data_Pin 376E  
                _IOCB4_SetInterruptHandler 4196                       DATAEE_WriteByte@bAdd 0019  
            __end_of_GroupStatusAndVersion 3F24                    __end_of_Make32bitsArray 3716  
                               ??_GroupDAC 0031                                 ??_GroupAdc 0031  
                            _SetMcuRunTime 39A6                         _GetIntFromUartData 1A5A  
                       FlashReadUart@TxMsg 0200                      GroupSynthesizers@data 00DA  
                                  __Hparam 0000                                 ??_ResetMcu 002C  
                __size_of_WriteUartMessage 0036                               ?_BlinkOkLeds 0001  
                                  __Lparam 0000                               _cntRegUpdate 0037  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00DD                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 1E78                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 18AC                                    ___ftdiv 2488  
                                  ___ftneg 3F24                                    ___lldiv 3236  
                          __size_of___wmul 0026                                    ___ftmul 2392  
                                  ___llmod 3480                                    ___ftsub 39EA  
                                  ___fttol 21A4                 FlashSampleWrite@rotateLeft 0062  
                             crc8@dataSize 001A                   __size_of_ClearMcuRunTime 0014  
                                  ___lwmod 3A2C                       AdcConvert@_adcResult 00B3  
                             __psmallconst 0600                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 410E                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 00E1  
                                  _crcCalc 00F3                                    _channel 00F9  
                                  __pcinit 2F6C                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 29D4  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 3418  
                                  __ptext1 112A                                    __ptext2 3E64  
                                  __ptext3 3CDE                                    __ptext4 3B5E  
                                  __ptext5 3FB0                                    __ptext6 3F00  
                                  __ptext7 3D7A                                    __ptext8 3122  
                                  __ptext9 229C                                    crc8@crc 001D  
                       __end_of_AdcConvert 0F38                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 4196                                  _IOCB4_ISR 3F8E  
                                _IOCB5_ISR 3F6C                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 412C  
                                  _isalpha 3E8C                               __size_of_exp 01F2  
                             __size_of_log 0122                                    _isdigit 3FD0  
                             __size_of_pow 017C                         _EUSART1_Initialize 3C06  
                 ??_PIN_MANAGER_Initialize 001A                                    _isspace 3EB4  
                StoreIntInEeprom@numOfByes 0026                                    _isupper 3FEE  
                                  _request 00F5                            GroupDAC@request 00DC  
                          ??_SynthReadData 0031                       ??_GetIntFromUartData 006E  
                   __end_of_FlashEreaseMem 38C2                 __size_of_SYSTEM_Initialize 001A  
                  ?_SwSpi_Set_Dac_Sync_Pin 0001                     __end_of_SwSpi_Data_Pin 37C4  
                  StoreIntInEeprom@address 0025                                    _toupper 40C0  
                     end_of_initialization 2FF4                                    exp@sign 009F  
                      ?_EUSART1_Initialize 0001                           ??_BlinkErrorLeds 0018  
                             ?_EepromWrite 001B                      _SWSPI_Synth_send_bits 29D4  
                __size_of_SwSpi_Set_CE_Pin 003C                      _GetUint16FromBitArray 31AE  
                           ?_SetMcuRunTime 0001                                    memset@c 001A  
                                  memset@n 001C                                    memset@p 001E  
                            __Lmediumconst 0000                            ___lldiv@divisor 001C  
                     __end_of_SetMcuSystem 4182                                    pow@sign 00AC  
                          ___lldiv@counter 0024                          ?_GroupFlashMemory 00DA  
                         AdcConvert@adcRes 00BE                         __end_of_SYNTH_REGS 0635  
                     UpdateSynthFreq@cType 008C                                 ??_testLeds 002C  
                     SWSPI_send_word@datac 0086                                 _rxMsgQueue 0180  
                                  postdec1 000FE5                                    postdec2 000FDD  
          ??_IOCB5_DefaultInterruptHandler 0001                         ??_GroupFlashMemory 0031  
                                  postinc0 000FEE                                    postinc2 000FDE  
                    __size_of_EUSART1_Read 0044                       SynthReadData@byteNum 01CD  
                      _InitRxMessageParams 3E64                                testLeds@idx 002D  
                  __end_of_UpdateSynthFreq 2392                       __size_of_DacSetValue 009E  
                __size_of_FlashSampleWrite 00FE                     __size_of_GetMcuRunTime 00E4  
                     ??_EUSART1_Initialize 0018      __end_of_InitSystemApplicationManagers 40C0  
   __size_of_InitSystemApplicationManagers 0016              _InitSystemApplicationManagers 40AA  
                          ?_FLASH_ReadByte 0018                                    strtol@a 0061  
                                  strtol@c 0065                                    strtol@s 0026  
                 _TMR0_SetInterruptHandler 4182                                  _PORTDbits 000F83  
                             ??_EepromRead 0019                           _StoreIntInEeprom 3B96  
                               ?_IOCB4_ISR 0001                                 ?_IOCB5_ISR 0001  
                         ?_GetMcuFwVersion 0001                             ZeroArray@array 0020  
           __end_of_SwSpi_Set_Dac_Sync_Pin 4046                               strtol@endptr 0028  
            FLASH_WriteBlock@flashWrBufPtr 0021                         GetMcuRunTime@TxMsg 0060  
                     ?_InitRxMessageParams 0001                            ?_FlashEreaseMem 0001  
                      EUSART1_Write@txData 0018                            ?_SwSpi_Data_Pin 0018  
                 __end_of_DATAEE_WriteByte 3CA8                __end_of_SWSPI_DAC_send_bits 376E  
                            ?_DacReadValue 00C8                       DacReadValue@dacIndex 00D0  
                 FLASH_EraseBlock@baseAddr 0018                           ?_Make32bitsArray 0018  
                              ___ftdiv@exp 0067                               _EUSART1_Read 3962  
                     _CheckFlashPrecentage 2C1C                          FLASH_WriteBlock@i 002C  
                       __end_of_EepromRead 41AA                           DacReadValue@data 00C8  
                              ___ftmul@exp 0072                    ?_SwSpi_Set_Synth_Le_Pin 0018  
                     __end_of_SetSynthOper 3334                 __size_of_ReadIntFromEeprom 0126  
                                _FillArray 4046               __end_of_INTERRUPT_Initialize 41B4  
                           __end_of___ftge 3122                             __end_of___lmul 3870  
                           __end_of___wmul 3F00                        GroupControlMcu@data 00DA  
                            __pidataCOMRAM 416E                          __size_of_TMR0_ISR 00AC  
                           _ADC_Initialize 4094                           _FLASH_WriteBlock 2B60  
                   ?_OSCILLATOR_Initialize 0001                             __end_of_memset 3E64  
                       InitSynth@EepromVal 00C8                                 floor@expon 0095  
                            FillArray@size 0022                          ??_ClearMcuRunTime 0018  
                           __end_of_strtol 18AC                        start_initialization 2F6C  
                               eval_poly@d 0087                                 eval_poly@n 0089  
                               eval_poly@x 0084                                _SynthRxOper 0043  
                         BlinkOkLeds@state 001B                   __size_of_TMR0_Initialize 0034  
                               ldexp@value 008E                                _SynthTxOper 0044  
          __size_of_PIN_MANAGER_Initialize 0064                      ??_InitRxMessageParams 0024  
                              __end_of_exp 112A                                __end_of_log 1F9A  
                              __end_of_pow 1D52              GetUint16FromBitArray@bitarray 0018  
                 AdcConvert@_adcResult_348 00B5                                  _InitSynth 0A96  
                           ??_DacReadValue 00CA                              _GetMcuRunTime 2570  
                   ?_SWSPI_Synth_send_bits 0025                            ??_SetMcuRunTime 0021  
                    __end_of_EUSART1_Write 3B5E                     ?_GetUint16FromBitArray 0018  
                   __size_of_PLLInitialize 003E                 GetUint16FromBitArray@state 001F  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00FA                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3B24  
                        __size_of_GroupDAC 0034                           _WriteUartMessage 3C3C  
                        __size_of_GroupAdc 0020                     __size_of_FlashReadUart 01DE  
                                 ??___ftge 001E                                   ??___lmul 0022  
                  SendAckMessage@inRequest 0024                                   ??___wmul 001C  
                GetIntFromUartData@idxData 0086                          __size_of_ResetMcu 000E  
                     __size_of_BlinkOkLeds 005E                                 ?_FillArray 0020  
                   __end_of_ADC_Initialize 40AA                           ?_UpdateSynthFreq 008A  
                              __pdataBANK0 00FE                                __pdataBANK1 01D1  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 38C2                             _SetChannelMode 3DAA  
                 __end_of_FLASH_EraseBlock 3D7A                         _SendSystemStartAck 4162  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 41C0  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 41BE  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F8                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 400C                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                        __size_of___lltoft 005C                                __pbssCOMRAM 0031  
                        __size_of___lwtoft 0024              __size_of_EUSART1_Transmit_ISR 0036  
                            __pcstackBANK0 0060                              __pcstackBANK1 01AC  
                            __pcstackBANK2 0200                               _isalpha$3308 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3311 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3AAC               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01DD  
                                __pnvBANK1 01DD                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 34E6  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 41AA  
                                __pintcode 0008                     __end_of_SendAckMessage 3914  
                                __ptext100 3F48                                  __ptext101 2CCA  
                                __ptext110 3A2C                                  __ptext102 31AE  
                                __ptext111 410E                                  __ptext103 20A6  
                                __ptext112 3F6C                                  __ptext104 2B60  
                                __ptext113 41BE                                  __ptext105 3D46  
                                __ptext114 3F8E                                  __ptext106 4148  
                                __ptext115 41C0                                  __ptext107 3DDA  
                                __ptext116 41B8                                  __ptext117 3CA8  
                                __ptext109 2D78                                   ?___ftadd 0078  
                                __ptext118 3E0A                                  __ptext119 0000  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 3DDA  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 20A6                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00FB  
                        __size_of_testLeds 006A                              _PLLInitialize 3A6E  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                                   _BAUDCON1 000FB8  
                            _SwSpi_Clk_Pin 37C4                                   ?_isalpha 0001  
                                 ?_isdigit 0001                                  _eval_poly 28FE  
                      BlinkErrorLeds@state 001B                                   ?_isspace 0001  
                             _SetMcuSystem 4178                          FlashReadUart@data 0087  
                                 ?_isupper 0001                              _FlashReadUart 14F8  
                           __size_of_make8 005C                             __size_of_floor 00E2  
                           __size_of_ldexp 00C6                             __size_of_frexp 0090  
                 __size_of_DATAEE_ReadByte 0014                                   ?_toupper 0001  
                     _INTERRUPT_Initialize 41B0             FLASH_WriteBlock@blockStartAddr 0027  
              __size_of_FlashReadCondition 010C                  _IOCB5_SetInterruptHandler 418C  
                        ??_TMR0_Initialize 001A                     ??_CheckFlashPrecentage 0078  
                           ___wmul@product 001C                                   _IOCBbits 000F62  
                                 _LATAbits 000F89                                   _LATBbits 000F8A  
                                 _LATCbits 000F8B                                   _LATDbits 000F8C  
                    __size_of_SetSynthOper 007C                   __end_of_StoreIntInEeprom 3BCE  
           FlashReadUart@numOfSampleToRead 0255                                   _PIE1bits 000F9D  
                                 _PIE2bits 000FA0                      _GroupStatusAndVersion 3F00  
                        _GroupSynthesizers 3122        __size_of_INTERRUPT_InterruptManager 00D4  
               ??_TMR0_SetInterruptHandler 001A                       Make32bitsArray@array 0018  
                                 _PIR1bits 000F9E                           ??_FLASH_ReadByte 001C  
                                 _PIR2bits 000FA1                                  _rxMsgData 016C  
                                 i2u560_48 3F9C                                   i2u562_48 3F7A  
                                 i2u564_40 3A46                        UpdateSynthFreq@data 008A  
                      SWSPI_send_word@data 0029                         ?_GroupSynthesizers 00DA  
                                 _RCONbits 000FD0                           __CFG_WDTPS$16384 000000  
                      SynthReadData@regNum 01CC                                  make8@data 0018  
                              ??_FillArray 0025                                   _TMR0_ISR 2D78  
                          ?_SendAckMessage 0024                            ?_SetChannelMode 002C  
                           ?_PLLInitialize 0001                          ??_PIN_MANAGER_IOC 0001  
                     __end_of_DacReadValue 2738                        ??_GroupSynthesizers 0031  
                   GetIntFromUartData@data 0066                    SWSPI_send_word@dataSize 002D  
                               _ADCON0bits 000FC2                   __size_of_readUartMessage 01F0  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 064B  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3314 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 32B8  
                               _DAC_ADDRES 0653                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 14F8  
                                copy_data0 2F80                                  copy_data1 2FB8  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018             GetUint16FromBitArray@numOfBits 001A  
                __end_of_GroupSynthesizers 31AE                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2C1C                                   _GroupDAC 3CDE  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 3FB0  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01A0                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 0194  
                                 _ResetMcu 411E                              ??_DacSetValue 008C  
                              _readAddress 003B                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 01C0                          _ADC_GetConversion 3DDA  
                      FlashReadUart@offset 0245                            _ClearMcuRunTime 40E8  
                        __CFG_P2BMX$PORTD2 000000                    ??_OSCILLATOR_Initialize 0018  
                       ?_ADC_GetConversion 0018                          ??_TMR0_StartTimer 0018  
                         __size_of___ftadd 01AE                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 00E5                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 3334  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0036                           __size_of___lwmod 0042  
                          GroupAdc@request 00DC                                   ___awtoft 3BCE  
                            crc8@dataArray 0018                                   ___ftpack 2CCA  
                         _numOfReadSamples 0128                                   ___lltoft 3662  
                        _FLASH_IsWriteDone 4148                     _IOCB4_InterruptHandler 01E1  
                      WriteUartMessage@idx 001E                                   ___lwtoft 3F48  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                               _isupper$3317 0019  
                                 _exp$3588 009A                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F4                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3C72                           __size_of_isalpha 0028  
                                 _crcGiven 00F2                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 131A  
                                 __ptext11 32B8                                   __ptext20 1A5A  
                                 __ptext12 2570                                   __ptext21 16D6  
                                 __ptext13 3236                                   __ptext30 3DAA  
                                 __ptext22 40C0                                   __ptext14 06A6  
                                 __ptext31 3962                                   __ptext23 3EB4  
                                 __ptext15 14F8                                   __ptext40 412C  
                                 __ptext32 407C                                   __ptext24 3FD0  
                                 __ptext16 40FC                                   __ptext41 41B0  
                                 __ptext33 4178                                   __ptext25 3E8C  
                                 __ptext17 1F9A                                   __ptext50 3C3C  
                                 __ptext42 3C06                                   __ptext34 4062  
                                 __ptext26 3FEE                                   __ptext18 3870  
                                 __ptext51 3B24                                   __ptext43 4094  
                                 __ptext35 3D12                                   __ptext27 2654  
                                 __ptext19 2ECE                                   __ptext60 413A  
                                 __ptext52 40AA                                   __ptext44 39A6  
                                 __ptext36 4182                                   __ptext28 33AE  
                                 __ptext61 3C72                                   __ptext53 41B4  
                                 __ptext45 3480                                   __ptext37 34E6  
                                 __ptext29 411E                                   __ptext70 3716  
                                 __ptext62 2E24                                   __ptext54 3A6E  
                                 __ptext46 4162                                   __ptext38 418C  
                                 __ptext71 376E                                   __ptext63 3606  
                                 __ptext55 0A96                                   __ptext47 38C2  
                                 __ptext39 4196                                   __ptext80 35A8  
                                 __ptext72 37C4                                   __ptext64 3AE8  
                                 __ptext56 3AAC                                   __ptext48 3914  
                                 __ptext81 0D0C                                   __ptext73 1D52  
                                 __ptext65 402A                                   __ptext57 41AA  
                                 __ptext49 400C                                   __ptext90 3334  
                                 __ptext82 1BD6                                   __ptext74 381A  
                                 __ptext66 29D4                                   __ptext58 2738  
                                 __ptext91 28FE                                   __ptext83 1E78  
                                 __ptext75 41A0                                   __ptext67 36BE  
                                 __ptext59 3B96                                   __ptext92 3EDA  
                                 __ptext84 0F38                                   __ptext76 40D4  
                                 __ptext68 4046                                   __ptext93 2392  
                                 __ptext85 2A9A                                   __ptext77 40E8  
                                 __ptext69 3E38                                   __ptext94 39EA  
                                 __ptext86 281C                                   __ptext78 2C1C  
                                 __ptext95 18AC                                   __ptext87 3002  
                                 __ptext79 354A                                   __ptext96 3F24  
                                 __ptext88 21A4                                   __ptext97 2488  
                                 __ptext89 3092                                   __ptext98 3BCE  
                                 __ptext99 3662                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3586 00A6                                   _pow$3587 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2685 0076                       _GetMcuFwVersion$2689 0078  
                            __size_of_crc8 004E                              __size_of_main 0068  
                   ?_GroupStatusAndVersion 00DA                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00F1               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 3E0A  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01D1  
                          ??_PLLInitialize 0031                                   _testLeds 33AE  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 4156  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 2F6C                        _EUSART1_Receive_ISR 3E0A  
                 __end_of_SwSpi_Set_CE_Pin 3AE8                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 3E8C                                   exp@coeff 0657  
                               _MEMORY_ISR 41B8                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 012C  
                              _sampleCount 00EB                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00DD  
                 __end_of_FlashSampleWrite 21A4                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 39EA  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_979 01BE                    ?_PIN_MANAGER_Initialize 0001  
                  __end_of_ClearMcuRunTime 40FC                                 _RCSTA1bits 000FAB  
                                 isupper@c 001A                   ReadIntFromEeprom@address 00C2  
             __end_of_EUSART1_Transmit_ISR 3CDE                              ??_BlinkOkLeds 0018  
                         ??_ADC_Initialize 0018                      __size_of_DacReadValue 00E4  
                       Make32bitsArray@idx 0020                              AdcConvert@idx 00C0  
                            _isReWriteDone 0038                      UpdateSynthFreq@retVal 008D  
                     SwSpi_Clk_Pin@phrType 0019                      SwSpi_Data_Pin@phrType 0019  
                  SwSpi_Set_CE_Pin@phrType 0019                     __size_of_EUSART1_Write 003A  
                 ??_SwSpi_Set_Dac_Sync_Pin 0018                          EepromRead@address 0019  
                         ___lldiv@quotient 0020                           _GroupFlashMemory 3B5E  
                          ___lwmod@divisor 0003                            _TMR0_Initialize 3D12  
                          ___lwmod@counter 0005                   __size_of_UpdateSynthFreq 00F6  
                                 toupper@c 0018                 ReadIntFromEeprom@numOfByes 00B1  
                        __CFG_T3CMX$PORTC0 000000                    ReadIntFromEeprom@retVal 00C3  
                            ??_EepromWrite 001C                                 _AdcConvert 0D0C  
                    ??_EUSART1_Receive_ISR 0001             __end_of_PIN_MANAGER_Initialize 354A  
                             _DacReadValue 2654               GetIntFromUartData@dataRegArr 0070  
                        __CFG_FOSC$INTIO67 000000                     _IOCB5_InterruptHandler 01DF  
                          _PIN_MANAGER_IOC 410E                          ?_StoreIntInEeprom 0021  
                         ??_SendAckMessage 0025                 __size_of_ADC_GetConversion 0030  
                         ??_SetChannelMode 002E                         ??_StoreIntInEeprom 0028  
                              _DacSetValue 2ECE  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 14 13:22:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   139                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   140  0000                     
   141                           ; Version 1.45
   142                           ; Generated 16/11/2017 GMT
   143                           ; 
   144                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC18F45K22 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     
   176 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   177  0000                     
   178                           	psect	idataCOMRAM
   179  0000'                    __pidataCOMRAM:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _writeAddress
   183  0000' 4000               	dw	16384
   184  0002' 0000               	dw	0
   185                           
   186                           ;initializer for _SynthTxOper
   187  0004' 01                 	db	1
   188                           
   189                           	psect	idataBANK0
   190  0000'                    __pidataBANK0:
   191                           	opt stack 0
   192                           
   193                           ;initializer for _groupsArray
   194  0000' 00'                	db	low _GroupControlMcu
   195  0001' 00'                	db	high _GroupControlMcu
   196  0002' 00'                	db	low _GroupStatusAndVersion
   197  0003' 00'                	db	high _GroupStatusAndVersion
   198  0004' 00'                	db	low _GroupAdc
   199  0005' 00'                	db	high _GroupAdc
   200  0006' 00'                	db	low _GroupSynthesizers
   201  0007' 00'                	db	high _GroupSynthesizers
   202  0008' 00'                	db	low _GroupFlashMemory
   203  0009' 00'                	db	high _GroupFlashMemory
   204  000A' 00'                	db	low _GroupDAC
   205  000B' 00'                	db	high _GroupDAC
   206                           
   207                           ;initializer for _readAddress
   208  000C' 4000               	dw	16384
   209  000E' 0000               	dw	0
   210                           
   211                           	psect	smallconst
   212  0000'                    __psmallconst:
   213                           	opt stack 0
   214  0000' 00                 	db	0
   215  0001'                    _SYNTH_REGS:
   216                           	opt stack 0
   217  0001' 041C               	dw	1052
   218  0003' 0001               	dw	1
   219  0005' 300B               	dw	12299
   220  0007' 0061               	dw	97
   221  0009' 193A               	dw	6458
   222  000B' 00C0               	dw	192
   223  000D' FCC9               	dw	64713
   224  000F' 1110               	dw	4368
   225  0011' 0428               	dw	1064
   226  0013' 102D               	dw	4141
   227  0015' 00E7               	dw	231
   228  0017' 1200               	dw	4608
   229  0019' 6076               	dw	24694
   230  001B' 3500               	dw	13568
   231  001D' 0025               	dw	37
   232  001F' 0080               	dw	128
   233  0021' 8384               	dw	33668
   234  0023' 3000               	dw	12288
   235  0025' 0003               	dw	3
   236  0027' 0000               	dw	0
   237  0029' 0012               	dw	18
   238  002B' 0000               	dw	0
   239  002D' 0001               	dw	1
   240  002F' 0000               	dw	0
   241  0031' 0640               	dw	1600
   242  0033' 0020               	dw	32
   243  0035'                    __end_of_SYNTH_REGS:
   244                           	opt stack 0
   245  0035'                    _DAC_DEFAULT_INIT_VALUES:
   246                           	opt stack 0
   247  0035' 2344               	dw	9028
   248  0037' 6344               	dw	25412
   249  0039' A344               	dw	41796
   250  003B' E344               	dw	58180
   251  003D'                    __end_of_DAC_DEFAULT_INIT_VALUES:
   252                           	opt stack 0
   253  003D'                    _channelArr:
   254                           	opt stack 0
   255  003D' 07                 	db	7
   256  003E' 06                 	db	6
   257  003F' 05                 	db	5
   258  0040' 04                 	db	4
   259  0041' 19                 	db	25
   260  0042' 0A                 	db	10
   261  0043' 0D                 	db	13
   262  0044'                    __end_of_channelArr:
   263                           	opt stack 0
   264  0044'                    _SYNTH_ADDRES:
   265                           	opt stack 0
   266  0044' 04                 	db	4
   267  0045' 08                 	db	8
   268  0046' 0C                 	db	12
   269  0047' 0F                 	db	15
   270  0048'                    __end_of_SYNTH_ADDRES:
   271                           	opt stack 0
   272  0048'                    _DAC_ADDRES:
   273                           	opt stack 0
   274  0048' 02                 	db	2
   275  0049' 04                 	db	4
   276  004A' 06                 	db	6
   277  004B' 08                 	db	8
   278  004C'                    __end_of_DAC_ADDRES:
   279                           	opt stack 0
   280  004C'                    exp@coeff:
   281                           	opt stack 0
   282  004C' 00                 	db	0
   283  004D' 80                 	db	128
   284  004E' 3F                 	db	63
   285  004F' 72                 	db	114
   286  0050' 31                 	db	49
   287  0051' 3F                 	db	63
   288  0052' FE                 	db	254
   289  0053' 75                 	db	117
   290  0054' 3E                 	db	62
   291  0055' 58                 	db	88
   292  0056' 63                 	db	99
   293  0057' 3D                 	db	61
   294  0058' 95                 	db	149
   295  0059' 1D                 	db	29
   296  005A' 3C                 	db	60
   297  005B' C5                 	db	197
   298  005C' AE                 	db	174
   299  005D' 3A                 	db	58
   300  005E' 79                 	db	121
   301  005F' 21                 	db	33
   302  0060' 39                 	db	57
   303  0061' 94                 	db	148
   304  0062' 80                 	db	128
   305  0063' 37                 	db	55
   306  0064' 93                 	db	147
   307  0065' A7                 	db	167
   308  0066' 35                 	db	53
   309  0067' 56                 	db	86
   310  0068' 15                 	db	21
   311  0069' 34                 	db	52
   312  006A'                    __end_ofexp@coeff:
   313                           	opt stack 0
   314  006A'                    log@coeff:
   315                           	opt stack 0
   316  006A' 00                 	db	0
   317  006B' 00                 	db	0
   318  006C' 00                 	db	0
   319  006D' 00                 	db	0
   320  006E' 80                 	db	128
   321  006F' 3F                 	db	63
   322  0070' F0                 	db	240
   323  0071' FF                 	db	255
   324  0072' BE                 	db	190
   325  0073' E2                 	db	226
   326  0074' A9                 	db	169
   327  0075' 3E                 	db	62
   328  0076' 83                 	db	131
   329  0077' 76                 	db	118
   330  0078' BE                 	db	190
   331  0079' AE                 	db	174
   332  007A' 2B                 	db	43
   333  007B' 3E                 	db	62
   334  007C' 3C                 	db	60
   335  007D' C3                 	db	195
   336  007E' BD                 	db	189
   337  007F' D2                 	db	210
   338  0080' 13                 	db	19
   339  0081' 3D                 	db	61
   340  0082' 78                 	db	120
   341  0083' D3                 	db	211
   342  0084' BB                 	db	187
   343  0085'                    __end_oflog@coeff:
   344                           	opt stack 0
   345  0085'                    STR_1:
   346                           
   347                           ; BSR set to: 0
   348  0085' 4D                 	db	77	;'M'
   349  0086' 61                 	db	97	;'a'
   350  0087' 72                 	db	114	;'r'
   351  0088' 20                 	db	32
   352  0089' 31                 	db	49	;'1'
   353  008A' 34                 	db	52	;'4'
   354  008B' 20                 	db	32
   355  008C' 32                 	db	50	;'2'
   356  008D' 30                 	db	48	;'0'
   357  008E' 31                 	db	49	;'1'
   358  008F' 38                 	db	56	;'8'
   359  0090' 00                 	db	0
   360  0000                     
   361                           ; #config settings
   362  0091' 00                 	db	0	; dummy byte at the end
   363  0000                     
   364                           	psect	nvCOMRAM
   365  0000'                    __pnvCOMRAM:
   366                           	opt stack 0
   367  0000'                    _timer0ReloadVal:
   368                           	opt stack 0
   369  0000'                    	ds	2
   370                           
   371                           	psect	nvBANK0
   372  0000'                    __pnvBANK0:
   373                           	opt stack 0
   374  0000'                    _TMR0_InterruptHandler:
   375                           	opt stack 0
   376  0000'                    	ds	2
   377  0002'                    _eusart1TxBufferRemaining:
   378                           	opt stack 0
   379  0002'                    	ds	1
   380  0000                     _ANSELA	set	3896
   381  0000                     _ANSELE	set	3900
   382  0000                     _ANSELD	set	3899
   383  0000                     _ANSELB	set	3897
   384  0000                     _ANSELC	set	3898
   385  0000                     _ADCON0bits	set	4034
   386  0000                     _ADRESH	set	4036
   387  0000                     _ADRESL	set	4035
   388  0000                     _ADCON2	set	4032
   389  0000                     _ADCON1	set	4033
   390  0000                     _ADCON0	set	4034
   391  0000                     _T0CONbits	set	4053
   392  0000                     _T0CON	set	4053
   393  0000                     _TMR0L	set	4054
   394  0000                     _TMR0H	set	4055
   395  0000                     _EEDATA	set	4008
   396  0000                     _EEADR	set	4009
   397  0000                     _EECON2	set	4007
   398  0000                     _EECON1bits	set	4006
   399  0000                     _TABLAT	set	4085
   400  0000                     _TBLPTRL	set	4086
   401  0000                     _TBLPTRH	set	4087
   402  0000                     _TBLPTRU	set	4088
   403  0000                     _INTCON2bits	set	4081
   404  0000                     _WPUB	set	3937
   405  0000                     _TRISD	set	3989
   406  0000                     _TRISC	set	3988
   407  0000                     _TRISB	set	3987
   408  0000                     _TRISA	set	3986
   409  0000                     _TRISE	set	3990
   410  0000                     _LATC	set	3979
   411  0000                     _LATB	set	3978
   412  0000                     _LATA	set	3977
   413  0000                     _LATD	set	3980
   414  0000                     _LATE	set	3981
   415  0000                     _RCREG1	set	4014
   416  0000                     _RCSTA1bits	set	4011
   417  0000                     _TXREG1	set	4013
   418  0000                     _SPBRGH1	set	4016
   419  0000                     _SPBRG1	set	4015
   420  0000                     _TXSTA1	set	4012
   421  0000                     _RCSTA1	set	4011
   422  0000                     _BAUDCON1	set	4024
   423  0000                     _PIR1bits	set	3998
   424  0000                     _PIE1bits	set	3997
   425  0000                     _PIR2bits	set	4001
   426  0000                     _PIE2bits	set	4000
   427  0000                     _RCONbits	set	4048
   428  0000                     _OSCTUNE	set	3995
   429  0000                     _OSCCON2	set	4050
   430  0000                     _OSCCON	set	4051
   431  0000                     _LATAbits	set	3977
   432  0000                     _LATDbits	set	3980
   433  0000                     _INTCONbits	set	4082
   434  0000                     _IOCB	set	3938
   435  0000                     _LATCbits	set	3979
   436  0000                     _LATBbits	set	3978
   437                           
   438                           	psect	cinit
   439  0000'                    __pcinit:
   440                           	opt stack 0
   441  0000'                    start_initialization:
   442                           	opt stack 0
   443  0000'                    __initialization:
   444                           	opt stack 0
   445                           
   446                           ; Initialize objects allocated to BANK0 (16 bytes)
   447                           ; load TBLPTR registers with __pidataBANK0
   448  0000' 0E00'              	movlw	low __pidataBANK0
   449  0002' 6EF6               	movwf	tblptrl,c
   450  0004' 0E00'              	movlw	high __pidataBANK0
   451  0006' 6EF7               	movwf	tblptrh,c
   452  0008' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   453  000A' 6EF8               	movwf	tblptru,c
   454  000C' EE00' F000'        	lfsr	0,__pdataBANK0
   455  0010' EE10 F010          	lfsr	1,16
   456  0014'                    copy_data0:
   457  0014' 0009               	tblrd		*+
   458  0016' CFF5 FFEE          	movff	tablat,postinc0
   459  001A' 50E5               	movf	postdec1,w,c
   460  001C' 50E1               	movf	fsr1l,w,c
   461  001E' E1FA               	bnz	copy_data0
   462                           
   463                           ; Initialize objects allocated to COMRAM (5 bytes)
   464                           ; load TBLPTR registers with __pidataCOMRAM
   465  0020' 0E00'              	movlw	low __pidataCOMRAM
   466  0022' 6EF6               	movwf	tblptrl,c
   467  0024' 0E00'              	movlw	high __pidataCOMRAM
   468  0026' 6EF7               	movwf	tblptrh,c
   469  0028' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   470  002A' 6EF8               	movwf	tblptru,c
   471  002C' EE00' F000'        	lfsr	0,__pdataCOMRAM
   472  0030' EE10 F005          	lfsr	1,5
   473  0034'                    copy_data1:
   474  0034' 0009               	tblrd		*+
   475  0036' CFF5 FFEE          	movff	tablat,postinc0
   476  003A' 50E5               	movf	postdec1,w,c
   477  003C' 50E1               	movf	fsr1l,w,c
   478  003E' E1FA               	bnz	copy_data1
   479                           
   480                           ; Clear objects allocated to BANK1 (194 bytes)
   481  0040' EE00' F000'        	lfsr	0,__pbssBANK1
   482  0044' 0EC2               	movlw	194
   483  0046'                    clear_0:
   484  0046' 6AEE               	clrf	postinc0,c
   485  0048' 06E8               	decf	wreg,f,c
   486  004A' E1FD               	bnz	clear_0
   487                           
   488                           ; Clear objects allocated to BANK0 (44 bytes)
   489  004C' EE00' F000'        	lfsr	0,__pbssBANK0
   490  0050' 0E2C               	movlw	44
   491  0052'                    clear_1:
   492  0052' 6AEE               	clrf	postinc0,c
   493  0054' 06E8               	decf	wreg,f,c
   494  0056' E1FD               	bnz	clear_1
   495                           
   496                           ; Clear objects allocated to COMRAM (17 bytes)
   497  0058' EE00' F000'        	lfsr	0,__pbssCOMRAM
   498  005C' 0E11               	movlw	17
   499  005E'                    clear_2:
   500  005E' 6AEE               	clrf	postinc0,c
   501  0060' 06E8               	decf	wreg,f,c
   502  0062' E1FD               	bnz	clear_2
   503  0064'                    end_of_initialization:
   504                           	opt stack 0
   505  0064'                    __end_of__initialization:
   506                           	opt stack 0
   507  0064' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   508  0066' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   509  0068' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   510  006A' 6EF8               	movwf	tblptru,c
   511  006C' 0100               	movlb	0
   512  006E' EF00' F000'        	goto	_main	;jump to C main() function
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	bssCOMRAM
   523  0000'                    __pbssCOMRAM:
   524                           	opt stack 0
   525  0000'                    _numOfValidateSamples:
   526                           	opt stack 0
   527  0000'                    	ds	4
   528  0004'                    TMR0_ISR@CountCallBack:
   529                           	opt stack 0
   530  0004'                    	ds	2
   531  0006'                    _eusart1RxTail:
   532                           	opt stack 0
   533  0006'                    	ds	1
   534  0007'                    _eusart1RxHead:
   535                           	opt stack 0
   536  0007'                    	ds	1
   537  0008'                    _eusart1TxTail:
   538                           	opt stack 0
   539  0008'                    	ds	1
   540  0009'                    _eusart1TxHead:
   541                           	opt stack 0
   542  0009'                    	ds	1
   543  000A'                    _cntRegUpdate:
   544                           	opt stack 0
   545  000A'                    	ds	1
   546  000B'                    _isReWriteDone:
   547                           	opt stack 0
   548  000B'                    	ds	1
   549  000C'                    _adcSampleMode:
   550                           	opt stack 0
   551  000C'                    	ds	1
   552  000D'                    _numOfReadSamples:
   553                           	opt stack 0
   554  000D'                    	ds	4
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	dataCOMRAM
   565  0000'                    __pdataCOMRAM:
   566                           	opt stack 0
   567  0000'                    _writeAddress:
   568                           	opt stack 0
   569  0000'                    	ds	4
   570  0004'                    _SynthTxOper:
   571                           	opt stack 0
   572  0004'                    	ds	1
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           postdec1	equ	0xFE5
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	bssBANK0
   583  0000'                    __pbssBANK0:
   584                           	opt stack 0
   585  0000'                    _mcuRunTimeIn5SecTicks:
   586                           	opt stack 0
   587  0000'                    	ds	4
   588  0004'                    _errno:
   589                           	opt stack 0
   590  0004'                    	ds	2
   591  0006'                    _sampleCount:
   592                           	opt stack 0
   593  0006'                    	ds	2
   594  0008'                    _count:
   595                           	opt stack 0
   596  0008'                    	ds	2
   597  000A'                    _msgCount:
   598                           	opt stack 0
   599  000A'                    	ds	1
   600  000B'                    _crcGiven:
   601                           	opt stack 0
   602  000B'                    	ds	1
   603  000C'                    _crcCalc:
   604                           	opt stack 0
   605  000C'                    	ds	1
   606  000D'                    _data:
   607                           	opt stack 0
   608  000D'                    	ds	1
   609  000E'                    _dataSize:
   610                           	opt stack 0
   611  000E'                    	ds	1
   612  000F'                    _request:
   613                           	opt stack 0
   614  000F'                    	ds	1
   615  0010'                    _group:
   616                           	opt stack 0
   617  0010'                    	ds	1
   618  0011'                    _cState:
   619                           	opt stack 0
   620  0011'                    	ds	1
   621  0012'                    _eusart1RxCount:
   622                           	opt stack 0
   623  0012'                    	ds	1
   624  0013'                    _channel:
   625                           	opt stack 0
   626  0013'                    	ds	1
   627  0014'                    _conversionFormat:
   628                           	opt stack 0
   629  0014'                    	ds	1
   630  0015'                    _TimerKeepAliveFlag:
   631                           	opt stack 0
   632  0015'                    	ds	1
   633  0016'                    _TimerSamplingFlag:
   634                           	opt stack 0
   635  0016'                    	ds	1
   636  0017'                    _TimerOneSecFlag:
   637                           	opt stack 0
   638  0017'                    	ds	1
   639  0018'                    _rxMsgQueue:
   640                           	opt stack 0
   641  0018'                    	ds	20
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           postdec1	equ	0xFE5
   649                           fsr1l	equ	0xFE1
   650                           
   651                           	psect	dataBANK0
   652  0000'                    __pdataBANK0:
   653                           	opt stack 0
   654  0000'                    _groupsArray:
   655                           	opt stack 0
   656  0000'                    	ds	12
   657  000C'                    _readAddress:
   658                           	opt stack 0
   659  000C'                    	ds	4
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           wreg	equ	0xFE8
   666                           postdec1	equ	0xFE5
   667                           fsr1l	equ	0xFE1
   668                           
   669                           	psect	bssBANK1
   670  0000'                    __pbssBANK1:
   671                           	opt stack 0
   672  0000'                    _eusart1TxBuffer:
   673                           	opt stack 0
   674  0000'                    	ds	70
   675  0046'                    _eusart1RxBuffer:
   676                           	opt stack 0
   677  0046'                    	ds	40
   678  006E'                    _sampleArray:
   679                           	opt stack 0
   680  006E'                    	ds	64
   681  00AE'                    _rxMsgData:
   682                           	opt stack 0
   683  00AE'                    	ds	20
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1l	equ	0xFE1
   692                           
   693                           	psect	cstackBANK1
   694  0000'                    __pcstackBANK1:
   695                           	opt stack 0
   696  0000'                    GroupStatusAndVersion@data:
   697                           	opt stack 0
   698  0000'                    GroupAdc@data:
   699                           	opt stack 0
   700  0000'                    GroupSynthesizers@data:
   701                           	opt stack 0
   702  0000'                    GroupFlashMemory@data:
   703                           	opt stack 0
   704  0000'                    GroupDAC@data:
   705                           	opt stack 0
   706  0000'                    
   707                           ; 3 bytes @ 0x0
   708  0000'                    	ds	2
   709  0002'                    ??_readUartMessage:
   710                           
   711                           ; 1 bytes @ 0x2
   712  0002'                    	ds	4
   713  0006'                    readUartMessage@idx:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x6
   717  0006'                    	ds	2
   718  0008'                    readUartMessage@chRec:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x8
   722  0008'                    	ds	1
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	cstackBANK0
   733  0000'                    __pcstackBANK0:
   734                           	opt stack 0
   735  0000'                    ??_FlashSampleWrite:
   736  0000'                    ??___ftdiv:
   737  0000'                    ??_FlashReadUart:
   738  0000'                    strtol@sign:
   739                           	opt stack 0
   740  0000'                    GetMcuFwVersion@timeCoplie:
   741                           	opt stack 0
   742  0000'                    FlashReadCondition@TxMsg:
   743                           	opt stack 0
   744  0000'                    GetMcuRunTime@TxMsg:
   745                           	opt stack 0
   746  0000'                    SynthReadData@TxMsg:
   747                           	opt stack 0
   748  0000'                    SWSPI_Synth_send_bits@bitArray:
   749                           	opt stack 0
   750                           
   751                           ; 32 bytes @ 0x0
   752  0000'                    	ds	1
   753  0001'                    strtol@a:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x1
   757  0001'                    	ds	1
   758  0002'                    FlashSampleWrite@rotateLeft:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x2
   762  0002'                    	ds	1
   763  0003'                    ___ftdiv@cntr:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x3
   767  0003'                    	ds	1
   768  0004'                    ___ftdiv@f3:
   769                           	opt stack 0
   770  0004'                    GetMcuFwVersion@TxMsg:
   771                           	opt stack 0
   772                           
   773                           ; 9 bytes @ 0x4
   774  0004'                    	ds	1
   775  0005'                    strtol@c:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x5
   779  0005'                    	ds	1
   780  0006'                    ?_GetIntFromUartData:
   781                           	opt stack 0
   782  0006'                    GetIntFromUartData@data:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x6
   786  0006'                    	ds	1
   787  0007'                    ___ftdiv@exp:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x7
   791  0007'                    	ds	1
   792  0008'                    ___ftdiv@sign:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x8
   796  0008'                    	ds	1
   797  0009'                    ?___ftmul:
   798                           	opt stack 0
   799  0009'                    ___ftmul@f1:
   800                           	opt stack 0
   801  0009'                    GetMcuRunTime@tempRunTime:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x9
   805  0009'                    	ds	1
   806  000A'                    GetIntFromUartData@dataRegArr:
   807                           	opt stack 0
   808                           
   809                           ; 9 bytes @ 0xA
   810  000A'                    	ds	2
   811  000C'                    ___ftmul@f2:
   812                           	opt stack 0
   813  000C'                    FlashReadUart@TxMsg:
   814                           	opt stack 0
   815                           
   816                           ; 69 bytes @ 0xC
   817  000C'                    	ds	1
   818  000D'                    GetMcuRunTime@idx:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0xD
   822  000D'                    	ds	2
   823  000F'                    ??___ftmul:
   824                           
   825                           ; 1 bytes @ 0xF
   826  000F'                    	ds	3
   827  0012'                    ___ftmul@exp:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x12
   831  0012'                    	ds	1
   832  0013'                    GetIntFromUartData@num:
   833                           	opt stack 0
   834  0013'                    ___ftmul@f3_as_product:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x13
   838  0013'                    	ds	1
   839  0014'                    GetIntFromUartData@retVal:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x14
   843  0014'                    	ds	2
   844  0016'                    ___ftmul@cntr:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x16
   848  0016'                    	ds	1
   849  0017'                    ___ftmul@sign:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x17
   853  0017'                    	ds	1
   854  0018'                    ??_CheckFlashPrecentage:
   855  0018'                    ?___ftadd:
   856                           	opt stack 0
   857  0018'                    ?___fttol:
   858                           	opt stack 0
   859  0018'                    GetIntFromUartData@c:
   860                           	opt stack 0
   861  0018'                    ___ftadd@f1:
   862                           	opt stack 0
   863  0018'                    ___fttol@f1:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x18
   867  0018'                    	ds	1
   868  0019'                    GetIntFromUartData@idx:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x19
   872  0019'                    	ds	2
   873  001B'                    ___ftadd@f2:
   874                           	opt stack 0
   875                           
   876                           ; 3 bytes @ 0x1B
   877  001B'                    	ds	1
   878  001C'                    ??___fttol:
   879  001C'                    CheckFlashPrecentage@precentage:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0x1C
   883  001C'                    	ds	2
   884  001E'                    ??___ftadd:
   885                           
   886                           ; 1 bytes @ 0x1E
   887  001E'                    	ds	2
   888  0020'                    SWSPI_Synth_send_bits@mask:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x20
   892  0020'                    	ds	1
   893  0021'                    ___ftadd@sign:
   894                           	opt stack 0
   895  0021'                    ___fttol@sign1:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x21
   899  0021'                    	ds	1
   900  0022'                    ___ftadd@exp2:
   901                           	opt stack 0
   902  0022'                    ___fttol@lval:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x22
   906  0022'                    	ds	1
   907  0023'                    ___ftadd@exp1:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x23
   911  0023'                    	ds	1
   912  0024'                    ?___ftsub:
   913                           	opt stack 0
   914  0024'                    ?_eval_poly:
   915                           	opt stack 0
   916  0024'                    SWSPI_Synth_send_bits@count:
   917                           	opt stack 0
   918  0024'                    ___ftsub@f1:
   919                           	opt stack 0
   920  0024'                    eval_poly@x:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x24
   924  0024'                    	ds	1
   925  0025'                    SWSPI_Synth_send_bits@phrType:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x25
   929  0025'                    	ds	1
   930  0026'                    ??_DacInit:
   931  0026'                    ___fttol@exp1:
   932                           	opt stack 0
   933  0026'                    DacSetValue@data:
   934                           	opt stack 0
   935  0026'                    UpdateTxFreq@data:
   936                           	opt stack 0
   937  0026'                    UpdateRxFreq@data:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x26
   941  0026'                    	ds	1
   942  0027'                    ?___altoft:
   943                           	opt stack 0
   944  0027'                    eval_poly@d:
   945                           	opt stack 0
   946  0027'                    ___ftsub@f2:
   947                           	opt stack 0
   948  0027'                    ___altoft@c:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x27
   952  0027'                    	ds	1
   953  0028'                    ??_DacSetValue:
   954  0028'                    DacInit@dacInput:
   955                           	opt stack 0
   956  0028'                    UpdateTxFreq@regData:
   957                           	opt stack 0
   958  0028'                    UpdateRxFreq@regData:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x28
   962  0028'                    	ds	1
   963  0029'                    eval_poly@n:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x29
   967  0029'                    	ds	1
   968  002A'                    DacInit@idx:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x2A
   972  002A'                    	ds	1
   973  002B'                    ??_eval_poly:
   974  002B'                    ??___altoft:
   975  002B'                    DacSetValue@dacIndex:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x2B
   979  002B'                    	ds	1
   980  002C'                    DacSetValue@regData:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x2C
   984  002C'                    	ds	1
   985  002D'                    eval_poly@res:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x2D
   989  002D'                    	ds	2
   990  002F'                    ___altoft@exp:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x2F
   994  002F'                    	ds	1
   995  0030'                    ?_log:
   996                           	opt stack 0
   997  0030'                    ?_ldexp:
   998                           	opt stack 0
   999  0030'                    ___altoft@sign:
  1000                           	opt stack 0
  1001  0030'                    ldexp@value:
  1002                           	opt stack 0
  1003  0030'                    log@x:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x30
  1007  0030'                    	ds	1
  1008  0031'                    ?_floor:
  1009                           	opt stack 0
  1010  0031'                    floor@x:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x31
  1014  0031'                    	ds	2
  1015  0033'                    ldexp@newexp:
  1016                           	opt stack 0
  1017  0033'                    log@exponent:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x33
  1021  0033'                    	ds	1
  1022  0034'                    floor@i:
  1023                           	opt stack 0
  1024                           
  1025                           ; 3 bytes @ 0x34
  1026  0034'                    	ds	1
  1027  0035'                    ??_ldexp:
  1028                           
  1029                           ; 1 bytes @ 0x35
  1030  0035'                    	ds	2
  1031  0037'                    floor@expon:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x37
  1035  0037'                    	ds	2
  1036  0039'                    ?_exp:
  1037                           	opt stack 0
  1038  0039'                    exp@x:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x39
  1042  0039'                    	ds	3
  1043  003C'                    _exp$3283:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x3C
  1047  003C'                    	ds	3
  1048  003F'                    exp@exponent:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x3F
  1052  003F'                    	ds	2
  1053  0041'                    exp@sign:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x41
  1057  0041'                    	ds	1
  1058  0042'                    ?_pow:
  1059                           	opt stack 0
  1060  0042'                    pow@x:
  1061                           	opt stack 0
  1062                           
  1063                           ; 3 bytes @ 0x42
  1064  0042'                    	ds	3
  1065  0045'                    pow@y:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x45
  1069  0045'                    	ds	3
  1070  0048'                    _pow$3281:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x48
  1074  0048'                    	ds	3
  1075  004B'                    _pow$3282:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x4B
  1079  004B'                    	ds	3
  1080  004E'                    pow@sign:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x4E
  1084  004E'                    	ds	1
  1085  004F'                    pow@yi:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x4F
  1089  004F'                    	ds	2
  1090  0051'                    _FlashReadUart$577:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x51
  1094  0051'                    	ds	2
  1095  0053'                    ??_AdcConvert:
  1096                           
  1097                           ; 1 bytes @ 0x53
  1098  0053'                    	ds	2
  1099  0055'                    AdcConvert@_adcResult:
  1100                           	opt stack 0
  1101  0055'                    _FlashReadUart$578:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x55
  1105  0055'                    	ds	2
  1106  0057'                    AdcConvert@_adcResult_338:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x57
  1110  0057'                    	ds	2
  1111  0059'                    FlashReadUart@j:
  1112                           	opt stack 0
  1113  0059'                    _AdcConvert$3280:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x59
  1117  0059'                    	ds	2
  1118  005B'                    FlashReadUart@idx:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x5B
  1122  005B'                    	ds	1
  1123  005C'                    AdcConvert@adcRes:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x5C
  1127  005C'                    	ds	1
  1128  005D'                    FlashReadUart@offset:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x5D
  1132  005D'                    	ds	1
  1133  005E'                    AdcConvert@idx:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x5E
  1137  005E'                    	ds	1
  1138  005F'                    GroupFlashMemory@request:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x5F
  1142  005F'                    	ds	1
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           
  1152                           	psect	cstackCOMRAM
  1153  0000'                    __pcstackCOMRAM:
  1154                           	opt stack 0
  1155  0000'                    ?_SetMcuFwVersion:
  1156                           	opt stack 0
  1157  0000'                    ?___lwmod:
  1158                           	opt stack 0
  1159  0000'                    ___lwmod@dividend:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x0
  1163  0000'                    	ds	2
  1164  0002'                    ___lwmod@divisor:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x2
  1168  0002'                    	ds	2
  1169  0004'                    ___lwmod@counter:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x4
  1173  0004'                    	ds	1
  1174  0005'                    ??_INTERRUPT_InterruptManager:
  1175                           
  1176                           ; 1 bytes @ 0x5
  1177  0005'                    	ds	18
  1178  0017'                    ??_EUSART1_Read:
  1179  0017'                    ??_isspace:
  1180  0017'                    ??_isdigit:
  1181  0017'                    ??_isupper:
  1182  0017'                    ??_BlinkErrorLeds:
  1183  0017'                    ??_BlinkOkLeds:
  1184  0017'                    ??_keepAliveSignalLed:
  1185  0017'                    ?_ADC_GetConversion:
  1186                           	opt stack 0
  1187  0017'                    ?_abs:
  1188                           	opt stack 0
  1189  0017'                    ?___wmul:
  1190                           	opt stack 0
  1191  0017'                    ?___ftpack:
  1192                           	opt stack 0
  1193  0017'                    ?_frexp:
  1194                           	opt stack 0
  1195  0017'                    ?___ftneg:
  1196                           	opt stack 0
  1197  0017'                    ?___lmul:
  1198                           	opt stack 0
  1199  0017'                    ?___lldiv:
  1200                           	opt stack 0
  1201  0017'                    ?___llmod:
  1202                           	opt stack 0
  1203  0017'                    InitAdcApplicationMgr@channel:
  1204                           	opt stack 0
  1205  0017'                    SwSpi_Data_Pin@cPinMode:
  1206                           	opt stack 0
  1207  0017'                    SwSpi_Clk_Pin@cPinMode:
  1208                           	opt stack 0
  1209  0017'                    SwSpi_Set_CE_Pin@cPinMode:
  1210                           	opt stack 0
  1211  0017'                    SwSpi_Set_Synth_Le_Pin@cPinMode:
  1212                           	opt stack 0
  1213  0017'                    SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1214                           	opt stack 0
  1215  0017'                    EUSART1_Write@txData:
  1216                           	opt stack 0
  1217  0017'                    DATAEE_WriteByte@bData:
  1218                           	opt stack 0
  1219  0017'                    DATAEE_ReadByte@bAdd:
  1220                           	opt stack 0
  1221  0017'                    toupper@c:
  1222                           	opt stack 0
  1223  0017'                    PLLUartInitialize@data:
  1224                           	opt stack 0
  1225  0017'                    TMR0_SetInterruptHandler@InterruptHandler:
  1226                           	opt stack 0
  1227  0017'                    crc8@dataArray:
  1228                           	opt stack 0
  1229  0017'                    Make32bitsArray@array:
  1230                           	opt stack 0
  1231  0017'                    ___wmul@multiplier:
  1232                           	opt stack 0
  1233  0017'                    abs@a:
  1234                           	opt stack 0
  1235  0017'                    memset@p1:
  1236                           	opt stack 0
  1237  0017'                    ___ftpack@arg:
  1238                           	opt stack 0
  1239  0017'                    ___ftge@ff1:
  1240                           	opt stack 0
  1241  0017'                    ___ftneg@f1:
  1242                           	opt stack 0
  1243  0017'                    frexp@value:
  1244                           	opt stack 0
  1245  0017'                    FLASH_ReadByte@flashAddr:
  1246                           	opt stack 0
  1247  0017'                    FLASH_EraseBlock@baseAddr:
  1248                           	opt stack 0
  1249  0017'                    make8@data:
  1250                           	opt stack 0
  1251  0017'                    ___lmul@multiplier:
  1252                           	opt stack 0
  1253  0017'                    ___lldiv@dividend:
  1254                           	opt stack 0
  1255  0017'                    ___llmod@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 4 bytes @ 0x17
  1259  0017'                    	ds	1
  1260  0018'                    EepromRead@address:
  1261                           	opt stack 0
  1262  0018'                    SwSpi_Data_Pin@phrType:
  1263                           	opt stack 0
  1264  0018'                    SwSpi_Clk_Pin@phrType:
  1265                           	opt stack 0
  1266  0018'                    SwSpi_Set_CE_Pin@phrType:
  1267                           	opt stack 0
  1268  0018'                    SwSpi_Set_Synth_Le_Pin@phrType:
  1269                           	opt stack 0
  1270  0018'                    DATAEE_WriteByte@bAdd:
  1271                           	opt stack 0
  1272  0018'                    _isdigit$2994:
  1273                           	opt stack 0
  1274  0018'                    _isspace$2997:
  1275                           	opt stack 0
  1276  0018'                    _isupper$3000:
  1277                           	opt stack 0
  1278  0018'                    WriteUartMessage@dataBuf:
  1279                           	opt stack 0
  1280  0018'                    EUSART1_Read@readValue:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x18
  1284  0018'                    	ds	1
  1285  0019'                    ??_ADC_GetConversion:
  1286  0019'                    ??_abs:
  1287  0019'                    ??_TMR0_Initialize:
  1288  0019'                    ?_ReadIntFromEeprom:
  1289                           	opt stack 0
  1290  0019'                    SWSPI_DAC_send_bits@data:
  1291                           	opt stack 0
  1292  0019'                    DATAEE_WriteByte@GIEBitValue:
  1293                           	opt stack 0
  1294  0019'                    isdigit@c:
  1295                           	opt stack 0
  1296  0019'                    isspace@c:
  1297                           	opt stack 0
  1298  0019'                    isupper@c:
  1299                           	opt stack 0
  1300  0019'                    crc8@dataSize:
  1301                           	opt stack 0
  1302  0019'                    ReadIntFromEeprom@numOfByes:
  1303                           	opt stack 0
  1304  0019'                    ___wmul@multiplicand:
  1305                           	opt stack 0
  1306  0019'                    memset@c:
  1307                           	opt stack 0
  1308  0019'                    Make32bitsArray@data:
  1309                           	opt stack 0
  1310                           
  1311                           ; 4 bytes @ 0x19
  1312  0019'                    	ds	1
  1313  001A'                    ??_isalpha:
  1314  001A'                    BlinkErrorLeds@state:
  1315                           	opt stack 0
  1316  001A'                    BlinkOkLeds@state:
  1317                           	opt stack 0
  1318  001A'                    EepromWrite@data:
  1319                           	opt stack 0
  1320  001A'                    SWSPI_DAC_send_bits@count:
  1321                           	opt stack 0
  1322  001A'                    ___ftpack@exp:
  1323                           	opt stack 0
  1324  001A'                    WriteUartMessage@dataSize:
  1325                           	opt stack 0
  1326  001A'                    frexp@eptr:
  1327                           	opt stack 0
  1328  001A'                    ___ftge@ff2:
  1329                           	opt stack 0
  1330                           
  1331                           ; 3 bytes @ 0x1A
  1332  001A'                    	ds	1
  1333  001B'                    ??_crc8:
  1334  001B'                    EepromWrite@address:
  1335                           	opt stack 0
  1336  001B'                    SWSPI_DAC_send_bits@phrType:
  1337                           	opt stack 0
  1338  001B'                    FLASH_EraseBlock@GIEBitValue:
  1339                           	opt stack 0
  1340  001B'                    ADC_GetConversion@channel:
  1341                           	opt stack 0
  1342  001B'                    make8@dataLocation:
  1343                           	opt stack 0
  1344  001B'                    ___ftpack@sign:
  1345                           	opt stack 0
  1346  001B'                    _isalpha$2991:
  1347                           	opt stack 0
  1348  001B'                    BlinkErrorLeds@idx:
  1349                           	opt stack 0
  1350  001B'                    BlinkOkLeds@idx:
  1351                           	opt stack 0
  1352  001B'                    ___wmul@product:
  1353                           	opt stack 0
  1354  001B'                    memset@n:
  1355                           	opt stack 0
  1356  001B'                    ___lmul@multiplicand:
  1357                           	opt stack 0
  1358  001B'                    ___lldiv@divisor:
  1359                           	opt stack 0
  1360  001B'                    ___llmod@divisor:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x1B
  1364  001B'                    	ds	1
  1365  001C'                    ??_make8:
  1366  001C'                    ??___ftpack:
  1367  001C'                    ??_frexp:
  1368  001C'                    ??_WriteUartMessage:
  1369  001C'                    isalpha@c:
  1370                           	opt stack 0
  1371  001C'                    crc8@crc:
  1372                           	opt stack 0
  1373  001C'                    FLASH_WriteBlock@writeAddr:
  1374                           	opt stack 0
  1375                           
  1376                           ; 4 bytes @ 0x1C
  1377  001C'                    	ds	1
  1378  001D'                    ??_ReadIntFromEeprom:
  1379  001D'                    ??_Make32bitsArray:
  1380  001D'                    ??___ftge:
  1381  001D'                    WriteUartMessage@idx:
  1382                           	opt stack 0
  1383  001D'                    memset@p:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x1D
  1387  001D'                    	ds	1
  1388  001E'                    crc8@i:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x1E
  1392  001E'                    	ds	1
  1393  001F'                    ?___awtoft:
  1394                           	opt stack 0
  1395  001F'                    ?___lltoft:
  1396                           	opt stack 0
  1397  001F'                    ?___lwtoft:
  1398                           	opt stack 0
  1399  001F'                    ___llmod@counter:
  1400                           	opt stack 0
  1401  001F'                    ZeroArray@array:
  1402                           	opt stack 0
  1403  001F'                    ZeroBitsArray@array:
  1404                           	opt stack 0
  1405  001F'                    Make32bitsArray@idx:
  1406                           	opt stack 0
  1407  001F'                    ___awtoft@c:
  1408                           	opt stack 0
  1409  001F'                    ___lwtoft@c:
  1410                           	opt stack 0
  1411  001F'                    ___lmul@product:
  1412                           	opt stack 0
  1413  001F'                    ___lldiv@quotient:
  1414                           	opt stack 0
  1415  001F'                    ___lltoft@c:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x1F
  1419  001F'                    	ds	1
  1420  0020'                    FLASH_WriteBlock@flashWrBufPtr:
  1421                           	opt stack 0
  1422  0020'                    StoreIntInEeprom@data:
  1423                           	opt stack 0
  1424                           
  1425                           ; 4 bytes @ 0x20
  1426  0020'                    	ds	1
  1427  0021'                    ZeroArray@size:
  1428                           	opt stack 0
  1429  0021'                    SWSPI_Synth_send_bits@data:
  1430                           	opt stack 0
  1431  0021'                    ReadIntFromEeprom@retVal:
  1432                           	opt stack 0
  1433                           
  1434                           ; 4 bytes @ 0x21
  1435  0021'                    	ds	1
  1436  0022'                    ??_FLASH_WriteBlock:
  1437  0022'                    ___awtoft@sign:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x22
  1441  0022'                    	ds	1
  1442  0023'                    ??_FlashReadCondition:
  1443  0023'                    ??___lltoft:
  1444  0023'                    ?_strtol:
  1445                           	opt stack 0
  1446  0023'                    SendAckMessage@inRequest:
  1447                           	opt stack 0
  1448  0023'                    ___lldiv@counter:
  1449                           	opt stack 0
  1450  0023'                    SynthReadData@data:
  1451                           	opt stack 0
  1452  0023'                    strtol@s:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x23
  1456  0023'                    	ds	1
  1457  0024'                    ??_GetMcuRunTime:
  1458  0024'                    SendAckMessage@inGroup:
  1459                           	opt stack 0
  1460  0024'                    StoreIntInEeprom@address:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x24
  1464  0024'                    	ds	1
  1465  0025'                    ReadIntFromEeprom@address:
  1466                           	opt stack 0
  1467  0025'                    StoreIntInEeprom@numOfByes:
  1468                           	opt stack 0
  1469  0025'                    strtol@endptr:
  1470                           	opt stack 0
  1471  0025'                    SWSPI_send_word@data:
  1472                           	opt stack 0
  1473  0025'                    SendAckMessage@TxMsg:
  1474                           	opt stack 0
  1475                           
  1476                           ; 6 bytes @ 0x25
  1477  0025'                    	ds	1
  1478  0026'                    FLASH_WriteBlock@blockStartAddr:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x26
  1482  0026'                    	ds	1
  1483  0027'                    StoreIntInEeprom@val:
  1484                           	opt stack 0
  1485  0027'                    ___lltoft@exp:
  1486                           	opt stack 0
  1487  0027'                    strtol@base:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x27
  1491  0027'                    	ds	1
  1492  0028'                    ?___ftdiv:
  1493                           	opt stack 0
  1494  0028'                    StoreIntInEeprom@idx:
  1495                           	opt stack 0
  1496  0028'                    ___ftdiv@f1:
  1497                           	opt stack 0
  1498                           
  1499                           ; 3 bytes @ 0x28
  1500  0028'                    	ds	1
  1501  0029'                    ??_strtol:
  1502  0029'                    SWSPI_send_word@dataSize:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x29
  1506  0029'                    	ds	1
  1507  002A'                    SWSPI_send_word@datac:
  1508                           	opt stack 0
  1509  002A'                    FLASH_WriteBlock@GIEBitValue:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x2A
  1513  002A'                    	ds	1
  1514  002B'                    ??_testLeds:
  1515  002B'                    FLASH_WriteBlock@i:
  1516                           	opt stack 0
  1517  002B'                    SetAdcOperationMode@data:
  1518                           	opt stack 0
  1519  002B'                    SetConversionResultFormat@data:
  1520                           	opt stack 0
  1521  002B'                    SetChannelMode@data:
  1522                           	opt stack 0
  1523  002B'                    FlashReadUart@numOfSampleToRead:
  1524                           	opt stack 0
  1525  002B'                    SWSPI_send_word@idx:
  1526                           	opt stack 0
  1527  002B'                    ___ftdiv@f2:
  1528                           	opt stack 0
  1529                           
  1530                           ; 3 bytes @ 0x2B
  1531  002B'                    	ds	1
  1532  002C'                    testLeds@idx:
  1533                           	opt stack 0
  1534  002C'                    FlashSampleWrite@sampleData:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x2C
  1538  002C'                    	ds	1
  1539  002D'                    SWSPI_send_word@phrType:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x2D
  1543  002D'                    	ds	1
  1544  002E'                    ??_GroupFlashMemory:
  1545  002E'                    FlashSampleWrite@channelNum:
  1546                           	opt stack 0
  1547  002E'                    PLLInitialize@idx:
  1548                           	opt stack 0
  1549  002E'                    GroupControlMcu@request:
  1550                           	opt stack 0
  1551  002E'                    GroupStatusAndVersion@request:
  1552                           	opt stack 0
  1553  002E'                    GroupAdc@request:
  1554                           	opt stack 0
  1555  002E'                    GroupSynthesizers@request:
  1556                           	opt stack 0
  1557  002E'                    GroupDAC@request:
  1558                           	opt stack 0
  1559                           
  1560                           ; 1 bytes @ 0x2E
  1561  002E'                    	ds	1
  1562  002F'                    tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           postinc0	equ	0xFEE
  1567                           wreg	equ	0xFE8
  1568                           postdec1	equ	0xFE5
  1569                           fsr1l	equ	0xFE1
  1570                           
  1571                           ; 1 bytes @ 0x2F
  1572 ;;
  1573 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1574 ;;
  1575 ;; *************** function _main *****************
  1576 ;; Defined at:
  1577 ;;		line 13 in file "main.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;		None
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1591 ;;      Params:         0       0       0       0       0       0       0
  1592 ;;      Locals:         0       0       0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0       0       0
  1594 ;;      Totals:         0       0       0       0       0       0       0
  1595 ;;Total ram usage:        0 bytes
  1596 ;; Hardware stack levels required when called:   10
  1597 ;; This function calls:
  1598 ;;		_AdcConvert
  1599 ;;		_BlinkErrorLeds
  1600 ;;		_BlinkOkLeds
  1601 ;;		_CheckFlashPrecentage
  1602 ;;		_InitSystemApplicationManagers
  1603 ;;		_SendSystemStartAck
  1604 ;;		_SetMcuRunTime
  1605 ;;		_SetMcuSystem
  1606 ;;		_keepAliveSignalLed
  1607 ;;		_keepAliveSignalUart
  1608 ;;		_readUartMessage
  1609 ;; This function is called by:
  1610 ;;		Startup code after reset
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text0
  1615  0000'                    __ptext0:
  1616                           	opt stack 0
  1617  0000'                    _main:
  1618                           	opt stack 21
  1619                           
  1620                           ;main.c: 16: SetMcuSystem();
  1621                           
  1622                           ;incstack = 0
  1623  0000' EC00' F000'        	call	_SetMcuSystem	;wreg free
  1624                           
  1625                           ;main.c: 19: InitSystemApplicationManagers();
  1626  0004' EC00' F000'        	call	_InitSystemApplicationManagers	;wreg free
  1627                           
  1628                           ;main.c: 22: SendSystemStartAck();
  1629  0008' EC00' F000'        	call	_SendSystemStartAck	;wreg free
  1630                           
  1631                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1632  000C' 0E03               	movlw	3
  1633  000E' EC00' F000'        	call	_BlinkOkLeds
  1634  0012'                    
  1635                           ;main.c: 28: {
  1636                           ;main.c: 29: readUartMessage();
  1637  0012' EC00' F000'        	call	_readUartMessage	;wreg free
  1638                           
  1639                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1640  0016' 0100               	movlb	0	; () banked
  1641  0018' 0500'              	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1642  001A' A4D8               	btfss	status,2,c
  1643  001C' D006               	goto	l1436
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 32: {
  1647                           ;main.c: 34: SetMcuRunTime();
  1648  001E' EC00' F000'        	call	_SetMcuRunTime	;wreg free
  1649                           
  1650                           ;main.c: 35: TimerOneSecFlag = 0;
  1651  0022' 0E00               	movlw	0
  1652  0024' 0100               	movlb	0	; () banked
  1653  0026' 6F00'              	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1654                           
  1655                           ;main.c: 36: }
  1656  0028' D7F4               	goto	l1435
  1657  002A'                    l1436:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1661                           
  1662                           ; BSR set to: 0
  1663  002A' 0500'              	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1664  002C' A4D8               	btfss	status,2,c
  1665  002E' D010               	goto	l1438
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 38: {
  1669                           ;main.c: 39: keepAliveSignalLed();
  1670  0030' EC00' F000'        	call	_keepAliveSignalLed	;wreg free
  1671                           
  1672                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1673  0034' EC00' F000'        	call	_CheckFlashPrecentage	;wreg free
  1674  0038' 06E8               	decf	wreg,f,c
  1675  003A' A4D8               	btfss	status,2,c
  1676  003C' D003               	goto	l1439
  1677                           
  1678                           ;main.c: 42: {
  1679                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1680  003E' 0E04               	movlw	4
  1681  0040' EC00' F000'        	call	_BlinkErrorLeds
  1682  0044'                    l1439:
  1683                           
  1684                           ;main.c: 44: }
  1685                           ;main.c: 47: AdcConvert();
  1686  0044' EC00' F000'        	call	_AdcConvert	;wreg free
  1687                           
  1688                           ;main.c: 49: TimerSamplingFlag = 0;
  1689  0048' 0E00               	movlw	0
  1690  004A' 0100               	movlb	0	; () banked
  1691  004C' 6F00'              	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1692                           
  1693                           ;main.c: 50: }
  1694  004E' D7E1               	goto	l1435
  1695  0050'                    l1438:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1699                           
  1700                           ; BSR set to: 0
  1701  0050' 0500'              	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1702  0052' A4D8               	btfss	status,2,c
  1703  0054' D7DE               	goto	l1435
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 52: {
  1707                           ;main.c: 53: keepAliveSignalUart();
  1708  0056' EC00' F000'        	call	_keepAliveSignalUart	;wreg free
  1709                           
  1710                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1711  005A' 0E00               	movlw	0
  1712  005C' 0100               	movlb	0	; () banked
  1713  005E' 6F00'              	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1714                           
  1715                           ; BSR set to: 0
  1716                           
  1717                           ; BSR set to: 0
  1718                           
  1719                           ; BSR set to: 0
  1720                           
  1721                           ; BSR set to: 0
  1722  0060' D7D8               	goto	l1435
  1723  0062'                    __end_of_main:
  1724                           	opt stack 0
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _readUartMessage *****************
  1736 ;; Defined at:
  1737 ;;		line 28 in file "EusartApp.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  idx             2    6[BANK1 ] int 
  1742 ;;  chRec           1    8[BANK1 ] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1752 ;;      Params:         0       0       0       0       0       0       0
  1753 ;;      Locals:         0       0       3       0       0       0       0
  1754 ;;      Temps:          0       0       4       0       0       0       0
  1755 ;;      Totals:         0       0       7       0       0       0       0
  1756 ;;Total ram usage:        7 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    9
  1759 ;; This function calls:
  1760 ;;		_EUSART1_Read
  1761 ;;		_GroupAdc
  1762 ;;		_GroupControlMcu
  1763 ;;		_GroupDAC
  1764 ;;		_GroupFlashMemory
  1765 ;;		_GroupStatusAndVersion
  1766 ;;		_GroupSynthesizers
  1767 ;;		_InitRxMessageParams
  1768 ;;		_ZeroArray
  1769 ;;		_crc8
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text1
  1776  0000'                    __ptext1:
  1777                           	opt stack 0
  1778  0000'                    _readUartMessage:
  1779                           	opt stack 21
  1780                           
  1781                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;incstack = 0
  1785  0000' 0E00               	movlw	0
  1786  0002' 0101               	movlb	1	; () banked
  1787  0004' 6F00'              	movwf	readUartMessage@chRec& (0+255),b
  1788                           
  1789                           ;EusartApp.c: 32: switch(cState)
  1790  0006' D0DF               	goto	l190
  1791  0008'                    
  1792                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1793                           
  1794                           ; BSR set to: 1
  1795  0008' 0E04               	movlw	4
  1796  000A' 0100               	movlb	0	; () banked
  1797  000C' 6500'              	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1798  000E' 0012               	return	
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;EusartApp.c: 38: {
  1802                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1803  0010' 0E01               	movlw	1
  1804  0012' 6F00'              	movwf	_cState& (0+255),b
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;EusartApp.c: 40: }
  1808                           ;EusartApp.c: 41: return;
  1809                           
  1810                           ; BSR set to: 0
  1811  0014' 0012               	return	
  1812  0016'                    
  1813                           ; BSR set to: 0
  1814                           ;EusartApp.c: 45: InitRxMessageParams();
  1815                           
  1816                           ; BSR set to: 0
  1817  0016' EC00' F000'        	call	_InitRxMessageParams	;wreg free
  1818                           
  1819                           ;EusartApp.c: 46: msgCount = 0;
  1820  001A' 0E00               	movlw	0
  1821  001C' 0100               	movlb	0	; () banked
  1822  001E' 6F00'              	movwf	_msgCount& (0+255),b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1826  0020' 0E01               	movlw	1
  1827  0022' 6500'              	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1828  0024' D00E               	goto	l195
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;EusartApp.c: 48: {
  1832                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1833  0026' EC00' F000'        	call	_EUSART1_Read	;wreg free
  1834  002A' 0101               	movlb	1	; () banked
  1835  002C' 6F00'              	movwf	readUartMessage@chRec& (0+255),b
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1839  002E' C008' F018'        	movff	readUartMessage@chRec,_rxMsgQueue
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;EusartApp.c: 51: if(chRec == (0x24))
  1843  0032' 0E24               	movlw	36
  1844  0034' 1900'              	xorwf	readUartMessage@chRec& (0+255),w,b
  1845  0036' A4D8               	btfss	status,2,c
  1846  0038' 0012               	return	
  1847                           
  1848                           ; BSR set to: 1
  1849                           ;EusartApp.c: 52: {
  1850                           ;EusartApp.c: 53: cState = READ_GROUP;
  1851  003A' 0E02               	movlw	2
  1852  003C' 0100               	movlb	0	; () banked
  1853  003E' 6F00'              	movwf	_cState& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;EusartApp.c: 54: }
  1857                           ;EusartApp.c: 55: }
  1858  0040' 0012               	return	
  1859  0042'                    l195:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;EusartApp.c: 56: else
  1863                           ;EusartApp.c: 57: {
  1864                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1865                           
  1866                           ; BSR set to: 0
  1867  0042' 0E00               	movlw	0
  1868  0044' 6F00'              	movwf	_cState& (0+255),b
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;EusartApp.c: 59: }
  1872                           ;EusartApp.c: 61: break;
  1873  0046' 0012               	return	
  1874  0048'                    
  1875                           ; BSR set to: 0
  1876                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1877                           
  1878                           ; BSR set to: 0
  1879  0048' 0E01               	movlw	1
  1880  004A' 6500'              	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1881  004C' 0012               	return	
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;EusartApp.c: 66: {
  1885                           ;EusartApp.c: 67: group = EUSART1_Read();
  1886  004E' EC00' F000'        	call	_EUSART1_Read	;wreg free
  1887  0052' 0100               	movlb	0	; () banked
  1888  0054' 6F00'              	movwf	_group& (0+255),b
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1892  0056' C010' F019'        	movff	_group,_rxMsgQueue+1
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1896  005A' 0E03               	movlw	3
  1897  005C' 6F00'              	movwf	_cState& (0+255),b
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;EusartApp.c: 70: }
  1901                           ;EusartApp.c: 71: break;
  1902  005E' 0012               	return	
  1903  0060'                    
  1904                           ; BSR set to: 0
  1905                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1906                           
  1907                           ; BSR set to: 0
  1908  0060' 0E01               	movlw	1
  1909  0062' 6500'              	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1910  0064' 0012               	return	
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;EusartApp.c: 76: {
  1914                           ;EusartApp.c: 77: request = EUSART1_Read();
  1915  0066' EC00' F000'        	call	_EUSART1_Read	;wreg free
  1916  006A' 0100               	movlb	0	; () banked
  1917  006C' 6F00'              	movwf	_request& (0+255),b
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1921  006E' C00F' F01A'        	movff	_request,_rxMsgQueue+2
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1925  0072' 0E04               	movlw	4
  1926  0074' 6F00'              	movwf	_cState& (0+255),b
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;EusartApp.c: 80: }
  1930                           ;EusartApp.c: 81: break;
  1931  0076' 0012               	return	
  1932  0078'                    
  1933                           ; BSR set to: 0
  1934                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1935                           
  1936                           ; BSR set to: 0
  1937  0078' 0E01               	movlw	1
  1938  007A' 6500'              	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1939  007C' 0012               	return	
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;EusartApp.c: 85: {
  1943                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1944  007E' EC00' F000'        	call	_EUSART1_Read	;wreg free
  1945  0082' 0100               	movlb	0	; () banked
  1946  0084' 6F00'              	movwf	_dataSize& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1950  0086' C00E' F01B'        	movff	_dataSize,_rxMsgQueue+3
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;EusartApp.c: 88: if(dataSize == 0)
  1954  008A' 5100'              	movf	_dataSize& (0+255),w,b
  1955  008C' A4D8               	btfss	status,2,c
  1956  008E' D003               	goto	l205
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;EusartApp.c: 89: {
  1960                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1961  0090' 0E06               	movlw	6
  1962  0092' 6F00'              	movwf	_cState& (0+255),b
  1963                           
  1964                           ;EusartApp.c: 91: }
  1965  0094' 0012               	return	
  1966  0096'                    l205:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;EusartApp.c: 92: else
  1970                           ;EusartApp.c: 93: {
  1971                           ;EusartApp.c: 94: cState = READ_DATA;
  1972                           
  1973                           ; BSR set to: 0
  1974  0096' 0E05               	movlw	5
  1975  0098' 6F00'              	movwf	_cState& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;EusartApp.c: 95: }
  1979                           ;EusartApp.c: 97: }
  1980                           ;EusartApp.c: 99: break;
  1981                           
  1982                           ; BSR set to: 0
  1983  009A' 0012               	return	
  1984  009C'                    
  1985                           ; BSR set to: 0
  1986                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1987                           
  1988                           ; BSR set to: 0
  1989  009C' 5100'              	movf	_dataSize& (0+255),w,b
  1990  009E' 5D00'              	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1991  00A0' A0D8               	btfss	status,0,c
  1992  00A2' 0012               	return	
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;EusartApp.c: 104: {
  1996                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1997  00A4' 0E00'              	movlw	low _rxMsgData
  1998  00A6' 6E1F'              	movwf	ZeroArray@array,c
  1999  00A8' 0E00'              	movlw	high _rxMsgData
  2000  00AA' 6E20'              	movwf	ZeroArray@array+1,c
  2001  00AC' 0E00               	movlw	0
  2002  00AE' 6E22'              	movwf	ZeroArray@size+1,c
  2003  00B0' 0E14               	movlw	20
  2004  00B2' 6E21'              	movwf	ZeroArray@size,c
  2005  00B4' EC00' F000'        	call	_ZeroArray	;wreg free
  2006                           
  2007                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2008  00B8' 0E00               	movlw	0
  2009  00BA' 0101               	movlb	1	; () banked
  2010  00BC' 6F00'              	movwf	(readUartMessage@idx+1)& (0+255),b
  2011  00BE' 0E00               	movlw	0
  2012  00C0' 6F00'              	movwf	readUartMessage@idx& (0+255),b
  2013  00C2' D022               	goto	l209
  2014  00C4'                    
  2015                           ; BSR set to: 1
  2016                           ;EusartApp.c: 108: {
  2017                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2018                           
  2019                           ; BSR set to: 1
  2020  00C4' EC00' F000'        	call	_EUSART1_Read	;wreg free
  2021  00C8' 0101               	movlb	1	; () banked
  2022  00CA' 6F00'              	movwf	readUartMessage@chRec& (0+255),b
  2023                           
  2024                           ; BSR set to: 1
  2025                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2026  00CC' 0100               	movlb	0	; () banked
  2027  00CE' 5100'              	movf	_msgCount& (0+255),w,b
  2028  00D0' 0101               	movlb	1	; () banked
  2029  00D2' 6F00'              	movwf	??_readUartMessage& (0+255),b
  2030  00D4' 6B00'              	clrf	(??_readUartMessage+1)& (0+255),b
  2031  00D6' 0E04               	movlw	4
  2032  00D8' 2700'              	addwf	??_readUartMessage& (0+255),f,b
  2033  00DA' 0E00               	movlw	0
  2034  00DC' 2300'              	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2035  00DE' 0E00'              	movlw	low _rxMsgQueue
  2036  00E0' 2500'              	addwf	??_readUartMessage& (0+255),w,b
  2037  00E2' 6ED9               	movwf	fsr2l,c
  2038  00E4' 0E00'              	movlw	high _rxMsgQueue
  2039  00E6' 2100'              	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2040  00E8' 6EDA               	movwf	fsr2h,c
  2041  00EA' C008' FFDF         	movff	readUartMessage@chRec,indf2
  2042                           
  2043                           ; BSR set to: 1
  2044  00EE' 0100               	movlb	0	; () banked
  2045  00F0' 2B00'              	incf	_msgCount& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2049  00F2' 0E00'              	movlw	low _rxMsgData
  2050  00F4' 0101               	movlb	1	; () banked
  2051  00F6' 2500'              	addwf	readUartMessage@idx& (0+255),w,b
  2052  00F8' 6ED9               	movwf	fsr2l,c
  2053  00FA' 0E00'              	movlw	high _rxMsgData
  2054  00FC' 2100'              	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2055  00FE' 6EDA               	movwf	fsr2h,c
  2056  0100' C008' FFDF         	movff	readUartMessage@chRec,indf2
  2057                           
  2058                           ; BSR set to: 1
  2059  0104' 4B00'              	infsnz	readUartMessage@idx& (0+255),f,b
  2060  0106' 2B00'              	incf	(readUartMessage@idx+1)& (0+255),f,b
  2061  0108'                    l209:
  2062                           
  2063                           ; BSR set to: 1
  2064                           
  2065                           ; BSR set to: 1
  2066  0108' 0100               	movlb	0	; () banked
  2067  010A' 5100'              	movf	_dataSize& (0+255),w,b
  2068  010C' 0101               	movlb	1	; () banked
  2069  010E' 6F00'              	movwf	??_readUartMessage& (0+255),b
  2070  0110' 6B00'              	clrf	(??_readUartMessage+1)& (0+255),b
  2071  0112' 5100'              	movf	??_readUartMessage& (0+255),w,b
  2072  0114' 5D00'              	subwf	readUartMessage@idx& (0+255),w,b
  2073  0116' 5100'              	movf	(readUartMessage@idx+1)& (0+255),w,b
  2074  0118' 0A80               	xorlw	128
  2075  011A' 6F00'              	movwf	(??_readUartMessage+2)& (0+255),b
  2076  011C' 5100'              	movf	(??_readUartMessage+1)& (0+255),w,b
  2077  011E' 0A80               	xorlw	128
  2078  0120' 5900'              	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2079  0122' A0D8               	btfss	status,0,c
  2080  0124' D7CF               	goto	l210
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;EusartApp.c: 112: }
  2084                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2085                           
  2086                           ; BSR set to: 1
  2087  0126' 0E06               	movlw	6
  2088  0128' 0100               	movlb	0	; () banked
  2089  012A' 6F00'              	movwf	_cState& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;EusartApp.c: 115: }
  2093                           ;EusartApp.c: 116: break;
  2094  012C' 0012               	return	
  2095  012E'                    
  2096                           ; BSR set to: 0
  2097                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2098                           
  2099                           ; BSR set to: 0
  2100  012E' 5100'              	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2101  0130' B4D8               	btfsc	status,2,c
  2102  0132' 0012               	return	
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;EusartApp.c: 120: {
  2106                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2107  0134' EC00' F000'        	call	_EUSART1_Read	;wreg free
  2108  0138' 0100               	movlb	0	; () banked
  2109  013A' 6F00'              	movwf	_crcGiven& (0+255),b
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2113  013C' 0E00'              	movlw	low _rxMsgQueue
  2114  013E' 6E17'              	movwf	crc8@dataArray,c
  2115  0140' 0E00'              	movlw	high _rxMsgQueue
  2116  0142' 6E18'              	movwf	crc8@dataArray+1,c
  2117  0144' 0E04               	movlw	4
  2118  0146' 2500'              	addwf	_msgCount& (0+255),w,b
  2119  0148' 6E19'              	movwf	crc8@dataSize,c
  2120  014A' 6A1A'              	clrf	crc8@dataSize+1,c
  2121  014C' 0E00               	movlw	0
  2122  014E' 221A'              	addwfc	crc8@dataSize+1,f,c
  2123  0150' EC00' F000'        	call	_crc8	;wreg free
  2124  0154' 0100               	movlb	0	; () banked
  2125  0156' 6F00'              	movwf	_crcCalc& (0+255),b
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2129  0158' 5100'              	movf	_crcCalc& (0+255),w,b
  2130  015A' 1900'              	xorwf	_crcGiven& (0+255),w,b
  2131  015C' A4D8               	btfss	status,2,c
  2132  015E' D003               	goto	l214
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;EusartApp.c: 125: {
  2136                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2137  0160' 0E07               	movlw	7
  2138  0162' 6F00'              	movwf	_cState& (0+255),b
  2139                           
  2140                           ;EusartApp.c: 127: }
  2141  0164' 0012               	return	
  2142  0166'                    l214:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;EusartApp.c: 128: else
  2146                           ;EusartApp.c: 129: {
  2147                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2148                           
  2149                           ; BSR set to: 0
  2150  0166' 0E00               	movlw	0
  2151  0168' 6F00'              	movwf	_cState& (0+255),b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;EusartApp.c: 131: }
  2155                           ;EusartApp.c: 132: }
  2156                           ;EusartApp.c: 133: break;
  2157                           
  2158                           ; BSR set to: 0
  2159  016A' 0012               	return	
  2160  016C'                    
  2161                           ; BSR set to: 0
  2162                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2163                           
  2164                           ; BSR set to: 0
  2165  016C' 0EFE               	movlw	254
  2166  016E' 0101               	movlb	1	; () banked
  2167  0170' 6F00'              	movwf	??_readUartMessage& (0+255),b
  2168  0172' 0EFF               	movlw	255
  2169  0174' 6F00'              	movwf	(??_readUartMessage+1)& (0+255),b
  2170  0176' 0100               	movlb	0	; () banked
  2171  0178' 5100'              	movf	_group& (0+255),w,b
  2172  017A' 0101               	movlb	1	; () banked
  2173  017C' 6F00'              	movwf	(??_readUartMessage+2)& (0+255),b
  2174  017E' 6B00'              	clrf	(??_readUartMessage+3)& (0+255),b
  2175  0180' 90D8               	bcf	status,0,c
  2176  0182' 3700'              	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2177  0184' 3700'              	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2178  0186' 5100'              	movf	??_readUartMessage& (0+255),w,b
  2179  0188' 2700'              	addwf	(??_readUartMessage+2)& (0+255),f,b
  2180  018A' 5100'              	movf	(??_readUartMessage+1)& (0+255),w,b
  2181  018C' 2300'              	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2182  018E' 0E00'              	movlw	low _groupsArray
  2183  0190' 2500'              	addwf	(??_readUartMessage+2)& (0+255),w,b
  2184  0192' 6ED9               	movwf	fsr2l,c
  2185  0194' 0E00'              	movlw	high _groupsArray
  2186  0196' 2100'              	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2187  0198' 6EDA               	movwf	fsr2h,c
  2188  019A' D801               	call	u7948
  2189  019C' D010               	goto	u7949
  2190  019E'                    u7948:
  2191  019E' 0005               	push	
  2192  01A0' 6EFA               	movwf	pclath,c
  2193  01A2' 50DE               	movf	postinc2,w,c
  2194  01A4' 6EFD               	movwf	tosl,c
  2195  01A6' 50DE               	movf	postinc2,w,c
  2196  01A8' 6EFE               	movwf	tosh,c
  2197  01AA' 50F8               	movf	tblptru,w,c
  2198  01AC' 6EFF               	movwf	tosu,c
  2199  01AE' 50FA               	movf	pclath,w,c
  2200  01B0' 0E00'              	movlw	low _rxMsgData
  2201  01B2' 6F00'              	movwf	GroupDAC@data& (0+255),b
  2202  01B4' 0E00'              	movlw	high _rxMsgData
  2203  01B6' 6F00'              	movwf	(GroupDAC@data+1)& (0+255),b
  2204  01B8' 0100               	movlb	0	; () banked
  2205  01BA' 5100'              	movf	_request& (0+255),w,b
  2206  01BC' 0012               	return		;indir
  2207  01BE'                    u7949:
  2208                           
  2209                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2210  01BE' 0E00               	movlw	0
  2211  01C0' 0100               	movlb	0	; () banked
  2212  01C2' 6F00'              	movwf	_cState& (0+255),b
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;EusartApp.c: 139: }
  2216                           
  2217                           ;EusartApp.c: 138: break;
  2218  01C4' 0012               	return	
  2219  01C6'                    l190:
  2220                           
  2221                           ; BSR set to: 0
  2222  01C6' 0100               	movlb	0	; () banked
  2223  01C8' 5100'              	movf	_cState& (0+255),w,b
  2224                           
  2225                           ; Switch size 1, requested type "space"
  2226                           ; Number of cases is 8, Range of values is 0 to 7
  2227                           ; switch strategies available:
  2228                           ; Name         Instructions Cycles
  2229                           ; simple_byte           25    13 (average)
  2230                           ;	Chosen strategy is simple_byte
  2231  01CA' 0A00               	xorlw	0	; case 0
  2232  01CC' B4D8               	btfsc	status,2,c
  2233  01CE' D71C               	goto	l191
  2234  01D0' 0A01               	xorlw	1	; case 1
  2235  01D2' B4D8               	btfsc	status,2,c
  2236  01D4' D720               	goto	l194
  2237  01D6' 0A03               	xorlw	3	; case 2
  2238  01D8' B4D8               	btfsc	status,2,c
  2239  01DA' D736               	goto	l199
  2240  01DC' 0A01               	xorlw	1	; case 3
  2241  01DE' B4D8               	btfsc	status,2,c
  2242  01E0' D73F               	goto	l201
  2243  01E2' 0A07               	xorlw	7	; case 4
  2244  01E4' B4D8               	btfsc	status,2,c
  2245  01E6' D748               	goto	l203
  2246  01E8' 0A01               	xorlw	1	; case 5
  2247  01EA' B4D8               	btfsc	status,2,c
  2248  01EC' D757               	goto	l207
  2249  01EE' 0A03               	xorlw	3	; case 6
  2250  01F0' B4D8               	btfsc	status,2,c
  2251  01F2' D79D               	goto	l212
  2252  01F4' 0A01               	xorlw	1	; case 7
  2253  01F6' A4D8               	btfss	status,2,c
  2254  01F8' 0012               	return	
  2255  01FA' D7B8               	goto	l216
  2256  01FC'                    __end_of_readUartMessage:
  2257                           	opt stack 0
  2258                           tosu	equ	0xFFF
  2259                           tosh	equ	0xFFE
  2260                           tosl	equ	0xFFD
  2261                           pclath	equ	0xFFA
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           postinc0	equ	0xFEE
  2267                           wreg	equ	0xFE8
  2268                           postdec1	equ	0xFE5
  2269                           fsr1l	equ	0xFE1
  2270                           indf2	equ	0xFDF
  2271                           postinc2	equ	0xFDE
  2272                           fsr2h	equ	0xFDA
  2273                           fsr2l	equ	0xFD9
  2274                           status	equ	0xFD8
  2275                           
  2276 ;; *************** function _InitRxMessageParams *****************
  2277 ;; Defined at:
  2278 ;;		line 142 in file "EusartApp.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2292 ;;      Params:         0       0       0       0       0       0       0
  2293 ;;      Locals:         0       0       0       0       0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0
  2295 ;;      Totals:         0       0       0       0       0       0       0
  2296 ;;Total ram usage:        0 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    5
  2299 ;; This function calls:
  2300 ;;		_ZeroArray
  2301 ;; This function is called by:
  2302 ;;		_readUartMessage
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text2
  2307  0000'                    __ptext2:
  2308                           	opt stack 0
  2309  0000'                    _InitRxMessageParams:
  2310                           	opt stack 24
  2311                           
  2312                           ;EusartApp.c: 146: dataSize = 0;
  2313                           
  2314                           ;incstack = 0
  2315  0000' 0E00               	movlw	0
  2316  0002' 0100               	movlb	0	; () banked
  2317  0004' 6F00'              	movwf	_dataSize& (0+255),b
  2318                           
  2319                           ;EusartApp.c: 147: crcCalc = 0;
  2320  0006' 0E00               	movlw	0
  2321  0008' 6F00'              	movwf	_crcCalc& (0+255),b
  2322                           
  2323                           ;EusartApp.c: 148: crcGiven = 0;
  2324  000A' 0E00               	movlw	0
  2325  000C' 6F00'              	movwf	_crcGiven& (0+255),b
  2326                           
  2327                           ;EusartApp.c: 149: msgCount = 0;
  2328  000E' 0E00               	movlw	0
  2329  0010' 6F00'              	movwf	_msgCount& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2333  0012' 0E00'              	movlw	low _rxMsgQueue
  2334  0014' 6E1F'              	movwf	ZeroArray@array,c
  2335  0016' 0E00'              	movlw	high _rxMsgQueue
  2336  0018' 6E20'              	movwf	ZeroArray@array+1,c
  2337  001A' 0E00               	movlw	0
  2338  001C' 6E22'              	movwf	ZeroArray@size+1,c
  2339  001E' 0E14               	movlw	20
  2340  0020' 6E21'              	movwf	ZeroArray@size,c
  2341  0022' EC00' F000'        	call	_ZeroArray
  2342  0026' 0012               	return		;funcret
  2343  0028'                    __end_of_InitRxMessageParams:
  2344                           	opt stack 0
  2345                           tosu	equ	0xFFF
  2346                           tosh	equ	0xFFE
  2347                           tosl	equ	0xFFD
  2348                           pclath	equ	0xFFA
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           postinc0	equ	0xFEE
  2354                           wreg	equ	0xFE8
  2355                           postdec1	equ	0xFE5
  2356                           fsr1l	equ	0xFE1
  2357                           indf2	equ	0xFDF
  2358                           postinc2	equ	0xFDE
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _GroupDAC *****************
  2364 ;; Defined at:
  2365 ;;		line 137 in file "MessageFunctions.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  request         1    wreg     enum E12
  2368 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2369 ;;		 -> rxMsgData(20), 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  request         1   46[COMRAM] enum E12
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2381 ;;      Params:         0       0       2       0       0       0       0
  2382 ;;      Locals:         1       0       0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0
  2384 ;;      Totals:         1       0       2       0       0       0       0
  2385 ;;Total ram usage:        3 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    8
  2388 ;; This function calls:
  2389 ;;		_DacSetValue
  2390 ;; This function is called by:
  2391 ;;		_readUartMessage
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text3
  2396  0000'                    __ptext3:
  2397                           	opt stack 0
  2398  0000'                    _GroupDAC:
  2399                           	opt stack 21
  2400                           
  2401                           ;incstack = 0
  2402                           ;GroupDAC@request stored from wreg
  2403  0000' 6E2E'              	movwf	GroupDAC@request,c
  2404                           
  2405                           ;MessageFunctions.c: 139: switch (request)
  2406  0002' D007               	goto	l1225
  2407  0004'                    
  2408                           ;MessageFunctions.c: 142: DacSetValue(data);
  2409  0004' C000' F026'        	movff	GroupDAC@data,DacSetValue@data
  2410  0008' C001' F027'        	movff	GroupDAC@data+1,DacSetValue@data+1
  2411  000C' EC00' F000'        	call	_DacSetValue	;wreg free
  2412                           
  2413                           ;MessageFunctions.c: 147: }
  2414                           
  2415                           ;MessageFunctions.c: 146: break;
  2416                           
  2417                           ;MessageFunctions.c: 145: default:
  2418                           
  2419                           ;MessageFunctions.c: 143: break;
  2420  0010' 0012               	return	
  2421  0012'                    l1225:
  2422  0012' 502E'              	movf	GroupDAC@request,w,c
  2423                           
  2424                           ; Switch size 1, requested type "space"
  2425                           ; Number of cases is 1, Range of values is 97 to 97
  2426                           ; switch strategies available:
  2427                           ; Name         Instructions Cycles
  2428                           ; simple_byte            4     3 (average)
  2429                           ;	Chosen strategy is simple_byte
  2430  0014' 0A61               	xorlw	97	; case 97
  2431  0016' A4D8               	btfss	status,2,c
  2432  0018' 0012               	return	
  2433  001A' D7F4               	goto	l1226
  2434  001C'                    __end_of_GroupDAC:
  2435                           	opt stack 0
  2436                           tosu	equ	0xFFF
  2437                           tosh	equ	0xFFE
  2438                           tosl	equ	0xFFD
  2439                           pclath	equ	0xFFA
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           indf2	equ	0xFDF
  2449                           postinc2	equ	0xFDE
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _GroupFlashMemory *****************
  2455 ;; Defined at:
  2456 ;;		line 116 in file "MessageFunctions.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  request         1    wreg     enum E12
  2459 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  request         1   95[BANK0 ] enum E12
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2471 ;;      Params:         0       0       2       0       0       0       0
  2472 ;;      Locals:         0       1       0       0       0       0       0
  2473 ;;      Temps:          1       0       0       0       0       0       0
  2474 ;;      Totals:         1       1       2       0       0       0       0
  2475 ;;Total ram usage:        4 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    7
  2478 ;; This function calls:
  2479 ;;		_FlashEreaseMem
  2480 ;;		_FlashReadCondition
  2481 ;;		_FlashReadUart
  2482 ;; This function is called by:
  2483 ;;		_readUartMessage
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text4
  2488  0000'                    __ptext4:
  2489                           	opt stack 0
  2490  0000'                    _GroupFlashMemory:
  2491                           	opt stack 22
  2492                           
  2493                           ;incstack = 0
  2494                           ;GroupFlashMemory@request stored from wreg
  2495  0000' 0100               	movlb	0	; () banked
  2496  0002' 6F00'              	movwf	GroupFlashMemory@request& (0+255),b
  2497                           
  2498                           ;MessageFunctions.c: 118: switch (request)
  2499  0004' D012               	goto	l1216
  2500  0006'                    
  2501                           ;MessageFunctions.c: 121: FlashEreaseMem();
  2502  0006' EC00' F000'        	call	_FlashEreaseMem	;wreg free
  2503                           
  2504                           ;MessageFunctions.c: 122: break;
  2505  000A' 0012               	return	
  2506  000C'                    
  2507                           ;MessageFunctions.c: 125: FlashReadCondition();
  2508  000C' EC00' F000'        	call	_FlashReadCondition	;wreg free
  2509                           
  2510                           ;MessageFunctions.c: 126: break;
  2511  0010' 0012               	return	
  2512  0012'                    
  2513                           ;MessageFunctions.c: 129: FlashReadUart((int)data[0]);
  2514  0012' C000' FFD9         	movff	GroupFlashMemory@data,fsr2l
  2515  0016' C001' FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2516  001A' 50DF               	movf	indf2,w,c
  2517  001C' 6E00'              	movwf	??_GroupFlashMemory& (0+255),c
  2518  001E' 502E'              	movf	??_GroupFlashMemory,w,c
  2519  0020' 6E2B'              	movwf	FlashReadUart@numOfSampleToRead,c
  2520  0022' 6A2C'              	clrf	FlashReadUart@numOfSampleToRead+1,c
  2521  0024' EC00' F000'        	call	_FlashReadUart	;wreg free
  2522                           
  2523                           ;MessageFunctions.c: 134: }
  2524                           
  2525                           ;MessageFunctions.c: 133: break;
  2526                           
  2527                           ;MessageFunctions.c: 132: default:
  2528                           
  2529                           ;MessageFunctions.c: 130: break;
  2530  0028' 0012               	return	
  2531  002A'                    l1216:
  2532  002A' 0100               	movlb	0	; () banked
  2533  002C' 5100'              	movf	GroupFlashMemory@request& (0+255),w,b
  2534                           
  2535                           ; Switch size 1, requested type "space"
  2536                           ; Number of cases is 3, Range of values is 81 to 83
  2537                           ; switch strategies available:
  2538                           ; Name         Instructions Cycles
  2539                           ; simple_byte           10     6 (average)
  2540                           ;	Chosen strategy is simple_byte
  2541  002E' 0A51               	xorlw	81	; case 81
  2542  0030' B4D8               	btfsc	status,2,c
  2543  0032' D7E9               	goto	l1217
  2544  0034' 0A03               	xorlw	3	; case 82
  2545  0036' B4D8               	btfsc	status,2,c
  2546  0038' D7E9               	goto	l1219
  2547  003A' 0A01               	xorlw	1	; case 83
  2548  003C' A4D8               	btfss	status,2,c
  2549  003E' 0012               	return	
  2550  0040' D7E8               	goto	l1220
  2551  0042'                    __end_of_GroupFlashMemory:
  2552                           	opt stack 0
  2553                           tosu	equ	0xFFF
  2554                           tosh	equ	0xFFE
  2555                           tosl	equ	0xFFD
  2556                           pclath	equ	0xFFA
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           postdec1	equ	0xFE5
  2564                           fsr1l	equ	0xFE1
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _GroupAdc *****************
  2572 ;; Defined at:
  2573 ;;		line 55 in file "MessageFunctions.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  request         1    wreg     enum E12
  2576 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  request         1   46[COMRAM] enum E12
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2588 ;;      Params:         0       0       2       0       0       0       0
  2589 ;;      Locals:         1       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0
  2591 ;;      Totals:         1       0       2       0       0       0       0
  2592 ;;Total ram usage:        3 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    7
  2595 ;; This function calls:
  2596 ;;		_SetAdcOperationMode
  2597 ;;		_SetChannelMode
  2598 ;;		_SetConversionResultFormat
  2599 ;; This function is called by:
  2600 ;;		_readUartMessage
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text5
  2605  0000'                    __ptext5:
  2606                           	opt stack 0
  2607  0000'                    _GroupAdc:
  2608                           	opt stack 22
  2609                           
  2610                           ;incstack = 0
  2611                           ;GroupAdc@request stored from wreg
  2612  0000' 6E2E'              	movwf	GroupAdc@request,c
  2613                           
  2614                           ;MessageFunctions.c: 57: switch (request)
  2615  0002' D015               	goto	l1193
  2616  0004'                    
  2617                           ;MessageFunctions.c: 60: SetAdcOperationMode(data);
  2618  0004' C000' F02B'        	movff	GroupAdc@data,SetAdcOperationMode@data
  2619  0008' C001' F02C'        	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2620  000C' EC00' F000'        	call	_SetAdcOperationMode	;wreg free
  2621                           
  2622                           ;MessageFunctions.c: 61: break;
  2623  0010' 0012               	return	
  2624  0012'                    
  2625                           ;MessageFunctions.c: 64: SetChannelMode(data);
  2626  0012' C000' F02B'        	movff	GroupAdc@data,SetChannelMode@data
  2627  0016' C001' F02C'        	movff	GroupAdc@data+1,SetChannelMode@data+1
  2628  001A' EC00' F000'        	call	_SetChannelMode	;wreg free
  2629                           
  2630                           ;MessageFunctions.c: 65: break;
  2631  001E' 0012               	return	
  2632  0020'                    
  2633                           ;MessageFunctions.c: 68: SetConversionResultFormat(data);
  2634  0020' C000' F02B'        	movff	GroupAdc@data,SetConversionResultFormat@data
  2635  0024' C001' F02C'        	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2636  0028' EC00' F000'        	call	_SetConversionResultFormat	;wreg free
  2637                           
  2638                           ;MessageFunctions.c: 73: }
  2639                           
  2640                           ;MessageFunctions.c: 72: break;
  2641                           
  2642                           ;MessageFunctions.c: 71: default:
  2643                           
  2644                           ;MessageFunctions.c: 69: break;
  2645  002C' 0012               	return	
  2646  002E'                    l1193:
  2647  002E' 502E'              	movf	GroupAdc@request,w,c
  2648                           
  2649                           ; Switch size 1, requested type "space"
  2650                           ; Number of cases is 3, Range of values is 49 to 51
  2651                           ; switch strategies available:
  2652                           ; Name         Instructions Cycles
  2653                           ; simple_byte           10     6 (average)
  2654                           ;	Chosen strategy is simple_byte
  2655  0030' 0A31               	xorlw	49	; case 49
  2656  0032' B4D8               	btfsc	status,2,c
  2657  0034' D7E7               	goto	l1194
  2658  0036' 0A03               	xorlw	3	; case 50
  2659  0038' B4D8               	btfsc	status,2,c
  2660  003A' D7EB               	goto	l1196
  2661  003C' 0A01               	xorlw	1	; case 51
  2662  003E' A4D8               	btfss	status,2,c
  2663  0040' 0012               	return	
  2664  0042' D7EE               	goto	l1197
  2665  0044'                    __end_of_GroupAdc:
  2666                           	opt stack 0
  2667                           tosu	equ	0xFFF
  2668                           tosh	equ	0xFFE
  2669                           tosl	equ	0xFFD
  2670                           pclath	equ	0xFFA
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _GroupStatusAndVersion *****************
  2686 ;; Defined at:
  2687 ;;		line 34 in file "MessageFunctions.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  request         1    wreg     enum E12
  2690 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  request         1   46[COMRAM] enum E12
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2702 ;;      Params:         0       0       2       0       0       0       0
  2703 ;;      Locals:         1       0       0       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0
  2705 ;;      Totals:         1       0       2       0       0       0       0
  2706 ;;Total ram usage:        3 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    6
  2709 ;; This function calls:
  2710 ;;		_GetMcuFwVersion
  2711 ;;		_GetMcuRunTime
  2712 ;;		_SetMcuFwVersion
  2713 ;; This function is called by:
  2714 ;;		_readUartMessage
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text6
  2719  0000'                    __ptext6:
  2720                           	opt stack 0
  2721  0000'                    _GroupStatusAndVersion:
  2722                           	opt stack 23
  2723                           
  2724                           ;incstack = 0
  2725                           ;GroupStatusAndVersion@request stored from wreg
  2726  0000' 6E2E'              	movwf	GroupStatusAndVersion@request,c
  2727                           
  2728                           ;MessageFunctions.c: 36: switch (request)
  2729  0002' D00D               	goto	l1184
  2730  0004'                    
  2731                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2732  0004' EC00' F000'        	call	_GetMcuFwVersion	;wreg free
  2733                           
  2734                           ;MessageFunctions.c: 40: break;
  2735  0008' 0012               	return	
  2736  000A'                    
  2737                           ;MessageFunctions.c: 43: SetMcuFwVersion(data);
  2738  000A' C000' F000'        	movff	GroupStatusAndVersion@data,?_SetMcuFwVersion
  2739  000E' C001' F001'        	movff	GroupStatusAndVersion@data+1,?_SetMcuFwVersion+1
  2740  0012' EC00' F000'        	call	_SetMcuFwVersion	;wreg free
  2741                           
  2742                           ;MessageFunctions.c: 44: break;
  2743  0016' 0012               	return	
  2744  0018'                    
  2745                           ;MessageFunctions.c: 47: GetMcuRunTime();
  2746  0018' EC00' F000'        	call	_GetMcuRunTime	;wreg free
  2747                           
  2748                           ;MessageFunctions.c: 52: }
  2749                           
  2750                           ;MessageFunctions.c: 51: break;
  2751                           
  2752                           ;MessageFunctions.c: 50: default:
  2753                           
  2754                           ;MessageFunctions.c: 48: break;
  2755  001C' 0012               	return	
  2756  001E'                    l1184:
  2757  001E' 502E'              	movf	GroupStatusAndVersion@request,w,c
  2758                           
  2759                           ; Switch size 1, requested type "space"
  2760                           ; Number of cases is 3, Range of values is 33 to 35
  2761                           ; switch strategies available:
  2762                           ; Name         Instructions Cycles
  2763                           ; simple_byte           10     6 (average)
  2764                           ;	Chosen strategy is simple_byte
  2765  0020' 0A21               	xorlw	33	; case 33
  2766  0022' B4D8               	btfsc	status,2,c
  2767  0024' D7F9               	goto	l1188
  2768  0026' 0A03               	xorlw	3	; case 34
  2769  0028' B4D8               	btfsc	status,2,c
  2770  002A' D7EC               	goto	l1185
  2771  002C' 0A01               	xorlw	1	; case 35
  2772  002E' A4D8               	btfss	status,2,c
  2773  0030' 0012               	return	
  2774  0032' D7EB               	goto	l1187
  2775  0034'                    __end_of_GroupStatusAndVersion:
  2776                           	opt stack 0
  2777                           tosu	equ	0xFFF
  2778                           tosh	equ	0xFFE
  2779                           tosl	equ	0xFFD
  2780                           pclath	equ	0xFFA
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           indf2	equ	0xFDF
  2790                           postinc2	equ	0xFDE
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _GroupControlMcu *****************
  2796 ;; Defined at:
  2797 ;;		line 11 in file "MessageFunctions.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  request         1    wreg     enum E12
  2800 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  request         1   46[COMRAM] enum E12
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         0       0       2       0       0       0       0
  2813 ;;      Locals:         1       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         1       0       2       0       0       0       0
  2816 ;;Total ram usage:        3 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    7
  2819 ;; This function calls:
  2820 ;;		_ResetMcu
  2821 ;;		_testLeds
  2822 ;; This function is called by:
  2823 ;;		_readUartMessage
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text7
  2828  0000'                    __ptext7:
  2829                           	opt stack 0
  2830  0000'                    _GroupControlMcu:
  2831                           	opt stack 22
  2832                           
  2833                           ;incstack = 0
  2834                           ;GroupControlMcu@request stored from wreg
  2835  0000' 6E2E'              	movwf	GroupControlMcu@request,c
  2836                           
  2837                           ;MessageFunctions.c: 13: switch (request)
  2838  0002' D006               	goto	l1174
  2839  0004'                    
  2840                           ;MessageFunctions.c: 16: testLeds();
  2841  0004' EC00' F000'        	call	_testLeds	;wreg free
  2842                           
  2843                           ;MessageFunctions.c: 17: break;
  2844  0008' 0012               	return	
  2845  000A'                    
  2846                           ;MessageFunctions.c: 20: ResetMcu();
  2847  000A' EC00' F000'        	call	_ResetMcu	;wreg free
  2848                           
  2849                           ;MessageFunctions.c: 31: }
  2850                           
  2851                           ;MessageFunctions.c: 30: break;
  2852                           
  2853                           ;MessageFunctions.c: 29: default:
  2854                           
  2855                           ;MessageFunctions.c: 27: break;
  2856                           
  2857                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  2858                           
  2859                           ;MessageFunctions.c: 24: break;
  2860                           
  2861                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  2862                           
  2863                           ;MessageFunctions.c: 21: break;
  2864  000E' 0012               	return	
  2865  0010'                    l1174:
  2866  0010' 502E'              	movf	GroupControlMcu@request,w,c
  2867                           
  2868                           ; Switch size 1, requested type "space"
  2869                           ; Number of cases is 4, Range of values is 17 to 20
  2870                           ; switch strategies available:
  2871                           ; Name         Instructions Cycles
  2872                           ; simple_byte           13     7 (average)
  2873                           ;	Chosen strategy is simple_byte
  2874  0012' 0A11               	xorlw	17	; case 17
  2875  0014' B4D8               	btfsc	status,2,c
  2876  0016' D7F9               	goto	l1177
  2877  0018' 0A03               	xorlw	3	; case 18
  2878  001A' B4D8               	btfsc	status,2,c
  2879  001C' 0012               	return	
  2880  001E' 0A01               	xorlw	1	; case 19
  2881  0020' B4D8               	btfsc	status,2,c
  2882  0022' 0012               	return	
  2883  0024' 0A07               	xorlw	7	; case 20
  2884  0026' A4D8               	btfss	status,2,c
  2885  0028' 0012               	return	
  2886  002A' D7EC               	goto	l1175
  2887  002C'                    __end_of_GroupControlMcu:
  2888                           	opt stack 0
  2889                           tosu	equ	0xFFF
  2890                           tosh	equ	0xFFE
  2891                           tosl	equ	0xFFD
  2892                           pclath	equ	0xFFA
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           fsr2h	equ	0xFDA
  2904                           fsr2l	equ	0xFD9
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _GroupSynthesizers *****************
  2908 ;; Defined at:
  2909 ;;		line 75 in file "MessageFunctions.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  request         1    wreg     enum E12
  2912 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  request         1   46[COMRAM] enum E12
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2924 ;;      Params:         0       0       2       0       0       0       0
  2925 ;;      Locals:         1       0       0       0       0       0       0
  2926 ;;      Temps:          0       0       0       0       0       0       0
  2927 ;;      Totals:         1       0       2       0       0       0       0
  2928 ;;Total ram usage:        3 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    8
  2931 ;; This function calls:
  2932 ;;		_PLLUartInitialize
  2933 ;;		_SetSynthRxOper
  2934 ;;		_SetSynthTxOper
  2935 ;;		_SynthReadData
  2936 ;;		_UpdateRxFreq
  2937 ;;		_UpdateTxFreq
  2938 ;; This function is called by:
  2939 ;;		_readUartMessage
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text8
  2944  0000'                    __ptext8:
  2945                           	opt stack 0
  2946  0000'                    _GroupSynthesizers:
  2947                           	opt stack 21
  2948                           
  2949                           ;incstack = 0
  2950                           ;GroupSynthesizers@request stored from wreg
  2951  0000' 6E2E'              	movwf	GroupSynthesizers@request,c
  2952                           
  2953                           ;MessageFunctions.c: 77: switch (request)
  2954  0002' D030               	goto	l1202
  2955  0004'                    
  2956                           ;MessageFunctions.c: 80: PLLUartInitialize(data);
  2957  0004' C000' F017'        	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2958  0008' C001' F018'        	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2959  000C' EC00' F000'        	call	_PLLUartInitialize	;wreg free
  2960                           
  2961                           ;MessageFunctions.c: 81: break;
  2962  0010' 0012               	return	
  2963  0012'                    
  2964                           ;MessageFunctions.c: 84: PLLUartInitialize(data);
  2965  0012' C000' F017'        	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2966  0016' C001' F018'        	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2967  001A' EC00' F000'        	call	_PLLUartInitialize	;wreg free
  2968                           
  2969                           ;MessageFunctions.c: 85: break;
  2970  001E' 0012               	return	
  2971  0020'                    
  2972                           ;MessageFunctions.c: 88: UpdateTxFreq(data);
  2973  0020' C000' F026'        	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2974  0024' C001' F027'        	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2975  0028' EC00' F000'        	call	_UpdateTxFreq	;wreg free
  2976                           
  2977                           ;MessageFunctions.c: 89: break;
  2978  002C' 0012               	return	
  2979  002E'                    
  2980                           ;MessageFunctions.c: 92: UpdateRxFreq(data);
  2981  002E' C000' F026'        	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2982  0032' C001' F027'        	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2983  0036' EC00' F000'        	call	_UpdateRxFreq	;wreg free
  2984                           
  2985                           ;MessageFunctions.c: 93: break;
  2986  003A' 0012               	return	
  2987  003C'                    
  2988                           ;MessageFunctions.c: 96: SetSynthRxOper();
  2989  003C' EC00' F000'        	call	_SetSynthRxOper	;wreg free
  2990                           
  2991                           ;MessageFunctions.c: 97: break;
  2992  0040' 0012               	return	
  2993  0042'                    
  2994                           ;MessageFunctions.c: 100: SetSynthTxOper();
  2995  0042' EC00' F000'        	call	_SetSynthTxOper	;wreg free
  2996                           
  2997                           ;MessageFunctions.c: 101: break;
  2998  0046' 0012               	return	
  2999  0048'                    
  3000                           ;MessageFunctions.c: 104: SynthReadData(data);
  3001  0048' C000' F023'        	movff	GroupSynthesizers@data,SynthReadData@data
  3002  004C' C001' F024'        	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3003  0050' EC00' F000'        	call	_SynthReadData	;wreg free
  3004                           
  3005                           ;MessageFunctions.c: 105: break;
  3006  0054' 0012               	return	
  3007  0056'                    
  3008                           ;MessageFunctions.c: 108: SynthReadData(data);
  3009  0056' C000' F023'        	movff	GroupSynthesizers@data,SynthReadData@data
  3010  005A' C001' F024'        	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3011  005E' EC00' F000'        	call	_SynthReadData	;wreg free
  3012                           
  3013                           ;MessageFunctions.c: 113: }
  3014                           
  3015                           ;MessageFunctions.c: 112: break;
  3016                           
  3017                           ;MessageFunctions.c: 111: default:
  3018                           
  3019                           ;MessageFunctions.c: 109: break;
  3020  0062' 0012               	return	
  3021  0064'                    l1202:
  3022  0064' 502E'              	movf	GroupSynthesizers@request,w,c
  3023                           
  3024                           ; Switch size 1, requested type "space"
  3025                           ; Number of cases is 8, Range of values is 64 to 71
  3026                           ; switch strategies available:
  3027                           ; Name         Instructions Cycles
  3028                           ; simple_byte           25    13 (average)
  3029                           ;	Chosen strategy is simple_byte
  3030  0066' 0A40               	xorlw	64	; case 64
  3031  0068' B4D8               	btfsc	status,2,c
  3032  006A' D7CC               	goto	l1203
  3033  006C' 0A01               	xorlw	1	; case 65
  3034  006E' B4D8               	btfsc	status,2,c
  3035  0070' D7D0               	goto	l1205
  3036  0072' 0A03               	xorlw	3	; case 66
  3037  0074' B4D8               	btfsc	status,2,c
  3038  0076' D7D4               	goto	l1206
  3039  0078' 0A01               	xorlw	1	; case 67
  3040  007A' B4D8               	btfsc	status,2,c
  3041  007C' D7D8               	goto	l1207
  3042  007E' 0A07               	xorlw	7	; case 68
  3043  0080' B4D8               	btfsc	status,2,c
  3044  0082' D7DC               	goto	l1208
  3045  0084' 0A01               	xorlw	1	; case 69
  3046  0086' B4D8               	btfsc	status,2,c
  3047  0088' D7DC               	goto	l1209
  3048  008A' 0A03               	xorlw	3	; case 70
  3049  008C' B4D8               	btfsc	status,2,c
  3050  008E' D7DC               	goto	l1210
  3051  0090' 0A01               	xorlw	1	; case 71
  3052  0092' A4D8               	btfss	status,2,c
  3053  0094' 0012               	return	
  3054  0096' D7DF               	goto	l1211
  3055  0098'                    __end_of_GroupSynthesizers:
  3056                           	opt stack 0
  3057                           tosu	equ	0xFFF
  3058                           tosh	equ	0xFFE
  3059                           tosl	equ	0xFFD
  3060                           pclath	equ	0xFFA
  3061                           tblptru	equ	0xFF8
  3062                           tblptrh	equ	0xFF7
  3063                           tblptrl	equ	0xFF6
  3064                           tablat	equ	0xFF5
  3065                           postinc0	equ	0xFEE
  3066                           wreg	equ	0xFE8
  3067                           postdec1	equ	0xFE5
  3068                           fsr1l	equ	0xFE1
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _UpdateTxFreq *****************
  3076 ;; Defined at:
  3077 ;;		line 52 in file "SyntApp.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  data            2   38[BANK0 ] PTR unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  regData         4   40[BANK0 ] unsigned long 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3091 ;;      Params:         0       2       0       0       0       0       0
  3092 ;;      Locals:         0       4       0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0
  3094 ;;      Totals:         0       6       0       0       0       0       0
  3095 ;;Total ram usage:        6 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    7
  3098 ;; This function calls:
  3099 ;;		_GetIntFromUartData
  3100 ;;		_SWSPI_send_word
  3101 ;;		_SendAckMessage
  3102 ;; This function is called by:
  3103 ;;		_GroupSynthesizers
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text9
  3108  0000'                    __ptext9:
  3109                           	opt stack 0
  3110  0000'                    _UpdateTxFreq:
  3111                           	opt stack 21
  3112                           
  3113                           ;SyntApp.c: 54: if(cntRegUpdate < 7)
  3114                           
  3115                           ;incstack = 0
  3116  0000' 0E07               	movlw	7
  3117  0002' 600A'              	cpfslt	_cntRegUpdate,c
  3118  0004' D01E               	goto	l487
  3119                           
  3120                           ;SyntApp.c: 55: {
  3121                           ;SyntApp.c: 56: uint32_t regData = GetIntFromUartData(10, data);
  3122  0006' C026' F006'        	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3123  000A' C027' F007'        	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3124  000E' 0E0A               	movlw	10
  3125  0010' EC00' F000'        	call	_GetIntFromUartData
  3126  0014' C006' F028'        	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3127  0018' C007' F029'        	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3128  001C' C008' F02A'        	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3129  0020' C009' F02B'        	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3130                           
  3131                           ;SyntApp.c: 57: SWSPI_send_word(SYNTH_TX, regData, 3);
  3132  0024' C028' F025'        	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3133  0028' C029' F026'        	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3134  002C' C02A' F027'        	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3135  0030' C02B' F028'        	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3136  0034' 0E03               	movlw	3
  3137  0036' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  3138  0038' 0E00               	movlw	0
  3139  003A' EC00' F000'        	call	_SWSPI_send_word
  3140                           
  3141                           ;SyntApp.c: 58: cntRegUpdate ++;
  3142  003E' 2A0A'              	incf	_cntRegUpdate,f,c
  3143                           
  3144                           ;SyntApp.c: 59: }
  3145  0040' 0012               	return	
  3146  0042'                    l487:
  3147                           
  3148                           ;SyntApp.c: 61: else
  3149                           ;SyntApp.c: 62: {
  3150                           ;SyntApp.c: 63: cntRegUpdate = 0;
  3151  0042' 0E00               	movlw	0
  3152  0044' 6E0A'              	movwf	_cntRegUpdate,c
  3153                           
  3154                           ;SyntApp.c: 64: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3155  0046' 0E42               	movlw	66
  3156  0048' 6E23'              	movwf	SendAckMessage@inRequest,c
  3157  004A' 0E04               	movlw	4
  3158  004C' EC00' F000'        	call	_SendAckMessage
  3159  0050' 0012               	return	
  3160  0052'                    __end_of_UpdateTxFreq:
  3161                           	opt stack 0
  3162                           tosu	equ	0xFFF
  3163                           tosh	equ	0xFFE
  3164                           tosl	equ	0xFFD
  3165                           pclath	equ	0xFFA
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           postdec1	equ	0xFE5
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _UpdateRxFreq *****************
  3181 ;; Defined at:
  3182 ;;		line 69 in file "SyntApp.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  data            2   38[BANK0 ] PTR unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  regData         4   40[BANK0 ] unsigned long 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         0       2       0       0       0       0       0
  3197 ;;      Locals:         0       4       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0
  3199 ;;      Totals:         0       6       0       0       0       0       0
  3200 ;;Total ram usage:        6 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    7
  3203 ;; This function calls:
  3204 ;;		_GetIntFromUartData
  3205 ;;		_SWSPI_send_word
  3206 ;;		_SendAckMessage
  3207 ;; This function is called by:
  3208 ;;		_GroupSynthesizers
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text10
  3213  0000'                    __ptext10:
  3214                           	opt stack 0
  3215  0000'                    _UpdateRxFreq:
  3216                           	opt stack 21
  3217                           
  3218                           ;SyntApp.c: 71: if(cntRegUpdate < 7)
  3219                           
  3220                           ;incstack = 0
  3221  0000' 0E07               	movlw	7
  3222  0002' 600A'              	cpfslt	_cntRegUpdate,c
  3223  0004' D01E               	goto	l492
  3224                           
  3225                           ;SyntApp.c: 72: {
  3226                           ;SyntApp.c: 73: uint32_t regData = GetIntFromUartData(10, data);
  3227  0006' C026' F006'        	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3228  000A' C027' F007'        	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3229  000E' 0E0A               	movlw	10
  3230  0010' EC00' F000'        	call	_GetIntFromUartData
  3231  0014' C006' F028'        	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3232  0018' C007' F029'        	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3233  001C' C008' F02A'        	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3234  0020' C009' F02B'        	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3235                           
  3236                           ;SyntApp.c: 74: SWSPI_send_word(SYNTH_RX, regData, 3);
  3237  0024' C028' F025'        	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3238  0028' C029' F026'        	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3239  002C' C02A' F027'        	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3240  0030' C02B' F028'        	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3241  0034' 0E03               	movlw	3
  3242  0036' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  3243  0038' 0E01               	movlw	1
  3244  003A' EC00' F000'        	call	_SWSPI_send_word
  3245                           
  3246                           ;SyntApp.c: 75: cntRegUpdate ++;
  3247  003E' 2A0A'              	incf	_cntRegUpdate,f,c
  3248                           
  3249                           ;SyntApp.c: 76: }
  3250  0040' 0012               	return	
  3251  0042'                    l492:
  3252                           
  3253                           ;SyntApp.c: 78: else
  3254                           ;SyntApp.c: 79: {
  3255                           ;SyntApp.c: 80: cntRegUpdate = 0;
  3256  0042' 0E00               	movlw	0
  3257  0044' 6E0A'              	movwf	_cntRegUpdate,c
  3258                           
  3259                           ;SyntApp.c: 81: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3260  0046' 0E43               	movlw	67
  3261  0048' 6E23'              	movwf	SendAckMessage@inRequest,c
  3262  004A' 0E04               	movlw	4
  3263  004C' EC00' F000'        	call	_SendAckMessage
  3264  0050' 0012               	return	
  3265  0052'                    __end_of_UpdateRxFreq:
  3266                           	opt stack 0
  3267                           tosu	equ	0xFFF
  3268                           tosh	equ	0xFFE
  3269                           tosl	equ	0xFFD
  3270                           pclath	equ	0xFFA
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _SynthReadData *****************
  3286 ;; Defined at:
  3287 ;;		line 112 in file "SyntApp.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  data            2   35[COMRAM] PTR unsigned char 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  TxMsg          27    0[BANK0 ] unsigned char [27]
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3301 ;;      Params:         2       0       0       0       0       0       0
  3302 ;;      Locals:         0      27       0       0       0       0       0
  3303 ;;      Temps:          1       0       0       0       0       0       0
  3304 ;;      Totals:         3      27       0       0       0       0       0
  3305 ;;Total ram usage:       30 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    5
  3308 ;; This function calls:
  3309 ;;		_WriteUartMessage
  3310 ;;		_ZeroArray
  3311 ;;		_crc8
  3312 ;; This function is called by:
  3313 ;;		_GroupSynthesizers
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text11
  3318  0000'                    __ptext11:
  3319                           	opt stack 0
  3320  0000'                    _SynthReadData:
  3321                           	opt stack 23
  3322                           
  3323                           ;SyntApp.c: 115: char TxMsg[22 + (0x4) + 1];
  3324                           ;SyntApp.c: 116: ZeroArray(TxMsg, 22 + (0x4) + 1);
  3325                           
  3326                           ;incstack = 0
  3327  0000' 0E00'              	movlw	low SynthReadData@TxMsg
  3328  0002' 6E1F'              	movwf	ZeroArray@array,c
  3329  0004' 0E00'              	movlw	high SynthReadData@TxMsg
  3330  0006' 6E20'              	movwf	ZeroArray@array+1,c
  3331  0008' 0E00               	movlw	0
  3332  000A' 6E22'              	movwf	ZeroArray@size+1,c
  3333  000C' 0E1B               	movlw	27
  3334  000E' 6E21'              	movwf	ZeroArray@size,c
  3335  0010' EC00' F000'        	call	_ZeroArray	;wreg free
  3336                           
  3337                           ;SyntApp.c: 119: TxMsg[(0)] = (0x24);
  3338  0014' 0E24               	movlw	36
  3339  0016' 0100               	movlb	0	; () banked
  3340  0018' 6F00'              	movwf	SynthReadData@TxMsg& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;SyntApp.c: 120: TxMsg[(1)] = SYNTH_MSG;
  3344  001A' 0E04               	movlw	4
  3345  001C' 6F00'              	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;SyntApp.c: 121: TxMsg[(3)] = 22;
  3349  001E' 0E16               	movlw	22
  3350  0020' 6F00'              	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;SyntApp.c: 123: if(data[0] == 1)
  3354  0022' C023' FFD9         	movff	SynthReadData@data,fsr2l
  3355  0026' C024' FFDA         	movff	SynthReadData@data+1,fsr2h
  3356  002A' 04DE               	decf	postinc2,w,c
  3357  002C' A4D8               	btfss	status,2,c
  3358  002E' D002               	goto	l505
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;SyntApp.c: 124: {
  3362                           ;SyntApp.c: 125: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3363  0030' 0E47               	movlw	71
  3364  0032' D001               	goto	L1
  3365  0034'                    l505:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;SyntApp.c: 137: else
  3369                           ;SyntApp.c: 138: {
  3370                           ;SyntApp.c: 139: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3371                           
  3372                           ; BSR set to: 0
  3373  0034' 0E46               	movlw	70
  3374  0036'                    L1:
  3375  0036' 6F00'              	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;SyntApp.c: 141: }
  3379                           ;SyntApp.c: 143: TxMsg[22 + (0x4)] = crc8(TxMsg, 22 + (0x4));
  3380                           
  3381                           ; BSR set to: 0
  3382  0038' 0E00'              	movlw	low SynthReadData@TxMsg
  3383  003A' 6E17'              	movwf	crc8@dataArray,c
  3384  003C' 0E00'              	movlw	high SynthReadData@TxMsg
  3385  003E' 6E18'              	movwf	crc8@dataArray+1,c
  3386  0040' 0E00               	movlw	0
  3387  0042' 6E1A'              	movwf	crc8@dataSize+1,c
  3388  0044' 0E1A               	movlw	26
  3389  0046' 6E19'              	movwf	crc8@dataSize,c
  3390  0048' EC00' F000'        	call	_crc8	;wreg free
  3391  004C' 0100               	movlb	0	; () banked
  3392  004E' 6F00'              	movwf	(SynthReadData@TxMsg+26)& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;SyntApp.c: 144: WriteUartMessage(TxMsg, 22 + (0x4) + 1);
  3396  0050' 0E00'              	movlw	low SynthReadData@TxMsg
  3397  0052' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  3398  0054' 0E00'              	movlw	high SynthReadData@TxMsg
  3399  0056' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  3400  0058' 0E00               	movlw	0
  3401  005A' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  3402  005C' 0E1B               	movlw	27
  3403  005E' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  3404  0060' EC00' F000'        	call	_WriteUartMessage	;wreg free
  3405  0064' 0012               	return		;funcret
  3406  0066'                    __end_of_SynthReadData:
  3407                           	opt stack 0
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           pclath	equ	0xFFA
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _SetSynthTxOper *****************
  3427 ;; Defined at:
  3428 ;;		line 93 in file "SyntApp.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3442 ;;      Params:         0       0       0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0
  3445 ;;      Totals:         0       0       0       0       0       0       0
  3446 ;;Total ram usage:        0 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    6
  3449 ;; This function calls:
  3450 ;;		_SendAckMessage
  3451 ;;		_SwSpi_Set_CE_Pin
  3452 ;; This function is called by:
  3453 ;;		_GroupSynthesizers
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text12
  3458  0000'                    __ptext12:
  3459                           	opt stack 0
  3460  0000'                    _SetSynthTxOper:
  3461                           	opt stack 22
  3462                           
  3463                           ;SyntApp.c: 95: SynthTxOper = !SynthTxOper;
  3464                           
  3465                           ;incstack = 0
  3466  0000' 5004'              	movf	_SynthTxOper,w,c
  3467  0002' A4D8               	btfss	status,2,c
  3468  0004' D002               	goto	u7430
  3469  0006' 0E01               	movlw	1
  3470  0008' D001               	goto	u7440
  3471  000A'                    u7430:
  3472  000A' 0E00               	movlw	0
  3473  000C'                    u7440:
  3474  000C' 6E04'              	movwf	_SynthTxOper,c
  3475                           
  3476                           ;SyntApp.c: 96: if(SynthTxOper)
  3477  000E' 5004'              	movf	_SynthTxOper,w,c
  3478  0010' B4D8               	btfsc	status,2,c
  3479  0012' D006               	goto	l497
  3480                           
  3481                           ;SyntApp.c: 97: {
  3482                           ;SyntApp.c: 98: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  3483  0014' 0E01               	movlw	1
  3484  0016' 6E17'              	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3485  0018' 0E00               	movlw	0
  3486  001A' EC00' F000'        	call	_SwSpi_Set_CE_Pin
  3487                           
  3488                           ;SyntApp.c: 99: }
  3489  001E' D005               	goto	l498
  3490  0020'                    l497:
  3491                           
  3492                           ;SyntApp.c: 100: else
  3493                           ;SyntApp.c: 101: {
  3494                           ;SyntApp.c: 102: SwSpi_Set_CE_Pin(SYNTH_TX, 0);
  3495  0020' 0E00               	movlw	0
  3496  0022' 6E17'              	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3497  0024' 0E00               	movlw	0
  3498  0026' EC00' F000'        	call	_SwSpi_Set_CE_Pin
  3499  002A'                    l498:
  3500                           
  3501                           ;SyntApp.c: 103: }
  3502                           ;SyntApp.c: 104: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  3503  002A' 0E45               	movlw	69
  3504  002C' 6E23'              	movwf	SendAckMessage@inRequest,c
  3505  002E' 0E04               	movlw	4
  3506  0030' EC00' F000'        	call	_SendAckMessage
  3507  0034' 0012               	return		;funcret
  3508  0036'                    __end_of_SetSynthTxOper:
  3509                           	opt stack 0
  3510                           tosu	equ	0xFFF
  3511                           tosh	equ	0xFFE
  3512                           tosl	equ	0xFFD
  3513                           pclath	equ	0xFFA
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           postdec1	equ	0xFE5
  3521                           fsr1l	equ	0xFE1
  3522                           indf2	equ	0xFDF
  3523                           postinc2	equ	0xFDE
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _SetSynthRxOper *****************
  3529 ;; Defined at:
  3530 ;;		line 107 in file "SyntApp.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3544 ;;      Params:         0       0       0       0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0       0       0
  3547 ;;      Totals:         0       0       0       0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    6
  3551 ;; This function calls:
  3552 ;;		_SendAckMessage
  3553 ;; This function is called by:
  3554 ;;		_GroupSynthesizers
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text13
  3559  0000'                    __ptext13:
  3560                           	opt stack 0
  3561  0000'                    _SetSynthRxOper:
  3562                           	opt stack 22
  3563                           
  3564                           ;SyntApp.c: 109: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  3565                           
  3566                           ;incstack = 0
  3567  0000' 0E44               	movlw	68
  3568  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  3569  0004' 0E04               	movlw	4
  3570  0006' EC00' F000'        	call	_SendAckMessage
  3571  000A' 0012               	return		;funcret
  3572  000C'                    __end_of_SetSynthRxOper:
  3573                           	opt stack 0
  3574                           tosu	equ	0xFFF
  3575                           tosh	equ	0xFFE
  3576                           tosl	equ	0xFFD
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           postinc0	equ	0xFEE
  3583                           wreg	equ	0xFE8
  3584                           postdec1	equ	0xFE5
  3585                           fsr1l	equ	0xFE1
  3586                           indf2	equ	0xFDF
  3587                           postinc2	equ	0xFDE
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _PLLUartInitialize *****************
  3593 ;; Defined at:
  3594 ;;		line 43 in file "SyntApp.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  data            2   23[COMRAM] PTR unsigned char 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      void 
  3601 ;; Registers used:
  3602 ;;		None
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3608 ;;      Params:         2       0       0       0       0       0       0
  3609 ;;      Locals:         0       0       0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0
  3611 ;;      Totals:         2       0       0       0       0       0       0
  3612 ;;Total ram usage:        2 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    3
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_GroupSynthesizers
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text14
  3623  0000'                    __ptext14:
  3624                           	opt stack 0
  3625  0000'                    _PLLUartInitialize:
  3626                           	opt stack 25
  3627                           
  3628                           ;incstack = 0
  3629  0000' 0012               	return		;funcret
  3630  0002'                    __end_of_PLLUartInitialize:
  3631                           	opt stack 0
  3632                           tosu	equ	0xFFF
  3633                           tosh	equ	0xFFE
  3634                           tosl	equ	0xFFD
  3635                           pclath	equ	0xFFA
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           postinc0	equ	0xFEE
  3641                           wreg	equ	0xFE8
  3642                           postdec1	equ	0xFE5
  3643                           fsr1l	equ	0xFE1
  3644                           indf2	equ	0xFDF
  3645                           postinc2	equ	0xFDE
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _GetMcuRunTime *****************
  3651 ;; Defined at:
  3652 ;;		line 51 in file "SystemStatus.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  idx             2   13[BANK0 ] int 
  3657 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3658 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         0       0       0       0       0       0       0
  3669 ;;      Locals:         0      15       0       0       0       0       0
  3670 ;;      Temps:          2       0       0       0       0       0       0
  3671 ;;      Totals:         2      15       0       0       0       0       0
  3672 ;;Total ram usage:       17 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    5
  3675 ;; This function calls:
  3676 ;;		_WriteUartMessage
  3677 ;;		___lldiv
  3678 ;;		___llmod
  3679 ;;		_crc8
  3680 ;; This function is called by:
  3681 ;;		_GroupStatusAndVersion
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text15
  3686  0000'                    __ptext15:
  3687                           	opt stack 0
  3688  0000'                    _GetMcuRunTime:
  3689                           	opt stack 23
  3690                           
  3691                           ;SystemStatus.c: 54: char TxMsg[(0x4) + (0x4) + 1];
  3692                           ;SystemStatus.c: 57: TxMsg[(0)] = (0x24);
  3693                           
  3694                           ;incstack = 0
  3695  0000' 0E24               	movlw	36
  3696  0002' 0100               	movlb	0	; () banked
  3697  0004' 6F00'              	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3698                           
  3699                           ;SystemStatus.c: 58: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3700  0006' 0E02               	movlw	2
  3701  0008' 6F00'              	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3702                           
  3703                           ;SystemStatus.c: 59: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3704  000A' 0E21               	movlw	33
  3705  000C' 6F00'              	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3706                           
  3707                           ;SystemStatus.c: 60: TxMsg[(3)] = (0x4);
  3708  000E' 0E04               	movlw	4
  3709  0010' 6F00'              	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;SystemStatus.c: 62: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3713  0012' C000' F009'        	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3714  0016' C001' F00A'        	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3715  001A' C002' F00B'        	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3716  001E' C003' F00C'        	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3717                           
  3718                           ;SystemStatus.c: 65: for(int idx = 0; idx < (0x4); idx++)
  3719  0022' 0E00               	movlw	0
  3720  0024' 6F00'              	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3721  0026' 0E00               	movlw	0
  3722  0028' 6F00'              	movwf	GetMcuRunTime@idx& (0+255),b
  3723  002A'                    l7461:
  3724                           
  3725                           ; BSR set to: 0
  3726  002A' BF00'              	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3727  002C' D006               	goto	l1373
  3728  002E' 5100'              	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3729  0030' E142               	bnz	l7473
  3730  0032' 0E04               	movlw	4
  3731  0034' 5D00'              	subwf	GetMcuRunTime@idx& (0+255),w,b
  3732  0036' B0D8               	btfsc	status,0,c
  3733  0038' D03E               	goto	u7480
  3734  003A'                    l1373:
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;SystemStatus.c: 66: {
  3738                           ;SystemStatus.c: 67: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3739                           
  3740                           ; BSR set to: 0
  3741  003A' 0E04               	movlw	4
  3742  003C' 2500'              	addwf	GetMcuRunTime@idx& (0+255),w,b
  3743  003E' 6E00'              	movwf	??_GetMcuRunTime& (0+255),c
  3744  0040' 0E00               	movlw	0
  3745  0042' 2100'              	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3746  0044' 6E00'              	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3747  0046' 0E00'              	movlw	low GetMcuRunTime@TxMsg
  3748  0048' 2424'              	addwf	??_GetMcuRunTime,w,c
  3749  004A' 6ED9               	movwf	fsr2l,c
  3750  004C' 0E00'              	movlw	high GetMcuRunTime@TxMsg
  3751  004E' 2025'              	addwfc	??_GetMcuRunTime+1,w,c
  3752  0050' 6EDA               	movwf	fsr2h,c
  3753  0052' C009' F017'        	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3754  0056' C00A' F018'        	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3755  005A' C00B' F019'        	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3756  005E' C00C' F01A'        	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3757  0062' 0E0A               	movlw	10
  3758  0064' 6E1B'              	movwf	___llmod@divisor,c
  3759  0066' 0E00               	movlw	0
  3760  0068' 6E1C'              	movwf	___llmod@divisor+1,c
  3761  006A' 0E00               	movlw	0
  3762  006C' 6E1D'              	movwf	___llmod@divisor+2,c
  3763  006E' 0E00               	movlw	0
  3764  0070' 6E1E'              	movwf	___llmod@divisor+3,c
  3765  0072' EC00' F000'        	call	___llmod	;wreg free
  3766  0076' 5017'              	movf	?___llmod,w,c
  3767  0078' 6EDF               	movwf	indf2,c
  3768                           
  3769                           ;SystemStatus.c: 68: tempRunTime /= 10;
  3770  007A' C009' F017'        	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3771  007E' C00A' F018'        	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3772  0082' C00B' F019'        	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3773  0086' C00C' F01A'        	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3774  008A' 0E0A               	movlw	10
  3775  008C' 6E1B'              	movwf	___lldiv@divisor,c
  3776  008E' 0E00               	movlw	0
  3777  0090' 6E1C'              	movwf	___lldiv@divisor+1,c
  3778  0092' 0E00               	movlw	0
  3779  0094' 6E1D'              	movwf	___lldiv@divisor+2,c
  3780  0096' 0E00               	movlw	0
  3781  0098' 6E1E'              	movwf	___lldiv@divisor+3,c
  3782  009A' EC00' F000'        	call	___lldiv	;wreg free
  3783  009E' C017' F009'        	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3784  00A2' C018' F00A'        	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3785  00A6' C019' F00B'        	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3786  00AA' C01A' F00C'        	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3787  00AE' 0100               	movlb	0	; () banked
  3788  00B0' 4B00'              	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3789  00B2' 2B00'              	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3790  00B4' D7BA               	goto	l7461
  3791  00B6'                    u7480:
  3792  00B6'                    l7473:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;SystemStatus.c: 69: }
  3796                           ;SystemStatus.c: 71: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3797  00B6' 0E00'              	movlw	low GetMcuRunTime@TxMsg
  3798  00B8' 6E17'              	movwf	crc8@dataArray,c
  3799  00BA' 0E00'              	movlw	high GetMcuRunTime@TxMsg
  3800  00BC' 6E18'              	movwf	crc8@dataArray+1,c
  3801  00BE' 0E00               	movlw	0
  3802  00C0' 6E1A'              	movwf	crc8@dataSize+1,c
  3803  00C2' 0E08               	movlw	8
  3804  00C4' 6E19'              	movwf	crc8@dataSize,c
  3805  00C6' EC00' F000'        	call	_crc8	;wreg free
  3806  00CA' 0100               	movlb	0	; () banked
  3807  00CC' 6F00'              	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;SystemStatus.c: 73: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3811  00CE' 0E00'              	movlw	low GetMcuRunTime@TxMsg
  3812  00D0' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  3813  00D2' 0E00'              	movlw	high GetMcuRunTime@TxMsg
  3814  00D4' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  3815  00D6' 0E00               	movlw	0
  3816  00D8' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  3817  00DA' 0E09               	movlw	9
  3818  00DC' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  3819  00DE' EC00' F000'        	call	_WriteUartMessage	;wreg free
  3820  00E2' 0012               	return		;funcret
  3821  00E4'                    __end_of_GetMcuRunTime:
  3822                           	opt stack 0
  3823                           tosu	equ	0xFFF
  3824                           tosh	equ	0xFFE
  3825                           tosl	equ	0xFFD
  3826                           pclath	equ	0xFFA
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           postdec1	equ	0xFE5
  3834                           fsr1l	equ	0xFE1
  3835                           indf2	equ	0xFDF
  3836                           postinc2	equ	0xFDE
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function ___lldiv *****************
  3842 ;; Defined at:
  3843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  dividend        4   23[COMRAM] unsigned long 
  3846 ;;  divisor         4   27[COMRAM] unsigned long 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  quotient        4   31[COMRAM] unsigned long 
  3849 ;;  counter         1   35[COMRAM] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  4   23[COMRAM] unsigned long 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3859 ;;      Params:         8       0       0       0       0       0       0
  3860 ;;      Locals:         5       0       0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0
  3862 ;;      Totals:        13       0       0       0       0       0       0
  3863 ;;Total ram usage:       13 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    3
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_GetMcuRunTime
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text16
  3874  0000'                    __ptext16:
  3875                           	opt stack 0
  3876  0000'                    ___lldiv:
  3877                           	opt stack 24
  3878                           
  3879                           ;incstack = 0
  3880  0000' 0E00               	movlw	0
  3881  0002' 6E1F'              	movwf	___lldiv@quotient,c
  3882  0004' 0E00               	movlw	0
  3883  0006' 6E20'              	movwf	___lldiv@quotient+1,c
  3884  0008' 0E00               	movlw	0
  3885  000A' 6E21'              	movwf	___lldiv@quotient+2,c
  3886  000C' 0E00               	movlw	0
  3887  000E' 6E22'              	movwf	___lldiv@quotient+3,c
  3888  0010' 501B'              	movf	___lldiv@divisor,w,c
  3889  0012' 101C'              	iorwf	___lldiv@divisor+1,w,c
  3890  0014' 101D'              	iorwf	___lldiv@divisor+2,w,c
  3891  0016' 101E'              	iorwf	___lldiv@divisor+3,w,c
  3892  0018' B4D8               	btfsc	status,2,c
  3893  001A' D02A               	goto	l1804
  3894  001C' 0E01               	movlw	1
  3895  001E' 6E23'              	movwf	___lldiv@counter,c
  3896  0020' D006               	goto	l1799
  3897  0022' 90D8               	bcf	status,0,c
  3898  0024' 361B'              	rlcf	___lldiv@divisor,f,c
  3899  0026' 361C'              	rlcf	___lldiv@divisor+1,f,c
  3900  0028' 361D'              	rlcf	___lldiv@divisor+2,f,c
  3901  002A' 361E'              	rlcf	___lldiv@divisor+3,f,c
  3902  002C' 2A23'              	incf	___lldiv@counter,f,c
  3903  002E'                    l1799:
  3904  002E' AE1E'              	btfss	___lldiv@divisor+3,7,c
  3905  0030' D7F8               	goto	l1800
  3906  0032'                    u6980:
  3907  0032' 90D8               	bcf	status,0,c
  3908  0034' 361F'              	rlcf	___lldiv@quotient,f,c
  3909  0036' 3620'              	rlcf	___lldiv@quotient+1,f,c
  3910  0038' 3621'              	rlcf	___lldiv@quotient+2,f,c
  3911  003A' 3622'              	rlcf	___lldiv@quotient+3,f,c
  3912  003C' 501B'              	movf	___lldiv@divisor,w,c
  3913  003E' 5C17'              	subwf	___lldiv@dividend,w,c
  3914  0040' 501C'              	movf	___lldiv@divisor+1,w,c
  3915  0042' 5818'              	subwfb	___lldiv@dividend+1,w,c
  3916  0044' 501D'              	movf	___lldiv@divisor+2,w,c
  3917  0046' 5819'              	subwfb	___lldiv@dividend+2,w,c
  3918  0048' 501E'              	movf	___lldiv@divisor+3,w,c
  3919  004A' 581A'              	subwfb	___lldiv@dividend+3,w,c
  3920  004C' A0D8               	btfss	status,0,c
  3921  004E' D009               	goto	l1803
  3922  0050' 501B'              	movf	___lldiv@divisor,w,c
  3923  0052' 5E17'              	subwf	___lldiv@dividend,f,c
  3924  0054' 501C'              	movf	___lldiv@divisor+1,w,c
  3925  0056' 5A18'              	subwfb	___lldiv@dividend+1,f,c
  3926  0058' 501D'              	movf	___lldiv@divisor+2,w,c
  3927  005A' 5A19'              	subwfb	___lldiv@dividend+2,f,c
  3928  005C' 501E'              	movf	___lldiv@divisor+3,w,c
  3929  005E' 5A1A'              	subwfb	___lldiv@dividend+3,f,c
  3930  0060' 801F'              	bsf	___lldiv@quotient,0,c
  3931  0062'                    l1803:
  3932  0062' 90D8               	bcf	status,0,c
  3933  0064' 321E'              	rrcf	___lldiv@divisor+3,f,c
  3934  0066' 321D'              	rrcf	___lldiv@divisor+2,f,c
  3935  0068' 321C'              	rrcf	___lldiv@divisor+1,f,c
  3936  006A' 321B'              	rrcf	___lldiv@divisor,f,c
  3937  006C' 2E23'              	decfsz	___lldiv@counter,f,c
  3938  006E' D7E1               	goto	u6980
  3939  0070'                    l1804:
  3940  0070' C01F' F017'        	movff	___lldiv@quotient,?___lldiv
  3941  0074' C020' F018'        	movff	___lldiv@quotient+1,?___lldiv+1
  3942  0078' C021' F019'        	movff	___lldiv@quotient+2,?___lldiv+2
  3943  007C' C022' F01A'        	movff	___lldiv@quotient+3,?___lldiv+3
  3944  0080' 0012               	return		;funcret
  3945  0082'                    __end_of___lldiv:
  3946                           	opt stack 0
  3947                           tosu	equ	0xFFF
  3948                           tosh	equ	0xFFE
  3949                           tosl	equ	0xFFD
  3950                           pclath	equ	0xFFA
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           postdec1	equ	0xFE5
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _GetMcuFwVersion *****************
  3966 ;; Defined at:
  3967 ;;		line 14 in file "SystemStatus.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  TxMsg           9    4[BANK0 ] unsigned char [9]
  3972 ;;  timeCoplie      4    0[BANK0 ] unsigned long 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3982 ;;      Params:         0       0       0       0       0       0       0
  3983 ;;      Locals:         0      13       0       0       0       0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0
  3985 ;;      Totals:         0      13       0       0       0       0       0
  3986 ;;Total ram usage:       13 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    5
  3989 ;; This function calls:
  3990 ;;		_WriteUartMessage
  3991 ;;		_ZeroArray
  3992 ;;		_crc8
  3993 ;; This function is called by:
  3994 ;;		_GroupStatusAndVersion
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text17
  3999  0000'                    __ptext17:
  4000                           	opt stack 0
  4001  0000'                    _GetMcuFwVersion:
  4002                           	opt stack 23
  4003                           
  4004                           ;SystemStatus.c: 17: char TxMsg[(0x4) + (0x4) + 1];
  4005                           ;SystemStatus.c: 18: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4006                           
  4007                           ;incstack = 0
  4008  0000' 0E00'              	movlw	low GetMcuFwVersion@TxMsg
  4009  0002' 6E1F'              	movwf	ZeroArray@array,c
  4010  0004' 0E00'              	movlw	high GetMcuFwVersion@TxMsg
  4011  0006' 6E20'              	movwf	ZeroArray@array+1,c
  4012  0008' 0E00               	movlw	0
  4013  000A' 6E22'              	movwf	ZeroArray@size+1,c
  4014  000C' 0E09               	movlw	9
  4015  000E' 6E21'              	movwf	ZeroArray@size,c
  4016  0010' EC00' F000'        	call	_ZeroArray	;wreg free
  4017                           
  4018                           ;SystemStatus.c: 21: TxMsg[(0)] = (0x24);
  4019  0014' 0E24               	movlw	36
  4020  0016' 0100               	movlb	0	; () banked
  4021  0018' 6F00'              	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;SystemStatus.c: 22: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4025  001A' 0E02               	movlw	2
  4026  001C' 6F00'              	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;SystemStatus.c: 23: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4030  001E' 0E22               	movlw	34
  4031  0020' 6F00'              	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;SystemStatus.c: 24: TxMsg[(3)] = (0x4);
  4035  0022' 0E04               	movlw	4
  4036  0024' 6F00'              	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;SystemStatus.c: 32: uint32_t timeCoplie = "Mar 14 2018";
  4040  0026' 0E00'              	movlw	low STR_1
  4041  0028' 6F00'              	movwf	GetMcuFwVersion@timeCoplie& (0+255),b
  4042  002A' 0E00'              	movlw	high STR_1
  4043  002C' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+1)& (0+255),b
  4044  002E' 0E00'              	movlw	low (STR_1 shr (0+16))
  4045  0030' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+2)& (0+255),b
  4046  0032' 0E00'              	movlw	high (STR_1 shr (0+16))
  4047  0034' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+3)& (0+255),b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;SystemStatus.c: 33: uint32_t timeCoplie = "Mar 14 2018";
  4051  0036' 0E00'              	movlw	low STR_1
  4052  0038' 6F00'              	movwf	GetMcuFwVersion@timeCoplie& (0+255),b
  4053  003A' 0E00'              	movlw	high STR_1
  4054  003C' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+1)& (0+255),b
  4055  003E' 0E00'              	movlw	low (STR_1 shr (0+16))
  4056  0040' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+2)& (0+255),b
  4057  0042' 0E00'              	movlw	high (STR_1 shr (0+16))
  4058  0044' 6F00'              	movwf	(GetMcuFwVersion@timeCoplie+3)& (0+255),b
  4059                           
  4060                           ;SystemStatus.c: 35: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4061  0046' 0E00'              	movlw	low GetMcuFwVersion@TxMsg
  4062  0048' 6E17'              	movwf	crc8@dataArray,c
  4063  004A' 0E00'              	movlw	high GetMcuFwVersion@TxMsg
  4064  004C' 6E18'              	movwf	crc8@dataArray+1,c
  4065  004E' 0E00               	movlw	0
  4066  0050' 6E1A'              	movwf	crc8@dataSize+1,c
  4067  0052' 0E08               	movlw	8
  4068  0054' 6E19'              	movwf	crc8@dataSize,c
  4069  0056' EC00' F000'        	call	_crc8	;wreg free
  4070  005A' 0100               	movlb	0	; () banked
  4071  005C' 6F00'              	movwf	(GetMcuFwVersion@TxMsg+8)& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;SystemStatus.c: 37: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4075  005E' 0E00'              	movlw	low GetMcuFwVersion@TxMsg
  4076  0060' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  4077  0062' 0E00'              	movlw	high GetMcuFwVersion@TxMsg
  4078  0064' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  4079  0066' 0E00               	movlw	0
  4080  0068' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  4081  006A' 0E09               	movlw	9
  4082  006C' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  4083  006E' EC00' F000'        	call	_WriteUartMessage	;wreg free
  4084  0072' 0012               	return		;funcret
  4085  0074'                    __end_of_GetMcuFwVersion:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclath	equ	0xFFA
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           postinc0	equ	0xFEE
  4096                           wreg	equ	0xFE8
  4097                           postdec1	equ	0xFE5
  4098                           fsr1l	equ	0xFE1
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function _FlashReadUart *****************
  4106 ;; Defined at:
  4107 ;;		line 62 in file "FlashApp.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  numOfSampleT    2   43[COMRAM] int 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  idx             2   91[BANK0 ] int 
  4112 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4113 ;;  offset          2   93[BANK0 ] int 
  4114 ;;  j               2   89[BANK0 ] int 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4124 ;;      Params:         2       0       0       0       0       0       0
  4125 ;;      Locals:         0      83       0       0       0       0       0
  4126 ;;      Temps:          0      12       0       0       0       0       0
  4127 ;;      Totals:         2      95       0       0       0       0       0
  4128 ;;Total ram usage:       97 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    6
  4131 ;; This function calls:
  4132 ;;		_FLASH_IsWriteDone
  4133 ;;		_FLASH_ReadByte
  4134 ;;		_SendAckMessage
  4135 ;;		_WriteUartMessage
  4136 ;;		_ZeroArray
  4137 ;;		_abs
  4138 ;;		_crc8
  4139 ;; This function is called by:
  4140 ;;		_GroupFlashMemory
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text18
  4145  0000'                    __ptext18:
  4146                           	opt stack 0
  4147  0000'                    _FlashReadUart:
  4148                           	opt stack 22
  4149                           
  4150                           ;FlashApp.c: 65: int j=0;
  4151                           
  4152                           ;incstack = 0
  4153  0000' 0E00               	movlw	0
  4154  0002' 0100               	movlb	0	; () banked
  4155  0004' 6F00'              	movwf	(FlashReadUart@j+1)& (0+255),b
  4156  0006' 0E00               	movlw	0
  4157  0008' 6F00'              	movwf	FlashReadUart@j& (0+255),b
  4158                           
  4159                           ;FlashApp.c: 66: int offset = 0;
  4160  000A' 0E00               	movlw	0
  4161  000C' 6F00'              	movwf	(FlashReadUart@offset+1)& (0+255),b
  4162  000E' 0E00               	movlw	0
  4163  0010' 6F00'              	movwf	FlashReadUart@offset& (0+255),b
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4167                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4168  0012' 0E00'              	movlw	low FlashReadUart@TxMsg
  4169  0014' 6E1F'              	movwf	ZeroArray@array,c
  4170  0016' 0E00'              	movlw	high FlashReadUart@TxMsg
  4171  0018' 6E20'              	movwf	ZeroArray@array+1,c
  4172  001A' 0E00               	movlw	0
  4173  001C' 6E22'              	movwf	ZeroArray@size+1,c
  4174  001E' 0E45               	movlw	69
  4175  0020' 6E21'              	movwf	ZeroArray@size,c
  4176  0022' EC00' F000'        	call	_ZeroArray	;wreg free
  4177                           
  4178                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4179  0026' EC00' F000'        	call	_FLASH_IsWriteDone	;wreg free
  4180  002A' 0900               	iorlw	0
  4181  002C' B4D8               	btfsc	status,2,c
  4182  002E' 0012               	return	
  4183                           
  4184                           ;FlashApp.c: 74: }
  4185                           ;FlashApp.c: 76: if (numOfReadSamples)
  4186                           
  4187                           ;FlashApp.c: 72: {
  4188                           ;FlashApp.c: 73: return;
  4189  0030' 500D'              	movf	_numOfReadSamples,w,c
  4190  0032' 100E'              	iorwf	_numOfReadSamples+1,w,c
  4191  0034' 100F'              	iorwf	_numOfReadSamples+2,w,c
  4192  0036' 1010'              	iorwf	_numOfReadSamples+3,w,c
  4193  0038' B4D8               	btfsc	status,2,c
  4194  003A' D0EE               	goto	l306
  4195                           
  4196                           ;FlashApp.c: 77: {
  4197                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4198  003C' 5000'              	movf	_numOfValidateSamples,w,c
  4199  003E' 1001'              	iorwf	_numOfValidateSamples+1,w,c
  4200  0040' 1002'              	iorwf	_numOfValidateSamples+2,w,c
  4201  0042' 1003'              	iorwf	_numOfValidateSamples+3,w,c
  4202  0044' B4D8               	btfsc	status,2,c
  4203  0046' D09A               	goto	l307
  4204                           
  4205                           ;FlashApp.c: 79: {
  4206                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4207  0048' C02B' F000'        	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4208  004C' C02C' F001'        	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4209  0050' 0E00               	movlw	0
  4210  0052' 0100               	movlb	0	; () banked
  4211  0054' BF00'              	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4212  0056' 0EFF               	movlw	255
  4213  0058' 6F00'              	movwf	(??_FlashReadUart+2)& (0+255),b
  4214  005A' 6F00'              	movwf	(??_FlashReadUart+3)& (0+255),b
  4215  005C' 5000'              	movf	_numOfValidateSamples,w,c
  4216  005E' 5D00'              	subwf	??_FlashReadUart& (0+255),w,b
  4217  0060' 5001'              	movf	_numOfValidateSamples+1,w,c
  4218  0062' 5900'              	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4219  0064' 5002'              	movf	_numOfValidateSamples+2,w,c
  4220  0066' 5900'              	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4221  0068' 5003'              	movf	_numOfValidateSamples+3,w,c
  4222  006A' 5900'              	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4223  006C' B0D8               	btfsc	status,0,c
  4224  006E' D002               	goto	u7190
  4225  0070' 0E01               	movlw	1
  4226  0072' D001               	goto	u7200
  4227  0074'                    u7190:
  4228  0074' 0E00               	movlw	0
  4229  0076'                    u7200:
  4230  0076' 6F00'              	movwf	(??_FlashReadUart+4)& (0+255),b
  4231  0078' 6B00'              	clrf	(??_FlashReadUart+5)& (0+255),b
  4232  007A' 6B00'              	clrf	(??_FlashReadUart+6)& (0+255),b
  4233  007C' 6B00'              	clrf	(??_FlashReadUart+7)& (0+255),b
  4234  007E' 1F00'              	comf	(??_FlashReadUart+4)& (0+255),f,b
  4235  0080' 1F00'              	comf	(??_FlashReadUart+5)& (0+255),f,b
  4236  0082' 1F00'              	comf	(??_FlashReadUart+6)& (0+255),f,b
  4237  0084' 1F00'              	comf	(??_FlashReadUart+7)& (0+255),f,b
  4238  0086' 2B00'              	incf	(??_FlashReadUart+4)& (0+255),f,b
  4239  0088' 0E00               	movlw	0
  4240  008A' 2300'              	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4241  008C' 2300'              	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4242  008E' 2300'              	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4243  0090' 5000'              	movf	_numOfValidateSamples,w,c
  4244  0092' 2500'              	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4245  0094' 6F00'              	movwf	(??_FlashReadUart+8)& (0+255),b
  4246  0096' 5001'              	movf	_numOfValidateSamples+1,w,c
  4247  0098' 2100'              	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4248  009A' 6F00'              	movwf	(??_FlashReadUart+9)& (0+255),b
  4249  009C' 5002'              	movf	_numOfValidateSamples+2,w,c
  4250  009E' 2100'              	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4251  00A0' 6F00'              	movwf	(??_FlashReadUart+10)& (0+255),b
  4252  00A2' 5003'              	movf	_numOfValidateSamples+3,w,c
  4253  00A4' 2100'              	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4254  00A6' 6F00'              	movwf	(??_FlashReadUart+11)& (0+255),b
  4255  00A8' 5100'              	movf	(??_FlashReadUart+8)& (0+255),w,b
  4256  00AA' 1100'              	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4257  00AC' 1100'              	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4258  00AE' 1100'              	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4259  00B0' A4D8               	btfss	status,2,c
  4260  00B2' D00A               	goto	l309
  4261                           
  4262                           ; BSR set to: 0
  4263  00B4' C02B' F051'        	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$577
  4264  00B8' C02C' F052'        	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$577+1
  4265  00BC' 0E00               	movlw	0
  4266  00BE' BF00'              	btfsc	(_FlashReadUart$577+1)& (0+255),7,b
  4267  00C0' 0EFF               	movlw	-1
  4268  00C2' 6F00'              	movwf	(_FlashReadUart$577+2)& (0+255),b
  4269  00C4' 6F00'              	movwf	(_FlashReadUart$577+3)& (0+255),b
  4270  00C6' D008               	goto	l311
  4271  00C8'                    l309:
  4272                           
  4273                           ; BSR set to: 0
  4274  00C8' C000' F051'        	movff	_numOfValidateSamples,_FlashReadUart$577
  4275  00CC' C001' F052'        	movff	_numOfValidateSamples+1,_FlashReadUart$577+1
  4276  00D0' C002' F053'        	movff	_numOfValidateSamples+2,_FlashReadUart$577+2
  4277  00D4' C003' F054'        	movff	_numOfValidateSamples+3,_FlashReadUart$577+3
  4278  00D8'                    l311:
  4279                           
  4280                           ; BSR set to: 0
  4281  00D8' C051' F05D'        	movff	_FlashReadUart$577,FlashReadUart@offset
  4282  00DC' C052' F05E'        	movff	_FlashReadUart$577+1,FlashReadUart@offset+1
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;FlashApp.c: 81: if(offset < 0)
  4286  00E0' AF00'              	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4287  00E2' D091               	goto	l314
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;FlashApp.c: 82: {
  4291                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4292  00E4' C05D' F017'        	movff	FlashReadUart@offset,abs@a
  4293  00E8' C05E' F018'        	movff	FlashReadUart@offset+1,abs@a+1
  4294  00EC' EC00' F000'        	call	_abs	;wreg free
  4295  00F0' C017' F000'        	movff	?_abs,??_FlashReadUart
  4296  00F4' C018' F001'        	movff	?_abs+1,??_FlashReadUart+1
  4297  00F8' 0E00               	movlw	0
  4298  00FA' 0100               	movlb	0	; () banked
  4299  00FC' BF00'              	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4300  00FE' 0EFF               	movlw	255
  4301  0100' 6F00'              	movwf	(??_FlashReadUart+2)& (0+255),b
  4302  0102' 6F00'              	movwf	(??_FlashReadUart+3)& (0+255),b
  4303  0104' 5100'              	movf	??_FlashReadUart& (0+255),w,b
  4304  0106' 5C0D'              	subwf	_numOfReadSamples,w,c
  4305  0108' 5100'              	movf	(??_FlashReadUart+1)& (0+255),w,b
  4306  010A' 580E'              	subwfb	_numOfReadSamples+1,w,c
  4307  010C' 5100'              	movf	(??_FlashReadUart+2)& (0+255),w,b
  4308  010E' 580F'              	subwfb	_numOfReadSamples+2,w,c
  4309  0110' 5100'              	movf	(??_FlashReadUart+3)& (0+255),w,b
  4310  0112' 5810'              	subwfb	_numOfReadSamples+3,w,c
  4311  0114' B0D8               	btfsc	status,0,c
  4312  0116' D016               	goto	l313
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;FlashApp.c: 84: {
  4316                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4317  0118' 500D'              	movf	_numOfReadSamples,w,c
  4318  011A' 2500'              	addwf	FlashReadUart@offset& (0+255),w,b
  4319  011C' 6F00'              	movwf	??_FlashReadUart& (0+255),b
  4320  011E' 500E'              	movf	_numOfReadSamples+1,w,c
  4321  0120' 2100'              	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4322  0122' 6F00'              	movwf	(??_FlashReadUart+1)& (0+255),b
  4323  0124' 5100'              	movf	??_FlashReadUart& (0+255),w,b
  4324  0126' 262B'              	addwf	FlashReadUart@numOfSampleToRead,f,c
  4325  0128' 5100'              	movf	(??_FlashReadUart+1)& (0+255),w,b
  4326  012A' 222C'              	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4330  012C' C00D' F000'        	movff	_numOfReadSamples,??_FlashReadUart
  4331  0130' C00E' F001'        	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4332  0134' 1F00'              	comf	??_FlashReadUart& (0+255),f,b
  4333  0136' 1F00'              	comf	(??_FlashReadUart+1)& (0+255),f,b
  4334  0138' 4B00'              	infsnz	??_FlashReadUart& (0+255),f,b
  4335  013A' 2B00'              	incf	(??_FlashReadUart+1)& (0+255),f,b
  4336  013C' C000' F05D'        	movff	??_FlashReadUart,FlashReadUart@offset
  4337  0140' C001' F05E'        	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4338  0144'                    l313:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;FlashApp.c: 88: }
  4342                           ;FlashApp.c: 90: readAddress += offset * (64);
  4343  0144' C05D' F000'        	movff	FlashReadUart@offset,??_FlashReadUart
  4344  0148' C05E' F001'        	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4345  014C' 0E06               	movlw	6
  4346  014E'                    u7245:
  4347  014E' 90D8               	bcf	status,0,c
  4348  0150' 3700'              	rlcf	??_FlashReadUart& (0+255),f,b
  4349  0152' 3700'              	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4350  0154' 2EE8               	decfsz	wreg,f,c
  4351  0156' D7FB               	goto	u7245
  4352  0158' C000' F002'        	movff	??_FlashReadUart,??_FlashReadUart+2
  4353  015C' C001' F003'        	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4354  0160' 0E00               	movlw	0
  4355  0162' BF00'              	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4356  0164' 0EFF               	movlw	255
  4357  0166' 6F00'              	movwf	(??_FlashReadUart+4)& (0+255),b
  4358  0168' 6F00'              	movwf	(??_FlashReadUart+5)& (0+255),b
  4359  016A' 5100'              	movf	(??_FlashReadUart+2)& (0+255),w,b
  4360  016C' 2700'              	addwf	_readAddress& (0+255),f,b
  4361  016E' 5100'              	movf	(??_FlashReadUart+3)& (0+255),w,b
  4362  0170' 2300'              	addwfc	(_readAddress+1)& (0+255),f,b
  4363  0172' 5100'              	movf	(??_FlashReadUart+4)& (0+255),w,b
  4364  0174' 2300'              	addwfc	(_readAddress+2)& (0+255),f,b
  4365  0176' 5100'              	movf	(??_FlashReadUart+5)& (0+255),w,b
  4366  0178' 2300'              	addwfc	(_readAddress+3)& (0+255),f,b
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;FlashApp.c: 91: }
  4370                           ;FlashApp.c: 92: }
  4371  017A' D045               	goto	l314
  4372  017C'                    l307:
  4373                           
  4374                           ;FlashApp.c: 93: else
  4375                           ;FlashApp.c: 94: {
  4376                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4377                           
  4378                           ; BSR set to: 0
  4379  017C' C02B' F000'        	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4380  0180' C02C' F001'        	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4381  0184' 0E00               	movlw	0
  4382  0186' 0100               	movlb	0	; () banked
  4383  0188' BF00'              	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4384  018A' 0EFF               	movlw	255
  4385  018C' 6F00'              	movwf	(??_FlashReadUart+2)& (0+255),b
  4386  018E' 6F00'              	movwf	(??_FlashReadUart+3)& (0+255),b
  4387  0190' 500D'              	movf	_numOfReadSamples,w,c
  4388  0192' 5D00'              	subwf	??_FlashReadUart& (0+255),w,b
  4389  0194' 500E'              	movf	_numOfReadSamples+1,w,c
  4390  0196' 5900'              	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4391  0198' 500F'              	movf	_numOfReadSamples+2,w,c
  4392  019A' 5900'              	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4393  019C' 5010'              	movf	_numOfReadSamples+3,w,c
  4394  019E' 5900'              	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4395  01A0' A0D8               	btfss	status,0,c
  4396  01A2' D009               	goto	l316
  4397                           
  4398                           ; BSR set to: 0
  4399  01A4' C00D' F055'        	movff	_numOfReadSamples,_FlashReadUart$578
  4400  01A8' C00E' F056'        	movff	_numOfReadSamples+1,_FlashReadUart$578+1
  4401  01AC' C00F' F057'        	movff	_numOfReadSamples+2,_FlashReadUart$578+2
  4402  01B0' C010' F058'        	movff	_numOfReadSamples+3,_FlashReadUart$578+3
  4403  01B4' D009               	goto	l318
  4404  01B6'                    l316:
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409  01B6' C02B' F055'        	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$578
  4410  01BA' C02C' F056'        	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$578+1
  4411  01BE' 0E00               	movlw	0
  4412  01C0' BF00'              	btfsc	(_FlashReadUart$578+1)& (0+255),7,b
  4413  01C2' 0EFF               	movlw	-1
  4414  01C4' 6F00'              	movwf	(_FlashReadUart$578+2)& (0+255),b
  4415  01C6' 6F00'              	movwf	(_FlashReadUart$578+3)& (0+255),b
  4416  01C8'                    l318:
  4417                           
  4418                           ; BSR set to: 0
  4419                           
  4420                           ; BSR set to: 0
  4421  01C8' C055' F02B'        	movff	_FlashReadUart$578,FlashReadUart@numOfSampleToRead
  4422  01CC' C056' F02C'        	movff	_FlashReadUart$578+1,FlashReadUart@numOfSampleToRead+1
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4426  01D0' C02B' F000'        	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4427  01D4' C02C' F001'        	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4428  01D8' 0E06               	movlw	6
  4429  01DA'                    u7265:
  4430  01DA' 90D8               	bcf	status,0,c
  4431  01DC' 3700'              	rlcf	??_FlashReadUart& (0+255),f,b
  4432  01DE' 3700'              	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4433  01E0' 2EE8               	decfsz	wreg,f,c
  4434  01E2' D7FB               	goto	u7265
  4435  01E4' C000' F002'        	movff	??_FlashReadUart,??_FlashReadUart+2
  4436  01E8' C001' F003'        	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4437  01EC' 0E00               	movlw	0
  4438  01EE' BF00'              	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4439  01F0' 0EFF               	movlw	255
  4440  01F2' 6F00'              	movwf	(??_FlashReadUart+4)& (0+255),b
  4441  01F4' 6F00'              	movwf	(??_FlashReadUart+5)& (0+255),b
  4442  01F6' 5100'              	movf	(??_FlashReadUart+2)& (0+255),w,b
  4443  01F8' 5F00'              	subwf	_readAddress& (0+255),f,b
  4444  01FA' 5100'              	movf	(??_FlashReadUart+3)& (0+255),w,b
  4445  01FC' 5B00'              	subwfb	(_readAddress+1)& (0+255),f,b
  4446  01FE' 5100'              	movf	(??_FlashReadUart+4)& (0+255),w,b
  4447  0200' 5B00'              	subwfb	(_readAddress+2)& (0+255),f,b
  4448  0202' 5100'              	movf	(??_FlashReadUart+5)& (0+255),w,b
  4449  0204' 5B00'              	subwfb	(_readAddress+3)& (0+255),f,b
  4450  0206'                    l314:
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;FlashApp.c: 97: }
  4454                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4455                           
  4456                           ; BSR set to: 0
  4457  0206' 5100'              	movf	(_readAddress+3)& (0+255),w,b
  4458  0208' 1100'              	iorwf	(_readAddress+2)& (0+255),w,b
  4459  020A' E13E               	bnz	l7309
  4460  020C' 0500'              	decf	_readAddress& (0+255),w,b
  4461  020E' 0E40               	movlw	64
  4462  0210' 5900'              	subwfb	(_readAddress+1)& (0+255),w,b
  4463  0212' B0D8               	btfsc	status,0,c
  4464  0214' D039               	goto	l324
  4465  0216' D023               	goto	u7300
  4466  0218'                    l306:
  4467                           
  4468                           ;FlashApp.c: 104: else
  4469                           ;FlashApp.c: 105: {
  4470                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4471                           
  4472                           ; BSR set to: 0
  4473  0218' 500B'              	movf	_isReWriteDone,w,c
  4474  021A' B4D8               	btfsc	status,2,c
  4475  021C' D029               	goto	l321
  4476  021E' 0100               	movlb	0	; () banked
  4477  0220' 5100'              	movf	_readAddress& (0+255),w,b
  4478  0222' 5C00'              	subwf	_writeAddress,w,c
  4479  0224' 5100'              	movf	(_readAddress+1)& (0+255),w,b
  4480  0226' 5801'              	subwfb	_writeAddress+1,w,c
  4481  0228' 5100'              	movf	(_readAddress+2)& (0+255),w,b
  4482  022A' 5802'              	subwfb	_writeAddress+2,w,c
  4483  022C' 5100'              	movf	(_readAddress+3)& (0+255),w,b
  4484  022E' 5803'              	subwfb	_writeAddress+3,w,c
  4485  0230' A0D8               	btfss	status,0,c
  4486  0232' D01E               	goto	l321
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;FlashApp.c: 107: {
  4490                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4491  0234' 0E40               	movlw	64
  4492  0236' 2400'              	addwf	_writeAddress,w,c
  4493  0238' 6F00'              	movwf	_readAddress& (0+255),b
  4494  023A' 0E00               	movlw	0
  4495  023C' 2001'              	addwfc	_writeAddress+1,w,c
  4496  023E' 6F00'              	movwf	(_readAddress+1)& (0+255),b
  4497  0240' 0E00               	movlw	0
  4498  0242' 2002'              	addwfc	_writeAddress+2,w,c
  4499  0244' 6F00'              	movwf	(_readAddress+2)& (0+255),b
  4500  0246' 0E00               	movlw	0
  4501  0248' 2003'              	addwfc	_writeAddress+3,w,c
  4502  024A' 6F00'              	movwf	(_readAddress+3)& (0+255),b
  4503                           
  4504                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4505  024C' 5100'              	movf	(_readAddress+3)& (0+255),w,b
  4506  024E' 1100'              	iorwf	(_readAddress+2)& (0+255),w,b
  4507  0250' E106               	bnz	u7300
  4508  0252' 0EF0               	movlw	240
  4509  0254' 5D00'              	subwf	_readAddress& (0+255),w,b
  4510  0256' 0E7F               	movlw	127
  4511  0258' 5900'              	subwfb	(_readAddress+1)& (0+255),w,b
  4512  025A' A0D8               	btfss	status,0,c
  4513  025C' D015               	goto	l324
  4514  025E'                    u7300:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;FlashApp.c: 110: {
  4518                           ;FlashApp.c: 111: readAddress = 0x4000;
  4519  025E' 0E00               	movlw	0
  4520  0260' 6F00'              	movwf	_readAddress& (0+255),b
  4521  0262' 0E40               	movlw	64
  4522  0264' 6F00'              	movwf	(_readAddress+1)& (0+255),b
  4523  0266' 0E00               	movlw	0
  4524  0268' 6F00'              	movwf	(_readAddress+2)& (0+255),b
  4525  026A' 0E00               	movlw	0
  4526  026C' 6F00'              	movwf	(_readAddress+3)& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;FlashApp.c: 112: }
  4530                           ;FlashApp.c: 114: }
  4531  026E' D00C               	goto	l324
  4532  0270'                    l321:
  4533                           
  4534                           ;FlashApp.c: 115: else
  4535                           ;FlashApp.c: 116: {
  4536                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4537                           
  4538                           ; BSR set to: 0
  4539  0270' 5000'              	movf	_numOfValidateSamples,w,c
  4540  0272' 1001'              	iorwf	_numOfValidateSamples+1,w,c
  4541  0274' 1002'              	iorwf	_numOfValidateSamples+2,w,c
  4542  0276' 1003'              	iorwf	_numOfValidateSamples+3,w,c
  4543  0278' A4D8               	btfss	status,2,c
  4544  027A' D006               	goto	l324
  4545                           
  4546                           ;FlashApp.c: 118: {
  4547                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4548  027C' 0E55               	movlw	85
  4549  027E' 6E23'              	movwf	SendAckMessage@inRequest,c
  4550  0280' 0E05               	movlw	5
  4551  0282' EC00' F000'        	call	_SendAckMessage
  4552                           
  4553                           ;FlashApp.c: 120: return;
  4554  0286' 0012               	return	
  4555  0288'                    l324:
  4556  0288'                    l7309:
  4557                           
  4558                           ;FlashApp.c: 121: }
  4559                           ;FlashApp.c: 123: }
  4560                           ;FlashApp.c: 124: }
  4561                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4562  0288' 0E24               	movlw	36
  4563  028A' 0100               	movlb	0	; () banked
  4564  028C' 6F00'              	movwf	FlashReadUart@TxMsg& (0+255),b
  4565                           
  4566                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4567  028E' 0E05               	movlw	5
  4568  0290' 6F00'              	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4569                           
  4570                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4571  0292' 0E54               	movlw	84
  4572  0294' 6F00'              	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4573                           
  4574                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4575  0296' 0E40               	movlw	64
  4576  0298' 6F00'              	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4577                           
  4578                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4579  029A' 0E00               	movlw	0
  4580  029C' 6F00'              	movwf	(FlashReadUart@j+1)& (0+255),b
  4581  029E' 0E00               	movlw	0
  4582  02A0' 6F00'              	movwf	FlashReadUart@j& (0+255),b
  4583  02A2' D084               	goto	l325
  4584  02A4'                    
  4585                           ; BSR set to: 0
  4586                           ;FlashApp.c: 133: {
  4587                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4588                           
  4589                           ; BSR set to: 0
  4590  02A4' 0E00               	movlw	0
  4591  02A6' 6F00'              	movwf	(FlashReadUart@idx+1)& (0+255),b
  4592  02A8' 0E00               	movlw	0
  4593  02AA' 6F00'              	movwf	FlashReadUart@idx& (0+255),b
  4594  02AC'                    l7313:
  4595                           
  4596                           ; BSR set to: 0
  4597  02AC' BF00'              	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4598  02AE' D006               	goto	l327
  4599  02B0' 5100'              	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4600  02B2' E12C               	bnz	l7323
  4601  02B4' 0E40               	movlw	64
  4602  02B6' 5D00'              	subwf	FlashReadUart@idx& (0+255),w,b
  4603  02B8' B0D8               	btfsc	status,0,c
  4604  02BA' D028               	goto	u7330
  4605  02BC'                    l327:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;FlashApp.c: 136: {
  4609                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4610                           
  4611                           ; BSR set to: 0
  4612  02BC' 0E04               	movlw	4
  4613  02BE' 2500'              	addwf	FlashReadUart@idx& (0+255),w,b
  4614  02C0' 6F00'              	movwf	??_FlashReadUart& (0+255),b
  4615  02C2' 0E00               	movlw	0
  4616  02C4' 2100'              	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4617  02C6' 6F00'              	movwf	(??_FlashReadUart+1)& (0+255),b
  4618  02C8' 0E00'              	movlw	low FlashReadUart@TxMsg
  4619  02CA' 2500'              	addwf	??_FlashReadUart& (0+255),w,b
  4620  02CC' 6ED9               	movwf	fsr2l,c
  4621  02CE' 0E00'              	movlw	high FlashReadUart@TxMsg
  4622  02D0' 2100'              	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4623  02D2' 6EDA               	movwf	fsr2h,c
  4624  02D4' C05B' F002'        	movff	FlashReadUart@idx,??_FlashReadUart+2
  4625  02D8' C05C' F003'        	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4626  02DC' 0E00               	movlw	0
  4627  02DE' BF00'              	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4628  02E0' 0EFF               	movlw	255
  4629  02E2' 6F00'              	movwf	(??_FlashReadUart+4)& (0+255),b
  4630  02E4' 6F00'              	movwf	(??_FlashReadUart+5)& (0+255),b
  4631  02E6' 5100'              	movf	_readAddress& (0+255),w,b
  4632  02E8' 2500'              	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4633  02EA' 6E17'              	movwf	FLASH_ReadByte@flashAddr,c
  4634  02EC' 5100'              	movf	(_readAddress+1)& (0+255),w,b
  4635  02EE' 2100'              	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4636  02F0' 6E18'              	movwf	FLASH_ReadByte@flashAddr+1,c
  4637  02F2' 5100'              	movf	(_readAddress+2)& (0+255),w,b
  4638  02F4' 2100'              	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4639  02F6' 6E19'              	movwf	FLASH_ReadByte@flashAddr+2,c
  4640  02F8' 5100'              	movf	(_readAddress+3)& (0+255),w,b
  4641  02FA' 2100'              	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4642  02FC' 6E1A'              	movwf	FLASH_ReadByte@flashAddr+3,c
  4643  02FE' EC00' F000'        	call	_FLASH_ReadByte	;wreg free
  4644  0302' 6EDF               	movwf	indf2,c
  4645  0304' 0100               	movlb	0	; () banked
  4646  0306' 4B00'              	infsnz	FlashReadUart@idx& (0+255),f,b
  4647  0308' 2B00'              	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4648  030A' D7D0               	goto	l7313
  4649  030C'                    u7330:
  4650  030C'                    l7323:
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;FlashApp.c: 138: }
  4654                           ;FlashApp.c: 140: readAddress += (64);
  4655  030C' 0E40               	movlw	64
  4656  030E' 2700'              	addwf	_readAddress& (0+255),f,b
  4657  0310' 0E00               	movlw	0
  4658  0312' 2300'              	addwfc	(_readAddress+1)& (0+255),f,b
  4659  0314' 2300'              	addwfc	(_readAddress+2)& (0+255),f,b
  4660  0316' 2300'              	addwfc	(_readAddress+3)& (0+255),f,b
  4661                           
  4662                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4663  0318' 5100'              	movf	(_readAddress+3)& (0+255),w,b
  4664  031A' 1100'              	iorwf	(_readAddress+2)& (0+255),w,b
  4665  031C' E106               	bnz	u7340
  4666  031E' 0EF0               	movlw	240
  4667  0320' 5D00'              	subwf	_readAddress& (0+255),w,b
  4668  0322' 0E7F               	movlw	127
  4669  0324' 5900'              	subwfb	(_readAddress+1)& (0+255),w,b
  4670  0326' A0D8               	btfss	status,0,c
  4671  0328' D008               	goto	l329
  4672  032A'                    u7340:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;FlashApp.c: 142: {
  4676                           ;FlashApp.c: 143: readAddress = 0x4000;
  4677  032A' 0E00               	movlw	0
  4678  032C' 6F00'              	movwf	_readAddress& (0+255),b
  4679  032E' 0E40               	movlw	64
  4680  0330' 6F00'              	movwf	(_readAddress+1)& (0+255),b
  4681  0332' 0E00               	movlw	0
  4682  0334' 6F00'              	movwf	(_readAddress+2)& (0+255),b
  4683  0336' 0E00               	movlw	0
  4684  0338' 6F00'              	movwf	(_readAddress+3)& (0+255),b
  4685  033A'                    l329:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;FlashApp.c: 144: }
  4689                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4690                           
  4691                           ; BSR set to: 0
  4692  033A' 0E00'              	movlw	low FlashReadUart@TxMsg
  4693  033C' 6E17'              	movwf	crc8@dataArray,c
  4694  033E' 0E00'              	movlw	high FlashReadUart@TxMsg
  4695  0340' 6E18'              	movwf	crc8@dataArray+1,c
  4696  0342' 0E00               	movlw	0
  4697  0344' 6E1A'              	movwf	crc8@dataSize+1,c
  4698  0346' 0E44               	movlw	68
  4699  0348' 6E19'              	movwf	crc8@dataSize,c
  4700  034A' EC00' F000'        	call	_crc8	;wreg free
  4701  034E' 0100               	movlb	0	; () banked
  4702  0350' 6F00'              	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4706  0352' 0E00'              	movlw	low FlashReadUart@TxMsg
  4707  0354' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  4708  0356' 0E00'              	movlw	high FlashReadUart@TxMsg
  4709  0358' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  4710  035A' 0E00               	movlw	0
  4711  035C' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  4712  035E' 0E45               	movlw	69
  4713  0360' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  4714  0362' EC00' F000'        	call	_WriteUartMessage	;wreg free
  4715                           
  4716                           ;FlashApp.c: 149: if(numOfValidateSamples)
  4717  0366' 5000'              	movf	_numOfValidateSamples,w,c
  4718  0368' 1001'              	iorwf	_numOfValidateSamples+1,w,c
  4719  036A' 1002'              	iorwf	_numOfValidateSamples+2,w,c
  4720  036C' 1003'              	iorwf	_numOfValidateSamples+3,w,c
  4721  036E' B4D8               	btfsc	status,2,c
  4722  0370' D01A               	goto	l332
  4723                           
  4724                           ;FlashApp.c: 150: {
  4725                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4726  0372' 040D'              	decf	_numOfReadSamples,w,c
  4727  0374' 0EFF               	movlw	255
  4728  0376' 580E'              	subwfb	_numOfReadSamples+1,w,c
  4729  0378' 0EFF               	movlw	255
  4730  037A' 580F'              	subwfb	_numOfReadSamples+2,w,c
  4731  037C' 0EFF               	movlw	255
  4732  037E' 5810'              	subwfb	_numOfReadSamples+3,w,c
  4733  0380' B0D8               	btfsc	status,0,c
  4734  0382' D006               	goto	l331
  4735                           
  4736                           ;FlashApp.c: 152: {
  4737                           ;FlashApp.c: 153: numOfReadSamples++;
  4738  0384' 0E01               	movlw	1
  4739  0386' 260D'              	addwf	_numOfReadSamples,f,c
  4740  0388' 0E00               	movlw	0
  4741  038A' 220E'              	addwfc	_numOfReadSamples+1,f,c
  4742  038C' 220F'              	addwfc	_numOfReadSamples+2,f,c
  4743  038E' 2210'              	addwfc	_numOfReadSamples+3,f,c
  4744  0390'                    l331:
  4745                           
  4746                           ;FlashApp.c: 154: }
  4747                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  4748  0390' 5000'              	movf	_numOfValidateSamples,w,c
  4749  0392' 1001'              	iorwf	_numOfValidateSamples+1,w,c
  4750  0394' 1002'              	iorwf	_numOfValidateSamples+2,w,c
  4751  0396' 1003'              	iorwf	_numOfValidateSamples+3,w,c
  4752  0398' B4D8               	btfsc	status,2,c
  4753  039A' D005               	goto	l332
  4754                           
  4755                           ;FlashApp.c: 156: {
  4756                           ;FlashApp.c: 157: numOfValidateSamples--;
  4757  039C' 0600'              	decf	_numOfValidateSamples,f,c
  4758  039E' 0E00               	movlw	0
  4759  03A0' 5A01'              	subwfb	_numOfValidateSamples+1,f,c
  4760  03A2' 5A02'              	subwfb	_numOfValidateSamples+2,f,c
  4761  03A4' 5A03'              	subwfb	_numOfValidateSamples+3,f,c
  4762  03A6'                    l332:
  4763  03A6' 0100               	movlb	0	; () banked
  4764  03A8' 4B00'              	infsnz	FlashReadUart@j& (0+255),f,b
  4765  03AA' 2B00'              	incf	(FlashReadUart@j+1)& (0+255),f,b
  4766  03AC'                    l325:
  4767                           
  4768                           ; BSR set to: 0
  4769                           
  4770                           ; BSR set to: 0
  4771  03AC' 502B'              	movf	FlashReadUart@numOfSampleToRead,w,c
  4772  03AE' 5D00'              	subwf	FlashReadUart@j& (0+255),w,b
  4773  03B0' 5100'              	movf	(FlashReadUart@j+1)& (0+255),w,b
  4774  03B2' 0A80               	xorlw	128
  4775  03B4' 6F00'              	movwf	??_FlashReadUart& (0+255),b
  4776  03B6' 502C'              	movf	FlashReadUart@numOfSampleToRead+1,w,c
  4777  03B8' 0A80               	xorlw	128
  4778  03BA' 5900'              	subwfb	??_FlashReadUart& (0+255),w,b
  4779  03BC' B0D8               	btfsc	status,0,c
  4780  03BE' 0012               	return	
  4781  03C0' D771               	goto	l326
  4782  03C2'                    __end_of_FlashReadUart:
  4783                           	opt stack 0
  4784                           tosu	equ	0xFFF
  4785                           tosh	equ	0xFFE
  4786                           tosl	equ	0xFFD
  4787                           pclath	equ	0xFFA
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           postinc0	equ	0xFEE
  4793                           wreg	equ	0xFE8
  4794                           postdec1	equ	0xFE5
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function _abs *****************
  4803 ;; Defined at:
  4804 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  a               2   23[COMRAM] int 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  2   23[COMRAM] int 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4818 ;;      Params:         2       0       0       0       0       0       0
  4819 ;;      Locals:         0       0       0       0       0       0       0
  4820 ;;      Temps:          2       0       0       0       0       0       0
  4821 ;;      Totals:         4       0       0       0       0       0       0
  4822 ;;Total ram usage:        4 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    3
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_FlashReadUart
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text19
  4833  0000'                    __ptext19:
  4834                           	opt stack 0
  4835  0000'                    _abs:
  4836                           	opt stack 24
  4837                           
  4838                           ;incstack = 0
  4839  0000' AE18'              	btfss	abs@a+1,7,c
  4840  0002' D00D               	goto	l1494
  4841  0004' C017' F019'        	movff	abs@a,??_abs
  4842  0008' C018' F01A'        	movff	abs@a+1,??_abs+1
  4843  000C' 1E19'              	comf	??_abs,f,c
  4844  000E' 1E1A'              	comf	??_abs+1,f,c
  4845  0010' 4A19'              	infsnz	??_abs,f,c
  4846  0012' 2A1A'              	incf	??_abs+1,f,c
  4847  0014' C019' F017'        	movff	??_abs,?_abs
  4848  0018' C01A' F018'        	movff	??_abs+1,?_abs+1
  4849  001C' 0012               	return	
  4850  001E'                    l1494:
  4851  001E' C017' F017'        	movff	abs@a,?_abs
  4852  0022' C018' F018'        	movff	abs@a+1,?_abs+1
  4853  0026' 0012               	return		;funcret
  4854  0028'                    __end_of_abs:
  4855                           	opt stack 0
  4856                           tosu	equ	0xFFF
  4857                           tosh	equ	0xFFE
  4858                           tosl	equ	0xFFD
  4859                           pclath	equ	0xFFA
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           fsr1l	equ	0xFE1
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           fsr2h	equ	0xFDA
  4871                           fsr2l	equ	0xFD9
  4872                           status	equ	0xFD8
  4873                           
  4874 ;; *************** function _FLASH_ReadByte *****************
  4875 ;; Defined at:
  4876 ;;		line 58 in file "mcc_generated_files/memory.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  flashAddr       4   23[COMRAM] unsigned long 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;		None
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      unsigned char 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4890 ;;      Params:         4       0       0       0       0       0       0
  4891 ;;      Locals:         0       0       0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0
  4893 ;;      Totals:         4       0       0       0       0       0       0
  4894 ;;Total ram usage:        4 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    3
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_FlashReadUart
  4901 ;;		_FlashTest
  4902 ;;		_FLASH_ReadWord
  4903 ;;		_FLASH_WriteByte
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text20
  4908  0000'                    __ptext20:
  4909                           	opt stack 0
  4910  0000'                    _FLASH_ReadByte:
  4911                           	opt stack 24
  4912                           
  4913                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  4914                           
  4915                           ;incstack = 0
  4916  0000' C019' FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  4917                           
  4918                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  4919  0004' C018' FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  4920                           
  4921                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  4922  0008' C017' FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  4923  000C' 0008               	tblrd		*	;# 
  4924                           
  4925                           ;memory.c: 66: return (TABLAT);
  4926  000E' 50F5               	movf	tablat,w,c	;volatile
  4927  0010' 0012               	return	
  4928  0012'                    __end_of_FLASH_ReadByte:
  4929                           	opt stack 0
  4930                           tosu	equ	0xFFF
  4931                           tosh	equ	0xFFE
  4932                           tosl	equ	0xFFD
  4933                           pclath	equ	0xFFA
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           postinc0	equ	0xFEE
  4939                           wreg	equ	0xFE8
  4940                           postdec1	equ	0xFE5
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _FlashReadCondition *****************
  4949 ;; Defined at:
  4950 ;;		line 178 in file "FlashApp.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4964 ;;      Params:         0       0       0       0       0       0       0
  4965 ;;      Locals:         0       9       0       0       0       0       0
  4966 ;;      Temps:          4       0       0       0       0       0       0
  4967 ;;      Totals:         4       9       0       0       0       0       0
  4968 ;;Total ram usage:       13 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    5
  4971 ;; This function calls:
  4972 ;;		_WriteUartMessage
  4973 ;;		_ZeroArray
  4974 ;;		_crc8
  4975 ;;		_make8
  4976 ;; This function is called by:
  4977 ;;		_GroupFlashMemory
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text21
  4982  0000'                    __ptext21:
  4983                           	opt stack 0
  4984  0000'                    _FlashReadCondition:
  4985                           	opt stack 23
  4986                           
  4987                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  4988                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  4989                           
  4990                           ;incstack = 0
  4991  0000' 0E00'              	movlw	low FlashReadCondition@TxMsg
  4992  0002' 6E1F'              	movwf	ZeroArray@array,c
  4993  0004' 0E00'              	movlw	high FlashReadCondition@TxMsg
  4994  0006' 6E20'              	movwf	ZeroArray@array+1,c
  4995  0008' 0E00               	movlw	0
  4996  000A' 6E22'              	movwf	ZeroArray@size+1,c
  4997  000C' 0E09               	movlw	9
  4998  000E' 6E21'              	movwf	ZeroArray@size,c
  4999  0010' EC00' F000'        	call	_ZeroArray	;wreg free
  5000                           
  5001                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5002  0014' 0E24               	movlw	36
  5003  0016' 0100               	movlb	0	; () banked
  5004  0018' 6F00'              	movwf	FlashReadCondition@TxMsg& (0+255),b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5008  001A' 0E05               	movlw	5
  5009  001C' 6F00'              	movwf	(FlashReadCondition@TxMsg+1)& (0+255),b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5013  001E' 0E52               	movlw	82
  5014  0020' 6F00'              	movwf	(FlashReadCondition@TxMsg+2)& (0+255),b
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5018  0022' 0E04               	movlw	4
  5019  0024' 6F00'              	movwf	(FlashReadCondition@TxMsg+3)& (0+255),b
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5023  0026' 0EF0               	movlw	240
  5024  0028' 6E17'              	movwf	make8@data,c
  5025  002A' 0E3F               	movlw	63
  5026  002C' 6E18'              	movwf	make8@data+1,c
  5027  002E' 0E00               	movlw	0
  5028  0030' 6E19'              	movwf	make8@data+2,c
  5029  0032' 0E00               	movlw	0
  5030  0034' 6E1A'              	movwf	make8@data+3,c
  5031  0036' 0E01               	movlw	1
  5032  0038' 6E1B'              	movwf	make8@dataLocation,c
  5033  003A' EC00' F000'        	call	_make8	;wreg free
  5034  003E' 0100               	movlb	0	; () banked
  5035  0040' 6F00'              	movwf	(FlashReadCondition@TxMsg+4)& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5039  0042' 0EF0               	movlw	240
  5040  0044' 6E17'              	movwf	make8@data,c
  5041  0046' 0E3F               	movlw	63
  5042  0048' 6E18'              	movwf	make8@data+1,c
  5043  004A' 0E00               	movlw	0
  5044  004C' 6E19'              	movwf	make8@data+2,c
  5045  004E' 0E00               	movlw	0
  5046  0050' 6E1A'              	movwf	make8@data+3,c
  5047  0052' 0E00               	movlw	0
  5048  0054' 6E1B'              	movwf	make8@dataLocation,c
  5049  0056' EC00' F000'        	call	_make8	;wreg free
  5050  005A' 0100               	movlb	0	; () banked
  5051  005C' 6F00'              	movwf	(FlashReadCondition@TxMsg+5)& (0+255),b
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5055  005E' C000' F023'        	movff	_writeAddress,??_FlashReadCondition
  5056  0062' C001' F024'        	movff	_writeAddress+1,??_FlashReadCondition+1
  5057  0066' C002' F025'        	movff	_writeAddress+2,??_FlashReadCondition+2
  5058  006A' C003' F026'        	movff	_writeAddress+3,??_FlashReadCondition+3
  5059  006E' 1E23'              	comf	??_FlashReadCondition,f,c
  5060  0070' 1E24'              	comf	??_FlashReadCondition+1,f,c
  5061  0072' 1E25'              	comf	??_FlashReadCondition+2,f,c
  5062  0074' 1E26'              	comf	??_FlashReadCondition+3,f,c
  5063  0076' 2A23'              	incf	??_FlashReadCondition,f,c
  5064  0078' 0E00               	movlw	0
  5065  007A' 2224'              	addwfc	??_FlashReadCondition+1,f,c
  5066  007C' 2225'              	addwfc	??_FlashReadCondition+2,f,c
  5067  007E' 2226'              	addwfc	??_FlashReadCondition+3,f,c
  5068  0080' 0EF0               	movlw	240
  5069  0082' 2423'              	addwf	??_FlashReadCondition,w,c
  5070  0084' 6E17'              	movwf	make8@data,c
  5071  0086' 0E7F               	movlw	127
  5072  0088' 2024'              	addwfc	??_FlashReadCondition+1,w,c
  5073  008A' 6E18'              	movwf	make8@data+1,c
  5074  008C' 0E00               	movlw	0
  5075  008E' 2025'              	addwfc	??_FlashReadCondition+2,w,c
  5076  0090' 6E19'              	movwf	make8@data+2,c
  5077  0092' 0E00               	movlw	0
  5078  0094' 2026'              	addwfc	??_FlashReadCondition+3,w,c
  5079  0096' 6E1A'              	movwf	make8@data+3,c
  5080  0098' 0E01               	movlw	1
  5081  009A' 6E1B'              	movwf	make8@dataLocation,c
  5082  009C' EC00' F000'        	call	_make8	;wreg free
  5083  00A0' 0100               	movlb	0	; () banked
  5084  00A2' 6F00'              	movwf	(FlashReadCondition@TxMsg+6)& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5088  00A4' C000' F023'        	movff	_writeAddress,??_FlashReadCondition
  5089  00A8' C001' F024'        	movff	_writeAddress+1,??_FlashReadCondition+1
  5090  00AC' C002' F025'        	movff	_writeAddress+2,??_FlashReadCondition+2
  5091  00B0' C003' F026'        	movff	_writeAddress+3,??_FlashReadCondition+3
  5092  00B4' 1E23'              	comf	??_FlashReadCondition,f,c
  5093  00B6' 1E24'              	comf	??_FlashReadCondition+1,f,c
  5094  00B8' 1E25'              	comf	??_FlashReadCondition+2,f,c
  5095  00BA' 1E26'              	comf	??_FlashReadCondition+3,f,c
  5096  00BC' 2A23'              	incf	??_FlashReadCondition,f,c
  5097  00BE' 0E00               	movlw	0
  5098  00C0' 2224'              	addwfc	??_FlashReadCondition+1,f,c
  5099  00C2' 2225'              	addwfc	??_FlashReadCondition+2,f,c
  5100  00C4' 2226'              	addwfc	??_FlashReadCondition+3,f,c
  5101  00C6' 0EF0               	movlw	240
  5102  00C8' 2423'              	addwf	??_FlashReadCondition,w,c
  5103  00CA' 6E17'              	movwf	make8@data,c
  5104  00CC' 0E7F               	movlw	127
  5105  00CE' 2024'              	addwfc	??_FlashReadCondition+1,w,c
  5106  00D0' 6E18'              	movwf	make8@data+1,c
  5107  00D2' 0E00               	movlw	0
  5108  00D4' 2025'              	addwfc	??_FlashReadCondition+2,w,c
  5109  00D6' 6E19'              	movwf	make8@data+2,c
  5110  00D8' 0E00               	movlw	0
  5111  00DA' 2026'              	addwfc	??_FlashReadCondition+3,w,c
  5112  00DC' 6E1A'              	movwf	make8@data+3,c
  5113  00DE' 0E00               	movlw	0
  5114  00E0' 6E1B'              	movwf	make8@dataLocation,c
  5115  00E2' EC00' F000'        	call	_make8	;wreg free
  5116  00E6' 0100               	movlb	0	; () banked
  5117  00E8' 6F00'              	movwf	(FlashReadCondition@TxMsg+7)& (0+255),b
  5118                           
  5119                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5120  00EA' 0E00'              	movlw	low FlashReadCondition@TxMsg
  5121  00EC' 6E17'              	movwf	crc8@dataArray,c
  5122  00EE' 0E00'              	movlw	high FlashReadCondition@TxMsg
  5123  00F0' 6E18'              	movwf	crc8@dataArray+1,c
  5124  00F2' 0E00               	movlw	0
  5125  00F4' 6E1A'              	movwf	crc8@dataSize+1,c
  5126  00F6' 0E08               	movlw	8
  5127  00F8' 6E19'              	movwf	crc8@dataSize,c
  5128  00FA' EC00' F000'        	call	_crc8	;wreg free
  5129  00FE' 0100               	movlb	0	; () banked
  5130  0100' 6F00'              	movwf	(FlashReadCondition@TxMsg+8)& (0+255),b
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5134  0102' 0E00'              	movlw	low FlashReadCondition@TxMsg
  5135  0104' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  5136  0106' 0E00'              	movlw	high FlashReadCondition@TxMsg
  5137  0108' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  5138  010A' 0E00               	movlw	0
  5139  010C' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  5140  010E' 0E09               	movlw	9
  5141  0110' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  5142  0112' EC00' F000'        	call	_WriteUartMessage	;wreg free
  5143  0116' 0012               	return		;funcret
  5144  0118'                    __end_of_FlashReadCondition:
  5145                           	opt stack 0
  5146                           tosu	equ	0xFFF
  5147                           tosh	equ	0xFFE
  5148                           tosl	equ	0xFFD
  5149                           pclath	equ	0xFFA
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _FlashEreaseMem *****************
  5165 ;; Defined at:
  5166 ;;		line 168 in file "FlashApp.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5180 ;;      Params:         0       0       0       0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0
  5183 ;;      Totals:         0       0       0       0       0       0       0
  5184 ;;Total ram usage:        0 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    6
  5187 ;; This function calls:
  5188 ;;		_SendAckMessage
  5189 ;;		_ZeroArray
  5190 ;; This function is called by:
  5191 ;;		_GroupFlashMemory
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text22
  5196  0000'                    __ptext22:
  5197                           	opt stack 0
  5198  0000'                    _FlashEreaseMem:
  5199                           	opt stack 22
  5200                           
  5201                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5202                           
  5203                           ;incstack = 0
  5204  0000' 0E00               	movlw	0
  5205  0002' 6E00'              	movwf	_writeAddress,c
  5206  0004' 0E40               	movlw	64
  5207  0006' 6E01'              	movwf	_writeAddress+1,c
  5208  0008' 0E00               	movlw	0
  5209  000A' 6E02'              	movwf	_writeAddress+2,c
  5210  000C' 0E00               	movlw	0
  5211  000E' 6E03'              	movwf	_writeAddress+3,c
  5212                           
  5213                           ;FlashApp.c: 171: readAddress = 0x4000;
  5214  0010' 0E00               	movlw	0
  5215  0012' 0100               	movlb	0	; () banked
  5216  0014' 6F00'              	movwf	_readAddress& (0+255),b
  5217  0016' 0E40               	movlw	64
  5218  0018' 6F00'              	movwf	(_readAddress+1)& (0+255),b
  5219  001A' 0E00               	movlw	0
  5220  001C' 6F00'              	movwf	(_readAddress+2)& (0+255),b
  5221  001E' 0E00               	movlw	0
  5222  0020' 6F00'              	movwf	(_readAddress+3)& (0+255),b
  5223                           
  5224                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5225  0022' 0E00               	movlw	0
  5226  0024' 6E00'              	movwf	_numOfValidateSamples,c
  5227  0026' 0E00               	movlw	0
  5228  0028' 6E01'              	movwf	_numOfValidateSamples+1,c
  5229  002A' 0E00               	movlw	0
  5230  002C' 6E02'              	movwf	_numOfValidateSamples+2,c
  5231  002E' 0E00               	movlw	0
  5232  0030' 6E03'              	movwf	_numOfValidateSamples+3,c
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5236  0032' 0E00'              	movlw	low _sampleArray
  5237  0034' 6E1F'              	movwf	ZeroArray@array,c
  5238  0036' 0E00'              	movlw	high _sampleArray
  5239  0038' 6E20'              	movwf	ZeroArray@array+1,c
  5240  003A' 0E00               	movlw	0
  5241  003C' 6E22'              	movwf	ZeroArray@size+1,c
  5242  003E' 0E20               	movlw	32
  5243  0040' 6E21'              	movwf	ZeroArray@size,c
  5244  0042' EC00' F000'        	call	_ZeroArray	;wreg free
  5245                           
  5246                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5247  0046' 0E51               	movlw	81
  5248  0048' 6E23'              	movwf	SendAckMessage@inRequest,c
  5249  004A' 0E05               	movlw	5
  5250  004C' EC00' F000'        	call	_SendAckMessage
  5251  0050' 0012               	return		;funcret
  5252  0052'                    __end_of_FlashEreaseMem:
  5253                           	opt stack 0
  5254                           tosu	equ	0xFFF
  5255                           tosh	equ	0xFFE
  5256                           tosl	equ	0xFFD
  5257                           pclath	equ	0xFFA
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           postinc0	equ	0xFEE
  5263                           wreg	equ	0xFE8
  5264                           postdec1	equ	0xFE5
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _DacSetValue *****************
  5273 ;; Defined at:
  5274 ;;		line 42 in file "DacApp.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  data            2   38[BANK0 ] PTR unsigned char 
  5277 ;;		 -> rxMsgData(20), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  regData         2   44[BANK0 ] unsigned int 
  5280 ;;  dacIndex        1   43[BANK0 ] char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5290 ;;      Params:         0       2       0       0       0       0       0
  5291 ;;      Locals:         0       3       0       0       0       0       0
  5292 ;;      Temps:          0       3       0       0       0       0       0
  5293 ;;      Totals:         0       8       0       0       0       0       0
  5294 ;;Total ram usage:        8 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    7
  5297 ;; This function calls:
  5298 ;;		_GetIntFromUartData
  5299 ;;		_SWSPI_send_word
  5300 ;;		_SendAckMessage
  5301 ;;		_StoreIntInEeprom
  5302 ;; This function is called by:
  5303 ;;		_GroupDAC
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text23
  5308  0000'                    __ptext23:
  5309                           	opt stack 0
  5310  0000'                    _DacSetValue:
  5311                           	opt stack 21
  5312                           
  5313                           ;DacApp.c: 44: uint16_t regData = GetIntFromUartData(16, data);
  5314                           
  5315                           ;incstack = 0
  5316  0000' C026' F006'        	movff	DacSetValue@data,GetIntFromUartData@data
  5317  0004' C027' F007'        	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5318  0008' 0E10               	movlw	16
  5319  000A' EC00' F000'        	call	_GetIntFromUartData
  5320  000E' C006' F02C'        	movff	?_GetIntFromUartData,DacSetValue@regData
  5321  0012' C007' F02D'        	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5322                           
  5323                           ;DacApp.c: 45: SWSPI_send_word(EXT_DAC, regData, 1);
  5324  0016' C02C' F025'        	movff	DacSetValue@regData,SWSPI_send_word@data
  5325  001A' C02D' F026'        	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5326  001E' 6A27'              	clrf	SWSPI_send_word@data+2,c
  5327  0020' 6A28'              	clrf	SWSPI_send_word@data+3,c
  5328  0022' 0E01               	movlw	1
  5329  0024' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  5330  0026' 0E02               	movlw	2
  5331  0028' EC00' F000'        	call	_SWSPI_send_word
  5332                           
  5333                           ;DacApp.c: 48: int8_t dacIndex = (regData >> 14);
  5334  002C' C02C' F028'        	movff	DacSetValue@regData,??_DacSetValue
  5335  0030' C02D' F029'        	movff	DacSetValue@regData+1,??_DacSetValue+1
  5336  0034' 0E0E               	movlw	14
  5337  0036' 0100               	movlb	0	; () banked
  5338  0038' 6F00'              	movwf	(??_DacSetValue+2)& (0+255),b
  5339  003A'                    u7405:
  5340  003A' 90D8               	bcf	status,0,c
  5341  003C' 3300'              	rrcf	(??_DacSetValue+1)& (0+255),f,b
  5342  003E' 3300'              	rrcf	??_DacSetValue& (0+255),f,b
  5343  0040' 2F00'              	decfsz	(??_DacSetValue+2)& (0+255),f,b
  5344  0042' D7FB               	goto	u7405
  5345  0044' 5100'              	movf	??_DacSetValue& (0+255),w,b
  5346  0046' 6F00'              	movwf	DacSetValue@dacIndex& (0+255),b
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;DacApp.c: 49: StoreIntInEeprom(regData, (0x20) | DAC_ADDRES[dacIndex], 2);
  5350  0048' C02C' F020'        	movff	DacSetValue@regData,StoreIntInEeprom@data
  5351  004C' C02D' F021'        	movff	DacSetValue@regData+1,StoreIntInEeprom@data+1
  5352  0050' 6A22'              	clrf	StoreIntInEeprom@data+2,c
  5353  0052' 6A23'              	clrf	StoreIntInEeprom@data+3,c
  5354  0054' 5100'              	movf	DacSetValue@dacIndex& (0+255),w,b
  5355  0056' 0D01               	mullw	1
  5356  0058' 0E00'              	movlw	low _DAC_ADDRES
  5357  005A' 24F3               	addwf	prodl,w,c
  5358  005C' 6EF6               	movwf	tblptrl,c
  5359  005E' 0E00'              	movlw	high _DAC_ADDRES
  5360  0060' 20F4               	addwfc	prodh,w,c
  5361  0062' 6EF7               	movwf	tblptrh,c
  5362  0064'                    	if	0	;There are less than 3 active tblptr bytes
  5363  0064'                    	endif
  5364  0064' 0008               	tblrd		*
  5365  0066' 50F5               	movf	tablat,w,c
  5366  0068' 0920               	iorlw	32
  5367  006A' 6E24'              	movwf	StoreIntInEeprom@address,c
  5368  006C' 0E00               	movlw	0
  5369  006E' 6E26'              	movwf	StoreIntInEeprom@numOfByes+1,c
  5370  0070' 0E02               	movlw	2
  5371  0072' 6E25'              	movwf	StoreIntInEeprom@numOfByes,c
  5372  0074' EC00' F000'        	call	_StoreIntInEeprom	;wreg free
  5373                           
  5374                           ;DacApp.c: 52: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5375  0078' 0E61               	movlw	97
  5376  007A' 6E23'              	movwf	SendAckMessage@inRequest,c
  5377  007C' 0E06               	movlw	6
  5378  007E' EC00' F000'        	call	_SendAckMessage
  5379  0082' 0012               	return		;funcret
  5380  0084'                    __end_of_DacSetValue:
  5381                           	opt stack 0
  5382                           tosu	equ	0xFFF
  5383                           tosh	equ	0xFFE
  5384                           tosl	equ	0xFFD
  5385                           pclath	equ	0xFFA
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _StoreIntInEeprom *****************
  5403 ;; Defined at:
  5404 ;;		line 88 in file "SystemCommon.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  data            4   32[COMRAM] unsigned long 
  5407 ;;  address         1   36[COMRAM] unsigned char 
  5408 ;;  numOfByes       2   37[COMRAM] int 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  val             1   39[COMRAM] unsigned char 
  5411 ;;  idx             1   40[COMRAM] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5421 ;;      Params:         7       0       0       0       0       0       0
  5422 ;;      Locals:         2       0       0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0
  5424 ;;      Totals:         9       0       0       0       0       0       0
  5425 ;;Total ram usage:        9 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    5
  5428 ;; This function calls:
  5429 ;;		_EepromWrite
  5430 ;;		_make8
  5431 ;; This function is called by:
  5432 ;;		_DacSetValue
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text24
  5437  0000'                    __ptext24:
  5438                           	opt stack 0
  5439  0000'                    _StoreIntInEeprom:
  5440                           	opt stack 22
  5441                           
  5442                           ;SystemCommon.c: 90: for(uint8_t idx = numOfByes; idx; idx--)
  5443                           
  5444                           ;incstack = 0
  5445  0000' C025' F028'        	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  5446  0004' D015               	goto	l1306
  5447  0006'                    
  5448                           ;SystemCommon.c: 91: {
  5449                           ;SystemCommon.c: 92: uint8_t val = make8(data, idx - 1);
  5450  0006' C020' F017'        	movff	StoreIntInEeprom@data,make8@data
  5451  000A' C021' F018'        	movff	StoreIntInEeprom@data+1,make8@data+1
  5452  000E' C022' F019'        	movff	StoreIntInEeprom@data+2,make8@data+2
  5453  0012' C023' F01A'        	movff	StoreIntInEeprom@data+3,make8@data+3
  5454  0016' 0428'              	decf	StoreIntInEeprom@idx,w,c
  5455  0018' 6E1B'              	movwf	make8@dataLocation,c
  5456  001A' EC00' F000'        	call	_make8	;wreg free
  5457  001E' 6E27'              	movwf	StoreIntInEeprom@val,c
  5458                           
  5459                           ;SystemCommon.c: 93: EepromWrite(address - idx, val);
  5460  0020' C027' F01A'        	movff	StoreIntInEeprom@val,EepromWrite@data
  5461  0024' 5028'              	movf	StoreIntInEeprom@idx,w,c
  5462  0026' 0800               	sublw	0
  5463  0028' 2424'              	addwf	StoreIntInEeprom@address,w,c
  5464  002A' EC00' F000'        	call	_EepromWrite
  5465  002E' 0628'              	decf	StoreIntInEeprom@idx,f,c
  5466  0030'                    l1306:
  5467  0030' 5028'              	movf	StoreIntInEeprom@idx,w,c
  5468  0032' B4D8               	btfsc	status,2,c
  5469  0034' 0012               	return	
  5470  0036' D7E7               	goto	l1307
  5471  0038'                    __end_of_StoreIntInEeprom:
  5472                           	opt stack 0
  5473                           tosu	equ	0xFFF
  5474                           tosh	equ	0xFFE
  5475                           tosl	equ	0xFFD
  5476                           pclath	equ	0xFFA
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           postinc0	equ	0xFEE
  5484                           wreg	equ	0xFE8
  5485                           postdec1	equ	0xFE5
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _EepromWrite *****************
  5494 ;; Defined at:
  5495 ;;		line 220 in file "FlashApp.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  address         1    wreg     unsigned char 
  5498 ;;  data            1   26[COMRAM] unsigned char 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  address         1   27[COMRAM] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5510 ;;      Params:         1       0       0       0       0       0       0
  5511 ;;      Locals:         1       0       0       0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0
  5513 ;;      Totals:         2       0       0       0       0       0       0
  5514 ;;Total ram usage:        2 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    4
  5517 ;; This function calls:
  5518 ;;		_DATAEE_WriteByte
  5519 ;; This function is called by:
  5520 ;;		_StoreIntInEeprom
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text25
  5525  0000'                    __ptext25:
  5526                           	opt stack 0
  5527  0000'                    _EepromWrite:
  5528                           	opt stack 22
  5529                           
  5530                           ;incstack = 0
  5531                           ;EepromWrite@address stored from wreg
  5532  0000' 6E1B'              	movwf	EepromWrite@address,c
  5533                           
  5534                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  5535  0002' C01A' F017'        	movff	EepromWrite@data,DATAEE_WriteByte@bData
  5536  0006' 501B'              	movf	EepromWrite@address,w,c
  5537  0008' EC00' F000'        	call	_DATAEE_WriteByte
  5538  000C' 0012               	return		;funcret
  5539  000E'                    __end_of_EepromWrite:
  5540                           	opt stack 0
  5541                           tosu	equ	0xFFF
  5542                           tosh	equ	0xFFE
  5543                           tosl	equ	0xFFD
  5544                           pclath	equ	0xFFA
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function _DATAEE_WriteByte *****************
  5562 ;; Defined at:
  5563 ;;		line 167 in file "mcc_generated_files/memory.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  bAdd            1    wreg     unsigned char 
  5566 ;;  bData           1   23[COMRAM] unsigned char 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  bAdd            1   24[COMRAM] unsigned char 
  5569 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         1       0       0       0       0       0       0
  5580 ;;      Locals:         2       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0
  5582 ;;      Totals:         3       0       0       0       0       0       0
  5583 ;;Total ram usage:        3 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    3
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_EepromWrite
  5590 ;;		_EepromTest
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text26
  5595  0000'                    __ptext26:
  5596                           	opt stack 0
  5597  0000'                    _DATAEE_WriteByte:
  5598                           	opt stack 22
  5599                           
  5600                           ;incstack = 0
  5601                           ;DATAEE_WriteByte@bAdd stored from wreg
  5602  0000' 6E18'              	movwf	DATAEE_WriteByte@bAdd,c
  5603                           
  5604                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  5605  0002' 0E00               	movlw	0
  5606  0004' BEF2               	btfsc	intcon,7,c	;volatile
  5607  0006' 0E01               	movlw	1
  5608  0008' 6E19'              	movwf	DATAEE_WriteByte@GIEBitValue,c
  5609                           
  5610                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  5611  000A' C018' FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  5612                           
  5613                           ;memory.c: 172: EEDATA = bData;
  5614  000E' C017' FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  5615                           
  5616                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  5617  0012' 9EA6               	bcf	4006,7,c	;volsfr
  5618                           
  5619                           ;memory.c: 174: EECON1bits.CFGS = 0;
  5620  0014' 9CA6               	bcf	4006,6,c	;volsfr
  5621                           
  5622                           ;memory.c: 175: EECON1bits.WREN = 1;
  5623  0016' 84A6               	bsf	4006,2,c	;volsfr
  5624                           
  5625                           ;memory.c: 176: INTCONbits.GIE = 0;
  5626  0018' 9EF2               	bcf	intcon,7,c	;volatile
  5627                           
  5628                           ;memory.c: 177: EECON2 = 0x55;
  5629  001A' 0E55               	movlw	85
  5630  001C' 6EA7               	movwf	4007,c	;volsfr
  5631                           
  5632                           ;memory.c: 178: EECON2 = 0xAA;
  5633  001E' 0EAA               	movlw	170
  5634  0020' 6EA7               	movwf	4007,c	;volsfr
  5635                           
  5636                           ;memory.c: 179: EECON1bits.WR = 1;
  5637  0022' 82A6               	bsf	4006,1,c	;volsfr
  5638  0024'                    
  5639                           ;memory.c: 182: {
  5640  0024' B2A6               	btfsc	4006,1,c	;volsfr
  5641  0026' D7FE               	goto	l951
  5642                           
  5643                           ;memory.c: 183: }
  5644                           ;memory.c: 185: EECON1bits.WREN = 0;
  5645  0028' 94A6               	bcf	4006,2,c	;volsfr
  5646                           
  5647                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  5648  002A' B019'              	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  5649  002C' D002               	bra	u5825
  5650  002E' 9EF2               	bcf	intcon,7,c	;volatile
  5651  0030' D001               	bra	u5826
  5652  0032'                    u5825:
  5653  0032' 8EF2               	bsf	intcon,7,c	;volatile
  5654  0034'                    u5826:
  5655  0034' 0012               	return		;funcret
  5656  0036'                    __end_of_DATAEE_WriteByte:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclath	equ	0xFFA
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           postinc0	equ	0xFEE
  5670                           wreg	equ	0xFE8
  5671                           postdec1	equ	0xFE5
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _GetIntFromUartData *****************
  5680 ;; Defined at:
  5681 ;;		line 34 in file "SystemCommon.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  num             1    wreg     char 
  5684 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5685 ;;		 -> rxMsgData(20), 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  num             1   19[BANK0 ] char 
  5688 ;;  c               1   24[BANK0 ] unsigned char 
  5689 ;;  idx             2   25[BANK0 ] int 
  5690 ;;  dataRegArr      9   10[BANK0 ] unsigned char [9]
  5691 ;;  retVal          4   20[BANK0 ] unsigned long 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  4    6[BANK0 ] unsigned long 
  5694 ;; Registers used:
  5695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5701 ;;      Params:         0       4       0       0       0       0       0
  5702 ;;      Locals:         0      17       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0
  5704 ;;      Totals:         0      21       0       0       0       0       0
  5705 ;;Total ram usage:       21 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    6
  5708 ;; This function calls:
  5709 ;;		_ZeroArray
  5710 ;;		_strtol
  5711 ;; This function is called by:
  5712 ;;		_DacSetValue
  5713 ;;		_UpdateTxFreq
  5714 ;;		_UpdateRxFreq
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text27
  5719  0000'                    __ptext27:
  5720                           	opt stack 0
  5721  0000'                    _GetIntFromUartData:
  5722                           	opt stack 21
  5723                           
  5724                           ;incstack = 0
  5725                           ;GetIntFromUartData@num stored from wreg
  5726  0000' 0100               	movlb	0	; () banked
  5727  0002' 6F00'              	movwf	GetIntFromUartData@num& (0+255),b
  5728                           
  5729                           ;SystemCommon.c: 36: uint32_t retVal = 0;
  5730  0004' 0E00               	movlw	0
  5731  0006' 0100               	movlb	0	; () banked
  5732  0008' 6F00'              	movwf	GetIntFromUartData@retVal& (0+255),b
  5733  000A' 0E00               	movlw	0
  5734  000C' 6F00'              	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  5735  000E' 0E00               	movlw	0
  5736  0010' 6F00'              	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  5737  0012' 0E00               	movlw	0
  5738  0014' 6F00'              	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;SystemCommon.c: 37: char dataRegArr[9];
  5742                           ;SystemCommon.c: 38: ZeroArray(dataRegArr, 9);
  5743  0016' 0E00'              	movlw	low GetIntFromUartData@dataRegArr
  5744  0018' 6E1F'              	movwf	ZeroArray@array,c
  5745  001A' 0E00'              	movlw	high GetIntFromUartData@dataRegArr
  5746  001C' 6E20'              	movwf	ZeroArray@array+1,c
  5747  001E' 0E00               	movlw	0
  5748  0020' 6E22'              	movwf	ZeroArray@size+1,c
  5749  0022' 0E09               	movlw	9
  5750  0024' 6E21'              	movwf	ZeroArray@size,c
  5751  0026' EC00' F000'        	call	_ZeroArray	;wreg free
  5752                           
  5753                           ;SystemCommon.c: 40: for(int idx = 0; idx < 9; idx++)
  5754  002A' 0E00               	movlw	0
  5755  002C' 0100               	movlb	0	; () banked
  5756  002E' 6F00'              	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5757  0030' 0E00               	movlw	0
  5758  0032' 6F00'              	movwf	GetIntFromUartData@idx& (0+255),b
  5759  0034'                    l6977:
  5760                           
  5761                           ; BSR set to: 0
  5762  0034' BF00'              	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5763  0036' D006               	goto	l1284
  5764  0038' 5100'              	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5765  003A' E122               	bnz	l6995
  5766  003C' 0E09               	movlw	9
  5767  003E' 5D00'              	subwf	GetIntFromUartData@idx& (0+255),w,b
  5768  0040' B0D8               	btfsc	status,0,c
  5769  0042' D01E               	goto	u6830
  5770  0044'                    l1284:
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;SystemCommon.c: 41: {
  5774                           ;SystemCommon.c: 42: char c = data[idx];
  5775                           
  5776                           ; BSR set to: 0
  5777  0044' 5100'              	movf	GetIntFromUartData@idx& (0+255),w,b
  5778  0046' 2500'              	addwf	GetIntFromUartData@data& (0+255),w,b
  5779  0048' 6ED9               	movwf	fsr2l,c
  5780  004A' 5100'              	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5781  004C' 2100'              	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5782  004E' 6EDA               	movwf	fsr2h,c
  5783  0050' 50DF               	movf	indf2,w,c
  5784  0052' 6F00'              	movwf	GetIntFromUartData@c& (0+255),b
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;SystemCommon.c: 43: if(c == 0x10)
  5788  0054' 0E10               	movlw	16
  5789  0056' 1900'              	xorwf	GetIntFromUartData@c& (0+255),w,b
  5790  0058' B4D8               	btfsc	status,2,c
  5791  005A' D012               	goto	u6830
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;SystemCommon.c: 47: else
  5795                           ;SystemCommon.c: 48: {
  5796                           ;SystemCommon.c: 49: dataRegArr[idx] = data[idx] + '0';
  5797                           
  5798                           ; BSR set to: 0
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;SystemCommon.c: 46: }
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;SystemCommon.c: 44: {
  5805                           ;SystemCommon.c: 45: break;
  5806  005C' 0E00'              	movlw	low GetIntFromUartData@dataRegArr
  5807  005E' 2500'              	addwf	GetIntFromUartData@idx& (0+255),w,b
  5808  0060' 6ED9               	movwf	fsr2l,c
  5809  0062' 0E00'              	movlw	high GetIntFromUartData@dataRegArr
  5810  0064' 2100'              	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5811  0066' 6EDA               	movwf	fsr2h,c
  5812  0068' 5100'              	movf	GetIntFromUartData@idx& (0+255),w,b
  5813  006A' 2500'              	addwf	GetIntFromUartData@data& (0+255),w,b
  5814  006C' 6EE1               	movwf	fsr1l,c
  5815  006E' 5100'              	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5816  0070' 2100'              	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5817  0072' 6EE2               	movwf	fsr1h,c
  5818  0074' 50E7               	movf	indf1,w,c
  5819  0076' 0F30               	addlw	48
  5820  0078' 6EDF               	movwf	indf2,c
  5821                           
  5822                           ; BSR set to: 0
  5823                           
  5824                           ; BSR set to: 0
  5825  007A' 4B00'              	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5826  007C' 2B00'              	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5827  007E' D7DA               	goto	l6977
  5828  0080'                    u6830:
  5829  0080'                    l6995:
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;SystemCommon.c: 50: }
  5833                           ;SystemCommon.c: 52: }
  5834                           ;SystemCommon.c: 53: retVal = strtol(dataRegArr, (0), num);
  5835  0080' 0E00'              	movlw	low GetIntFromUartData@dataRegArr
  5836  0082' 6E23'              	movwf	strtol@s,c
  5837  0084' 0E00'              	movlw	high GetIntFromUartData@dataRegArr
  5838  0086' 6E24'              	movwf	strtol@s+1,c
  5839  0088' 0E00               	movlw	0
  5840  008A' 6E25'              	movwf	strtol@endptr,c
  5841  008C' 0E00               	movlw	0
  5842  008E' 6E26'              	movwf	strtol@endptr+1,c
  5843  0090' 5100'              	movf	GetIntFromUartData@num& (0+255),w,b
  5844  0092' 6E27'              	movwf	strtol@base,c
  5845  0094' 6A28'              	clrf	strtol@base+1,c
  5846  0096' BE27'              	btfsc	strtol@base,7,c
  5847  0098' 0628'              	decf	strtol@base+1,f,c
  5848  009A' EC00' F000'        	call	_strtol	;wreg free
  5849  009E' C023' F014'        	movff	?_strtol,GetIntFromUartData@retVal
  5850  00A2' C024' F015'        	movff	?_strtol+1,GetIntFromUartData@retVal+1
  5851  00A6' C025' F016'        	movff	?_strtol+2,GetIntFromUartData@retVal+2
  5852  00AA' C026' F017'        	movff	?_strtol+3,GetIntFromUartData@retVal+3
  5853                           
  5854                           ;SystemCommon.c: 55: return retVal;
  5855  00AE' C014' F006'        	movff	GetIntFromUartData@retVal,?_GetIntFromUartData
  5856  00B2' C015' F007'        	movff	GetIntFromUartData@retVal+1,?_GetIntFromUartData+1
  5857  00B6' C016' F008'        	movff	GetIntFromUartData@retVal+2,?_GetIntFromUartData+2
  5858  00BA' C017' F009'        	movff	GetIntFromUartData@retVal+3,?_GetIntFromUartData+3
  5859  00BE' 0012               	return	
  5860  00C0'                    __end_of_GetIntFromUartData:
  5861                           	opt stack 0
  5862                           tosu	equ	0xFFF
  5863                           tosh	equ	0xFFE
  5864                           tosl	equ	0xFFD
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           indf1	equ	0xFE7
  5876                           postdec1	equ	0xFE5
  5877                           fsr1h	equ	0xFE2
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           postinc2	equ	0xFDE
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _strtol *****************
  5886 ;; Defined at:
  5887 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5890 ;;		 -> GetIntFromUartData@dataRegArr(9), 
  5891 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5892 ;;		 -> NULL(0), 
  5893 ;;  base            2   39[COMRAM] int 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  a               4    1[BANK0 ] long 
  5896 ;;  c               1    5[BANK0 ] unsigned char 
  5897 ;;  sign            1    0[BANK0 ] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  4   35[COMRAM] long 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5907 ;;      Params:         6       0       0       0       0       0       0
  5908 ;;      Locals:         0       6       0       0       0       0       0
  5909 ;;      Temps:          4       0       0       0       0       0       0
  5910 ;;      Totals:        10       6       0       0       0       0       0
  5911 ;;Total ram usage:       16 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    5
  5914 ;; This function calls:
  5915 ;;		___lmul
  5916 ;;		_isalpha
  5917 ;;		_isdigit
  5918 ;;		_isspace
  5919 ;;		_toupper
  5920 ;; This function is called by:
  5921 ;;		_GetIntFromUartData
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text28
  5926  0000'                    __ptext28:
  5927                           	opt stack 0
  5928  0000'                    _strtol:
  5929                           	opt stack 21
  5930                           
  5931                           ;incstack = 0
  5932  0000' C023' FFD9         	movff	strtol@s,fsr2l
  5933  0004' C024' FFDA         	movff	strtol@s+1,fsr2h
  5934  0008' 50DF               	movf	indf2,w,c
  5935  000A' 0100               	movlb	0	; () banked
  5936  000C' 6F00'              	movwf	strtol@c& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939  000E' 4A23'              	infsnz	strtol@s,f,c
  5940  0010' 2A24'              	incf	strtol@s+1,f,c
  5941                           
  5942                           ; BSR set to: 0
  5943  0012' 5100'              	movf	strtol@c& (0+255),w,b
  5944  0014' EC00' F000'        	call	_isspace
  5945  0018' B0D8               	btfsc	status,0,c
  5946  001A' D7F2               	goto	_strtol
  5947  001C' 0E00               	movlw	0
  5948  001E' 0100               	movlb	0	; () banked
  5949  0020' 6F00'              	movwf	strtol@a& (0+255),b
  5950  0022' 0E00               	movlw	0
  5951  0024' 6F00'              	movwf	(strtol@a+1)& (0+255),b
  5952  0026' 0E00               	movlw	0
  5953  0028' 6F00'              	movwf	(strtol@a+2)& (0+255),b
  5954  002A' 0E00               	movlw	0
  5955  002C' 6F00'              	movwf	(strtol@a+3)& (0+255),b
  5956  002E' 0E00               	movlw	0
  5957  0030' 6F00'              	movwf	strtol@sign& (0+255),b
  5958                           
  5959                           ; BSR set to: 0
  5960  0032' 0E2D               	movlw	45
  5961  0034' 1900'              	xorwf	strtol@c& (0+255),w,b
  5962  0036' A4D8               	btfss	status,2,c
  5963  0038' D003               	goto	l2027
  5964                           
  5965                           ; BSR set to: 0
  5966  003A' 0E01               	movlw	1
  5967  003C' 6F00'              	movwf	strtol@sign& (0+255),b
  5968  003E' D004               	goto	u6310
  5969  0040'                    l2027:
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ; BSR set to: 0
  5974  0040' 0E2B               	movlw	43
  5975  0042' 1900'              	xorwf	strtol@c& (0+255),w,b
  5976  0044' A4D8               	btfss	status,2,c
  5977  0046' D008               	goto	l2029
  5978  0048'                    u6310:
  5979                           
  5980                           ; BSR set to: 0
  5981  0048' C023' FFD9         	movff	strtol@s,fsr2l
  5982  004C' C024' FFDA         	movff	strtol@s+1,fsr2h
  5983  0050' 50DF               	movf	indf2,w,c
  5984  0052' 6F00'              	movwf	strtol@c& (0+255),b
  5985                           
  5986                           ; BSR set to: 0
  5987  0054' 4A23'              	infsnz	strtol@s,f,c
  5988  0056' 2A24'              	incf	strtol@s+1,f,c
  5989  0058'                    l2029:
  5990                           
  5991                           ; BSR set to: 0
  5992                           
  5993                           ; BSR set to: 0
  5994                           
  5995                           ; BSR set to: 0
  5996  0058' 0E30               	movlw	48
  5997  005A' 1900'              	xorwf	strtol@c& (0+255),w,b
  5998  005C' A4D8               	btfss	status,2,c
  5999  005E' D02E               	goto	l2037
  6000                           
  6001                           ; BSR set to: 0
  6002  0060' C023' FFD9         	movff	strtol@s,fsr2l
  6003  0064' C024' FFDA         	movff	strtol@s+1,fsr2h
  6004  0068' 50DF               	movf	indf2,w,c
  6005  006A' 6F00'              	movwf	strtol@c& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008  006C' 4A23'              	infsnz	strtol@s,f,c
  6009  006E' 2A24'              	incf	strtol@s+1,f,c
  6010                           
  6011                           ; BSR set to: 0
  6012  0070' 5027'              	movf	strtol@base,w,c
  6013  0072' 1028'              	iorwf	strtol@base+1,w,c
  6014  0074' B4D8               	btfsc	status,2,c
  6015  0076' D005               	goto	u6340
  6016                           
  6017                           ; BSR set to: 0
  6018  0078' 0E10               	movlw	16
  6019  007A' 1827'              	xorwf	strtol@base,w,c
  6020  007C' 1028'              	iorwf	strtol@base+1,w,c
  6021  007E' A4D8               	btfss	status,2,c
  6022  0080' D015               	goto	l2031
  6023  0082'                    u6340:
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028  0082' 0E78               	movlw	120
  6029  0084' 1900'              	xorwf	strtol@c& (0+255),w,b
  6030  0086' B4D8               	btfsc	status,2,c
  6031  0088' D004               	goto	u6360
  6032                           
  6033                           ; BSR set to: 0
  6034  008A' 0E58               	movlw	88
  6035  008C' 1900'              	xorwf	strtol@c& (0+255),w,b
  6036  008E' A4D8               	btfss	status,2,c
  6037  0090' D00D               	goto	l2031
  6038  0092'                    u6360:
  6039                           
  6040                           ; BSR set to: 0
  6041                           
  6042                           ; BSR set to: 0
  6043  0092' 0E00               	movlw	0
  6044  0094' 6E28'              	movwf	strtol@base+1,c
  6045  0096' 0E10               	movlw	16
  6046  0098' 6E27'              	movwf	strtol@base,c
  6047                           
  6048                           ; BSR set to: 0
  6049  009A' C023' FFD9         	movff	strtol@s,fsr2l
  6050  009E' C024' FFDA         	movff	strtol@s+1,fsr2h
  6051  00A2' 50DF               	movf	indf2,w,c
  6052  00A4' 6F00'              	movwf	strtol@c& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055  00A6' 4A23'              	infsnz	strtol@s,f,c
  6056  00A8' 2A24'              	incf	strtol@s+1,f,c
  6057  00AA' D008               	goto	l2037
  6058  00AC'                    l2031:
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  00AC' 5027'              	movf	strtol@base,w,c
  6064  00AE' 1028'              	iorwf	strtol@base+1,w,c
  6065  00B0' A4D8               	btfss	status,2,c
  6066  00B2' D004               	goto	l2037
  6067                           
  6068                           ; BSR set to: 0
  6069  00B4' 0E00               	movlw	0
  6070  00B6' 6E28'              	movwf	strtol@base+1,c
  6071  00B8' 0E08               	movlw	8
  6072  00BA' 6E27'              	movwf	strtol@base,c
  6073  00BC'                    l2037:
  6074                           
  6075                           ; BSR set to: 0
  6076                           
  6077                           ; BSR set to: 0
  6078                           
  6079                           ; BSR set to: 0
  6080                           
  6081                           ; BSR set to: 0
  6082  00BC' 5027'              	movf	strtol@base,w,c
  6083  00BE' 1028'              	iorwf	strtol@base+1,w,c
  6084  00C0' A4D8               	btfss	status,2,c
  6085  00C2' D004               	goto	l2038
  6086                           
  6087                           ; BSR set to: 0
  6088  00C4' 0E00               	movlw	0
  6089  00C6' 6E28'              	movwf	strtol@base+1,c
  6090  00C8' 0E0A               	movlw	10
  6091  00CA' 6E27'              	movwf	strtol@base,c
  6092  00CC'                    l2038:
  6093                           
  6094                           ; BSR set to: 0
  6095                           
  6096                           ; BSR set to: 0
  6097                           
  6098                           ; BSR set to: 0
  6099  00CC' 5100'              	movf	strtol@c& (0+255),w,b
  6100  00CE' EC00' F000'        	call	_isalpha
  6101  00D2' A0D8               	btfss	status,0,c
  6102  00D4' D008               	goto	l2040
  6103  00D6' 0100               	movlb	0	; () banked
  6104  00D8' 5100'              	movf	strtol@c& (0+255),w,b
  6105  00DA' EC00' F000'        	call	_toupper
  6106  00DE' 0FC9               	addlw	201
  6107  00E0' 0100               	movlb	0	; () banked
  6108  00E2' 6F00'              	movwf	strtol@c& (0+255),b
  6109  00E4' D009               	goto	l2043
  6110  00E6'                    l2040:
  6111                           
  6112                           ; BSR set to: 0
  6113  00E6' 0100               	movlb	0	; () banked
  6114  00E8' 5100'              	movf	strtol@c& (0+255),w,b
  6115  00EA' EC00' F000'        	call	_isdigit
  6116  00EE' A0D8               	btfss	status,0,c
  6117  00F0' D039               	goto	l2044
  6118  00F2' 0E30               	movlw	48
  6119  00F4' 0100               	movlb	0	; () banked
  6120  00F6' 5F00'              	subwf	strtol@c& (0+255),f,b
  6121  00F8'                    l2043:
  6122                           
  6123                           ; BSR set to: 0
  6124                           
  6125                           ; BSR set to: 0
  6126                           
  6127                           ; BSR set to: 0
  6128  00F8' 5100'              	movf	strtol@c& (0+255),w,b
  6129  00FA' 6E00'              	movwf	??_strtol& (0+255),c
  6130  00FC' 6A00'              	clrf	(??_strtol+1)& (0+255),c
  6131  00FE' 5027'              	movf	strtol@base,w,c
  6132  0100' 5C29'              	subwf	??_strtol,w,c
  6133  0102' 502A'              	movf	??_strtol+1,w,c
  6134  0104' 0A80               	xorlw	128
  6135  0106' 6E00'              	movwf	(??_strtol+2)& (0+255),c
  6136  0108' 5028'              	movf	strtol@base+1,w,c
  6137  010A' 0A80               	xorlw	128
  6138  010C' 5800'              	subwfb	(??_strtol+2)& (0+255),w,c
  6139  010E' B0D8               	btfsc	status,0,c
  6140  0110' D029               	goto	l2044
  6141                           
  6142                           ; BSR set to: 0
  6143                           
  6144                           ; BSR set to: 0
  6145                           
  6146                           ; BSR set to: 0
  6147  0112' C027' F017'        	movff	strtol@base,___lmul@multiplier
  6148  0116' C028' F018'        	movff	strtol@base+1,___lmul@multiplier+1
  6149  011A' 0E00               	movlw	0
  6150  011C' BE18'              	btfsc	___lmul@multiplier+1,7,c
  6151  011E' 0EFF               	movlw	-1
  6152  0120' 6E19'              	movwf	___lmul@multiplier+2,c
  6153  0122' 6E1A'              	movwf	___lmul@multiplier+3,c
  6154  0124' C001' F01B'        	movff	strtol@a,___lmul@multiplicand
  6155  0128' C002' F01C'        	movff	strtol@a+1,___lmul@multiplicand+1
  6156  012C' C003' F01D'        	movff	strtol@a+2,___lmul@multiplicand+2
  6157  0130' C004' F01E'        	movff	strtol@a+3,___lmul@multiplicand+3
  6158  0134' EC00' F000'        	call	___lmul	;wreg free
  6159  0138' 0100               	movlb	0	; () banked
  6160  013A' 5100'              	movf	strtol@c& (0+255),w,b
  6161  013C' 2417'              	addwf	?___lmul,w,c
  6162  013E' 6F00'              	movwf	strtol@a& (0+255),b
  6163  0140' 0E00               	movlw	0
  6164  0142' 2018'              	addwfc	?___lmul+1,w,c
  6165  0144' 6F00'              	movwf	(strtol@a+1)& (0+255),b
  6166  0146' 0E00               	movlw	0
  6167  0148' 2019'              	addwfc	?___lmul+2,w,c
  6168  014A' 6F00'              	movwf	(strtol@a+2)& (0+255),b
  6169  014C' 0E00               	movlw	0
  6170  014E' 201A'              	addwfc	?___lmul+3,w,c
  6171  0150' 6F00'              	movwf	(strtol@a+3)& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174  0152' C023' FFD9         	movff	strtol@s,fsr2l
  6175  0156' C024' FFDA         	movff	strtol@s+1,fsr2h
  6176  015A' 50DF               	movf	indf2,w,c
  6177  015C' 6F00'              	movwf	strtol@c& (0+255),b
  6178                           
  6179                           ; BSR set to: 0
  6180  015E' 4A23'              	infsnz	strtol@s,f,c
  6181  0160' 2A24'              	incf	strtol@s+1,f,c
  6182  0162' D7B4               	goto	l2038
  6183  0164'                    l2044:
  6184                           
  6185                           ; BSR set to: 0
  6186  0164' 5025'              	movf	strtol@endptr,w,c
  6187  0166' 1026'              	iorwf	strtol@endptr+1,w,c
  6188  0168' B4D8               	btfsc	status,2,c
  6189  016A' D00E               	goto	l2046
  6190  016C' 0EFF               	movlw	255
  6191  016E' 2423'              	addwf	strtol@s,w,c
  6192  0170' 6E00'              	movwf	??_strtol& (0+255),c
  6193  0172' 0EFF               	movlw	255
  6194  0174' 2024'              	addwfc	strtol@s+1,w,c
  6195  0176' 6E00'              	movwf	(??_strtol+1)& (0+255),c
  6196  0178' C025' FFD9         	movff	strtol@endptr,fsr2l
  6197  017C' C026' FFDA         	movff	strtol@endptr+1,fsr2h
  6198  0180' C029' FFDE         	movff	??_strtol,postinc2
  6199  0184' C02A' FFDD         	movff	??_strtol+1,postdec2
  6200  0188'                    l2046:
  6201  0188' 0100               	movlb	0	; () banked
  6202  018A' 5100'              	movf	strtol@sign& (0+255),w,b
  6203  018C' B4D8               	btfsc	status,2,c
  6204  018E' D01A               	goto	l2047
  6205                           
  6206                           ; BSR set to: 0
  6207  0190' C001' F029'        	movff	strtol@a,??_strtol
  6208  0194' C002' F02A'        	movff	strtol@a+1,??_strtol+1
  6209  0198' C003' F02B'        	movff	strtol@a+2,??_strtol+2
  6210  019C' C004' F02C'        	movff	strtol@a+3,??_strtol+3
  6211  01A0' 1E29'              	comf	??_strtol,f,c
  6212  01A2' 1E2A'              	comf	??_strtol+1,f,c
  6213  01A4' 1E2B'              	comf	??_strtol+2,f,c
  6214  01A6' 1E2C'              	comf	??_strtol+3,f,c
  6215  01A8' 2A29'              	incf	??_strtol,f,c
  6216  01AA' 0E00               	movlw	0
  6217  01AC' 222A'              	addwfc	??_strtol+1,f,c
  6218  01AE' 222B'              	addwfc	??_strtol+2,f,c
  6219  01B0' 222C'              	addwfc	??_strtol+3,f,c
  6220  01B2' C029' F023'        	movff	??_strtol,?_strtol
  6221  01B6' C02A' F024'        	movff	??_strtol+1,?_strtol+1
  6222  01BA' C02B' F025'        	movff	??_strtol+2,?_strtol+2
  6223  01BE' C02C' F026'        	movff	??_strtol+3,?_strtol+3
  6224                           
  6225                           ; BSR set to: 0
  6226  01C2' 0012               	return	
  6227  01C4'                    l2047:
  6228                           
  6229                           ; BSR set to: 0
  6230  01C4' C001' F023'        	movff	strtol@a,?_strtol
  6231  01C8' C002' F024'        	movff	strtol@a+1,?_strtol+1
  6232  01CC' C003' F025'        	movff	strtol@a+2,?_strtol+2
  6233  01D0' C004' F026'        	movff	strtol@a+3,?_strtol+3
  6234                           
  6235                           ; BSR set to: 0
  6236  01D4' 0012               	return		;funcret
  6237  01D6'                    __end_of_strtol:
  6238                           	opt stack 0
  6239                           tosu	equ	0xFFF
  6240                           tosh	equ	0xFFE
  6241                           tosl	equ	0xFFD
  6242                           pclath	equ	0xFFA
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           indf1	equ	0xFE7
  6253                           postdec1	equ	0xFE5
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _toupper *****************
  6264 ;; Defined at:
  6265 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  c               1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  c               1   23[COMRAM] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      unsigned char 
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, status,0
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6279 ;;      Params:         0       0       0       0       0       0       0
  6280 ;;      Locals:         1       0       0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0
  6282 ;;      Totals:         1       0       0       0       0       0       0
  6283 ;;Total ram usage:        1 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    3
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		_strtol
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text29
  6294  0000'                    __ptext29:
  6295                           	opt stack 0
  6296  0000'                    _toupper:
  6297                           	opt stack 22
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;incstack = 0
  6301                           ;toupper@c stored from wreg
  6302  0000' 6E17'              	movwf	toupper@c,c
  6303  0002' 0E7B               	movlw	123
  6304  0004' 6017'              	cpfslt	toupper@c,c
  6305  0006' D004               	goto	l2051
  6306  0008' 0E60               	movlw	96
  6307  000A' 6417'              	cpfsgt	toupper@c,c
  6308  000C' D001               	goto	l2051
  6309  000E' 9A17'              	bcf	toupper@c,5,c
  6310  0010'                    l2051:
  6311  0010' 5017'              	movf	toupper@c,w,c
  6312  0012' 0012               	return	
  6313  0014'                    __end_of_toupper:
  6314                           	opt stack 0
  6315                           tosu	equ	0xFFF
  6316                           tosh	equ	0xFFE
  6317                           tosl	equ	0xFFD
  6318                           pclath	equ	0xFFA
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           intcon	equ	0xFF2
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           indf1	equ	0xFE7
  6329                           postdec1	equ	0xFE5
  6330                           fsr1h	equ	0xFE2
  6331                           fsr1l	equ	0xFE1
  6332                           indf2	equ	0xFDF
  6333                           postinc2	equ	0xFDE
  6334                           postdec2	equ	0xFDD
  6335                           fsr2h	equ	0xFDA
  6336                           fsr2l	equ	0xFD9
  6337                           status	equ	0xFD8
  6338                           
  6339 ;; *************** function _isspace *****************
  6340 ;; Defined at:
  6341 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  c               1    wreg     unsigned char 
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  c               1   25[COMRAM] unsigned char 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;		None               void
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6355 ;;      Params:         0       0       0       0       0       0       0
  6356 ;;      Locals:         2       0       0       0       0       0       0
  6357 ;;      Temps:          1       0       0       0       0       0       0
  6358 ;;      Totals:         3       0       0       0       0       0       0
  6359 ;;Total ram usage:        3 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    3
  6362 ;; This function calls:
  6363 ;;		Nothing
  6364 ;; This function is called by:
  6365 ;;		_strtol
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text30
  6370  0000'                    __ptext30:
  6371                           	opt stack 0
  6372  0000'                    _isspace:
  6373                           	opt stack 22
  6374                           
  6375                           ;incstack = 0
  6376                           ;isspace@c stored from wreg
  6377  0000' 6E19'              	movwf	isspace@c,c
  6378  0002' 0E01               	movlw	1
  6379  0004' 6E18'              	movwf	_isspace$2997,c
  6380  0006' 0E20               	movlw	32
  6381  0008' 1819'              	xorwf	isspace@c,w,c
  6382  000A' B4D8               	btfsc	status,2,c
  6383  000C' D008               	goto	l2133
  6384  000E' 0E0E               	movlw	14
  6385  0010' 6019'              	cpfslt	isspace@c,c
  6386  0012' D003               	goto	u6090
  6387  0014' 0E09               	movlw	9
  6388  0016' 6019'              	cpfslt	isspace@c,c
  6389  0018' D002               	goto	l2133
  6390  001A'                    u6090:
  6391  001A' 0E00               	movlw	0
  6392  001C' 6E18'              	movwf	_isspace$2997,c
  6393  001E'                    l2133:
  6394  001E' C018' F017'        	movff	_isspace$2997,??_isspace
  6395  0022' 3017'              	rrcf	??_isspace,w,c
  6396  0024' 0012               	return	
  6397  0026'                    __end_of_isspace:
  6398                           	opt stack 0
  6399                           tosu	equ	0xFFF
  6400                           tosh	equ	0xFFE
  6401                           tosl	equ	0xFFD
  6402                           pclath	equ	0xFFA
  6403                           tblptru	equ	0xFF8
  6404                           tblptrh	equ	0xFF7
  6405                           tblptrl	equ	0xFF6
  6406                           tablat	equ	0xFF5
  6407                           prodh	equ	0xFF4
  6408                           prodl	equ	0xFF3
  6409                           intcon	equ	0xFF2
  6410                           postinc0	equ	0xFEE
  6411                           wreg	equ	0xFE8
  6412                           indf1	equ	0xFE7
  6413                           postdec1	equ	0xFE5
  6414                           fsr1h	equ	0xFE2
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _isdigit *****************
  6424 ;; Defined at:
  6425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  c               1    wreg     unsigned char 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  c               1   25[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6439 ;;      Params:         0       0       0       0       0       0       0
  6440 ;;      Locals:         2       0       0       0       0       0       0
  6441 ;;      Temps:          1       0       0       0       0       0       0
  6442 ;;      Totals:         3       0       0       0       0       0       0
  6443 ;;Total ram usage:        3 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    3
  6446 ;; This function calls:
  6447 ;;		Nothing
  6448 ;; This function is called by:
  6449 ;;		_strtol
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text31
  6454  0000'                    __ptext31:
  6455                           	opt stack 0
  6456  0000'                    _isdigit:
  6457                           	opt stack 22
  6458                           
  6459                           ;incstack = 0
  6460                           ;isdigit@c stored from wreg
  6461  0000' 6E19'              	movwf	isdigit@c,c
  6462  0002' 0E00               	movlw	0
  6463  0004' 6E18'              	movwf	_isdigit$2994,c
  6464  0006' 0E3A               	movlw	58
  6465  0008' 6019'              	cpfslt	isdigit@c,c
  6466  000A' D005               	goto	l2128
  6467  000C' 0E2F               	movlw	47
  6468  000E' 6419'              	cpfsgt	isdigit@c,c
  6469  0010' D002               	goto	l2128
  6470  0012' 0E01               	movlw	1
  6471  0014' 6E18'              	movwf	_isdigit$2994,c
  6472  0016'                    l2128:
  6473  0016' C018' F017'        	movff	_isdigit$2994,??_isdigit
  6474  001A' 3017'              	rrcf	??_isdigit,w,c
  6475  001C' 0012               	return	
  6476  001E'                    __end_of_isdigit:
  6477                           	opt stack 0
  6478                           tosu	equ	0xFFF
  6479                           tosh	equ	0xFFE
  6480                           tosl	equ	0xFFD
  6481                           pclath	equ	0xFFA
  6482                           tblptru	equ	0xFF8
  6483                           tblptrh	equ	0xFF7
  6484                           tblptrl	equ	0xFF6
  6485                           tablat	equ	0xFF5
  6486                           prodh	equ	0xFF4
  6487                           prodl	equ	0xFF3
  6488                           intcon	equ	0xFF2
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           postdec1	equ	0xFE5
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _isalpha *****************
  6503 ;; Defined at:
  6504 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  c               1    wreg     unsigned char 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  c               1   28[COMRAM] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6518 ;;      Params:         0       0       0       0       0       0       0
  6519 ;;      Locals:         2       0       0       0       0       0       0
  6520 ;;      Temps:          1       0       0       0       0       0       0
  6521 ;;      Totals:         3       0       0       0       0       0       0
  6522 ;;Total ram usage:        3 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    4
  6525 ;; This function calls:
  6526 ;;		_isupper
  6527 ;; This function is called by:
  6528 ;;		_strtol
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text32
  6533  0000'                    __ptext32:
  6534                           	opt stack 0
  6535  0000'                    _isalpha:
  6536                           	opt stack 21
  6537                           
  6538                           ;incstack = 0
  6539                           ;isalpha@c stored from wreg
  6540  0000' 6E1C'              	movwf	isalpha@c,c
  6541  0002' 0E01               	movlw	1
  6542  0004' 6E1B'              	movwf	_isalpha$2991,c
  6543  0006' 0E7B               	movlw	123
  6544  0008' 601C'              	cpfslt	isalpha@c,c
  6545  000A' D003               	goto	u6110
  6546  000C' 0E61               	movlw	97
  6547  000E' 601C'              	cpfslt	isalpha@c,c
  6548  0010' D007               	goto	l2123
  6549  0012'                    u6110:
  6550  0012' 501C'              	movf	isalpha@c,w,c
  6551  0014' EC00' F000'        	call	_isupper
  6552  0018' B0D8               	btfsc	status,0,c
  6553  001A' D002               	goto	l2123
  6554  001C' 0E00               	movlw	0
  6555  001E' 6E1B'              	movwf	_isalpha$2991,c
  6556  0020'                    l2123:
  6557  0020' C01B' F01A'        	movff	_isalpha$2991,??_isalpha
  6558  0024' 301A'              	rrcf	??_isalpha,w,c
  6559  0026' 0012               	return	
  6560  0028'                    __end_of_isalpha:
  6561                           	opt stack 0
  6562                           tosu	equ	0xFFF
  6563                           tosh	equ	0xFFE
  6564                           tosl	equ	0xFFD
  6565                           pclath	equ	0xFFA
  6566                           tblptru	equ	0xFF8
  6567                           tblptrh	equ	0xFF7
  6568                           tblptrl	equ	0xFF6
  6569                           tablat	equ	0xFF5
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           indf1	equ	0xFE7
  6576                           postdec1	equ	0xFE5
  6577                           fsr1h	equ	0xFE2
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function _isupper *****************
  6587 ;; Defined at:
  6588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  c               1    wreg     unsigned char 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  c               1   25[COMRAM] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;		None               void
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6602 ;;      Params:         0       0       0       0       0       0       0
  6603 ;;      Locals:         2       0       0       0       0       0       0
  6604 ;;      Temps:          1       0       0       0       0       0       0
  6605 ;;      Totals:         3       0       0       0       0       0       0
  6606 ;;Total ram usage:        3 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    3
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_isalpha
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text33
  6617  0000'                    __ptext33:
  6618                           	opt stack 0
  6619  0000'                    _isupper:
  6620                           	opt stack 21
  6621                           
  6622                           ;incstack = 0
  6623                           ;isupper@c stored from wreg
  6624  0000' 6E19'              	movwf	isupper@c,c
  6625  0002' 0E00               	movlw	0
  6626  0004' 6E18'              	movwf	_isupper$3000,c
  6627  0006' 0E5B               	movlw	91
  6628  0008' 6019'              	cpfslt	isupper@c,c
  6629  000A' D005               	goto	l2138
  6630  000C' 0E40               	movlw	64
  6631  000E' 6419'              	cpfsgt	isupper@c,c
  6632  0010' D002               	goto	l2138
  6633  0012' 0E01               	movlw	1
  6634  0014' 6E18'              	movwf	_isupper$3000,c
  6635  0016'                    l2138:
  6636  0016' C018' F017'        	movff	_isupper$3000,??_isupper
  6637  001A' 3017'              	rrcf	??_isupper,w,c
  6638  001C' 0012               	return	
  6639  001E'                    __end_of_isupper:
  6640                           	opt stack 0
  6641                           tosu	equ	0xFFF
  6642                           tosh	equ	0xFFE
  6643                           tosl	equ	0xFFD
  6644                           pclath	equ	0xFFA
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           postinc0	equ	0xFEE
  6653                           wreg	equ	0xFE8
  6654                           indf1	equ	0xFE7
  6655                           postdec1	equ	0xFE5
  6656                           fsr1h	equ	0xFE2
  6657                           fsr1l	equ	0xFE1
  6658                           indf2	equ	0xFDF
  6659                           postinc2	equ	0xFDE
  6660                           postdec2	equ	0xFDD
  6661                           fsr2h	equ	0xFDA
  6662                           fsr2l	equ	0xFD9
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function ___lmul *****************
  6666 ;; Defined at:
  6667 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  multiplier      4   23[COMRAM] unsigned long 
  6670 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  product         4   31[COMRAM] unsigned long 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  4   23[COMRAM] unsigned long 
  6675 ;; Registers used:
  6676 ;;		wreg, status,2, status,0
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6682 ;;      Params:         8       0       0       0       0       0       0
  6683 ;;      Locals:         4       0       0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0
  6685 ;;      Totals:        12       0       0       0       0       0       0
  6686 ;;Total ram usage:       12 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    3
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_strtol
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text34
  6697  0000'                    __ptext34:
  6698                           	opt stack 0
  6699  0000'                    ___lmul:
  6700                           	opt stack 22
  6701                           
  6702                           ;incstack = 0
  6703  0000' 0E00               	movlw	0
  6704  0002' 6E1F'              	movwf	___lmul@product,c
  6705  0004' 0E00               	movlw	0
  6706  0006' 6E20'              	movwf	___lmul@product+1,c
  6707  0008' 0E00               	movlw	0
  6708  000A' 6E21'              	movwf	___lmul@product+2,c
  6709  000C' 0E00               	movlw	0
  6710  000E' 6E22'              	movwf	___lmul@product+3,c
  6711  0010' A017'              	btfss	___lmul@multiplier,0,c
  6712  0012' D008               	goto	l1457
  6713  0014' 501B'              	movf	___lmul@multiplicand,w,c
  6714  0016' 261F'              	addwf	___lmul@product,f,c
  6715  0018' 501C'              	movf	___lmul@multiplicand+1,w,c
  6716  001A' 2220'              	addwfc	___lmul@product+1,f,c
  6717  001C' 501D'              	movf	___lmul@multiplicand+2,w,c
  6718  001E' 2221'              	addwfc	___lmul@product+2,f,c
  6719  0020' 501E'              	movf	___lmul@multiplicand+3,w,c
  6720  0022' 2222'              	addwfc	___lmul@product+3,f,c
  6721  0024'                    l1457:
  6722  0024' 90D8               	bcf	status,0,c
  6723  0026' 361B'              	rlcf	___lmul@multiplicand,f,c
  6724  0028' 361C'              	rlcf	___lmul@multiplicand+1,f,c
  6725  002A' 361D'              	rlcf	___lmul@multiplicand+2,f,c
  6726  002C' 361E'              	rlcf	___lmul@multiplicand+3,f,c
  6727  002E' 90D8               	bcf	status,0,c
  6728  0030' 321A'              	rrcf	___lmul@multiplier+3,f,c
  6729  0032' 3219'              	rrcf	___lmul@multiplier+2,f,c
  6730  0034' 3218'              	rrcf	___lmul@multiplier+1,f,c
  6731  0036' 3217'              	rrcf	___lmul@multiplier,f,c
  6732  0038' 5017'              	movf	___lmul@multiplier,w,c
  6733  003A' 1018'              	iorwf	___lmul@multiplier+1,w,c
  6734  003C' 1019'              	iorwf	___lmul@multiplier+2,w,c
  6735  003E' 101A'              	iorwf	___lmul@multiplier+3,w,c
  6736  0040' A4D8               	btfss	status,2,c
  6737  0042' D7E6               	goto	l1456
  6738  0044' C01F' F017'        	movff	___lmul@product,?___lmul
  6739  0048' C020' F018'        	movff	___lmul@product+1,?___lmul+1
  6740  004C' C021' F019'        	movff	___lmul@product+2,?___lmul+2
  6741  0050' C022' F01A'        	movff	___lmul@product+3,?___lmul+3
  6742  0054' 0012               	return		;funcret
  6743  0056'                    __end_of___lmul:
  6744                           	opt stack 0
  6745                           tosu	equ	0xFFF
  6746                           tosh	equ	0xFFE
  6747                           tosl	equ	0xFFD
  6748                           pclath	equ	0xFFA
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           indf1	equ	0xFE7
  6759                           postdec1	equ	0xFE5
  6760                           fsr1h	equ	0xFE2
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _testLeds *****************
  6770 ;; Defined at:
  6771 ;;		line 43 in file "LedsApp.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  idx             2   44[COMRAM] int 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6785 ;;      Params:         0       0       0       0       0       0       0
  6786 ;;      Locals:         2       0       0       0       0       0       0
  6787 ;;      Temps:          1       0       0       0       0       0       0
  6788 ;;      Totals:         3       0       0       0       0       0       0
  6789 ;;Total ram usage:        3 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		_SendAckMessage
  6794 ;; This function is called by:
  6795 ;;		_GroupControlMcu
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text35
  6800  0000'                    __ptext35:
  6801                           	opt stack 0
  6802  0000'                    _testLeds:
  6803                           	opt stack 22
  6804                           
  6805                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6806                           
  6807                           ;incstack = 0
  6808  0000' 0E00               	movlw	0
  6809  0002' 6E2D'              	movwf	testLeds@idx+1,c
  6810  0004' 0E00               	movlw	0
  6811  0006' 6E2C'              	movwf	testLeds@idx,c
  6812  0008'                    l7185:
  6813  0008' BE2D'              	btfsc	testLeds@idx+1,7,c
  6814  000A' D006               	goto	l54
  6815  000C' 502D'              	movf	testLeds@idx+1,w,c
  6816  000E' E127               	bnz	l7199
  6817  0010' 0E0A               	movlw	10
  6818  0012' 5C2C'              	subwf	testLeds@idx,w,c
  6819  0014' B0D8               	btfsc	status,0,c
  6820  0016' D023               	goto	u7090
  6821  0018'                    l54:
  6822                           
  6823                           ;LedsApp.c: 47: {
  6824                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6825  0018' 808B               	bsf	3979,0,c	;volatile
  6826                           
  6827                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6828  001A' 0E82               	movlw	130
  6829  001C' 6E00'              	movwf	??_testLeds& (0+255),c
  6830  001E' 0EDE               	movlw	222
  6831  0020'                    u8107:
  6832  0020' 2EE8               	decfsz	wreg,f,c
  6833  0022' D7FE               	bra	u8107
  6834  0024' 2E00'              	decfsz	??_testLeds& (0+255),f,c
  6835  0026' D7FC               	bra	u8107
  6836                           
  6837                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6838  0028' 888A               	bsf	3978,4,c	;volatile
  6839                           
  6840                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6841  002A' 0E82               	movlw	130
  6842  002C' 6E00'              	movwf	??_testLeds& (0+255),c
  6843  002E' 0EDE               	movlw	222
  6844  0030'                    u8117:
  6845  0030' 2EE8               	decfsz	wreg,f,c
  6846  0032' D7FE               	bra	u8117
  6847  0034' 2E00'              	decfsz	??_testLeds& (0+255),f,c
  6848  0036' D7FC               	bra	u8117
  6849                           
  6850                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6851  0038' 908B               	bcf	3979,0,c	;volatile
  6852                           
  6853                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6854  003A' 0E82               	movlw	130
  6855  003C' 6E00'              	movwf	??_testLeds& (0+255),c
  6856  003E' 0EDE               	movlw	222
  6857  0040'                    u8127:
  6858  0040' 2EE8               	decfsz	wreg,f,c
  6859  0042' D7FE               	bra	u8127
  6860  0044' 2E00'              	decfsz	??_testLeds& (0+255),f,c
  6861  0046' D7FC               	bra	u8127
  6862                           
  6863                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6864  0048' 988A               	bcf	3978,4,c	;volatile
  6865                           
  6866                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6867  004A' 0E82               	movlw	130
  6868  004C' 6E00'              	movwf	??_testLeds& (0+255),c
  6869  004E' 0EDE               	movlw	222
  6870  0050'                    u8137:
  6871  0050' 2EE8               	decfsz	wreg,f,c
  6872  0052' D7FE               	bra	u8137
  6873  0054' 2E00'              	decfsz	??_testLeds& (0+255),f,c
  6874  0056' D7FC               	bra	u8137
  6875  0058' 4A2C'              	infsnz	testLeds@idx,f,c
  6876  005A' 2A2D'              	incf	testLeds@idx+1,f,c
  6877  005C' D7D5               	goto	l7185
  6878  005E'                    u7090:
  6879  005E'                    l7199:
  6880                           
  6881                           ;LedsApp.c: 57: }
  6882                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6883  005E' 0E14               	movlw	20
  6884  0060' 6E23'              	movwf	SendAckMessage@inRequest,c
  6885  0062' 0E01               	movlw	1
  6886  0064' EC00' F000'        	call	_SendAckMessage
  6887  0068' 0012               	return	
  6888  006A'                    __end_of_testLeds:
  6889                           	opt stack 0
  6890                           tosu	equ	0xFFF
  6891                           tosh	equ	0xFFE
  6892                           tosl	equ	0xFFD
  6893                           pclath	equ	0xFFA
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           intcon	equ	0xFF2
  6901                           postinc0	equ	0xFEE
  6902                           wreg	equ	0xFE8
  6903                           indf1	equ	0xFE7
  6904                           postdec1	equ	0xFE5
  6905                           fsr1h	equ	0xFE2
  6906                           fsr1l	equ	0xFE1
  6907                           indf2	equ	0xFDF
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _ResetMcu *****************
  6915 ;; Defined at:
  6916 ;;		line 114 in file "SystemCommon.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6930 ;;      Params:         0       0       0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0
  6933 ;;      Totals:         0       0       0       0       0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    6
  6937 ;; This function calls:
  6938 ;;		_SendAckMessage
  6939 ;; This function is called by:
  6940 ;;		_GroupControlMcu
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text36
  6945  0000'                    __ptext36:
  6946                           	opt stack 0
  6947  0000'                    _ResetMcu:
  6948                           	opt stack 22
  6949                           
  6950                           ;SystemCommon.c: 117: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  6951                           
  6952                           ;incstack = 0
  6953  0000' 0E11               	movlw	17
  6954  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  6955  0004' 0E01               	movlw	1
  6956  0006' EC00' F000'        	call	_SendAckMessage
  6957  000A' 00FF               	reset		;# 
  6958  000C' 0012               	return		;funcret
  6959  000E'                    __end_of_ResetMcu:
  6960                           	opt stack 0
  6961                           tosu	equ	0xFFF
  6962                           tosh	equ	0xFFE
  6963                           tosl	equ	0xFFD
  6964                           pclath	equ	0xFFA
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           postinc0	equ	0xFEE
  6973                           wreg	equ	0xFE8
  6974                           indf1	equ	0xFE7
  6975                           postdec1	equ	0xFE5
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _SetConversionResultFormat *****************
  6986 ;; Defined at:
  6987 ;;		line 38 in file "AdcApp.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  data            2   43[COMRAM] PTR unsigned char 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7001 ;;      Params:         2       0       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0
  7004 ;;      Totals:         2       0       0       0       0       0       0
  7005 ;;Total ram usage:        2 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    6
  7008 ;; This function calls:
  7009 ;;		_SendAckMessage
  7010 ;; This function is called by:
  7011 ;;		_GroupAdc
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text37
  7016  0000'                    __ptext37:
  7017                           	opt stack 0
  7018  0000'                    _SetConversionResultFormat:
  7019                           	opt stack 22
  7020                           
  7021                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7022                           
  7023                           ;incstack = 0
  7024  0000' 0E33               	movlw	51
  7025  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  7026  0004' 0E03               	movlw	3
  7027  0006' EC00' F000'        	call	_SendAckMessage
  7028  000A' 0012               	return		;funcret
  7029  000C'                    __end_of_SetConversionResultFormat:
  7030                           	opt stack 0
  7031                           tosu	equ	0xFFF
  7032                           tosh	equ	0xFFE
  7033                           tosl	equ	0xFFD
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           indf1	equ	0xFE7
  7045                           postdec1	equ	0xFE5
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _SetChannelMode *****************
  7056 ;; Defined at:
  7057 ;;		line 43 in file "AdcApp.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  data            2   43[COMRAM] PTR unsigned char 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      void 
  7064 ;; Registers used:
  7065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7071 ;;      Params:         2       0       0       0       0       0       0
  7072 ;;      Locals:         0       0       0       0       0       0       0
  7073 ;;      Temps:          0       0       0       0       0       0       0
  7074 ;;      Totals:         2       0       0       0       0       0       0
  7075 ;;Total ram usage:        2 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    6
  7078 ;; This function calls:
  7079 ;;		_SendAckMessage
  7080 ;; This function is called by:
  7081 ;;		_GroupAdc
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text38
  7086  0000'                    __ptext38:
  7087                           	opt stack 0
  7088  0000'                    _SetChannelMode:
  7089                           	opt stack 22
  7090                           
  7091                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7092                           
  7093                           ;incstack = 0
  7094  0000' C02B' FFD9         	movff	SetChannelMode@data,fsr2l
  7095  0004' C02C' FFDA         	movff	SetChannelMode@data+1,fsr2h
  7096  0008' 50DF               	movf	indf2,w,c
  7097  000A' 6E0C'              	movwf	_adcSampleMode,c
  7098                           
  7099                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7100  000C' 040C'              	decf	_adcSampleMode,w,c
  7101  000E' A4D8               	btfss	status,2,c
  7102  0010' D009               	goto	l116
  7103                           
  7104                           ;AdcApp.c: 47: {
  7105                           ;AdcApp.c: 48: channel = data[1];
  7106  0012' EE20 F001          	lfsr	2,1
  7107  0016' 502B'              	movf	SetChannelMode@data,w,c
  7108  0018' 26D9               	addwf	fsr2l,f,c
  7109  001A' 502C'              	movf	SetChannelMode@data+1,w,c
  7110  001C' 22DA               	addwfc	fsr2h,f,c
  7111  001E' 50DF               	movf	indf2,w,c
  7112  0020' 0100               	movlb	0	; () banked
  7113  0022' 6F00'              	movwf	_channel& (0+255),b
  7114  0024'                    l116:
  7115                           
  7116                           ;AdcApp.c: 49: }
  7117                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7118                           
  7119                           ; BSR set to: 0
  7120  0024' 0E32               	movlw	50
  7121  0026' 6E23'              	movwf	SendAckMessage@inRequest,c
  7122  0028' 0E03               	movlw	3
  7123  002A' EC00' F000'        	call	_SendAckMessage
  7124  002E' 0012               	return		;funcret
  7125  0030'                    __end_of_SetChannelMode:
  7126                           	opt stack 0
  7127                           tosu	equ	0xFFF
  7128                           tosh	equ	0xFFE
  7129                           tosl	equ	0xFFD
  7130                           pclath	equ	0xFFA
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           postinc0	equ	0xFEE
  7139                           wreg	equ	0xFE8
  7140                           indf1	equ	0xFE7
  7141                           postdec1	equ	0xFE5
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _SetAdcOperationMode *****************
  7152 ;; Defined at:
  7153 ;;		line 33 in file "AdcApp.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  data            2   43[COMRAM] PTR unsigned char 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7167 ;;      Params:         2       0       0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0
  7170 ;;      Totals:         2       0       0       0       0       0       0
  7171 ;;Total ram usage:        2 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    6
  7174 ;; This function calls:
  7175 ;;		_SendAckMessage
  7176 ;; This function is called by:
  7177 ;;		_GroupAdc
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text39
  7182  0000'                    __ptext39:
  7183                           	opt stack 0
  7184  0000'                    _SetAdcOperationMode:
  7185                           	opt stack 22
  7186                           
  7187                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7188                           
  7189                           ;incstack = 0
  7190  0000' 0E31               	movlw	49
  7191  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  7192  0004' 0E03               	movlw	3
  7193  0006' EC00' F000'        	call	_SendAckMessage
  7194  000A' 0012               	return		;funcret
  7195  000C'                    __end_of_SetAdcOperationMode:
  7196                           	opt stack 0
  7197                           tosu	equ	0xFFF
  7198                           tosh	equ	0xFFE
  7199                           tosl	equ	0xFFD
  7200                           pclath	equ	0xFFA
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           intcon	equ	0xFF2
  7208                           postinc0	equ	0xFEE
  7209                           wreg	equ	0xFE8
  7210                           indf1	equ	0xFE7
  7211                           postdec1	equ	0xFE5
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _EUSART1_Read *****************
  7222 ;; Defined at:
  7223 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;		None
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  readValue       2   24[COMRAM] unsigned int 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      unsigned char 
  7230 ;; Registers used:
  7231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7237 ;;      Params:         0       0       0       0       0       0       0
  7238 ;;      Locals:         2       0       0       0       0       0       0
  7239 ;;      Temps:          1       0       0       0       0       0       0
  7240 ;;      Totals:         3       0       0       0       0       0       0
  7241 ;;Total ram usage:        3 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    3
  7244 ;; This function calls:
  7245 ;;		Nothing
  7246 ;; This function is called by:
  7247 ;;		_readUartMessage
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text40
  7252  0000'                    __ptext40:
  7253                           	opt stack 0
  7254  0000'                    _EUSART1_Read:
  7255                           	opt stack 26
  7256                           
  7257                           ;eusart1.c: 112: uint16_t readValue = 0;
  7258                           
  7259                           ;incstack = 0
  7260  0000' 0E00               	movlw	0
  7261  0002' 6E19'              	movwf	EUSART1_Read@readValue+1,c
  7262  0004' 0E00               	movlw	0
  7263  0006' 6E18'              	movwf	EUSART1_Read@readValue,c
  7264                           
  7265                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7266  0008' 0100               	movlb	0	; () banked
  7267  000A' 5100'              	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7268  000C' A4D8               	btfss	status,2,c
  7269  000E' D002               	goto	l830
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;eusart1.c: 120: {
  7273                           ;eusart1.c: 121: return readValue;
  7274  0010' 5018'              	movf	EUSART1_Read@readValue,w,c
  7275                           
  7276                           ; BSR set to: 0
  7277  0012' 0012               	return	
  7278  0014'                    l830:
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;eusart1.c: 122: }
  7282                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7283                           
  7284                           ; BSR set to: 0
  7285  0014' 5006'              	movf	_eusart1RxTail,w,c	;volatile
  7286  0016' 0D01               	mullw	1
  7287  0018' 0E00'              	movlw	low _eusart1RxBuffer
  7288  001A' 24F3               	addwf	prodl,w,c
  7289  001C' 6ED9               	movwf	fsr2l,c
  7290  001E' 0E00'              	movlw	high _eusart1RxBuffer
  7291  0020' 20F4               	addwfc	prodh,w,c
  7292  0022' 6EDA               	movwf	fsr2h,c
  7293  0024' 50DF               	movf	indf2,w,c
  7294  0026' 6E00'              	movwf	??_EUSART1_Read& (0+255),c
  7295  0028' 5017'              	movf	??_EUSART1_Read,w,c
  7296  002A' 6E18'              	movwf	EUSART1_Read@readValue,c
  7297  002C' 6A19'              	clrf	EUSART1_Read@readValue+1,c
  7298                           
  7299                           ; BSR set to: 0
  7300  002E' 2A06'              	incf	_eusart1RxTail,f,c	;volatile
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7304  0030' 0E27               	movlw	39
  7305  0032' 6406'              	cpfsgt	_eusart1RxTail,c	;volatile
  7306  0034' D002               	goto	l832
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;eusart1.c: 126: {
  7310                           ;eusart1.c: 127: eusart1RxTail = 0;
  7311  0036' 0E00               	movlw	0
  7312  0038' 6E06'              	movwf	_eusart1RxTail,c	;volatile
  7313  003A'                    l832:
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;eusart1.c: 128: }
  7317                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7318                           
  7319                           ; BSR set to: 0
  7320  003A' 9A9D               	bcf	3997,5,c	;volatile
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;eusart1.c: 130: eusart1RxCount--;
  7324  003C' 0700'              	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7328  003E' 8A9D               	bsf	3997,5,c	;volatile
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;eusart1.c: 133: return readValue;
  7332  0040' 5018'              	movf	EUSART1_Read@readValue,w,c
  7333  0042' 0012               	return	
  7334  0044'                    __end_of_EUSART1_Read:
  7335                           	opt stack 0
  7336                           tosu	equ	0xFFF
  7337                           tosh	equ	0xFFE
  7338                           tosl	equ	0xFFD
  7339                           pclath	equ	0xFFA
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodh	equ	0xFF4
  7345                           prodl	equ	0xFF3
  7346                           intcon	equ	0xFF2
  7347                           postinc0	equ	0xFEE
  7348                           wreg	equ	0xFE8
  7349                           indf1	equ	0xFE7
  7350                           postdec1	equ	0xFE5
  7351                           fsr1h	equ	0xFE2
  7352                           fsr1l	equ	0xFE1
  7353                           indf2	equ	0xFDF
  7354                           postinc2	equ	0xFDE
  7355                           postdec2	equ	0xFDD
  7356                           fsr2h	equ	0xFDA
  7357                           fsr2l	equ	0xFD9
  7358                           status	equ	0xFD8
  7359                           
  7360 ;; *************** function _keepAliveSignalUart *****************
  7361 ;; Defined at:
  7362 ;;		line 76 in file "SystemStatus.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;		None
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7376 ;;      Params:         0       0       0       0       0       0       0
  7377 ;;      Locals:         0       0       0       0       0       0       0
  7378 ;;      Temps:          0       0       0       0       0       0       0
  7379 ;;      Totals:         0       0       0       0       0       0       0
  7380 ;;Total ram usage:        0 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    6
  7383 ;; This function calls:
  7384 ;;		_SendAckMessage
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text41
  7391  0000'                    __ptext41:
  7392                           	opt stack 0
  7393  0000'                    _keepAliveSignalUart:
  7394                           	opt stack 24
  7395                           
  7396                           ;SystemStatus.c: 78: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;incstack = 0
  7400  0000' 0E15               	movlw	21
  7401  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  7402  0004' 0E01               	movlw	1
  7403  0006' EC00' F000'        	call	_SendAckMessage
  7404  000A' 0012               	return		;funcret
  7405  000C'                    __end_of_keepAliveSignalUart:
  7406                           	opt stack 0
  7407                           tosu	equ	0xFFF
  7408                           tosh	equ	0xFFE
  7409                           tosl	equ	0xFFD
  7410                           pclath	equ	0xFFA
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           intcon	equ	0xFF2
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           indf1	equ	0xFE7
  7421                           postdec1	equ	0xFE5
  7422                           fsr1h	equ	0xFE2
  7423                           fsr1l	equ	0xFE1
  7424                           indf2	equ	0xFDF
  7425                           postinc2	equ	0xFDE
  7426                           postdec2	equ	0xFDD
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _keepAliveSignalLed *****************
  7432 ;; Defined at:
  7433 ;;		line 35 in file "LedsApp.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;		None
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;		None
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      void 
  7440 ;; Registers used:
  7441 ;;		wreg, status,2, status,0
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7447 ;;      Params:         0       0       0       0       0       0       0
  7448 ;;      Locals:         0       0       0       0       0       0       0
  7449 ;;      Temps:          1       0       0       0       0       0       0
  7450 ;;      Totals:         1       0       0       0       0       0       0
  7451 ;;Total ram usage:        1 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    3
  7454 ;; This function calls:
  7455 ;;		Nothing
  7456 ;; This function is called by:
  7457 ;;		_main
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text42
  7462  0000'                    __ptext42:
  7463                           	opt stack 0
  7464  0000'                    _keepAliveSignalLed:
  7465                           	opt stack 27
  7466                           
  7467                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7468                           
  7469                           ;incstack = 0
  7470  0000' B08B               	btfsc	3979,0,c	;volatile
  7471  0002' D003               	goto	u5200
  7472  0004' 6A00'              	clrf	??_keepAliveSignalLed& (0+255),c
  7473  0006' 2A00'              	incf	??_keepAliveSignalLed& (0+255),f,c
  7474  0008' D001               	goto	u5218
  7475  000A'                    u5200:
  7476  000A' 6A00'              	clrf	??_keepAliveSignalLed& (0+255),c
  7477  000C'                    u5218:
  7478  000C' 508B               	movf	3979,w,c	;volatile
  7479  000E' 1817'              	xorwf	??_keepAliveSignalLed,w,c
  7480  0010' 0BFE               	andlw	-2
  7481  0012' 1817'              	xorwf	??_keepAliveSignalLed,w,c
  7482  0014' 6E8B               	movwf	3979,c	;volatile
  7483  0016' 0012               	return		;funcret
  7484  0018'                    __end_of_keepAliveSignalLed:
  7485                           	opt stack 0
  7486                           tosu	equ	0xFFF
  7487                           tosh	equ	0xFFE
  7488                           tosl	equ	0xFFD
  7489                           pclath	equ	0xFFA
  7490                           tblptru	equ	0xFF8
  7491                           tblptrh	equ	0xFF7
  7492                           tblptrl	equ	0xFF6
  7493                           tablat	equ	0xFF5
  7494                           prodh	equ	0xFF4
  7495                           prodl	equ	0xFF3
  7496                           intcon	equ	0xFF2
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           indf1	equ	0xFE7
  7500                           postdec1	equ	0xFE5
  7501                           fsr1h	equ	0xFE2
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _SetMcuSystem *****************
  7511 ;; Defined at:
  7512 ;;		line 11 in file "SystemSettings.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;		None
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      void 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7526 ;;      Params:         0       0       0       0       0       0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0
  7529 ;;      Totals:         0       0       0       0       0       0       0
  7530 ;;Total ram usage:        0 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    6
  7533 ;; This function calls:
  7534 ;;		_SYSTEM_Initialize
  7535 ;; This function is called by:
  7536 ;;		_main
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text43
  7541  0000'                    __ptext43:
  7542                           	opt stack 0
  7543  0000'                    _SetMcuSystem:
  7544                           	opt stack 24
  7545                           
  7546                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7547                           
  7548                           ;incstack = 0
  7549  0000' EC00' F000'        	call	_SYSTEM_Initialize	;wreg free
  7550                           
  7551                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7552  0004' 8EF2               	bsf	intcon,7,c	;volatile
  7553                           
  7554                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7555  0006' 8CF2               	bsf	intcon,6,c	;volatile
  7556  0008' 0012               	return		;funcret
  7557  000A'                    __end_of_SetMcuSystem:
  7558                           	opt stack 0
  7559                           tosu	equ	0xFFF
  7560                           tosh	equ	0xFFE
  7561                           tosl	equ	0xFFD
  7562                           pclath	equ	0xFFA
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           indf1	equ	0xFE7
  7573                           postdec1	equ	0xFE5
  7574                           fsr1h	equ	0xFE2
  7575                           fsr1l	equ	0xFE1
  7576                           indf2	equ	0xFDF
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _SYSTEM_Initialize *****************
  7584 ;; Defined at:
  7585 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7599 ;;      Params:         0       0       0       0       0       0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0
  7601 ;;      Temps:          0       0       0       0       0       0       0
  7602 ;;      Totals:         0       0       0       0       0       0       0
  7603 ;;Total ram usage:        0 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    5
  7606 ;; This function calls:
  7607 ;;		_ADC_Initialize
  7608 ;;		_EUSART1_Initialize
  7609 ;;		_INTERRUPT_Initialize
  7610 ;;		_OSCILLATOR_Initialize
  7611 ;;		_PIN_MANAGER_Initialize
  7612 ;;		_TMR0_Initialize
  7613 ;; This function is called by:
  7614 ;;		_SetMcuSystem
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text44
  7619  0000'                    __ptext44:
  7620                           	opt stack 0
  7621  0000'                    _SYSTEM_Initialize:
  7622                           	opt stack 24
  7623                           
  7624                           ;mcc.c: 114: INTERRUPT_Initialize();
  7625                           
  7626                           ;incstack = 0
  7627  0000' EC00' F000'        	call	_INTERRUPT_Initialize	;wreg free
  7628                           
  7629                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7630  0004' EC00' F000'        	call	_PIN_MANAGER_Initialize	;wreg free
  7631                           
  7632                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7633  0008' EC00' F000'        	call	_OSCILLATOR_Initialize	;wreg free
  7634                           
  7635                           ;mcc.c: 117: ADC_Initialize();
  7636  000C' EC00' F000'        	call	_ADC_Initialize	;wreg free
  7637                           
  7638                           ;mcc.c: 118: TMR0_Initialize();
  7639  0010' EC00' F000'        	call	_TMR0_Initialize	;wreg free
  7640                           
  7641                           ;mcc.c: 119: EUSART1_Initialize();
  7642  0014' EC00' F000'        	call	_EUSART1_Initialize	;wreg free
  7643  0018' 0012               	return		;funcret
  7644  001A'                    __end_of_SYSTEM_Initialize:
  7645                           	opt stack 0
  7646                           tosu	equ	0xFFF
  7647                           tosh	equ	0xFFE
  7648                           tosl	equ	0xFFD
  7649                           pclath	equ	0xFFA
  7650                           tblptru	equ	0xFF8
  7651                           tblptrh	equ	0xFF7
  7652                           tblptrl	equ	0xFF6
  7653                           tablat	equ	0xFF5
  7654                           prodh	equ	0xFF4
  7655                           prodl	equ	0xFF3
  7656                           intcon	equ	0xFF2
  7657                           postinc0	equ	0xFEE
  7658                           wreg	equ	0xFE8
  7659                           indf1	equ	0xFE7
  7660                           postdec1	equ	0xFE5
  7661                           fsr1h	equ	0xFE2
  7662                           fsr1l	equ	0xFE1
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function _TMR0_Initialize *****************
  7671 ;; Defined at:
  7672 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;		None
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      void 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7686 ;;      Params:         0       0       0       0       0       0       0
  7687 ;;      Locals:         0       0       0       0       0       0       0
  7688 ;;      Temps:          2       0       0       0       0       0       0
  7689 ;;      Totals:         2       0       0       0       0       0       0
  7690 ;;Total ram usage:        2 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    4
  7693 ;; This function calls:
  7694 ;;		_TMR0_SetInterruptHandler
  7695 ;; This function is called by:
  7696 ;;		_SYSTEM_Initialize
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text45
  7701  0000'                    __ptext45:
  7702                           	opt stack 0
  7703  0000'                    _TMR0_Initialize:
  7704                           	opt stack 24
  7705                           
  7706                           ;tmr0.c: 71: TMR0H = 0x3C;
  7707                           
  7708                           ;incstack = 0
  7709  0000' 0E3C               	movlw	60
  7710  0002' 6ED7               	movwf	4055,c	;volatile
  7711                           
  7712                           ;tmr0.c: 74: TMR0L = 0xAF;
  7713  0004' 0EAF               	movlw	175
  7714  0006' 6ED6               	movwf	4054,c	;volatile
  7715                           
  7716                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7717  0008' 50D6               	movf	4054,w,c	;volatile
  7718  000A' CFD7 F019'         	movff	4055,??_TMR0_Initialize	;volatile
  7719  000E' 6A00'              	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7720  0010' C019' F01A'        	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7721  0014' 6A19'              	clrf	??_TMR0_Initialize,c
  7722  0016' 1019'              	iorwf	??_TMR0_Initialize,w,c
  7723  0018' 6E00'              	movwf	_timer0ReloadVal,c	;volatile
  7724  001A' 501A'              	movf	??_TMR0_Initialize+1,w,c
  7725  001C' 6E01'              	movwf	_timer0ReloadVal+1,c	;volatile
  7726                           
  7727                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7728  001E' 94F2               	bcf	intcon,2,c	;volatile
  7729                           
  7730                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7731  0020' 8AF2               	bsf	intcon,5,c	;volatile
  7732                           
  7733                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7734  0022' 0E00               	movlw	0
  7735  0024' 6E17'              	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7736  0026' 0E00               	movlw	0
  7737  0028' 6E18'              	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7738  002A' EC00' F000'        	call	_TMR0_SetInterruptHandler	;wreg free
  7739                           
  7740                           ;tmr0.c: 90: T0CON = 0x90;
  7741  002E' 0E90               	movlw	144
  7742  0030' 6ED5               	movwf	4053,c	;volatile
  7743  0032' 0012               	return		;funcret
  7744  0034'                    __end_of_TMR0_Initialize:
  7745                           	opt stack 0
  7746                           tosu	equ	0xFFF
  7747                           tosh	equ	0xFFE
  7748                           tosl	equ	0xFFD
  7749                           pclath	equ	0xFFA
  7750                           tblptru	equ	0xFF8
  7751                           tblptrh	equ	0xFF7
  7752                           tblptrl	equ	0xFF6
  7753                           tablat	equ	0xFF5
  7754                           prodh	equ	0xFF4
  7755                           prodl	equ	0xFF3
  7756                           intcon	equ	0xFF2
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           indf1	equ	0xFE7
  7760                           postdec1	equ	0xFE5
  7761                           fsr1h	equ	0xFE2
  7762                           fsr1l	equ	0xFE1
  7763                           indf2	equ	0xFDF
  7764                           postinc2	equ	0xFDE
  7765                           postdec2	equ	0xFDD
  7766                           fsr2h	equ	0xFDA
  7767                           fsr2l	equ	0xFD9
  7768                           status	equ	0xFD8
  7769                           
  7770 ;; *************** function _TMR0_SetInterruptHandler *****************
  7771 ;; Defined at:
  7772 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7775 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      void 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7787 ;;      Params:         2       0       0       0       0       0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0
  7789 ;;      Temps:          0       0       0       0       0       0       0
  7790 ;;      Totals:         2       0       0       0       0       0       0
  7791 ;;Total ram usage:        2 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    3
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_TMR0_Initialize
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           	psect	text46
  7802  0000'                    __ptext46:
  7803                           	opt stack 0
  7804  0000'                    _TMR0_SetInterruptHandler:
  7805                           	opt stack 24
  7806                           
  7807                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7808                           
  7809                           ;incstack = 0
  7810  0000' C017' F000'        	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7811  0004' C018' F001'        	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7812  0008' 0012               	return		;funcret
  7813  000A'                    __end_of_TMR0_SetInterruptHandler:
  7814                           	opt stack 0
  7815                           tosu	equ	0xFFF
  7816                           tosh	equ	0xFFE
  7817                           tosl	equ	0xFFD
  7818                           pclath	equ	0xFFA
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           intcon	equ	0xFF2
  7826                           postinc0	equ	0xFEE
  7827                           wreg	equ	0xFE8
  7828                           indf1	equ	0xFE7
  7829                           postdec1	equ	0xFE5
  7830                           fsr1h	equ	0xFE2
  7831                           fsr1l	equ	0xFE1
  7832                           indf2	equ	0xFDF
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _PIN_MANAGER_Initialize *****************
  7840 ;; Defined at:
  7841 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;		None
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;		None
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, status,2
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7855 ;;      Params:         0       0       0       0       0       0       0
  7856 ;;      Locals:         0       0       0       0       0       0       0
  7857 ;;      Temps:          0       0       0       0       0       0       0
  7858 ;;      Totals:         0       0       0       0       0       0       0
  7859 ;;Total ram usage:        0 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    3
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_SYSTEM_Initialize
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text47
  7870  0000'                    __ptext47:
  7871                           	opt stack 0
  7872  0000'                    _PIN_MANAGER_Initialize:
  7873                           	opt stack 25
  7874                           
  7875                           ;pin_manager.c: 57: LATE = 0x00;
  7876                           
  7877                           ;incstack = 0
  7878  0000' 0E00               	movlw	0
  7879  0002' 6E8D               	movwf	3981,c	;volatile
  7880                           
  7881                           ;pin_manager.c: 58: LATD = 0x00;
  7882  0004' 0E00               	movlw	0
  7883  0006' 6E8C               	movwf	3980,c	;volatile
  7884                           
  7885                           ;pin_manager.c: 59: LATA = 0x06;
  7886  0008' 0E06               	movlw	6
  7887  000A' 6E89               	movwf	3977,c	;volatile
  7888                           
  7889                           ;pin_manager.c: 60: LATB = 0x00;
  7890  000C' 0E00               	movlw	0
  7891  000E' 6E8A               	movwf	3978,c	;volatile
  7892                           
  7893                           ;pin_manager.c: 61: LATC = 0x00;
  7894  0010' 0E00               	movlw	0
  7895  0012' 6E8B               	movwf	3979,c	;volatile
  7896                           
  7897                           ;pin_manager.c: 66: TRISE = 0x07;
  7898  0014' 0E07               	movlw	7
  7899  0016' 6E96               	movwf	3990,c	;volatile
  7900                           
  7901                           ;pin_manager.c: 67: TRISA = 0xE1;
  7902  0018' 0EE1               	movlw	225
  7903  001A' 6E92               	movwf	3986,c	;volatile
  7904                           
  7905                           ;pin_manager.c: 68: TRISB = 0xEF;
  7906  001C' 0EEF               	movlw	239
  7907  001E' 6E93               	movwf	3987,c	;volatile
  7908                           
  7909                           ;pin_manager.c: 69: TRISC = 0x80;
  7910  0020' 0E80               	movlw	128
  7911  0022' 6E94               	movwf	3988,c	;volatile
  7912                           
  7913                           ;pin_manager.c: 70: TRISD = 0xF2;
  7914  0024' 0EF2               	movlw	242
  7915  0026' 6E95               	movwf	3989,c	;volatile
  7916                           
  7917                           ;pin_manager.c: 75: ANSELC = 0x34;
  7918  0028' 0E34               	movlw	52
  7919  002A' 010F               	movlb	15	; () banked
  7920  002C' 6F3A               	movwf	58,b	;volatile
  7921                           
  7922                           ;pin_manager.c: 76: ANSELB = 0x32;
  7923  002E' 0E32               	movlw	50
  7924  0030' 6F39               	movwf	57,b	;volatile
  7925                           
  7926                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7927  0032' 0EE4               	movlw	228
  7928  0034' 6F3B               	movwf	59,b	;volatile
  7929                           
  7930                           ;pin_manager.c: 78: ANSELE = 0x07;
  7931  0036' 0E07               	movlw	7
  7932  0038' 6F3C               	movwf	60,b	;volatile
  7933                           
  7934                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7935  003A' 0E2F               	movlw	47
  7936  003C' 6F38               	movwf	56,b	;volatile
  7937                           
  7938                           ;pin_manager.c: 84: WPUB = 0xC3;
  7939  003E' 0EC3               	movlw	195
  7940  0040' 6E61               	movwf	3937,c	;volatile
  7941                           
  7942                           ; BSR set to: 15
  7943                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7944  0042' 9EF1               	bcf	intcon2,7,c	;volatile
  7945                           
  7946                           ; BSR set to: 15
  7947                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7948  0044' 86F2               	bsf	intcon,3,c	;volatile
  7949                           
  7950                           ; BSR set to: 15
  7951  0046' 0012               	return		;funcret
  7952  0048'                    __end_of_PIN_MANAGER_Initialize:
  7953                           	opt stack 0
  7954                           tosu	equ	0xFFF
  7955                           tosh	equ	0xFFE
  7956                           tosl	equ	0xFFD
  7957                           pclath	equ	0xFFA
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodh	equ	0xFF4
  7963                           prodl	equ	0xFF3
  7964                           intcon	equ	0xFF2
  7965                           intcon2	equ	0xFF1
  7966                           postinc0	equ	0xFEE
  7967                           wreg	equ	0xFE8
  7968                           indf1	equ	0xFE7
  7969                           postdec1	equ	0xFE5
  7970                           fsr1h	equ	0xFE2
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function _OSCILLATOR_Initialize *****************
  7980 ;; Defined at:
  7981 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7995 ;;      Params:         0       0       0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0       0
  7998 ;;      Totals:         0       0       0       0       0       0       0
  7999 ;;Total ram usage:        0 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    3
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		_SYSTEM_Initialize
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text48
  8010  0000'                    __ptext48:
  8011                           	opt stack 0
  8012  0000'                    _OSCILLATOR_Initialize:
  8013                           	opt stack 25
  8014                           
  8015                           ;mcc.c: 125: OSCCON = 0x60;
  8016                           
  8017                           ; BSR set to: 15
  8018                           ;incstack = 0
  8019  0000' 0E60               	movlw	96
  8020  0002' 6ED3               	movwf	4051,c	;volatile
  8021                           
  8022                           ;mcc.c: 127: OSCCON2 = 0x04;
  8023  0004' 0E04               	movlw	4
  8024  0006' 6ED2               	movwf	4050,c	;volatile
  8025                           
  8026                           ;mcc.c: 129: OSCTUNE = 0x80;
  8027  0008' 0E80               	movlw	128
  8028  000A' 6E9B               	movwf	3995,c	;volatile
  8029  000C' 0012               	return		;funcret
  8030  000E'                    __end_of_OSCILLATOR_Initialize:
  8031                           	opt stack 0
  8032                           tosu	equ	0xFFF
  8033                           tosh	equ	0xFFE
  8034                           tosl	equ	0xFFD
  8035                           pclath	equ	0xFFA
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           intcon	equ	0xFF2
  8043                           intcon2	equ	0xFF1
  8044                           postinc0	equ	0xFEE
  8045                           wreg	equ	0xFE8
  8046                           indf1	equ	0xFE7
  8047                           postdec1	equ	0xFE5
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function _INTERRUPT_Initialize *****************
  8058 ;; Defined at:
  8059 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;		None
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;		None
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  1    wreg      void 
  8066 ;; Registers used:
  8067 ;;		None
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8073 ;;      Params:         0       0       0       0       0       0       0
  8074 ;;      Locals:         0       0       0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0
  8076 ;;      Totals:         0       0       0       0       0       0       0
  8077 ;;Total ram usage:        0 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    3
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_SYSTEM_Initialize
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text49
  8088  0000'                    __ptext49:
  8089                           	opt stack 0
  8090  0000'                    _INTERRUPT_Initialize:
  8091                           	opt stack 25
  8092                           
  8093                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8094                           
  8095                           ;incstack = 0
  8096  0000' 9ED0               	bcf	4048,7,c	;volatile
  8097  0002' 0012               	return		;funcret
  8098  0004'                    __end_of_INTERRUPT_Initialize:
  8099                           	opt stack 0
  8100                           tosu	equ	0xFFF
  8101                           tosh	equ	0xFFE
  8102                           tosl	equ	0xFFD
  8103                           pclath	equ	0xFFA
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           intcon2	equ	0xFF1
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           indf1	equ	0xFE7
  8115                           postdec1	equ	0xFE5
  8116                           fsr1h	equ	0xFE2
  8117                           fsr1l	equ	0xFE1
  8118                           indf2	equ	0xFDF
  8119                           postinc2	equ	0xFDE
  8120                           postdec2	equ	0xFDD
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function _EUSART1_Initialize *****************
  8126 ;; Defined at:
  8127 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      void 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8141 ;;      Params:         0       0       0       0       0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0
  8144 ;;      Totals:         0       0       0       0       0       0       0
  8145 ;;Total ram usage:        0 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    3
  8148 ;; This function calls:
  8149 ;;		Nothing
  8150 ;; This function is called by:
  8151 ;;		_SYSTEM_Initialize
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text50
  8156  0000'                    __ptext50:
  8157                           	opt stack 0
  8158  0000'                    _EUSART1_Initialize:
  8159                           	opt stack 25
  8160                           
  8161                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8162                           
  8163                           ;incstack = 0
  8164  0000' 9A9D               	bcf	3997,5,c	;volatile
  8165                           
  8166                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8167  0002' 989D               	bcf	3997,4,c	;volatile
  8168                           
  8169                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8170  0004' 0E08               	movlw	8
  8171  0006' 6EB8               	movwf	4024,c	;volatile
  8172                           
  8173                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8174  0008' 0E90               	movlw	144
  8175  000A' 6EAB               	movwf	4011,c	;volatile
  8176                           
  8177                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8178  000C' 0E24               	movlw	36
  8179  000E' 6EAC               	movwf	4012,c	;volatile
  8180                           
  8181                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8182  0010' 0E10               	movlw	16
  8183  0012' 6EAF               	movwf	4015,c	;volatile
  8184                           
  8185                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8186  0014' 0E00               	movlw	0
  8187  0016' 6EB0               	movwf	4016,c	;volatile
  8188                           
  8189                           ;eusart1.c: 98: eusart1TxHead = 0;
  8190  0018' 0E00               	movlw	0
  8191  001A' 6E09'              	movwf	_eusart1TxHead,c	;volatile
  8192                           
  8193                           ;eusart1.c: 99: eusart1TxTail = 0;
  8194  001C' 0E00               	movlw	0
  8195  001E' 6E08'              	movwf	_eusart1TxTail,c	;volatile
  8196                           
  8197                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8198  0020' 0E46               	movlw	70
  8199  0022' 0100               	movlb	0	; () banked
  8200  0024' 6F00'              	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8201                           
  8202                           ;eusart1.c: 102: eusart1RxHead = 0;
  8203  0026' 0E00               	movlw	0
  8204  0028' 6E07'              	movwf	_eusart1RxHead,c	;volatile
  8205                           
  8206                           ;eusart1.c: 103: eusart1RxTail = 0;
  8207  002A' 0E00               	movlw	0
  8208  002C' 6E06'              	movwf	_eusart1RxTail,c	;volatile
  8209                           
  8210                           ;eusart1.c: 104: eusart1RxCount = 0;
  8211  002E' 0E00               	movlw	0
  8212  0030' 6F00'              	movwf	_eusart1RxCount& (0+255),b	;volatile
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8216  0032' 8A9D               	bsf	3997,5,c	;volatile
  8217                           
  8218                           ; BSR set to: 0
  8219  0034' 0012               	return		;funcret
  8220  0036'                    __end_of_EUSART1_Initialize:
  8221                           	opt stack 0
  8222                           tosu	equ	0xFFF
  8223                           tosh	equ	0xFFE
  8224                           tosl	equ	0xFFD
  8225                           pclath	equ	0xFFA
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           intcon	equ	0xFF2
  8233                           intcon2	equ	0xFF1
  8234                           postinc0	equ	0xFEE
  8235                           wreg	equ	0xFE8
  8236                           indf1	equ	0xFE7
  8237                           postdec1	equ	0xFE5
  8238                           fsr1h	equ	0xFE2
  8239                           fsr1l	equ	0xFE1
  8240                           indf2	equ	0xFDF
  8241                           postinc2	equ	0xFDE
  8242                           postdec2	equ	0xFDD
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function _ADC_Initialize *****************
  8248 ;; Defined at:
  8249 ;;		line 58 in file "mcc_generated_files/adc.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;		None
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8263 ;;      Params:         0       0       0       0       0       0       0
  8264 ;;      Locals:         0       0       0       0       0       0       0
  8265 ;;      Temps:          0       0       0       0       0       0       0
  8266 ;;      Totals:         0       0       0       0       0       0       0
  8267 ;;Total ram usage:        0 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    3
  8270 ;; This function calls:
  8271 ;;		Nothing
  8272 ;; This function is called by:
  8273 ;;		_SYSTEM_Initialize
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text51
  8278  0000'                    __ptext51:
  8279                           	opt stack 0
  8280  0000'                    _ADC_Initialize:
  8281                           	opt stack 25
  8282                           
  8283                           ;adc.c: 63: ADCON0 = 0x05;
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;incstack = 0
  8287  0000' 0E05               	movlw	5
  8288  0002' 6EC2               	movwf	4034,c	;volatile
  8289                           
  8290                           ;adc.c: 66: ADCON1 = 0x00;
  8291  0004' 0E00               	movlw	0
  8292  0006' 6EC1               	movwf	4033,c	;volatile
  8293                           
  8294                           ;adc.c: 69: ADCON2 = 0x87;
  8295  0008' 0E87               	movlw	135
  8296  000A' 6EC0               	movwf	4032,c	;volatile
  8297                           
  8298                           ;adc.c: 72: ADRESL = 0x00;
  8299  000C' 0E00               	movlw	0
  8300  000E' 6EC3               	movwf	4035,c	;volatile
  8301                           
  8302                           ;adc.c: 75: ADRESH = 0x00;
  8303  0010' 0E00               	movlw	0
  8304  0012' 6EC4               	movwf	4036,c	;volatile
  8305  0014' 0012               	return		;funcret
  8306  0016'                    __end_of_ADC_Initialize:
  8307                           	opt stack 0
  8308                           tosu	equ	0xFFF
  8309                           tosh	equ	0xFFE
  8310                           tosl	equ	0xFFD
  8311                           pclath	equ	0xFFA
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           intcon	equ	0xFF2
  8319                           intcon2	equ	0xFF1
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           indf1	equ	0xFE7
  8323                           postdec1	equ	0xFE5
  8324                           fsr1h	equ	0xFE2
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _SetMcuRunTime *****************
  8334 ;; Defined at:
  8335 ;;		line 40 in file "SystemStatus.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8349 ;;      Params:         0       0       0       0       0       0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    4
  8356 ;; This function calls:
  8357 ;;		___llmod
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text52
  8364  0000'                    __ptext52:
  8365                           	opt stack 0
  8366  0000'                    _SetMcuRunTime:
  8367                           	opt stack 26
  8368                           
  8369                           ;SystemStatus.c: 42: mcuRunTimeIn5SecTicks++;
  8370                           
  8371                           ;incstack = 0
  8372  0000' 0E01               	movlw	1
  8373  0002' 0100               	movlb	0	; () banked
  8374  0004' 2700'              	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8375  0006' 0E00               	movlw	0
  8376  0008' 2300'              	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8377  000A' 2300'              	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8378  000C' 2300'              	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;SystemStatus.c: 43: mcuRunTimeIn5SecTicks %= (17280);
  8382  000E' C000' F017'        	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8383  0012' C001' F018'        	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8384  0016' C002' F019'        	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8385  001A' C003' F01A'        	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8386  001E' 0E80               	movlw	128
  8387  0020' 6E1B'              	movwf	___llmod@divisor,c
  8388  0022' 0E43               	movlw	67
  8389  0024' 6E1C'              	movwf	___llmod@divisor+1,c
  8390  0026' 0E00               	movlw	0
  8391  0028' 6E1D'              	movwf	___llmod@divisor+2,c
  8392  002A' 0E00               	movlw	0
  8393  002C' 6E1E'              	movwf	___llmod@divisor+3,c
  8394  002E' EC00' F000'        	call	___llmod	;wreg free
  8395  0032' C017' F000'        	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8396  0036' C018' F001'        	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8397  003A' C019' F002'        	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8398  003E' C01A' F003'        	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8399  0042' 0012               	return		;funcret
  8400  0044'                    __end_of_SetMcuRunTime:
  8401                           	opt stack 0
  8402                           tosu	equ	0xFFF
  8403                           tosh	equ	0xFFE
  8404                           tosl	equ	0xFFD
  8405                           pclath	equ	0xFFA
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           intcon2	equ	0xFF1
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           indf1	equ	0xFE7
  8417                           postdec1	equ	0xFE5
  8418                           fsr1h	equ	0xFE2
  8419                           fsr1l	equ	0xFE1
  8420                           indf2	equ	0xFDF
  8421                           postinc2	equ	0xFDE
  8422                           postdec2	equ	0xFDD
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function ___llmod *****************
  8428 ;; Defined at:
  8429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  dividend        4   23[COMRAM] unsigned long 
  8432 ;;  divisor         4   27[COMRAM] unsigned long 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  counter         1   31[COMRAM] unsigned char 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  4   23[COMRAM] unsigned long 
  8437 ;; Registers used:
  8438 ;;		wreg, status,2, status,0
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8444 ;;      Params:         8       0       0       0       0       0       0
  8445 ;;      Locals:         1       0       0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0
  8447 ;;      Totals:         9       0       0       0       0       0       0
  8448 ;;Total ram usage:        9 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    3
  8451 ;; This function calls:
  8452 ;;		Nothing
  8453 ;; This function is called by:
  8454 ;;		_SetMcuRunTime
  8455 ;;		_GetMcuRunTime
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text53
  8460  0000'                    __ptext53:
  8461                           	opt stack 0
  8462  0000'                    ___llmod:
  8463                           	opt stack 24
  8464                           
  8465                           ;incstack = 0
  8466  0000' 501B'              	movf	___llmod@divisor,w,c
  8467  0002' 101C'              	iorwf	___llmod@divisor+1,w,c
  8468  0004' 101D'              	iorwf	___llmod@divisor+2,w,c
  8469  0006' 101E'              	iorwf	___llmod@divisor+3,w,c
  8470  0008' B4D8               	btfsc	status,2,c
  8471  000A' D024               	goto	l1814
  8472  000C' 0E01               	movlw	1
  8473  000E' 6E1F'              	movwf	___llmod@counter,c
  8474  0010' D006               	goto	l1809
  8475  0012' 90D8               	bcf	status,0,c
  8476  0014' 361B'              	rlcf	___llmod@divisor,f,c
  8477  0016' 361C'              	rlcf	___llmod@divisor+1,f,c
  8478  0018' 361D'              	rlcf	___llmod@divisor+2,f,c
  8479  001A' 361E'              	rlcf	___llmod@divisor+3,f,c
  8480  001C' 2A1F'              	incf	___llmod@counter,f,c
  8481  001E'                    l1809:
  8482  001E' AE1E'              	btfss	___llmod@divisor+3,7,c
  8483  0020' D7F8               	goto	l1810
  8484  0022'                    u7010:
  8485  0022' 501B'              	movf	___llmod@divisor,w,c
  8486  0024' 5C17'              	subwf	___llmod@dividend,w,c
  8487  0026' 501C'              	movf	___llmod@divisor+1,w,c
  8488  0028' 5818'              	subwfb	___llmod@dividend+1,w,c
  8489  002A' 501D'              	movf	___llmod@divisor+2,w,c
  8490  002C' 5819'              	subwfb	___llmod@dividend+2,w,c
  8491  002E' 501E'              	movf	___llmod@divisor+3,w,c
  8492  0030' 581A'              	subwfb	___llmod@dividend+3,w,c
  8493  0032' A0D8               	btfss	status,0,c
  8494  0034' D008               	goto	l1813
  8495  0036' 501B'              	movf	___llmod@divisor,w,c
  8496  0038' 5E17'              	subwf	___llmod@dividend,f,c
  8497  003A' 501C'              	movf	___llmod@divisor+1,w,c
  8498  003C' 5A18'              	subwfb	___llmod@dividend+1,f,c
  8499  003E' 501D'              	movf	___llmod@divisor+2,w,c
  8500  0040' 5A19'              	subwfb	___llmod@dividend+2,f,c
  8501  0042' 501E'              	movf	___llmod@divisor+3,w,c
  8502  0044' 5A1A'              	subwfb	___llmod@dividend+3,f,c
  8503  0046'                    l1813:
  8504  0046' 90D8               	bcf	status,0,c
  8505  0048' 321E'              	rrcf	___llmod@divisor+3,f,c
  8506  004A' 321D'              	rrcf	___llmod@divisor+2,f,c
  8507  004C' 321C'              	rrcf	___llmod@divisor+1,f,c
  8508  004E' 321B'              	rrcf	___llmod@divisor,f,c
  8509  0050' 2E1F'              	decfsz	___llmod@counter,f,c
  8510  0052' D7E7               	goto	u7010
  8511  0054'                    l1814:
  8512  0054' C017' F017'        	movff	___llmod@dividend,?___llmod
  8513  0058' C018' F018'        	movff	___llmod@dividend+1,?___llmod+1
  8514  005C' C019' F019'        	movff	___llmod@dividend+2,?___llmod+2
  8515  0060' C01A' F01A'        	movff	___llmod@dividend+3,?___llmod+3
  8516  0064' 0012               	return		;funcret
  8517  0066'                    __end_of___llmod:
  8518                           	opt stack 0
  8519                           tosu	equ	0xFFF
  8520                           tosh	equ	0xFFE
  8521                           tosl	equ	0xFFD
  8522                           pclath	equ	0xFFA
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon2	equ	0xFF1
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           indf1	equ	0xFE7
  8534                           postdec1	equ	0xFE5
  8535                           fsr1h	equ	0xFE2
  8536                           fsr1l	equ	0xFE1
  8537                           indf2	equ	0xFDF
  8538                           postinc2	equ	0xFDE
  8539                           postdec2	equ	0xFDD
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function _SendSystemStartAck *****************
  8545 ;; Defined at:
  8546 ;;		line 123 in file "SystemCommon.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;		None
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      void 
  8553 ;; Registers used:
  8554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8560 ;;      Params:         0       0       0       0       0       0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0
  8563 ;;      Totals:         0       0       0       0       0       0       0
  8564 ;;Total ram usage:        0 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    6
  8567 ;; This function calls:
  8568 ;;		_SendAckMessage
  8569 ;; This function is called by:
  8570 ;;		_main
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text54
  8575  0000'                    __ptext54:
  8576                           	opt stack 0
  8577  0000'                    _SendSystemStartAck:
  8578                           	opt stack 24
  8579                           
  8580                           ;SystemCommon.c: 125: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8581                           
  8582                           ;incstack = 0
  8583  0000' 0E10               	movlw	16
  8584  0002' 6E23'              	movwf	SendAckMessage@inRequest,c
  8585  0004' 0E01               	movlw	1
  8586  0006' EC00' F000'        	call	_SendAckMessage
  8587  000A' 0012               	return		;funcret
  8588  000C'                    __end_of_SendSystemStartAck:
  8589                           	opt stack 0
  8590                           tosu	equ	0xFFF
  8591                           tosh	equ	0xFFE
  8592                           tosl	equ	0xFFD
  8593                           pclath	equ	0xFFA
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           intcon	equ	0xFF2
  8601                           intcon2	equ	0xFF1
  8602                           postinc0	equ	0xFEE
  8603                           wreg	equ	0xFE8
  8604                           indf1	equ	0xFE7
  8605                           postdec1	equ	0xFE5
  8606                           fsr1h	equ	0xFE2
  8607                           fsr1l	equ	0xFE1
  8608                           indf2	equ	0xFDF
  8609                           postinc2	equ	0xFDE
  8610                           postdec2	equ	0xFDD
  8611                           fsr2h	equ	0xFDA
  8612                           fsr2l	equ	0xFD9
  8613                           status	equ	0xFD8
  8614                           
  8615 ;; *************** function _SendAckMessage *****************
  8616 ;; Defined at:
  8617 ;;		line 171 in file "EusartApp.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  inGroup         1    wreg     enum E7163
  8620 ;;  inRequest       1   35[COMRAM] enum E7171
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  inGroup         1   36[COMRAM] enum E7163
  8623 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8633 ;;      Params:         1       0       0       0       0       0       0
  8634 ;;      Locals:         7       0       0       0       0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0
  8636 ;;      Totals:         8       0       0       0       0       0       0
  8637 ;;Total ram usage:        8 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    5
  8640 ;; This function calls:
  8641 ;;		_WriteUartMessage
  8642 ;;		_ZeroArray
  8643 ;;		_crc8
  8644 ;; This function is called by:
  8645 ;;		_testLeds
  8646 ;;		_SetAdcOperationMode
  8647 ;;		_SetConversionResultFormat
  8648 ;;		_SetChannelMode
  8649 ;;		_FlashReadUart
  8650 ;;		_FlashEreaseMem
  8651 ;;		_DacSetValue
  8652 ;;		_UpdateTxFreq
  8653 ;;		_UpdateRxFreq
  8654 ;;		_SetSynthTxOper
  8655 ;;		_SetSynthRxOper
  8656 ;;		_ResetMcu
  8657 ;;		_SendSystemStartAck
  8658 ;;		_keepAliveSignalUart
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text55
  8663  0000'                    __ptext55:
  8664                           	opt stack 0
  8665  0000'                    _SendAckMessage:
  8666                           	opt stack 22
  8667                           
  8668                           ;incstack = 0
  8669                           ;SendAckMessage@inGroup stored from wreg
  8670  0000' 6E24'              	movwf	SendAckMessage@inGroup,c
  8671                           
  8672                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8673                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8674  0002' 0E00'              	movlw	low SendAckMessage@TxMsg
  8675  0004' 6E1F'              	movwf	ZeroArray@array,c
  8676  0006' 0E00'              	movlw	high SendAckMessage@TxMsg
  8677  0008' 6E20'              	movwf	ZeroArray@array+1,c
  8678  000A' 0E00               	movlw	0
  8679  000C' 6E22'              	movwf	ZeroArray@size+1,c
  8680  000E' 0E06               	movlw	6
  8681  0010' 6E21'              	movwf	ZeroArray@size,c
  8682  0012' EC00' F000'        	call	_ZeroArray	;wreg free
  8683                           
  8684                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8685  0016' 0E24               	movlw	36
  8686  0018' 6E25'              	movwf	SendAckMessage@TxMsg,c
  8687                           
  8688                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8689  001A' C024' F026'        	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8690                           
  8691                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8692  001E' C023' F027'        	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8693                           
  8694                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8695  0022' 0E00               	movlw	0
  8696  0024' 6E28'              	movwf	SendAckMessage@TxMsg+3,c
  8697                           
  8698                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8699  0026' 0E00'              	movlw	low SendAckMessage@TxMsg
  8700  0028' 6E17'              	movwf	crc8@dataArray,c
  8701  002A' 0E00'              	movlw	high SendAckMessage@TxMsg
  8702  002C' 6E18'              	movwf	crc8@dataArray+1,c
  8703  002E' 0E00               	movlw	0
  8704  0030' 6E1A'              	movwf	crc8@dataSize+1,c
  8705  0032' 0E05               	movlw	5
  8706  0034' 6E19'              	movwf	crc8@dataSize,c
  8707  0036' EC00' F000'        	call	_crc8	;wreg free
  8708  003A' 6E2A'              	movwf	SendAckMessage@TxMsg+5,c
  8709                           
  8710                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8711  003C' 0E00'              	movlw	low SendAckMessage@TxMsg
  8712  003E' 6E18'              	movwf	WriteUartMessage@dataBuf,c
  8713  0040' 0E00'              	movlw	high SendAckMessage@TxMsg
  8714  0042' 6E19'              	movwf	WriteUartMessage@dataBuf+1,c
  8715  0044' 0E00               	movlw	0
  8716  0046' 6E1B'              	movwf	WriteUartMessage@dataSize+1,c
  8717  0048' 0E06               	movlw	6
  8718  004A' 6E1A'              	movwf	WriteUartMessage@dataSize,c
  8719  004C' EC00' F000'        	call	_WriteUartMessage	;wreg free
  8720  0050' 0012               	return		;funcret
  8721  0052'                    __end_of_SendAckMessage:
  8722                           	opt stack 0
  8723                           tosu	equ	0xFFF
  8724                           tosh	equ	0xFFE
  8725                           tosl	equ	0xFFD
  8726                           pclath	equ	0xFFA
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           intcon	equ	0xFF2
  8734                           intcon2	equ	0xFF1
  8735                           postinc0	equ	0xFEE
  8736                           wreg	equ	0xFE8
  8737                           indf1	equ	0xFE7
  8738                           postdec1	equ	0xFE5
  8739                           fsr1h	equ	0xFE2
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _crc8 *****************
  8749 ;; Defined at:
  8750 ;;		line 13 in file "SystemCommon.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8753 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  8754 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8755 ;;  dataSize        2   25[COMRAM] int 
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;  i               2   30[COMRAM] int 
  8758 ;;  crc             2   28[COMRAM] int 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      unsigned char 
  8761 ;; Registers used:
  8762 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8768 ;;      Params:         4       0       0       0       0       0       0
  8769 ;;      Locals:         4       0       0       0       0       0       0
  8770 ;;      Temps:          1       0       0       0       0       0       0
  8771 ;;      Totals:         9       0       0       0       0       0       0
  8772 ;;Total ram usage:        9 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    3
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_readUartMessage
  8779 ;;		_SendAckMessage
  8780 ;;		_FlashReadUart
  8781 ;;		_FlashReadCondition
  8782 ;;		_SynthReadData
  8783 ;;		_GetMcuFwVersion
  8784 ;;		_GetMcuRunTime
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text56
  8789  0000'                    __ptext56:
  8790                           	opt stack 0
  8791  0000'                    _crc8:
  8792                           	opt stack 26
  8793                           
  8794                           ;SystemCommon.c: 15: int crc = 0;
  8795                           
  8796                           ;incstack = 0
  8797  0000' 0E00               	movlw	0
  8798  0002' 6E1D'              	movwf	crc8@crc+1,c
  8799  0004' 0E00               	movlw	0
  8800  0006' 6E1C'              	movwf	crc8@crc,c
  8801                           
  8802                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8803  0008' 0E00               	movlw	0
  8804  000A' 6E1F'              	movwf	crc8@i+1,c
  8805  000C' 0E00               	movlw	0
  8806  000E' 6E1E'              	movwf	crc8@i,c
  8807  0010' D00E               	goto	l1272
  8808  0012'                    
  8809                           ;SystemCommon.c: 17: {
  8810                           ;SystemCommon.c: 18: crc += dataArray[i];
  8811  0012' 501E'              	movf	crc8@i,w,c
  8812  0014' 2417'              	addwf	crc8@dataArray,w,c
  8813  0016' 6ED9               	movwf	fsr2l,c
  8814  0018' 501F'              	movf	crc8@i+1,w,c
  8815  001A' 2018'              	addwfc	crc8@dataArray+1,w,c
  8816  001C' 6EDA               	movwf	fsr2h,c
  8817  001E' 50DF               	movf	indf2,w,c
  8818  0020' 6E00'              	movwf	??_crc8& (0+255),c
  8819  0022' 501B'              	movf	??_crc8,w,c
  8820  0024' 261C'              	addwf	crc8@crc,f,c
  8821  0026' 0E00               	movlw	0
  8822  0028' 221D'              	addwfc	crc8@crc+1,f,c
  8823  002A' 4A1E'              	infsnz	crc8@i,f,c
  8824  002C' 2A1F'              	incf	crc8@i+1,f,c
  8825  002E'                    l1272:
  8826  002E' 5019'              	movf	crc8@dataSize,w,c
  8827  0030' 5C1E'              	subwf	crc8@i,w,c
  8828  0032' 501F'              	movf	crc8@i+1,w,c
  8829  0034' 0A80               	xorlw	128
  8830  0036' 6E00'              	movwf	??_crc8& (0+255),c
  8831  0038' 501A'              	movf	crc8@dataSize+1,w,c
  8832  003A' 0A80               	xorlw	128
  8833  003C' 5800'              	subwfb	??_crc8& (0+255),w,c
  8834  003E' A0D8               	btfss	status,0,c
  8835  0040' D7E8               	goto	l1273
  8836                           
  8837                           ;SystemCommon.c: 19: }
  8838                           ;SystemCommon.c: 20: crc &= 0xff;
  8839  0042' 0EFF               	movlw	255
  8840  0044' 161C'              	andwf	crc8@crc,f,c
  8841  0046' 0E00               	movlw	0
  8842  0048' 161D'              	andwf	crc8@crc+1,f,c
  8843                           
  8844                           ;SystemCommon.c: 21: return crc;
  8845  004A' 501C'              	movf	crc8@crc,w,c
  8846  004C' 0012               	return	
  8847  004E'                    __end_of_crc8:
  8848                           	opt stack 0
  8849                           tosu	equ	0xFFF
  8850                           tosh	equ	0xFFE
  8851                           tosl	equ	0xFFD
  8852                           pclath	equ	0xFFA
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           postinc0	equ	0xFEE
  8862                           wreg	equ	0xFE8
  8863                           indf1	equ	0xFE7
  8864                           postdec1	equ	0xFE5
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _ZeroArray *****************
  8875 ;; Defined at:
  8876 ;;		line 24 in file "SystemCommon.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  array           2   31[COMRAM] PTR unsigned char 
  8879 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9)
      +, 
  8880 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8881 ;;		 -> rxMsgQueue(20), 
  8882 ;;  size            2   33[COMRAM] int 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      void 
  8887 ;; Registers used:
  8888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8894 ;;      Params:         4       0       0       0       0       0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0
  8897 ;;      Totals:         4       0       0       0       0       0       0
  8898 ;;Total ram usage:        4 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    4
  8901 ;; This function calls:
  8902 ;;		_memset
  8903 ;; This function is called by:
  8904 ;;		_readUartMessage
  8905 ;;		_InitRxMessageParams
  8906 ;;		_SendAckMessage
  8907 ;;		_FlashReadUart
  8908 ;;		_FlashEreaseMem
  8909 ;;		_FlashReadCondition
  8910 ;;		_SynthReadData
  8911 ;;		_GetIntFromUartData
  8912 ;;		_GetMcuFwVersion
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text57
  8917  0000'                    __ptext57:
  8918                           	opt stack 0
  8919  0000'                    _ZeroArray:
  8920                           	opt stack 25
  8921                           
  8922                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8923                           
  8924                           ;incstack = 0
  8925  0000' C01F' F017'        	movff	ZeroArray@array,memset@p1
  8926  0004' C020' F018'        	movff	ZeroArray@array+1,memset@p1+1
  8927  0008' 0E00               	movlw	0
  8928  000A' 6E1A'              	movwf	memset@c+1,c
  8929  000C' 0E00               	movlw	0
  8930  000E' 6E19'              	movwf	memset@c,c
  8931  0010' C021' F01B'        	movff	ZeroArray@size,memset@n
  8932  0014' C022' F01C'        	movff	ZeroArray@size+1,memset@n+1
  8933  0018' EC00' F000'        	call	_memset	;wreg free
  8934  001C' 0012               	return		;funcret
  8935  001E'                    __end_of_ZeroArray:
  8936                           	opt stack 0
  8937                           tosu	equ	0xFFF
  8938                           tosh	equ	0xFFE
  8939                           tosl	equ	0xFFD
  8940                           pclath	equ	0xFFA
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           indf1	equ	0xFE7
  8952                           postdec1	equ	0xFE5
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           fsr2h	equ	0xFDA
  8959                           fsr2l	equ	0xFD9
  8960                           status	equ	0xFD8
  8961                           
  8962 ;; *************** function _WriteUartMessage *****************
  8963 ;; Defined at:
  8964 ;;		line 158 in file "EusartApp.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  8967 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  8968 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  8969 ;;  dataSize        2   26[COMRAM] int 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  idx             2   29[COMRAM] int 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      void 
  8974 ;; Registers used:
  8975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8981 ;;      Params:         4       0       0       0       0       0       0
  8982 ;;      Locals:         2       0       0       0       0       0       0
  8983 ;;      Temps:          1       0       0       0       0       0       0
  8984 ;;      Totals:         7       0       0       0       0       0       0
  8985 ;;Total ram usage:        7 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    4
  8988 ;; This function calls:
  8989 ;;		_EUSART1_Write
  8990 ;; This function is called by:
  8991 ;;		_SendAckMessage
  8992 ;;		_FlashReadUart
  8993 ;;		_FlashReadCondition
  8994 ;;		_SynthReadData
  8995 ;;		_GetMcuFwVersion
  8996 ;;		_GetMcuRunTime
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           	psect	text58
  9001  0000'                    __ptext58:
  9002                           	opt stack 0
  9003  0000'                    _WriteUartMessage:
  9004                           	opt stack 22
  9005                           
  9006                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9007                           
  9008                           ;incstack = 0
  9009  0000' 0E00               	movlw	0
  9010  0002' 6E1E'              	movwf	WriteUartMessage@idx+1,c
  9011  0004' 0E00               	movlw	0
  9012  0006' 6E1D'              	movwf	WriteUartMessage@idx,c
  9013  0008' D00B               	goto	l222
  9014  000A'                    
  9015                           ;EusartApp.c: 161: {
  9016                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9017  000A' 501D'              	movf	WriteUartMessage@idx,w,c
  9018  000C' 2418'              	addwf	WriteUartMessage@dataBuf,w,c
  9019  000E' 6ED9               	movwf	fsr2l,c
  9020  0010' 501E'              	movf	WriteUartMessage@idx+1,w,c
  9021  0012' 2019'              	addwfc	WriteUartMessage@dataBuf+1,w,c
  9022  0014' 6EDA               	movwf	fsr2h,c
  9023  0016' 50DF               	movf	indf2,w,c
  9024  0018' EC00' F000'        	call	_EUSART1_Write
  9025  001C' 4A1D'              	infsnz	WriteUartMessage@idx,f,c
  9026  001E' 2A1E'              	incf	WriteUartMessage@idx+1,f,c
  9027  0020'                    l222:
  9028  0020' 501A'              	movf	WriteUartMessage@dataSize,w,c
  9029  0022' 5C1D'              	subwf	WriteUartMessage@idx,w,c
  9030  0024' 501E'              	movf	WriteUartMessage@idx+1,w,c
  9031  0026' 0A80               	xorlw	128
  9032  0028' 6E00'              	movwf	??_WriteUartMessage& (0+255),c
  9033  002A' 501B'              	movf	WriteUartMessage@dataSize+1,w,c
  9034  002C' 0A80               	xorlw	128
  9035  002E' 5800'              	subwfb	??_WriteUartMessage& (0+255),w,c
  9036  0030' B0D8               	btfsc	status,0,c
  9037  0032' 0012               	return	
  9038  0034' D7EA               	goto	l223
  9039  0036'                    __end_of_WriteUartMessage:
  9040                           	opt stack 0
  9041                           tosu	equ	0xFFF
  9042                           tosh	equ	0xFFE
  9043                           tosl	equ	0xFFD
  9044                           pclath	equ	0xFFA
  9045                           tblptru	equ	0xFF8
  9046                           tblptrh	equ	0xFF7
  9047                           tblptrl	equ	0xFF6
  9048                           tablat	equ	0xFF5
  9049                           prodh	equ	0xFF4
  9050                           prodl	equ	0xFF3
  9051                           intcon	equ	0xFF2
  9052                           intcon2	equ	0xFF1
  9053                           postinc0	equ	0xFEE
  9054                           wreg	equ	0xFE8
  9055                           indf1	equ	0xFE7
  9056                           postdec1	equ	0xFE5
  9057                           fsr1h	equ	0xFE2
  9058                           fsr1l	equ	0xFE1
  9059                           indf2	equ	0xFDF
  9060                           postinc2	equ	0xFDE
  9061                           postdec2	equ	0xFDD
  9062                           fsr2h	equ	0xFDA
  9063                           fsr2l	equ	0xFD9
  9064                           status	equ	0xFD8
  9065                           
  9066 ;; *************** function _EUSART1_Write *****************
  9067 ;; Defined at:
  9068 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;  txData          1    wreg     unsigned char 
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  txData          1   23[COMRAM] unsigned char 
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      void 
  9075 ;; Registers used:
  9076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9082 ;;      Params:         0       0       0       0       0       0       0
  9083 ;;      Locals:         1       0       0       0       0       0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0
  9085 ;;      Totals:         1       0       0       0       0       0       0
  9086 ;;Total ram usage:        1 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    3
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_WriteUartMessage
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           	psect	text59
  9097  0000'                    __ptext59:
  9098                           	opt stack 0
  9099  0000'                    _EUSART1_Write:
  9100                           	opt stack 22
  9101                           
  9102                           ;incstack = 0
  9103                           ;EUSART1_Write@txData stored from wreg
  9104  0000' 6E17'              	movwf	EUSART1_Write@txData,c
  9105  0002'                    
  9106                           ;eusart1.c: 160: {
  9107                           
  9108                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9109  0002' 0100               	movlb	0	; () banked
  9110  0004' 5100'              	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9111  0006' B4D8               	btfsc	status,2,c
  9112  0008' D7FC               	goto	l6375
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;eusart1.c: 161: }
  9116                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9117  000A' B89D               	btfsc	3997,4,c	;volatile
  9118  000C' D003               	goto	l843
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;eusart1.c: 164: {
  9122                           ;eusart1.c: 165: TXREG1 = txData;
  9123  000E' C017' FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9124                           
  9125                           ;eusart1.c: 166: }
  9126  0012' D012               	goto	l844
  9127  0014'                    l843:
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;eusart1.c: 167: else
  9131                           ;eusart1.c: 168: {
  9132                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9133  0014' 989D               	bcf	3997,4,c	;volatile
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9137  0016' 5009'              	movf	_eusart1TxHead,w,c	;volatile
  9138  0018' 0D01               	mullw	1
  9139  001A' 0E00'              	movlw	low _eusart1TxBuffer
  9140  001C' 24F3               	addwf	prodl,w,c
  9141  001E' 6ED9               	movwf	fsr2l,c
  9142  0020' 0E00'              	movlw	high _eusart1TxBuffer
  9143  0022' 20F4               	addwfc	prodh,w,c
  9144  0024' 6EDA               	movwf	fsr2h,c
  9145  0026' C017' FFDF         	movff	EUSART1_Write@txData,indf2
  9146                           
  9147                           ; BSR set to: 0
  9148  002A' 2A09'              	incf	_eusart1TxHead,f,c	;volatile
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9152  002C' 0E45               	movlw	69
  9153  002E' 6409'              	cpfsgt	_eusart1TxHead,c	;volatile
  9154  0030' D002               	goto	l845
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;eusart1.c: 172: {
  9158                           ;eusart1.c: 173: eusart1TxHead = 0;
  9159  0032' 0E00               	movlw	0
  9160  0034' 6E09'              	movwf	_eusart1TxHead,c	;volatile
  9161  0036'                    l845:
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;eusart1.c: 174: }
  9165                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9166                           
  9167                           ; BSR set to: 0
  9168  0036' 0700'              	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9169  0038'                    l844:
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;eusart1.c: 176: }
  9173                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9174                           
  9175                           ; BSR set to: 0
  9176  0038' 889D               	bsf	3997,4,c	;volatile
  9177                           
  9178                           ; BSR set to: 0
  9179  003A' 0012               	return		;funcret
  9180  003C'                    __end_of_EUSART1_Write:
  9181                           	opt stack 0
  9182                           tosu	equ	0xFFF
  9183                           tosh	equ	0xFFE
  9184                           tosl	equ	0xFFD
  9185                           pclath	equ	0xFFA
  9186                           tblptru	equ	0xFF8
  9187                           tblptrh	equ	0xFF7
  9188                           tblptrl	equ	0xFF6
  9189                           tablat	equ	0xFF5
  9190                           prodh	equ	0xFF4
  9191                           prodl	equ	0xFF3
  9192                           intcon	equ	0xFF2
  9193                           intcon2	equ	0xFF1
  9194                           postinc0	equ	0xFEE
  9195                           wreg	equ	0xFE8
  9196                           indf1	equ	0xFE7
  9197                           postdec1	equ	0xFE5
  9198                           fsr1h	equ	0xFE2
  9199                           fsr1l	equ	0xFE1
  9200                           indf2	equ	0xFDF
  9201                           postinc2	equ	0xFDE
  9202                           postdec2	equ	0xFDD
  9203                           fsr2h	equ	0xFDA
  9204                           fsr2l	equ	0xFD9
  9205                           status	equ	0xFD8
  9206                           
  9207 ;; *************** function _InitSystemApplicationManagers *****************
  9208 ;; Defined at:
  9209 ;;		line 33 in file "SystemSettings.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;		None
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;		None
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      void 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9223 ;;      Params:         0       0       0       0       0       0       0
  9224 ;;      Locals:         0       0       0       0       0       0       0
  9225 ;;      Temps:          0       0       0       0       0       0       0
  9226 ;;      Totals:         0       0       0       0       0       0       0
  9227 ;;Total ram usage:        0 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    8
  9230 ;; This function calls:
  9231 ;;		_ClearMcuRunTime
  9232 ;;		_DacInit
  9233 ;;		_InitAdcApplicationMgr
  9234 ;;		_PLLInitialize
  9235 ;;		_TMR0_StartTimer
  9236 ;; This function is called by:
  9237 ;;		_main
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           	psect	text60
  9242  0000'                    __ptext60:
  9243                           	opt stack 0
  9244  0000'                    _InitSystemApplicationManagers:
  9245                           	opt stack 22
  9246                           
  9247                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;incstack = 0
  9251  0000' EC00' F000'        	call	_InitAdcApplicationMgr	;wreg free
  9252                           
  9253                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9254  0004' EC00' F000'        	call	_TMR0_StartTimer	;wreg free
  9255                           
  9256                           ;SystemSettings.c: 42: PLLInitialize();
  9257  0008' EC00' F000'        	call	_PLLInitialize	;wreg free
  9258                           
  9259                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9260  000C' EC00' F000'        	call	_ClearMcuRunTime	;wreg free
  9261                           
  9262                           ;SystemSettings.c: 48: DacInit();
  9263  0010' EC00' F000'        	call	_DacInit	;wreg free
  9264  0014' 0012               	return		;funcret
  9265  0016'                    __end_of_InitSystemApplicationManagers:
  9266                           	opt stack 0
  9267                           tosu	equ	0xFFF
  9268                           tosh	equ	0xFFE
  9269                           tosl	equ	0xFFD
  9270                           pclath	equ	0xFFA
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           intcon	equ	0xFF2
  9278                           intcon2	equ	0xFF1
  9279                           postinc0	equ	0xFEE
  9280                           wreg	equ	0xFE8
  9281                           indf1	equ	0xFE7
  9282                           postdec1	equ	0xFE5
  9283                           fsr1h	equ	0xFE2
  9284                           fsr1l	equ	0xFE1
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           postdec2	equ	0xFDD
  9288                           fsr2h	equ	0xFDA
  9289                           fsr2l	equ	0xFD9
  9290                           status	equ	0xFD8
  9291                           
  9292 ;; *************** function _TMR0_StartTimer *****************
  9293 ;; Defined at:
  9294 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;		None
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;		None
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      void 
  9301 ;; Registers used:
  9302 ;;		None
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9308 ;;      Params:         0       0       0       0       0       0       0
  9309 ;;      Locals:         0       0       0       0       0       0       0
  9310 ;;      Temps:          0       0       0       0       0       0       0
  9311 ;;      Totals:         0       0       0       0       0       0       0
  9312 ;;Total ram usage:        0 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; Hardware stack levels required when called:    3
  9315 ;; This function calls:
  9316 ;;		Nothing
  9317 ;; This function is called by:
  9318 ;;		_InitSystemApplicationManagers
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text61
  9323  0000'                    __ptext61:
  9324                           	opt stack 0
  9325  0000'                    _TMR0_StartTimer:
  9326                           	opt stack 26
  9327                           
  9328                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9329                           
  9330                           ;incstack = 0
  9331  0000' 8ED5               	bsf	4053,7,c	;volatile
  9332  0002' 0012               	return		;funcret
  9333  0004'                    __end_of_TMR0_StartTimer:
  9334                           	opt stack 0
  9335                           tosu	equ	0xFFF
  9336                           tosh	equ	0xFFE
  9337                           tosl	equ	0xFFD
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           intcon2	equ	0xFF1
  9347                           postinc0	equ	0xFEE
  9348                           wreg	equ	0xFE8
  9349                           indf1	equ	0xFE7
  9350                           postdec1	equ	0xFE5
  9351                           fsr1h	equ	0xFE2
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _PLLInitialize *****************
  9361 ;; Defined at:
  9362 ;;		line 19 in file "SyntApp.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  idx             1   46[COMRAM] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9376 ;;      Params:         0       0       0       0       0       0       0
  9377 ;;      Locals:         1       0       0       0       0       0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0
  9379 ;;      Totals:         1       0       0       0       0       0       0
  9380 ;;Total ram usage:        1 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    7
  9383 ;; This function calls:
  9384 ;;		_SWSPI_send_word
  9385 ;;		_SwSpi_Set_CE_Pin
  9386 ;; This function is called by:
  9387 ;;		_InitSystemApplicationManagers
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text62
  9392  0000'                    __ptext62:
  9393                           	opt stack 0
  9394  0000'                    _PLLInitialize:
  9395                           	opt stack 22
  9396                           
  9397                           ;SyntApp.c: 26: IOCB = 0b10000000;
  9398                           
  9399                           ;incstack = 0
  9400  0000' 0E80               	movlw	128
  9401  0002' 6E62               	movwf	3938,c	;volatile
  9402                           
  9403                           ;SyntApp.c: 29: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9404  0004' 0E01               	movlw	1
  9405  0006' 6E17'              	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9406  0008' 0E00               	movlw	0
  9407  000A' EC00' F000'        	call	_SwSpi_Set_CE_Pin
  9408                           
  9409                           ;SyntApp.c: 32: for(uint8_t idx = 0; idx < 13; idx++)
  9410  000E' 0E00               	movlw	0
  9411  0010' 6E2E'              	movwf	PLLInitialize@idx,c
  9412  0012'                    l7671:
  9413  0012' 0E0C               	movlw	12
  9414  0014' 642E'              	cpfsgt	PLLInitialize@idx,c
  9415  0016' D001               	goto	l479
  9416  0018' 0012               	return	
  9417  001A'                    l479:
  9418                           
  9419                           ;SyntApp.c: 33: {
  9420                           ;SyntApp.c: 34: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9421  001A' 502E'              	movf	PLLInitialize@idx,w,c
  9422  001C' 0D04               	mullw	4
  9423  001E' 0E00'              	movlw	low _SYNTH_REGS
  9424  0020' 24F3               	addwf	prodl,w,c
  9425  0022' 6EF6               	movwf	tblptrl,c
  9426  0024' 0E00'              	movlw	high _SYNTH_REGS
  9427  0026' 20F4               	addwfc	prodh,w,c
  9428  0028' 6EF7               	movwf	tblptrh,c
  9429  002A'                    	if	0	;There are less than 3 active tblptr bytes
  9430  002A'                    	endif
  9431  002A' 0009               	tblrd		*+
  9432  002C' CFF5 F025'         	movff	tablat,SWSPI_send_word@data
  9433  0030' 0009               	tblrd		*+
  9434  0032' CFF5 F026'         	movff	tablat,SWSPI_send_word@data+1
  9435  0036' 0009               	tblrd		*+
  9436  0038' CFF5 F027'         	movff	tablat,SWSPI_send_word@data+2
  9437  003C' 000A               	tblrd		*-
  9438  003E' CFF5 F028'         	movff	tablat,SWSPI_send_word@data+3
  9439  0042' 0E03               	movlw	3
  9440  0044' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  9441  0046' 0E00               	movlw	0
  9442  0048' EC00' F000'        	call	_SWSPI_send_word
  9443  004C' 2A2E'              	incf	PLLInitialize@idx,f,c
  9444  004E' D7E1               	goto	l7671
  9445  0050'                    __end_of_PLLInitialize:
  9446                           	opt stack 0
  9447                           tosu	equ	0xFFF
  9448                           tosh	equ	0xFFE
  9449                           tosl	equ	0xFFD
  9450                           pclath	equ	0xFFA
  9451                           tblptru	equ	0xFF8
  9452                           tblptrh	equ	0xFF7
  9453                           tblptrl	equ	0xFF6
  9454                           tablat	equ	0xFF5
  9455                           prodh	equ	0xFF4
  9456                           prodl	equ	0xFF3
  9457                           intcon	equ	0xFF2
  9458                           intcon2	equ	0xFF1
  9459                           postinc0	equ	0xFEE
  9460                           wreg	equ	0xFE8
  9461                           indf1	equ	0xFE7
  9462                           postdec1	equ	0xFE5
  9463                           fsr1h	equ	0xFE2
  9464                           fsr1l	equ	0xFE1
  9465                           indf2	equ	0xFDF
  9466                           postinc2	equ	0xFDE
  9467                           postdec2	equ	0xFDD
  9468                           fsr2h	equ	0xFDA
  9469                           fsr2l	equ	0xFD9
  9470                           status	equ	0xFD8
  9471                           
  9472 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9473 ;; Defined at:
  9474 ;;		line 201 in file "SwSpiApp.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  phrType         1    wreg     enum E7550
  9477 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  phrType         1   24[COMRAM] enum E7550
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, status,2, status,0
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9489 ;;      Params:         1       0       0       0       0       0       0
  9490 ;;      Locals:         1       0       0       0       0       0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0
  9492 ;;      Totals:         2       0       0       0       0       0       0
  9493 ;;Total ram usage:        2 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    3
  9496 ;; This function calls:
  9497 ;;		Nothing
  9498 ;; This function is called by:
  9499 ;;		_PLLInitialize
  9500 ;;		_SetSynthTxOper
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text63
  9505  0000'                    __ptext63:
  9506                           	opt stack 0
  9507  0000'                    _SwSpi_Set_CE_Pin:
  9508                           	opt stack 24
  9509                           
  9510                           ;incstack = 0
  9511                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9512  0000' 6E18'              	movwf	SwSpi_Set_CE_Pin@phrType,c
  9513                           
  9514                           ;SwSpiApp.c: 203: switch(phrType)
  9515  0002' D014               	goto	l662
  9516  0004'                    
  9517                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9518  0004' 0417'              	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9519  0006' A4D8               	btfss	status,2,c
  9520  0008' D002               	goto	l664
  9521                           
  9522                           ;SwSpiApp.c: 207: {
  9523                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9524  000A' 828B               	bsf	3979,1,c	;volatile
  9525                           
  9526                           ;SwSpiApp.c: 209: }
  9527  000C' 0012               	return	
  9528  000E'                    l664:
  9529                           
  9530                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
  9531  000E' 5017'              	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9532  0010' A4D8               	btfss	status,2,c
  9533  0012' 0012               	return	
  9534                           
  9535                           ;SwSpiApp.c: 211: {
  9536                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
  9537  0014' 928B               	bcf	3979,1,c	;volatile
  9538                           
  9539                           ;SwSpiApp.c: 213: }
  9540                           ;SwSpiApp.c: 214: break;
  9541  0016' 0012               	return	
  9542  0018'                    
  9543                           ;SwSpiApp.c: 217: if(cPinMode == 1)
  9544  0018' 0417'              	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9545  001A' A4D8               	btfss	status,2,c
  9546  001C' D002               	goto	l673
  9547                           
  9548                           ;SwSpiApp.c: 218: {
  9549                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
  9550  001E' 848C               	bsf	3980,2,c	;volatile
  9551                           
  9552                           ;SwSpiApp.c: 220: }
  9553  0020' 0012               	return	
  9554  0022'                    l673:
  9555                           
  9556                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
  9557  0022' 5017'              	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9558  0024' A4D8               	btfss	status,2,c
  9559  0026' 0012               	return	
  9560                           
  9561                           ;SwSpiApp.c: 222: {
  9562                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
  9563  0028' 928B               	bcf	3979,1,c	;volatile
  9564                           
  9565                           ;SwSpiApp.c: 226: }
  9566                           
  9567                           ;SwSpiApp.c: 224: }
  9568                           ;SwSpiApp.c: 225: break;
  9569  002A' 0012               	return	
  9570  002C'                    l662:
  9571  002C' 5018'              	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9572                           
  9573                           ; Switch size 1, requested type "space"
  9574                           ; Number of cases is 2, Range of values is 0 to 1
  9575                           ; switch strategies available:
  9576                           ; Name         Instructions Cycles
  9577                           ; simple_byte            7     4 (average)
  9578                           ;	Chosen strategy is simple_byte
  9579  002E' 0A00               	xorlw	0	; case 0
  9580  0030' B4D8               	btfsc	status,2,c
  9581  0032' D7E8               	goto	l663
  9582  0034' 0A01               	xorlw	1	; case 1
  9583  0036' A4D8               	btfss	status,2,c
  9584  0038' 0012               	return	
  9585  003A' D7EE               	goto	l672
  9586  003C'                    __end_of_SwSpi_Set_CE_Pin:
  9587                           	opt stack 0
  9588                           tosu	equ	0xFFF
  9589                           tosh	equ	0xFFE
  9590                           tosl	equ	0xFFD
  9591                           pclath	equ	0xFFA
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           intcon	equ	0xFF2
  9599                           intcon2	equ	0xFF1
  9600                           postinc0	equ	0xFEE
  9601                           wreg	equ	0xFE8
  9602                           indf1	equ	0xFE7
  9603                           postdec1	equ	0xFE5
  9604                           fsr1h	equ	0xFE2
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _InitAdcApplicationMgr *****************
  9614 ;; Defined at:
  9615 ;;		line 22 in file "AdcApp.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;  channel         1   23[COMRAM] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      void 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9629 ;;      Params:         0       0       0       0       0       0       0
  9630 ;;      Locals:         1       0       0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0
  9632 ;;      Totals:         1       0       0       0       0       0       0
  9633 ;;Total ram usage:        1 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    3
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_InitSystemApplicationManagers
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text64
  9644  0000'                    __ptext64:
  9645                           	opt stack 0
  9646  0000'                    _InitAdcApplicationMgr:
  9647                           	opt stack 26
  9648                           
  9649                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  9650                           
  9651                           ;incstack = 0
  9652  0000' 0E00               	movlw	0
  9653  0002' 0100               	movlb	0	; () banked
  9654  0004' 6F00'              	movwf	_conversionFormat& (0+255),b
  9655                           
  9656                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  9657  0006' 0E00               	movlw	0
  9658  0008' 6E0C'              	movwf	_adcSampleMode,c
  9659                           
  9660                           ;AdcApp.c: 26: char channel = 0;
  9661  000A' 0E00               	movlw	0
  9662  000C' 6E17'              	movwf	InitAdcApplicationMgr@channel,c
  9663                           
  9664                           ; BSR set to: 0
  9665  000E' 0012               	return		;funcret
  9666  0010'                    __end_of_InitAdcApplicationMgr:
  9667                           	opt stack 0
  9668                           tosu	equ	0xFFF
  9669                           tosh	equ	0xFFE
  9670                           tosl	equ	0xFFD
  9671                           pclath	equ	0xFFA
  9672                           tblptru	equ	0xFF8
  9673                           tblptrh	equ	0xFF7
  9674                           tblptrl	equ	0xFF6
  9675                           tablat	equ	0xFF5
  9676                           prodh	equ	0xFF4
  9677                           prodl	equ	0xFF3
  9678                           intcon	equ	0xFF2
  9679                           intcon2	equ	0xFF1
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           indf1	equ	0xFE7
  9683                           postdec1	equ	0xFE5
  9684                           fsr1h	equ	0xFE2
  9685                           fsr1l	equ	0xFE1
  9686                           indf2	equ	0xFDF
  9687                           postinc2	equ	0xFDE
  9688                           postdec2	equ	0xFDD
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _DacInit *****************
  9694 ;; Defined at:
  9695 ;;		line 24 in file "DacApp.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  dacInput        2   40[BANK0 ] unsigned int 
  9700 ;;  idx             1   42[BANK0 ] char 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9710 ;;      Params:         0       0       0       0       0       0       0
  9711 ;;      Locals:         0       3       0       0       0       0       0
  9712 ;;      Temps:          0       2       0       0       0       0       0
  9713 ;;      Totals:         0       5       0       0       0       0       0
  9714 ;;Total ram usage:        5 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    7
  9717 ;; This function calls:
  9718 ;;		_ReadIntFromEeprom
  9719 ;;		_SWSPI_send_word
  9720 ;; This function is called by:
  9721 ;;		_InitSystemApplicationManagers
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text65
  9726  0000'                    __ptext65:
  9727                           	opt stack 0
  9728  0000'                    _DacInit:
  9729                           	opt stack 22
  9730                           
  9731                           ;DacApp.c: 26: for(int8_t idx = 0; idx < (4); idx++)
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;incstack = 0
  9735  0000' 0E00               	movlw	0
  9736  0002' 0100               	movlb	0	; () banked
  9737  0004' 6F00'              	movwf	DacInit@idx& (0+255),b
  9738  0006'                    l7649:
  9739                           
  9740                           ; BSR set to: 0
  9741  0006' 5100'              	movf	DacInit@idx& (0+255),w,b
  9742  0008' 0A80               	xorlw	128
  9743  000A' 0F7C               	addlw	-132
  9744  000C' B0D8               	btfsc	status,0,c
  9745  000E' 0012               	return	
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;DacApp.c: 27: {
  9749                           ;DacApp.c: 28: uint16_t dacInput = ReadIntFromEeprom((0x20) | DAC_ADDRES[idx], 2);
  9750                           
  9751                           ; BSR set to: 0
  9752                           
  9753                           ; BSR set to: 0
  9754  0010' 0E00               	movlw	0
  9755  0012' 6E1A'              	movwf	ReadIntFromEeprom@numOfByes+1,c
  9756  0014' 0E02               	movlw	2
  9757  0016' 6E19'              	movwf	ReadIntFromEeprom@numOfByes,c
  9758  0018' 5100'              	movf	DacInit@idx& (0+255),w,b
  9759  001A' 0D01               	mullw	1
  9760  001C' 0E00'              	movlw	low _DAC_ADDRES
  9761  001E' 24F3               	addwf	prodl,w,c
  9762  0020' 6EF6               	movwf	tblptrl,c
  9763  0022' 0E00'              	movlw	high _DAC_ADDRES
  9764  0024' 20F4               	addwfc	prodh,w,c
  9765  0026' 6EF7               	movwf	tblptrh,c
  9766  0028'                    	if	0	;There are less than 3 active tblptr bytes
  9767  0028'                    	endif
  9768  0028' 0008               	tblrd		*
  9769  002A' 50F5               	movf	tablat,w,c
  9770  002C' 0920               	iorlw	32
  9771  002E' EC00' F000'        	call	_ReadIntFromEeprom
  9772  0032' C019' F028'        	movff	?_ReadIntFromEeprom,DacInit@dacInput
  9773  0036' C01A' F029'        	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
  9774                           
  9775                           ;DacApp.c: 29: if(dacInput == 0xFFFF)
  9776  003A' 0100               	movlb	0	; () banked
  9777  003C' 2900'              	incf	DacInit@dacInput& (0+255),w,b
  9778  003E' E11D               	bnz	l7659
  9779  0040' 2900'              	incf	(DacInit@dacInput+1)& (0+255),w,b
  9780  0042' A4D8               	btfss	status,2,c
  9781  0044' D01A               	goto	l421
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;DacApp.c: 30: {
  9785                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
  9786  0046' 5100'              	movf	DacInit@idx& (0+255),w,b
  9787  0048' 0D02               	mullw	2
  9788  004A' 0E00'              	movlw	low _DAC_DEFAULT_INIT_VALUES
  9789  004C' 24F3               	addwf	prodl,w,c
  9790  004E' 6EF6               	movwf	tblptrl,c
  9791  0050' 0E00'              	movlw	high _DAC_DEFAULT_INIT_VALUES
  9792  0052' 20F4               	addwfc	prodh,w,c
  9793  0054' 6EF7               	movwf	tblptrh,c
  9794  0056'                    	if	0	;There are less than 3 active tblptr bytes
  9795  0056'                    	endif
  9796  0056' 0009               	tblrd		*+
  9797  0058' CFF5 F026'         	movff	tablat,??_DacInit
  9798  005C' 0009               	tblrd		*+
  9799  005E' CFF5 F027'         	movff	tablat,??_DacInit+1
  9800  0062' C026' F025'        	movff	??_DacInit,SWSPI_send_word@data
  9801  0066' C027' F026'        	movff	??_DacInit+1,SWSPI_send_word@data+1
  9802  006A' 6A27'              	clrf	SWSPI_send_word@data+2,c
  9803  006C' 6A28'              	clrf	SWSPI_send_word@data+3,c
  9804  006E' 0E01               	movlw	1
  9805  0070' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  9806  0072' 0E02               	movlw	2
  9807  0074' EC00' F000'        	call	_SWSPI_send_word
  9808                           
  9809                           ;DacApp.c: 32: }
  9810  0078' D00B               	goto	l422
  9811  007A'                    l421:
  9812  007A'                    l7659:
  9813                           
  9814                           ;DacApp.c: 33: else
  9815                           ;DacApp.c: 34: {
  9816                           ;DacApp.c: 35: SWSPI_send_word(EXT_DAC, dacInput, 1);
  9817  007A' C028' F025'        	movff	DacInit@dacInput,SWSPI_send_word@data
  9818  007E' C029' F026'        	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
  9819  0082' 6A27'              	clrf	SWSPI_send_word@data+2,c
  9820  0084' 6A28'              	clrf	SWSPI_send_word@data+3,c
  9821  0086' 0E01               	movlw	1
  9822  0088' 6E29'              	movwf	SWSPI_send_word@dataSize,c
  9823  008A' 0E02               	movlw	2
  9824  008C' EC00' F000'        	call	_SWSPI_send_word
  9825  0090'                    l422:
  9826  0090' 0100               	movlb	0	; () banked
  9827  0092' 2B00'              	incf	DacInit@idx& (0+255),f,b
  9828  0094' D7B8               	goto	l7649
  9829  0096'                    __end_of_DacInit:
  9830                           	opt stack 0
  9831                           tosu	equ	0xFFF
  9832                           tosh	equ	0xFFE
  9833                           tosl	equ	0xFFD
  9834                           pclath	equ	0xFFA
  9835                           tblptru	equ	0xFF8
  9836                           tblptrh	equ	0xFF7
  9837                           tblptrl	equ	0xFF6
  9838                           tablat	equ	0xFF5
  9839                           prodh	equ	0xFF4
  9840                           prodl	equ	0xFF3
  9841                           intcon	equ	0xFF2
  9842                           intcon2	equ	0xFF1
  9843                           postinc0	equ	0xFEE
  9844                           wreg	equ	0xFE8
  9845                           indf1	equ	0xFE7
  9846                           postdec1	equ	0xFE5
  9847                           fsr1h	equ	0xFE2
  9848                           fsr1l	equ	0xFE1
  9849                           indf2	equ	0xFDF
  9850                           postinc2	equ	0xFDE
  9851                           postdec2	equ	0xFDD
  9852                           fsr2h	equ	0xFDA
  9853                           fsr2l	equ	0xFD9
  9854                           status	equ	0xFD8
  9855                           
  9856 ;; *************** function _SWSPI_send_word *****************
  9857 ;; Defined at:
  9858 ;;		line 17 in file "SwSpiApp.c"
  9859 ;; Parameters:    Size  Location     Type
  9860 ;;  phrType         1    wreg     enum E7550
  9861 ;;  data            4   37[COMRAM] unsigned long 
  9862 ;;  dataSize        1   41[COMRAM] unsigned char 
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;  phrType         1   45[COMRAM] enum E7550
  9865 ;;  datac           1   42[COMRAM] unsigned char 
  9866 ;;  idx             2   43[COMRAM] int 
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9876 ;;      Params:         5       0       0       0       0       0       0
  9877 ;;      Locals:         4       0       0       0       0       0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0
  9879 ;;      Totals:         9       0       0       0       0       0       0
  9880 ;;Total ram usage:        9 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    6
  9883 ;; This function calls:
  9884 ;;		_SWSPI_DAC_send_bits
  9885 ;;		_SWSPI_Synth_send_bits
  9886 ;;		_SwSpi_Set_Dac_Sync_Pin
  9887 ;;		_SwSpi_Set_Synth_Le_Pin
  9888 ;;		_make8
  9889 ;; This function is called by:
  9890 ;;		_DacInit
  9891 ;;		_DacSetValue
  9892 ;;		_PLLInitialize
  9893 ;;		_UpdateTxFreq
  9894 ;;		_UpdateRxFreq
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           	psect	text66
  9899  0000'                    __ptext66:
  9900                           	opt stack 0
  9901  0000'                    _SWSPI_send_word:
  9902                           	opt stack 21
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;incstack = 0
  9906                           ;SWSPI_send_word@phrType stored from wreg
  9907  0000' 6E2D'              	movwf	SWSPI_send_word@phrType,c
  9908                           
  9909                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  9910  0002' 9EF2               	bcf	intcon,7,c	;volatile
  9911                           
  9912                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  9913  0004' 502D'              	movf	SWSPI_send_word@phrType,w,c
  9914  0006' B4D8               	btfsc	status,2,c
  9915  0008' D003               	goto	u6770
  9916  000A' 042D'              	decf	SWSPI_send_word@phrType,w,c
  9917  000C' A4D8               	btfss	status,2,c
  9918  000E' D016               	goto	l571
  9919  0010'                    u6770:
  9920                           
  9921                           ;SwSpiApp.c: 24: {
  9922                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  9923  0010' 0E00               	movlw	0
  9924  0012' 6E17'              	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9925  0014' 502D'              	movf	SWSPI_send_word@phrType,w,c
  9926  0016' EC00' F000'        	call	_SwSpi_Set_Synth_Le_Pin
  9927                           
  9928                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
  9929  001A' C025' F021'        	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
  9930  001E' C026' F022'        	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
  9931  0022' C027' F023'        	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
  9932  0026' C028' F024'        	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
  9933  002A' 502D'              	movf	SWSPI_send_word@phrType,w,c
  9934  002C' EC00' F000'        	call	_SWSPI_Synth_send_bits
  9935                           
  9936                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  9937  0030' 0E01               	movlw	1
  9938  0032' 6E17'              	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9939  0034' 502D'              	movf	SWSPI_send_word@phrType,w,c
  9940  0036' EC00' F000'        	call	_SwSpi_Set_Synth_Le_Pin
  9941                           
  9942                           ;SwSpiApp.c: 28: }
  9943  003A' D02D               	goto	l575
  9944  003C'                    l571:
  9945                           
  9946                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
  9947  003C' 0E02               	movlw	2
  9948  003E' 182D'              	xorwf	SWSPI_send_word@phrType,w,c
  9949  0040' A4D8               	btfss	status,2,c
  9950  0042' D029               	goto	l575
  9951                           
  9952                           ;SwSpiApp.c: 30: {
  9953                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
  9954  0044' 0E00               	movlw	0
  9955  0046' EC00' F000'        	call	_SwSpi_Set_Dac_Sync_Pin
  9956                           
  9957                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
  9958  004A' 0E01               	movlw	1
  9959  004C' 2429'              	addwf	SWSPI_send_word@dataSize,w,c
  9960  004E' 6E2B'              	movwf	SWSPI_send_word@idx,c
  9961  0050' 6A2C'              	clrf	SWSPI_send_word@idx+1,c
  9962  0052' 0E00               	movlw	0
  9963  0054' 222C'              	addwfc	SWSPI_send_word@idx+1,f,c
  9964  0056'                    l6957:
  9965  0056' BE2C'              	btfsc	SWSPI_send_word@idx+1,7,c
  9966  0058' D01B               	goto	u6800
  9967  005A' 502C'              	movf	SWSPI_send_word@idx+1,w,c
  9968  005C' E103               	bnz	l6961
  9969  005E' 042B'              	decf	SWSPI_send_word@idx,w,c
  9970  0060' A0D8               	btfss	status,0,c
  9971  0062' D016               	goto	u6800
  9972  0064'                    l6961:
  9973                           
  9974                           ;SwSpiApp.c: 33: {
  9975                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
  9976  0064' C025' F017'        	movff	SWSPI_send_word@data,make8@data
  9977  0068' C026' F018'        	movff	SWSPI_send_word@data+1,make8@data+1
  9978  006C' C027' F019'        	movff	SWSPI_send_word@data+2,make8@data+2
  9979  0070' C028' F01A'        	movff	SWSPI_send_word@data+3,make8@data+3
  9980  0074' 042B'              	decf	SWSPI_send_word@idx,w,c
  9981  0076' 6E1B'              	movwf	make8@dataLocation,c
  9982  0078' EC00' F000'        	call	_make8	;wreg free
  9983  007C' 6E2A'              	movwf	SWSPI_send_word@datac,c
  9984                           
  9985                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
  9986  007E' C02A' F019'        	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
  9987  0082' 502D'              	movf	SWSPI_send_word@phrType,w,c
  9988  0084' EC00' F000'        	call	_SWSPI_DAC_send_bits
  9989  0088' 062B'              	decf	SWSPI_send_word@idx,f,c
  9990  008A' A0D8               	btfss	status,0,c
  9991  008C' 062C'              	decf	SWSPI_send_word@idx+1,f,c
  9992  008E' D7E3               	goto	l6957
  9993  0090'                    u6800:
  9994                           
  9995                           ;SwSpiApp.c: 36: }
  9996                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
  9997  0090' 0E01               	movlw	1
  9998  0092' EC00' F000'        	call	_SwSpi_Set_Dac_Sync_Pin
  9999  0096'                    l575:
 10000                           
 10001                           ;SwSpiApp.c: 38: }
 10002                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10003  0096' 8EF2               	bsf	intcon,7,c	;volatile
 10004  0098' 0012               	return		;funcret
 10005  009A'                    __end_of_SWSPI_send_word:
 10006                           	opt stack 0
 10007                           tosu	equ	0xFFF
 10008                           tosh	equ	0xFFE
 10009                           tosl	equ	0xFFD
 10010                           pclath	equ	0xFFA
 10011                           tblptru	equ	0xFF8
 10012                           tblptrh	equ	0xFF7
 10013                           tblptrl	equ	0xFF6
 10014                           tablat	equ	0xFF5
 10015                           prodh	equ	0xFF4
 10016                           prodl	equ	0xFF3
 10017                           intcon	equ	0xFF2
 10018                           intcon2	equ	0xFF1
 10019                           postinc0	equ	0xFEE
 10020                           wreg	equ	0xFE8
 10021                           indf1	equ	0xFE7
 10022                           postdec1	equ	0xFE5
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function _make8 *****************
 10033 ;; Defined at:
 10034 ;;		line 58 in file "SystemCommon.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  data            4   23[COMRAM] unsigned long 
 10037 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;                  1    wreg      unsigned char 
 10042 ;; Registers used:
 10043 ;;		wreg, status,2, status,0
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10049 ;;      Params:         5       0       0       0       0       0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0
 10051 ;;      Temps:          4       0       0       0       0       0       0
 10052 ;;      Totals:         9       0       0       0       0       0       0
 10053 ;;Total ram usage:        9 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    3
 10056 ;; This function calls:
 10057 ;;		Nothing
 10058 ;; This function is called by:
 10059 ;;		_FlashReadCondition
 10060 ;;		_SWSPI_send_word
 10061 ;;		_StoreIntInEeprom
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           	psect	text67
 10066  0000'                    __ptext67:
 10067                           	opt stack 0
 10068  0000'                    _make8:
 10069                           	opt stack 23
 10070                           
 10071                           ;SystemCommon.c: 60: switch(dataLocation)
 10072                           
 10073                           ;incstack = 0
 10074  0000' D01F               	goto	l1291
 10075  0002'                    
 10076                           ;SystemCommon.c: 63: return (data & 0x000000ff);
 10077  0002' 5017'              	movf	make8@data,w,c
 10078  0004' 0012               	return	
 10079  0006'                    
 10080                           ;SystemCommon.c: 66: return (data & 0x0000ff00) >> 8;
 10081  0006' 5018'              	movf	make8@data+1,w,c
 10082  0008' 0012               	return	
 10083  000A'                    
 10084                           ;SystemCommon.c: 69: return (data & 0x00ff0000) >> 16;
 10085  000A' 5019'              	movf	make8@data+2,w,c
 10086  000C' 0012               	return	
 10087  000E'                    
 10088                           ;SystemCommon.c: 72: return (data & 0xff000000) >> 24;
 10089  000E' 0E00               	movlw	0
 10090  0010' 1417'              	andwf	make8@data,w,c
 10091  0012' 6E00'              	movwf	??_make8& (0+255),c
 10092  0014' 0E00               	movlw	0
 10093  0016' 1418'              	andwf	make8@data+1,w,c
 10094  0018' 6E00'              	movwf	(??_make8+1)& (0+255),c
 10095  001A' 0E00               	movlw	0
 10096  001C' 1419'              	andwf	make8@data+2,w,c
 10097  001E' 6E00'              	movwf	(??_make8+2)& (0+255),c
 10098  0020' 0EFF               	movlw	255
 10099  0022' 141A'              	andwf	make8@data+3,w,c
 10100  0024' 6E00'              	movwf	(??_make8+3)& (0+255),c
 10101  0026' 0E19               	movlw	25
 10102  0028' D005               	goto	u6190
 10103  002A'                    u6195:
 10104  002A' 90D8               	bcf	status,0,c
 10105  002C' 321F'              	rrcf	??_make8+3,f,c
 10106  002E' 321E'              	rrcf	??_make8+2,f,c
 10107  0030' 321D'              	rrcf	??_make8+1,f,c
 10108  0032' 321C'              	rrcf	??_make8,f,c
 10109  0034'                    u6190:
 10110  0034' 2EE8               	decfsz	wreg,f,c
 10111  0036' D7F9               	goto	u6195
 10112  0038' 501C'              	movf	??_make8,w,c
 10113  003A' 0012               	return	
 10114  003C'                    
 10115                           ;SystemCommon.c: 75: return (0);
 10116  003C' 0E00               	movlw	0
 10117                           
 10118                           ;SystemCommon.c: 76: }
 10119  003E' 0012               	return	
 10120  0040'                    l1291:
 10121  0040' 501B'              	movf	make8@dataLocation,w,c
 10122                           
 10123                           ; Switch size 1, requested type "space"
 10124                           ; Number of cases is 4, Range of values is 0 to 3
 10125                           ; switch strategies available:
 10126                           ; Name         Instructions Cycles
 10127                           ; simple_byte           13     7 (average)
 10128                           ;	Chosen strategy is simple_byte
 10129  0042' 0A00               	xorlw	0	; case 0
 10130  0044' B4D8               	btfsc	status,2,c
 10131  0046' D7DD               	goto	l1292
 10132  0048' 0A01               	xorlw	1	; case 1
 10133  004A' B4D8               	btfsc	status,2,c
 10134  004C' D7DC               	goto	l1294
 10135  004E' 0A03               	xorlw	3	; case 2
 10136  0050' B4D8               	btfsc	status,2,c
 10137  0052' D7DB               	goto	l1295
 10138  0054' 0A01               	xorlw	1	; case 3
 10139  0056' B4D8               	btfsc	status,2,c
 10140  0058' D7DA               	goto	l1296
 10141  005A' D7F0               	goto	l1297
 10142  005C'                    __end_of_make8:
 10143                           	opt stack 0
 10144                           tosu	equ	0xFFF
 10145                           tosh	equ	0xFFE
 10146                           tosl	equ	0xFFD
 10147                           pclath	equ	0xFFA
 10148                           tblptru	equ	0xFF8
 10149                           tblptrh	equ	0xFF7
 10150                           tblptrl	equ	0xFF6
 10151                           tablat	equ	0xFF5
 10152                           prodh	equ	0xFF4
 10153                           prodl	equ	0xFF3
 10154                           intcon	equ	0xFF2
 10155                           intcon2	equ	0xFF1
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           indf1	equ	0xFE7
 10159                           postdec1	equ	0xFE5
 10160                           fsr1h	equ	0xFE2
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10170 ;; Defined at:
 10171 ;;		line 232 in file "SwSpiApp.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;  phrType         1    wreg     enum E7550
 10174 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  phrType         1   24[COMRAM] enum E7550
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      void 
 10179 ;; Registers used:
 10180 ;;		wreg, status,2, status,0
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10186 ;;      Params:         1       0       0       0       0       0       0
 10187 ;;      Locals:         1       0       0       0       0       0       0
 10188 ;;      Temps:          0       0       0       0       0       0       0
 10189 ;;      Totals:         2       0       0       0       0       0       0
 10190 ;;Total ram usage:        2 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    3
 10193 ;; This function calls:
 10194 ;;		Nothing
 10195 ;; This function is called by:
 10196 ;;		_SWSPI_send_word
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text68
 10201  0000'                    __ptext68:
 10202                           	opt stack 0
 10203  0000'                    _SwSpi_Set_Synth_Le_Pin:
 10204                           	opt stack 23
 10205                           
 10206                           ;incstack = 0
 10207                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10208  0000' 6E18'              	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10209                           
 10210                           ;SwSpiApp.c: 234: switch(phrType)
 10211  0002' D014               	goto	l683
 10212  0004'                    
 10213                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10214  0004' 0417'              	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10215  0006' A4D8               	btfss	status,2,c
 10216  0008' D002               	goto	l685
 10217                           
 10218                           ;SwSpiApp.c: 238: {
 10219                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10220  000A' 848B               	bsf	3979,2,c	;volatile
 10221                           
 10222                           ;SwSpiApp.c: 240: }
 10223  000C' 0012               	return	
 10224  000E'                    l685:
 10225                           
 10226                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10227  000E' 5017'              	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10228  0010' A4D8               	btfss	status,2,c
 10229  0012' 0012               	return	
 10230                           
 10231                           ;SwSpiApp.c: 242: {
 10232                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10233  0014' 948B               	bcf	3979,2,c	;volatile
 10234                           
 10235                           ;SwSpiApp.c: 244: }
 10236                           ;SwSpiApp.c: 245: break;
 10237  0016' 0012               	return	
 10238  0018'                    
 10239                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10240  0018' 0417'              	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10241  001A' A4D8               	btfss	status,2,c
 10242  001C' D002               	goto	l694
 10243                           
 10244                           ;SwSpiApp.c: 249: {
 10245                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10246  001E' 868C               	bsf	3980,3,c	;volatile
 10247                           
 10248                           ;SwSpiApp.c: 251: }
 10249  0020' 0012               	return	
 10250  0022'                    l694:
 10251                           
 10252                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10253  0022' 5017'              	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10254  0024' A4D8               	btfss	status,2,c
 10255  0026' 0012               	return	
 10256                           
 10257                           ;SwSpiApp.c: 253: {
 10258                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10259  0028' 968C               	bcf	3980,3,c	;volatile
 10260                           
 10261                           ;SwSpiApp.c: 257: }
 10262                           
 10263                           ;SwSpiApp.c: 255: }
 10264                           ;SwSpiApp.c: 256: break;
 10265  002A' 0012               	return	
 10266  002C'                    l683:
 10267  002C' 5018'              	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10268                           
 10269                           ; Switch size 1, requested type "space"
 10270                           ; Number of cases is 2, Range of values is 0 to 1
 10271                           ; switch strategies available:
 10272                           ; Name         Instructions Cycles
 10273                           ; simple_byte            7     4 (average)
 10274                           ;	Chosen strategy is simple_byte
 10275  002E' 0A00               	xorlw	0	; case 0
 10276  0030' B4D8               	btfsc	status,2,c
 10277  0032' D7E8               	goto	l684
 10278  0034' 0A01               	xorlw	1	; case 1
 10279  0036' A4D8               	btfss	status,2,c
 10280  0038' 0012               	return	
 10281  003A' D7EE               	goto	l693
 10282  003C'                    __end_of_SwSpi_Set_Synth_Le_Pin:
 10283                           	opt stack 0
 10284                           tosu	equ	0xFFF
 10285                           tosh	equ	0xFFE
 10286                           tosl	equ	0xFFD
 10287                           pclath	equ	0xFFA
 10288                           tblptru	equ	0xFF8
 10289                           tblptrh	equ	0xFF7
 10290                           tblptrl	equ	0xFF6
 10291                           tablat	equ	0xFF5
 10292                           prodh	equ	0xFF4
 10293                           prodl	equ	0xFF3
 10294                           intcon	equ	0xFF2
 10295                           intcon2	equ	0xFF1
 10296                           postinc0	equ	0xFEE
 10297                           wreg	equ	0xFE8
 10298                           indf1	equ	0xFE7
 10299                           postdec1	equ	0xFE5
 10300                           fsr1h	equ	0xFE2
 10301                           fsr1l	equ	0xFE1
 10302                           indf2	equ	0xFDF
 10303                           postinc2	equ	0xFDE
 10304                           postdec2	equ	0xFDD
 10305                           fsr2h	equ	0xFDA
 10306                           fsr2l	equ	0xFD9
 10307                           status	equ	0xFD8
 10308                           
 10309 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10310 ;; Defined at:
 10311 ;;		line 260 in file "SwSpiApp.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;  cPinMode        1    wreg     unsigned char 
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      void 
 10318 ;; Registers used:
 10319 ;;		wreg, status,2, status,0
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10325 ;;      Params:         0       0       0       0       0       0       0
 10326 ;;      Locals:         1       0       0       0       0       0       0
 10327 ;;      Temps:          0       0       0       0       0       0       0
 10328 ;;      Totals:         1       0       0       0       0       0       0
 10329 ;;Total ram usage:        1 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    3
 10332 ;; This function calls:
 10333 ;;		Nothing
 10334 ;; This function is called by:
 10335 ;;		_SWSPI_send_word
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           	psect	text69
 10340  0000'                    __ptext69:
 10341                           	opt stack 0
 10342  0000'                    _SwSpi_Set_Dac_Sync_Pin:
 10343                           	opt stack 23
 10344                           
 10345                           ;incstack = 0
 10346                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10347  0000' 6E17'              	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10348                           
 10349                           ;SwSpiApp.c: 262: switch(cPinMode)
 10350  0002' D004               	goto	l704
 10351  0004'                    
 10352                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10353  0004' 9489               	bcf	3977,2,c	;volatile
 10354                           
 10355                           ;SwSpiApp.c: 266: break;
 10356  0006' 0012               	return	
 10357  0008'                    
 10358                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10359  0008' 8489               	bsf	3977,2,c	;volatile
 10360                           
 10361                           ;SwSpiApp.c: 271: }
 10362                           
 10363                           ;SwSpiApp.c: 270: break;
 10364  000A' 0012               	return	
 10365  000C'                    l704:
 10366  000C' 5017'              	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10367                           
 10368                           ; Switch size 1, requested type "space"
 10369                           ; Number of cases is 2, Range of values is 0 to 1
 10370                           ; switch strategies available:
 10371                           ; Name         Instructions Cycles
 10372                           ; simple_byte            7     4 (average)
 10373                           ;	Chosen strategy is simple_byte
 10374  000E' 0A00               	xorlw	0	; case 0
 10375  0010' B4D8               	btfsc	status,2,c
 10376  0012' D7F8               	goto	l705
 10377  0014' 0A01               	xorlw	1	; case 1
 10378  0016' A4D8               	btfss	status,2,c
 10379  0018' 0012               	return	
 10380  001A' D7F6               	goto	l709
 10381  001C'                    __end_of_SwSpi_Set_Dac_Sync_Pin:
 10382                           	opt stack 0
 10383                           tosu	equ	0xFFF
 10384                           tosh	equ	0xFFE
 10385                           tosl	equ	0xFFD
 10386                           pclath	equ	0xFFA
 10387                           tblptru	equ	0xFF8
 10388                           tblptrh	equ	0xFF7
 10389                           tblptrl	equ	0xFF6
 10390                           tablat	equ	0xFF5
 10391                           prodh	equ	0xFF4
 10392                           prodl	equ	0xFF3
 10393                           intcon	equ	0xFF2
 10394                           intcon2	equ	0xFF1
 10395                           postinc0	equ	0xFEE
 10396                           wreg	equ	0xFE8
 10397                           indf1	equ	0xFE7
 10398                           postdec1	equ	0xFE5
 10399                           fsr1h	equ	0xFE2
 10400                           fsr1l	equ	0xFE1
 10401                           indf2	equ	0xFDF
 10402                           postinc2	equ	0xFDE
 10403                           postdec2	equ	0xFDD
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408 ;; *************** function _SWSPI_Synth_send_bits *****************
 10409 ;; Defined at:
 10410 ;;		line 67 in file "SwSpiApp.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  phrType         1    wreg     enum E7550
 10413 ;;  data            4   33[COMRAM] unsigned long 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  phrType         1   37[BANK0 ] enum E7550
 10416 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10417 ;;  mask            4   32[BANK0 ] unsigned long 
 10418 ;;  count           1   36[BANK0 ] unsigned char 
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10428 ;;      Params:         4       0       0       0       0       0       0
 10429 ;;      Locals:         0      38       0       0       0       0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0
 10431 ;;      Totals:         4      38       0       0       0       0       0
 10432 ;;Total ram usage:       42 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    5
 10435 ;; This function calls:
 10436 ;;		_Make32bitsArray
 10437 ;;		_SwSpi_Clk_Pin
 10438 ;;		_SwSpi_Data_Pin
 10439 ;;		_ZeroBitsArray
 10440 ;; This function is called by:
 10441 ;;		_SWSPI_send_word
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           	psect	text70
 10446  0000'                    __ptext70:
 10447                           	opt stack 0
 10448  0000'                    _SWSPI_Synth_send_bits:
 10449                           	opt stack 21
 10450                           
 10451                           ;incstack = 0
 10452                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10453  0000' 0100               	movlb	0	; () banked
 10454  0002' 6F00'              	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10455                           
 10456                           ;SwSpiApp.c: 69: uint8_t count;
 10457                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10458  0004' 0E01               	movlw	1
 10459  0006' 0100               	movlb	0	; () banked
 10460  0008' 6F00'              	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10461  000A' 0E00               	movlw	0
 10462  000C' 6F00'              	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10463  000E' 0E00               	movlw	0
 10464  0010' 6F00'              	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10465  0012' 0E00               	movlw	0
 10466  0014' 6F00'              	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;SwSpiApp.c: 72: bool bitArray[32];
 10470                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10471  0016' 0E00'              	movlw	low SWSPI_Synth_send_bits@bitArray
 10472  0018' 6E1F'              	movwf	ZeroBitsArray@array,c
 10473  001A' 0E00'              	movlw	high SWSPI_Synth_send_bits@bitArray
 10474  001C' 6E20'              	movwf	ZeroBitsArray@array+1,c
 10475  001E' EC00' F000'        	call	_ZeroBitsArray	;wreg free
 10476                           
 10477                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10478  0022' 0E00'              	movlw	low SWSPI_Synth_send_bits@bitArray
 10479  0024' 6E17'              	movwf	Make32bitsArray@array,c
 10480  0026' 0E00'              	movlw	high SWSPI_Synth_send_bits@bitArray
 10481  0028' 6E18'              	movwf	Make32bitsArray@array+1,c
 10482  002A' C021' F019'        	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10483  002E' C022' F01A'        	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10484  0032' C023' F01B'        	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10485  0036' C024' F01C'        	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10486  003A' EC00' F000'        	call	_Make32bitsArray	;wreg free
 10487                           
 10488                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10489  003E' 0E00               	movlw	0
 10490  0040' 0100               	movlb	0	; () banked
 10491  0042' 6F00'              	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10492  0044'                    l6651:
 10493                           
 10494                           ; BSR set to: 0
 10495  0044' 0E1F               	movlw	31
 10496  0046' 6500'              	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10497  0048' D001               	goto	l589
 10498  004A' D026               	goto	u6260
 10499  004C'                    l589:
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;SwSpiApp.c: 78: {
 10503                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 10504                           
 10505                           ; BSR set to: 0
 10506  004C' 0E00               	movlw	0
 10507  004E' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 10508  0050' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10509  0052' EC00' F000'        	call	_SwSpi_Clk_Pin
 10510                           
 10511                           ;SwSpiApp.c: 82: if (bitArray[count])
 10512  0056' 0100               	movlb	0	; () banked
 10513  0058' 5100'              	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10514  005A' 0D01               	mullw	1
 10515  005C' 0E00'              	movlw	low SWSPI_Synth_send_bits@bitArray
 10516  005E' 24F3               	addwf	prodl,w,c
 10517  0060' 6ED9               	movwf	fsr2l,c
 10518  0062' 0E00'              	movlw	high SWSPI_Synth_send_bits@bitArray
 10519  0064' 20F4               	addwfc	prodh,w,c
 10520  0066' 6EDA               	movwf	fsr2h,c
 10521  0068' 50DF               	movf	indf2,w,c
 10522  006A' B4D8               	btfsc	status,2,c
 10523  006C' D006               	goto	l591
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;SwSpiApp.c: 83: {
 10527                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 10528  006E' 0E01               	movlw	1
 10529  0070' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 10530  0072' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10531  0074' EC00' F000'        	call	_SwSpi_Data_Pin
 10532                           
 10533                           ;SwSpiApp.c: 85: }
 10534  0078' D006               	goto	l592
 10535  007A'                    l591:
 10536                           
 10537                           ;SwSpiApp.c: 86: else
 10538                           ;SwSpiApp.c: 87: {
 10539                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 10540  007A' 0E00               	movlw	0
 10541  007C' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 10542  007E' 0100               	movlb	0	; () banked
 10543  0080' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10544  0082' EC00' F000'        	call	_SwSpi_Data_Pin
 10545  0086'                    l592:
 10546                           
 10547                           ;SwSpiApp.c: 89: }
 10548                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 10549  0086' 0E01               	movlw	1
 10550  0088' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 10551  008A' 0100               	movlb	0	; () banked
 10552  008C' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10553  008E' EC00' F000'        	call	_SwSpi_Clk_Pin
 10554  0092' 0100               	movlb	0	; () banked
 10555  0094' 2B00'              	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 10556  0096' D7D6               	goto	l6651
 10557  0098'                    u6260:
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;SwSpiApp.c: 92: }
 10561                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 10562                           
 10563                           ; BSR set to: 0
 10564  0098' 0E21               	movlw	33
 10565  009A'                    u8147:
 10566  009A' 2EE8               	decfsz	wreg,f,c
 10567  009C' D7FE               	bra	u8147
 10568  009E' F000               	nop	
 10569                           
 10570                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 10571  00A0' 0E00               	movlw	0
 10572  00A2' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 10573  00A4' 0100               	movlb	0	; () banked
 10574  00A6' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10575  00A8' EC00' F000'        	call	_SwSpi_Data_Pin
 10576                           
 10577                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 10578  00AC' 0E00               	movlw	0
 10579  00AE' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 10580  00B0' 0100               	movlb	0	; () banked
 10581  00B2' 5100'              	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10582  00B4' EC00' F000'        	call	_SwSpi_Clk_Pin
 10583  00B8' 0012               	return		;funcret
 10584  00BA'                    __end_of_SWSPI_Synth_send_bits:
 10585                           	opt stack 0
 10586                           tosu	equ	0xFFF
 10587                           tosh	equ	0xFFE
 10588                           tosl	equ	0xFFD
 10589                           pclath	equ	0xFFA
 10590                           tblptru	equ	0xFF8
 10591                           tblptrh	equ	0xFF7
 10592                           tblptrl	equ	0xFF6
 10593                           tablat	equ	0xFF5
 10594                           prodh	equ	0xFF4
 10595                           prodl	equ	0xFF3
 10596                           intcon	equ	0xFF2
 10597                           intcon2	equ	0xFF1
 10598                           postinc0	equ	0xFEE
 10599                           wreg	equ	0xFE8
 10600                           indf1	equ	0xFE7
 10601                           postdec1	equ	0xFE5
 10602                           fsr1h	equ	0xFE2
 10603                           fsr1l	equ	0xFE1
 10604                           indf2	equ	0xFDF
 10605                           postinc2	equ	0xFDE
 10606                           postdec2	equ	0xFDD
 10607                           fsr2h	equ	0xFDA
 10608                           fsr2l	equ	0xFD9
 10609                           status	equ	0xFD8
 10610                           
 10611 ;; *************** function _ZeroBitsArray *****************
 10612 ;; Defined at:
 10613 ;;		line 29 in file "SystemCommon.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  array           2   31[COMRAM] PTR unsigned char 
 10616 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  1    wreg      void 
 10621 ;; Registers used:
 10622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10628 ;;      Params:         2       0       0       0       0       0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0
 10631 ;;      Totals:         2       0       0       0       0       0       0
 10632 ;;Total ram usage:        2 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    4
 10635 ;; This function calls:
 10636 ;;		_memset
 10637 ;; This function is called by:
 10638 ;;		_SWSPI_Synth_send_bits
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text71
 10643  0000'                    __ptext71:
 10644                           	opt stack 0
 10645  0000'                    _ZeroBitsArray:
 10646                           	opt stack 21
 10647                           
 10648                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 10649                           
 10650                           ;incstack = 0
 10651  0000' C01F' F017'        	movff	ZeroBitsArray@array,memset@p1
 10652  0004' C020' F018'        	movff	ZeroBitsArray@array+1,memset@p1+1
 10653  0008' 0E00               	movlw	0
 10654  000A' 6E1A'              	movwf	memset@c+1,c
 10655  000C' 0E00               	movlw	0
 10656  000E' 6E19'              	movwf	memset@c,c
 10657  0010' 0E00               	movlw	0
 10658  0012' 6E1C'              	movwf	memset@n+1,c
 10659  0014' 0E20               	movlw	32
 10660  0016' 6E1B'              	movwf	memset@n,c
 10661  0018' EC00' F000'        	call	_memset	;wreg free
 10662  001C' 0012               	return		;funcret
 10663  001E'                    __end_of_ZeroBitsArray:
 10664                           	opt stack 0
 10665                           tosu	equ	0xFFF
 10666                           tosh	equ	0xFFE
 10667                           tosl	equ	0xFFD
 10668                           pclath	equ	0xFFA
 10669                           tblptru	equ	0xFF8
 10670                           tblptrh	equ	0xFF7
 10671                           tblptrl	equ	0xFF6
 10672                           tablat	equ	0xFF5
 10673                           prodh	equ	0xFF4
 10674                           prodl	equ	0xFF3
 10675                           intcon	equ	0xFF2
 10676                           intcon2	equ	0xFF1
 10677                           postinc0	equ	0xFEE
 10678                           wreg	equ	0xFE8
 10679                           indf1	equ	0xFE7
 10680                           postdec1	equ	0xFE5
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           fsr2h	equ	0xFDA
 10687                           fsr2l	equ	0xFD9
 10688                           status	equ	0xFD8
 10689                           
 10690 ;; *************** function _memset *****************
 10691 ;; Defined at:
 10692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;  p1              2   23[COMRAM] PTR void 
 10695 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@Tx
      +Msg(27), 
 10696 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10697 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10698 ;;  c               2   25[COMRAM] int 
 10699 ;;  n               2   27[COMRAM] unsigned int 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  p               2   29[COMRAM] PTR unsigned char 
 10702 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@Tx
      +Msg(27), 
 10703 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10704 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  2   23[COMRAM] PTR void 
 10707 ;; Registers used:
 10708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10714 ;;      Params:         6       0       0       0       0       0       0
 10715 ;;      Locals:         2       0       0       0       0       0       0
 10716 ;;      Temps:          0       0       0       0       0       0       0
 10717 ;;      Totals:         8       0       0       0       0       0       0
 10718 ;;Total ram usage:        8 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    3
 10721 ;; This function calls:
 10722 ;;		Nothing
 10723 ;; This function is called by:
 10724 ;;		_ZeroArray
 10725 ;;		_ZeroBitsArray
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           	psect	text72
 10730  0000'                    __ptext72:
 10731                           	opt stack 0
 10732  0000'                    _memset:
 10733                           	opt stack 25
 10734                           
 10735                           ;incstack = 0
 10736  0000' C017' F01D'        	movff	memset@p1,memset@p
 10737  0004' C018' F01E'        	movff	memset@p1+1,memset@p+1
 10738  0008' D008               	goto	l1876
 10739  000A'                    l6357:
 10740  000A' C01D' FFD9         	movff	memset@p,fsr2l
 10741  000E' C01E' FFDA         	movff	memset@p+1,fsr2h
 10742  0012' C019' FFDF         	movff	memset@c,indf2
 10743  0016' 4A1D'              	infsnz	memset@p,f,c
 10744  0018' 2A1E'              	incf	memset@p+1,f,c
 10745  001A'                    l1876:
 10746  001A' 061B'              	decf	memset@n,f,c
 10747  001C' A0D8               	btfss	status,0,c
 10748  001E' 061C'              	decf	memset@n+1,f,c
 10749  0020' 281B'              	incf	memset@n,w,c
 10750  0022' E1F3               	bnz	l6357
 10751  0024' 281C'              	incf	memset@n+1,w,c
 10752  0026' B4D8               	btfsc	status,2,c
 10753  0028' 0012               	return	
 10754  002A' D7EF               	goto	l1877
 10755  002C'                    __end_of_memset:
 10756                           	opt stack 0
 10757                           tosu	equ	0xFFF
 10758                           tosh	equ	0xFFE
 10759                           tosl	equ	0xFFD
 10760                           pclath	equ	0xFFA
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           intcon2	equ	0xFF1
 10769                           postinc0	equ	0xFEE
 10770                           wreg	equ	0xFE8
 10771                           indf1	equ	0xFE7
 10772                           postdec1	equ	0xFE5
 10773                           fsr1h	equ	0xFE2
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           postdec2	equ	0xFDD
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function _Make32bitsArray *****************
 10783 ;; Defined at:
 10784 ;;		line 79 in file "SystemCommon.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  array           2   23[COMRAM] PTR unsigned char 
 10787 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10788 ;;  data            4   25[COMRAM] unsigned long 
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;  idx             2   31[COMRAM] int 
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10800 ;;      Params:         6       0       0       0       0       0       0
 10801 ;;      Locals:         2       0       0       0       0       0       0
 10802 ;;      Temps:          2       0       0       0       0       0       0
 10803 ;;      Totals:        10       0       0       0       0       0       0
 10804 ;;Total ram usage:       10 bytes
 10805 ;; Hardware stack levels used:    1
 10806 ;; Hardware stack levels required when called:    3
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_SWSPI_Synth_send_bits
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text73
 10815  0000'                    __ptext73:
 10816                           	opt stack 0
 10817  0000'                    _Make32bitsArray:
 10818                           	opt stack 22
 10819                           
 10820                           ;SystemCommon.c: 81: for(int idx = 0; idx <= 32; idx++)
 10821                           
 10822                           ;incstack = 0
 10823  0000' 0E00               	movlw	0
 10824  0002' 6E20'              	movwf	Make32bitsArray@idx+1,c
 10825  0004' 0E00               	movlw	0
 10826  0006' 6E1F'              	movwf	Make32bitsArray@idx,c
 10827  0008'                    l6453:
 10828  0008' BE20'              	btfsc	Make32bitsArray@idx+1,7,c
 10829  000A' D006               	goto	l1301
 10830  000C' 5020'              	movf	Make32bitsArray@idx+1,w,c
 10831  000E' E123               	bnz	l1303
 10832  0010' 0E21               	movlw	33
 10833  0012' 5C1F'              	subwf	Make32bitsArray@idx,w,c
 10834  0014' B0D8               	btfsc	status,0,c
 10835  0016' 0012               	return	
 10836  0018'                    l1301:
 10837                           
 10838                           ;SystemCommon.c: 82: {
 10839                           ;SystemCommon.c: 83: array[32 - idx - 1] = data % 2;
 10840  0018' 0E01               	movlw	1
 10841  001A' 241F'              	addwf	Make32bitsArray@idx,w,c
 10842  001C' 6E00'              	movwf	??_Make32bitsArray& (0+255),c
 10843  001E' 0E00               	movlw	0
 10844  0020' 2020'              	addwfc	Make32bitsArray@idx+1,w,c
 10845  0022' 6E00'              	movwf	(??_Make32bitsArray+1)& (0+255),c
 10846  0024' 1E1D'              	comf	??_Make32bitsArray,f,c
 10847  0026' 1E1E'              	comf	??_Make32bitsArray+1,f,c
 10848  0028' 4A1D'              	infsnz	??_Make32bitsArray,f,c
 10849  002A' 2A1E'              	incf	??_Make32bitsArray+1,f,c
 10850  002C' 0E20               	movlw	32
 10851  002E' 261D'              	addwf	??_Make32bitsArray,f,c
 10852  0030' 0E00               	movlw	0
 10853  0032' 221E'              	addwfc	??_Make32bitsArray+1,f,c
 10854  0034' 501D'              	movf	??_Make32bitsArray,w,c
 10855  0036' 2417'              	addwf	Make32bitsArray@array,w,c
 10856  0038' 6ED9               	movwf	fsr2l,c
 10857  003A' 501E'              	movf	??_Make32bitsArray+1,w,c
 10858  003C' 2018'              	addwfc	Make32bitsArray@array+1,w,c
 10859  003E' 6EDA               	movwf	fsr2h,c
 10860  0040' 5019'              	movf	Make32bitsArray@data,w,c
 10861  0042' 0B01               	andlw	1
 10862  0044' 6EDF               	movwf	indf2,c
 10863                           
 10864                           ;SystemCommon.c: 84: data /= 2;
 10865  0046' 90D8               	bcf	status,0,c
 10866  0048' 321C'              	rrcf	Make32bitsArray@data+3,f,c
 10867  004A' 321B'              	rrcf	Make32bitsArray@data+2,f,c
 10868  004C' 321A'              	rrcf	Make32bitsArray@data+1,f,c
 10869  004E' 3219'              	rrcf	Make32bitsArray@data,f,c
 10870  0050' 4A1F'              	infsnz	Make32bitsArray@idx,f,c
 10871  0052' 2A20'              	incf	Make32bitsArray@idx+1,f,c
 10872  0054' D7D9               	goto	l6453
 10873  0056'                    l1303:
 10874  0056' 0012               	return		;funcret
 10875  0058'                    __end_of_Make32bitsArray:
 10876                           	opt stack 0
 10877                           tosu	equ	0xFFF
 10878                           tosh	equ	0xFFE
 10879                           tosl	equ	0xFFD
 10880                           pclath	equ	0xFFA
 10881                           tblptru	equ	0xFF8
 10882                           tblptrh	equ	0xFF7
 10883                           tblptrl	equ	0xFF6
 10884                           tablat	equ	0xFF5
 10885                           prodh	equ	0xFF4
 10886                           prodl	equ	0xFF3
 10887                           intcon	equ	0xFF2
 10888                           intcon2	equ	0xFF1
 10889                           postinc0	equ	0xFEE
 10890                           wreg	equ	0xFE8
 10891                           indf1	equ	0xFE7
 10892                           postdec1	equ	0xFE5
 10893                           fsr1h	equ	0xFE2
 10894                           fsr1l	equ	0xFE1
 10895                           indf2	equ	0xFDF
 10896                           postinc2	equ	0xFDE
 10897                           postdec2	equ	0xFDD
 10898                           fsr2h	equ	0xFDA
 10899                           fsr2l	equ	0xFD9
 10900                           status	equ	0xFD8
 10901                           
 10902 ;; *************** function _SWSPI_DAC_send_bits *****************
 10903 ;; Defined at:
 10904 ;;		line 43 in file "SwSpiApp.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  phrType         1    wreg     enum E7550
 10907 ;;  data            1   25[COMRAM] unsigned char 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  phrType         1   27[COMRAM] enum E7550
 10910 ;;  count           1   26[COMRAM] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      void 
 10913 ;; Registers used:
 10914 ;;		wreg, status,2, status,0, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10920 ;;      Params:         1       0       0       0       0       0       0
 10921 ;;      Locals:         2       0       0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0
 10923 ;;      Totals:         3       0       0       0       0       0       0
 10924 ;;Total ram usage:        3 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    4
 10927 ;; This function calls:
 10928 ;;		_SwSpi_Clk_Pin
 10929 ;;		_SwSpi_Data_Pin
 10930 ;; This function is called by:
 10931 ;;		_SWSPI_send_word
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           	psect	text74
 10936  0000'                    __ptext74:
 10937                           	opt stack 0
 10938  0000'                    _SWSPI_DAC_send_bits:
 10939                           	opt stack 22
 10940                           
 10941                           ;incstack = 0
 10942                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 10943  0000' 6E1B'              	movwf	SWSPI_DAC_send_bits@phrType,c
 10944                           
 10945                           ;SwSpiApp.c: 45: uint8_t count;
 10946                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 10947  0002' 0E08               	movlw	8
 10948  0004' 6E1A'              	movwf	SWSPI_DAC_send_bits@count,c
 10949  0006' D01A               	goto	l581
 10950  0008'                    
 10951                           ;SwSpiApp.c: 47: {
 10952                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 10953  0008' 0E01               	movlw	1
 10954  000A' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 10955  000C' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 10956  000E' EC00' F000'        	call	_SwSpi_Clk_Pin
 10957                           
 10958                           ;SwSpiApp.c: 50: if (data & 0X80)
 10959  0012' AE19'              	btfss	SWSPI_DAC_send_bits@data,7,c
 10960  0014' D006               	goto	l583
 10961                           
 10962                           ;SwSpiApp.c: 51: {
 10963                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 10964  0016' 0E01               	movlw	1
 10965  0018' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 10966  001A' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 10967  001C' EC00' F000'        	call	_SwSpi_Data_Pin
 10968                           
 10969                           ;SwSpiApp.c: 54: }
 10970  0020' D005               	goto	l584
 10971  0022'                    l583:
 10972                           
 10973                           ;SwSpiApp.c: 55: else
 10974                           ;SwSpiApp.c: 56: {
 10975                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 10976  0022' 0E00               	movlw	0
 10977  0024' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 10978  0026' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 10979  0028' EC00' F000'        	call	_SwSpi_Data_Pin
 10980  002C'                    l584:
 10981                           
 10982                           ;SwSpiApp.c: 58: }
 10983                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 10984  002C' 0E00               	movlw	0
 10985  002E' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 10986  0030' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 10987  0032' EC00' F000'        	call	_SwSpi_Clk_Pin
 10988  0036' 061A'              	decf	SWSPI_DAC_send_bits@count,f,c
 10989  0038' 90D8               	bcf	status,0,c
 10990  003A' 3619'              	rlcf	SWSPI_DAC_send_bits@data,f,c
 10991  003C'                    l581:
 10992  003C' 501A'              	movf	SWSPI_DAC_send_bits@count,w,c
 10993  003E' A4D8               	btfss	status,2,c
 10994  0040' D7E3               	goto	l582
 10995                           
 10996                           ;SwSpiApp.c: 61: }
 10997                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 10998  0042' 0E00               	movlw	0
 10999  0044' 6E17'              	movwf	SwSpi_Data_Pin@cPinMode,c
 11000  0046' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 11001  0048' EC00' F000'        	call	_SwSpi_Data_Pin
 11002                           
 11003                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11004  004C' 0E00               	movlw	0
 11005  004E' 6E17'              	movwf	SwSpi_Clk_Pin@cPinMode,c
 11006  0050' 501B'              	movf	SWSPI_DAC_send_bits@phrType,w,c
 11007  0052' EC00' F000'        	call	_SwSpi_Clk_Pin
 11008  0056' 0012               	return		;funcret
 11009  0058'                    __end_of_SWSPI_DAC_send_bits:
 11010                           	opt stack 0
 11011                           tosu	equ	0xFFF
 11012                           tosh	equ	0xFFE
 11013                           tosl	equ	0xFFD
 11014                           pclath	equ	0xFFA
 11015                           tblptru	equ	0xFF8
 11016                           tblptrh	equ	0xFF7
 11017                           tblptrl	equ	0xFF6
 11018                           tablat	equ	0xFF5
 11019                           prodh	equ	0xFF4
 11020                           prodl	equ	0xFF3
 11021                           intcon	equ	0xFF2
 11022                           intcon2	equ	0xFF1
 11023                           postinc0	equ	0xFEE
 11024                           wreg	equ	0xFE8
 11025                           indf1	equ	0xFE7
 11026                           postdec1	equ	0xFE5
 11027                           fsr1h	equ	0xFE2
 11028                           fsr1l	equ	0xFE1
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _SwSpi_Data_Pin *****************
 11037 ;; Defined at:
 11038 ;;		line 103 in file "SwSpiApp.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  phrType         1    wreg     enum E7550
 11041 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;  phrType         1   24[COMRAM] enum E7550
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, status,2, status,0
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11053 ;;      Params:         1       0       0       0       0       0       0
 11054 ;;      Locals:         1       0       0       0       0       0       0
 11055 ;;      Temps:          0       0       0       0       0       0       0
 11056 ;;      Totals:         2       0       0       0       0       0       0
 11057 ;;Total ram usage:        2 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    3
 11060 ;; This function calls:
 11061 ;;		Nothing
 11062 ;; This function is called by:
 11063 ;;		_SWSPI_DAC_send_bits
 11064 ;;		_SWSPI_Synth_send_bits
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text75
 11069  0000'                    __ptext75:
 11070                           	opt stack 0
 11071  0000'                    _SwSpi_Data_Pin:
 11072                           	opt stack 22
 11073                           
 11074                           ;incstack = 0
 11075                           ;SwSpi_Data_Pin@phrType stored from wreg
 11076  0000' 6E18'              	movwf	SwSpi_Data_Pin@phrType,c
 11077                           
 11078                           ;SwSpiApp.c: 105: switch(phrType)
 11079  0002' D01E               	goto	l596
 11080  0004'                    
 11081                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11082  0004' 0417'              	decf	SwSpi_Data_Pin@cPinMode,w,c
 11083  0006' A4D8               	btfss	status,2,c
 11084  0008' D002               	goto	l598
 11085                           
 11086                           ;SwSpiApp.c: 109: {
 11087                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11088  000A' 808C               	bsf	3980,0,c	;volatile
 11089                           
 11090                           ;SwSpiApp.c: 111: }
 11091  000C' 0012               	return	
 11092  000E'                    l598:
 11093                           
 11094                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11095  000E' 5017'              	movf	SwSpi_Data_Pin@cPinMode,w,c
 11096  0010' A4D8               	btfss	status,2,c
 11097  0012' 0012               	return	
 11098                           
 11099                           ;SwSpiApp.c: 113: {
 11100                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11101  0014' 908C               	bcf	3980,0,c	;volatile
 11102                           
 11103                           ;SwSpiApp.c: 115: }
 11104                           ;SwSpiApp.c: 116: break;
 11105  0016' 0012               	return	
 11106  0018'                    
 11107                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11108  0018' 0417'              	decf	SwSpi_Data_Pin@cPinMode,w,c
 11109  001A' A4D8               	btfss	status,2,c
 11110  001C' D002               	goto	l607
 11111                           
 11112                           ;SwSpiApp.c: 120: {
 11113                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11114  001E' 8A8B               	bsf	3979,5,c	;volatile
 11115                           
 11116                           ;SwSpiApp.c: 122: }
 11117  0020' 0012               	return	
 11118  0022'                    l607:
 11119                           
 11120                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11121  0022' 5017'              	movf	SwSpi_Data_Pin@cPinMode,w,c
 11122  0024' A4D8               	btfss	status,2,c
 11123  0026' 0012               	return	
 11124                           
 11125                           ;SwSpiApp.c: 124: {
 11126                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11127  0028' 9A8B               	bcf	3979,5,c	;volatile
 11128                           
 11129                           ;SwSpiApp.c: 126: }
 11130                           ;SwSpiApp.c: 127: break;
 11131  002A' 0012               	return	
 11132  002C'                    
 11133                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11134  002C' 0417'              	decf	SwSpi_Data_Pin@cPinMode,w,c
 11135  002E' A4D8               	btfss	status,2,c
 11136  0030' D002               	goto	l615
 11137                           
 11138                           ;SwSpiApp.c: 131: {
 11139                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11140  0032' 8889               	bsf	3977,4,c	;volatile
 11141                           
 11142                           ;SwSpiApp.c: 133: }
 11143  0034' 0012               	return	
 11144  0036'                    l615:
 11145                           
 11146                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11147  0036' 5017'              	movf	SwSpi_Data_Pin@cPinMode,w,c
 11148  0038' A4D8               	btfss	status,2,c
 11149  003A' 0012               	return	
 11150                           
 11151                           ;SwSpiApp.c: 135: {
 11152                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11153  003C' 9889               	bcf	3977,4,c	;volatile
 11154                           
 11155                           ;SwSpiApp.c: 139: }
 11156                           
 11157                           ;SwSpiApp.c: 137: }
 11158                           ;SwSpiApp.c: 138: break;
 11159  003E' 0012               	return	
 11160  0040'                    l596:
 11161  0040' 5018'              	movf	SwSpi_Data_Pin@phrType,w,c
 11162                           
 11163                           ; Switch size 1, requested type "space"
 11164                           ; Number of cases is 3, Range of values is 0 to 2
 11165                           ; switch strategies available:
 11166                           ; Name         Instructions Cycles
 11167                           ; simple_byte           10     6 (average)
 11168                           ;	Chosen strategy is simple_byte
 11169  0042' 0A00               	xorlw	0	; case 0
 11170  0044' B4D8               	btfsc	status,2,c
 11171  0046' D7DE               	goto	l597
 11172  0048' 0A01               	xorlw	1	; case 1
 11173  004A' B4D8               	btfsc	status,2,c
 11174  004C' D7E5               	goto	l606
 11175  004E' 0A03               	xorlw	3	; case 2
 11176  0050' A4D8               	btfss	status,2,c
 11177  0052' 0012               	return	
 11178  0054' D7EB               	goto	l614
 11179  0056'                    __end_of_SwSpi_Data_Pin:
 11180                           	opt stack 0
 11181                           tosu	equ	0xFFF
 11182                           tosh	equ	0xFFE
 11183                           tosl	equ	0xFFD
 11184                           pclath	equ	0xFFA
 11185                           tblptru	equ	0xFF8
 11186                           tblptrh	equ	0xFF7
 11187                           tblptrl	equ	0xFF6
 11188                           tablat	equ	0xFF5
 11189                           prodh	equ	0xFF4
 11190                           prodl	equ	0xFF3
 11191                           intcon	equ	0xFF2
 11192                           intcon2	equ	0xFF1
 11193                           postinc0	equ	0xFEE
 11194                           wreg	equ	0xFE8
 11195                           indf1	equ	0xFE7
 11196                           postdec1	equ	0xFE5
 11197                           fsr1h	equ	0xFE2
 11198                           fsr1l	equ	0xFE1
 11199                           indf2	equ	0xFDF
 11200                           postinc2	equ	0xFDE
 11201                           postdec2	equ	0xFDD
 11202                           fsr2h	equ	0xFDA
 11203                           fsr2l	equ	0xFD9
 11204                           status	equ	0xFD8
 11205                           
 11206 ;; *************** function _SwSpi_Clk_Pin *****************
 11207 ;; Defined at:
 11208 ;;		line 142 in file "SwSpiApp.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;  phrType         1    wreg     enum E7550
 11211 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;  phrType         1   24[COMRAM] enum E7550
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      void 
 11216 ;; Registers used:
 11217 ;;		wreg, status,2, status,0
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11223 ;;      Params:         1       0       0       0       0       0       0
 11224 ;;      Locals:         1       0       0       0       0       0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0
 11226 ;;      Totals:         2       0       0       0       0       0       0
 11227 ;;Total ram usage:        2 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    3
 11230 ;; This function calls:
 11231 ;;		Nothing
 11232 ;; This function is called by:
 11233 ;;		_SWSPI_DAC_send_bits
 11234 ;;		_SWSPI_Synth_send_bits
 11235 ;;		_SwSpi_Synth_Toggle_Clock
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text76
 11240  0000'                    __ptext76:
 11241                           	opt stack 0
 11242  0000'                    _SwSpi_Clk_Pin:
 11243                           	opt stack 22
 11244                           
 11245                           ;incstack = 0
 11246                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11247  0000' 6E18'              	movwf	SwSpi_Clk_Pin@phrType,c
 11248                           
 11249                           ;SwSpiApp.c: 144: switch(phrType)
 11250  0002' D01E               	goto	l625
 11251  0004'                    
 11252                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11253  0004' 0417'              	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11254  0006' A4D8               	btfss	status,2,c
 11255  0008' D002               	goto	l627
 11256                           
 11257                           ;SwSpiApp.c: 148: {
 11258                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11259  000A' 868B               	bsf	3979,3,c	;volatile
 11260                           
 11261                           ;SwSpiApp.c: 150: }
 11262  000C' 0012               	return	
 11263  000E'                    l627:
 11264                           
 11265                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11266  000E' 5017'              	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11267  0010' A4D8               	btfss	status,2,c
 11268  0012' 0012               	return	
 11269                           
 11270                           ;SwSpiApp.c: 152: {
 11271                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11272  0014' 968B               	bcf	3979,3,c	;volatile
 11273                           
 11274                           ;SwSpiApp.c: 154: }
 11275                           ;SwSpiApp.c: 155: break;
 11276  0016' 0012               	return	
 11277  0018'                    
 11278                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11279  0018' 0417'              	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11280  001A' A4D8               	btfss	status,2,c
 11281  001C' D002               	goto	l636
 11282                           
 11283                           ;SwSpiApp.c: 159: {
 11284                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11285  001E' 888B               	bsf	3979,4,c	;volatile
 11286                           
 11287                           ;SwSpiApp.c: 161: }
 11288  0020' 0012               	return	
 11289  0022'                    l636:
 11290                           
 11291                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11292  0022' 5017'              	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11293  0024' A4D8               	btfss	status,2,c
 11294  0026' 0012               	return	
 11295                           
 11296                           ;SwSpiApp.c: 163: {
 11297                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11298  0028' 988B               	bcf	3979,4,c	;volatile
 11299                           
 11300                           ;SwSpiApp.c: 165: }
 11301                           ;SwSpiApp.c: 167: break;
 11302  002A' 0012               	return	
 11303  002C'                    
 11304                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11305  002C' 0417'              	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11306  002E' A4D8               	btfss	status,2,c
 11307  0030' D002               	goto	l644
 11308                           
 11309                           ;SwSpiApp.c: 171: {
 11310                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11311  0032' 8689               	bsf	3977,3,c	;volatile
 11312                           
 11313                           ;SwSpiApp.c: 173: }
 11314  0034' 0012               	return	
 11315  0036'                    l644:
 11316                           
 11317                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11318  0036' 5017'              	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11319  0038' A4D8               	btfss	status,2,c
 11320  003A' 0012               	return	
 11321                           
 11322                           ;SwSpiApp.c: 175: {
 11323                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11324  003C' 9689               	bcf	3977,3,c	;volatile
 11325                           
 11326                           ;SwSpiApp.c: 179: }
 11327                           
 11328                           ;SwSpiApp.c: 177: }
 11329                           ;SwSpiApp.c: 178: break;
 11330  003E' 0012               	return	
 11331  0040'                    l625:
 11332  0040' 5018'              	movf	SwSpi_Clk_Pin@phrType,w,c
 11333                           
 11334                           ; Switch size 1, requested type "space"
 11335                           ; Number of cases is 3, Range of values is 0 to 2
 11336                           ; switch strategies available:
 11337                           ; Name         Instructions Cycles
 11338                           ; simple_byte           10     6 (average)
 11339                           ;	Chosen strategy is simple_byte
 11340  0042' 0A00               	xorlw	0	; case 0
 11341  0044' B4D8               	btfsc	status,2,c
 11342  0046' D7DE               	goto	l626
 11343  0048' 0A01               	xorlw	1	; case 1
 11344  004A' B4D8               	btfsc	status,2,c
 11345  004C' D7E5               	goto	l635
 11346  004E' 0A03               	xorlw	3	; case 2
 11347  0050' A4D8               	btfss	status,2,c
 11348  0052' 0012               	return	
 11349  0054' D7EB               	goto	l643
 11350  0056'                    __end_of_SwSpi_Clk_Pin:
 11351                           	opt stack 0
 11352                           tosu	equ	0xFFF
 11353                           tosh	equ	0xFFE
 11354                           tosl	equ	0xFFD
 11355                           pclath	equ	0xFFA
 11356                           tblptru	equ	0xFF8
 11357                           tblptrh	equ	0xFF7
 11358                           tblptrl	equ	0xFF6
 11359                           tablat	equ	0xFF5
 11360                           prodh	equ	0xFF4
 11361                           prodl	equ	0xFF3
 11362                           intcon	equ	0xFF2
 11363                           intcon2	equ	0xFF1
 11364                           postinc0	equ	0xFEE
 11365                           wreg	equ	0xFE8
 11366                           indf1	equ	0xFE7
 11367                           postdec1	equ	0xFE5
 11368                           fsr1h	equ	0xFE2
 11369                           fsr1l	equ	0xFE1
 11370                           indf2	equ	0xFDF
 11371                           postinc2	equ	0xFDE
 11372                           postdec2	equ	0xFDD
 11373                           fsr2h	equ	0xFDA
 11374                           fsr2l	equ	0xFD9
 11375                           status	equ	0xFD8
 11376                           
 11377 ;; *************** function _ReadIntFromEeprom *****************
 11378 ;; Defined at:
 11379 ;;		line 97 in file "SystemCommon.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;  address         1    wreg     unsigned char 
 11382 ;;  numOfByes       2   25[COMRAM] int 
 11383 ;; Auto vars:     Size  Location     Type
 11384 ;;  address         1   37[COMRAM] unsigned char 
 11385 ;;  retVal          4   33[COMRAM] unsigned long 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  4   25[COMRAM] unsigned long 
 11388 ;; Registers used:
 11389 ;;		wreg, status,2, status,0, cstack
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11395 ;;      Params:         4       0       0       0       0       0       0
 11396 ;;      Locals:         5       0       0       0       0       0       0
 11397 ;;      Temps:          4       0       0       0       0       0       0
 11398 ;;      Totals:        13       0       0       0       0       0       0
 11399 ;;Total ram usage:       13 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    5
 11402 ;; This function calls:
 11403 ;;		_EepromRead
 11404 ;; This function is called by:
 11405 ;;		_DacInit
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           	psect	text77
 11410  0000'                    __ptext77:
 11411                           	opt stack 0
 11412  0000'                    _ReadIntFromEeprom:
 11413                           	opt stack 23
 11414                           
 11415                           ;incstack = 0
 11416                           ;ReadIntFromEeprom@address stored from wreg
 11417  0000' 6E25'              	movwf	ReadIntFromEeprom@address,c
 11418                           
 11419                           ;SystemCommon.c: 99: uint32_t retVal = 0x00;
 11420  0002' 0E00               	movlw	0
 11421  0004' 6E21'              	movwf	ReadIntFromEeprom@retVal,c
 11422  0006' 0E00               	movlw	0
 11423  0008' 6E22'              	movwf	ReadIntFromEeprom@retVal+1,c
 11424  000A' 0E00               	movlw	0
 11425  000C' 6E23'              	movwf	ReadIntFromEeprom@retVal+2,c
 11426  000E' 0E00               	movlw	0
 11427  0010' 6E24'              	movwf	ReadIntFromEeprom@retVal+3,c
 11428                           
 11429                           ;SystemCommon.c: 101: if(numOfByes == 2)
 11430  0012' 0E02               	movlw	2
 11431  0014' 1819'              	xorwf	ReadIntFromEeprom@numOfByes,w,c
 11432  0016' 101A'              	iorwf	ReadIntFromEeprom@numOfByes+1,w,c
 11433  0018' A4D8               	btfss	status,2,c
 11434  001A' D018               	goto	l1312
 11435                           
 11436                           ;SystemCommon.c: 102: {
 11437                           ;SystemCommon.c: 103: retVal = (EepromRead(address + 0) << 8) | (EepromRead(address + 1)
      +                          );
 11438  001C' 5025'              	movf	ReadIntFromEeprom@address,w,c
 11439  001E' EC00' F000'        	call	_EepromRead
 11440  0022' 6E00'              	movwf	??_ReadIntFromEeprom& (0+255),c
 11441  0024' 501D'              	movf	??_ReadIntFromEeprom,w,c
 11442  0026' 6E00'              	movwf	(??_ReadIntFromEeprom+2)& (0+255),c
 11443  0028' 6A00'              	clrf	(??_ReadIntFromEeprom+1)& (0+255),c
 11444  002A' 2825'              	incf	ReadIntFromEeprom@address,w,c
 11445  002C' EC00' F000'        	call	_EepromRead
 11446  0030' 6E00'              	movwf	(??_ReadIntFromEeprom+3)& (0+255),c
 11447  0032' 5020'              	movf	??_ReadIntFromEeprom+3,w,c
 11448  0034' 121E'              	iorwf	??_ReadIntFromEeprom+1,f,c
 11449  0036' 0E00               	movlw	0
 11450  0038' 121F'              	iorwf	??_ReadIntFromEeprom+2,f,c
 11451  003A' C01E' F021'        	movff	??_ReadIntFromEeprom+1,ReadIntFromEeprom@retVal
 11452  003E' C01F' F022'        	movff	??_ReadIntFromEeprom+2,ReadIntFromEeprom@retVal+1
 11453  0042' 0E00               	movlw	0
 11454  0044' BE22'              	btfsc	ReadIntFromEeprom@retVal+1,7,c
 11455  0046' 0EFF               	movlw	-1
 11456  0048' 6E23'              	movwf	ReadIntFromEeprom@retVal+2,c
 11457  004A' 6E24'              	movwf	ReadIntFromEeprom@retVal+3,c
 11458  004C'                    l1312:
 11459                           
 11460                           ;SystemCommon.c: 108: }
 11461                           ;SystemCommon.c: 111: return retVal;
 11462                           
 11463                           ;SystemCommon.c: 106: {
 11464  004C' C021' F019'        	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 11465  0050' C022' F01A'        	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 11466  0054' C023' F01B'        	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 11467  0058' C024' F01C'        	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 11468  005C' 0012               	return		;funcret
 11469  005E'                    __end_of_ReadIntFromEeprom:
 11470                           	opt stack 0
 11471                           tosu	equ	0xFFF
 11472                           tosh	equ	0xFFE
 11473                           tosl	equ	0xFFD
 11474                           pclath	equ	0xFFA
 11475                           tblptru	equ	0xFF8
 11476                           tblptrh	equ	0xFF7
 11477                           tblptrl	equ	0xFF6
 11478                           tablat	equ	0xFF5
 11479                           prodh	equ	0xFF4
 11480                           prodl	equ	0xFF3
 11481                           intcon	equ	0xFF2
 11482                           intcon2	equ	0xFF1
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           indf1	equ	0xFE7
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _EepromRead *****************
 11497 ;; Defined at:
 11498 ;;		line 215 in file "FlashApp.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  address         1    wreg     unsigned char 
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  address         1   24[COMRAM] unsigned char 
 11503 ;; Return value:  Size  Location     Type
 11504 ;;                  1    wreg      unsigned char 
 11505 ;; Registers used:
 11506 ;;		wreg, status,2, cstack
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11512 ;;      Params:         0       0       0       0       0       0       0
 11513 ;;      Locals:         1       0       0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0
 11515 ;;      Totals:         1       0       0       0       0       0       0
 11516 ;;Total ram usage:        1 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    4
 11519 ;; This function calls:
 11520 ;;		_DATAEE_ReadByte
 11521 ;; This function is called by:
 11522 ;;		_ReadIntFromEeprom
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text78
 11527  0000'                    __ptext78:
 11528                           	opt stack 0
 11529  0000'                    _EepromRead:
 11530                           	opt stack 23
 11531                           
 11532                           ;incstack = 0
 11533                           ;EepromRead@address stored from wreg
 11534  0000' 6E18'              	movwf	EepromRead@address,c
 11535                           
 11536                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 11537  0002' 5018'              	movf	EepromRead@address,w,c
 11538  0004' EC00' F000'        	call	_DATAEE_ReadByte
 11539  0008' 0012               	return	
 11540  000A'                    __end_of_EepromRead:
 11541                           	opt stack 0
 11542                           tosu	equ	0xFFF
 11543                           tosh	equ	0xFFE
 11544                           tosl	equ	0xFFD
 11545                           pclath	equ	0xFFA
 11546                           tblptru	equ	0xFF8
 11547                           tblptrh	equ	0xFF7
 11548                           tblptrl	equ	0xFF6
 11549                           tablat	equ	0xFF5
 11550                           prodh	equ	0xFF4
 11551                           prodl	equ	0xFF3
 11552                           intcon	equ	0xFF2
 11553                           intcon2	equ	0xFF1
 11554                           postinc0	equ	0xFEE
 11555                           wreg	equ	0xFE8
 11556                           indf1	equ	0xFE7
 11557                           postdec1	equ	0xFE5
 11558                           fsr1h	equ	0xFE2
 11559                           fsr1l	equ	0xFE1
 11560                           indf2	equ	0xFDF
 11561                           postinc2	equ	0xFDE
 11562                           postdec2	equ	0xFDD
 11563                           fsr2h	equ	0xFDA
 11564                           fsr2l	equ	0xFD9
 11565                           status	equ	0xFD8
 11566                           
 11567 ;; *************** function _DATAEE_ReadByte *****************
 11568 ;; Defined at:
 11569 ;;		line 194 in file "mcc_generated_files/memory.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;  bAdd            1    wreg     unsigned char 
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;  bAdd            1   23[COMRAM] unsigned char 
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  1    wreg      unsigned char 
 11576 ;; Registers used:
 11577 ;;		wreg, status,2
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11583 ;;      Params:         0       0       0       0       0       0       0
 11584 ;;      Locals:         1       0       0       0       0       0       0
 11585 ;;      Temps:          0       0       0       0       0       0       0
 11586 ;;      Totals:         1       0       0       0       0       0       0
 11587 ;;Total ram usage:        1 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; Hardware stack levels required when called:    3
 11590 ;; This function calls:
 11591 ;;		Nothing
 11592 ;; This function is called by:
 11593 ;;		_EepromRead
 11594 ;;		_EepromTest
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text79
 11599  0000'                    __ptext79:
 11600                           	opt stack 0
 11601  0000'                    _DATAEE_ReadByte:
 11602                           	opt stack 23
 11603                           
 11604                           ;incstack = 0
 11605                           ;DATAEE_ReadByte@bAdd stored from wreg
 11606  0000' 6E17'              	movwf	DATAEE_ReadByte@bAdd,c
 11607                           
 11608                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 11609  0002' C017' FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 11610                           
 11611                           ;memory.c: 198: EECON1bits.CFGS = 0;
 11612  0006' 9CA6               	bcf	4006,6,c	;volsfr
 11613                           
 11614                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 11615  0008' 9EA6               	bcf	4006,7,c	;volsfr
 11616                           
 11617                           ;memory.c: 200: EECON1bits.RD = 1;
 11618  000A' 80A6               	bsf	4006,0,c	;volsfr
 11619                           
 11620                           ;memory.c: 201: __nop();
 11621  000C' F000               	nop	
 11622                           
 11623                           ;memory.c: 202: __nop();
 11624  000E' F000               	nop	
 11625                           
 11626                           ;memory.c: 204: return (EEDATA);
 11627  0010' 50A8               	movf	4008,w,c	;volatile
 11628  0012' 0012               	return	
 11629  0014'                    __end_of_DATAEE_ReadByte:
 11630                           	opt stack 0
 11631                           tosu	equ	0xFFF
 11632                           tosh	equ	0xFFE
 11633                           tosl	equ	0xFFD
 11634                           pclath	equ	0xFFA
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           intcon2	equ	0xFF1
 11643                           postinc0	equ	0xFEE
 11644                           wreg	equ	0xFE8
 11645                           indf1	equ	0xFE7
 11646                           postdec1	equ	0xFE5
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           fsr2h	equ	0xFDA
 11653                           fsr2l	equ	0xFD9
 11654                           status	equ	0xFD8
 11655                           
 11656 ;; *************** function _ClearMcuRunTime *****************
 11657 ;; Defined at:
 11658 ;;		line 46 in file "SystemStatus.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;		None
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, status,2
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11672 ;;      Params:         0       0       0       0       0       0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0
 11675 ;;      Totals:         0       0       0       0       0       0       0
 11676 ;;Total ram usage:        0 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    3
 11679 ;; This function calls:
 11680 ;;		Nothing
 11681 ;; This function is called by:
 11682 ;;		_InitSystemApplicationManagers
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           	psect	text80
 11687  0000'                    __ptext80:
 11688                           	opt stack 0
 11689  0000'                    _ClearMcuRunTime:
 11690                           	opt stack 26
 11691                           
 11692                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks = 0;
 11693                           
 11694                           ;incstack = 0
 11695  0000' 0E00               	movlw	0
 11696  0002' 0100               	movlb	0	; () banked
 11697  0004' 6F00'              	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11698  0006' 0E00               	movlw	0
 11699  0008' 6F00'              	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11700  000A' 0E00               	movlw	0
 11701  000C' 6F00'              	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11702  000E' 0E00               	movlw	0
 11703  0010' 6F00'              	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11704                           
 11705                           ; BSR set to: 0
 11706  0012' 0012               	return		;funcret
 11707  0014'                    __end_of_ClearMcuRunTime:
 11708                           	opt stack 0
 11709                           tosu	equ	0xFFF
 11710                           tosh	equ	0xFFE
 11711                           tosl	equ	0xFFD
 11712                           pclath	equ	0xFFA
 11713                           tblptru	equ	0xFF8
 11714                           tblptrh	equ	0xFF7
 11715                           tblptrl	equ	0xFF6
 11716                           tablat	equ	0xFF5
 11717                           prodh	equ	0xFF4
 11718                           prodl	equ	0xFF3
 11719                           intcon	equ	0xFF2
 11720                           intcon2	equ	0xFF1
 11721                           postinc0	equ	0xFEE
 11722                           wreg	equ	0xFE8
 11723                           indf1	equ	0xFE7
 11724                           postdec1	equ	0xFE5
 11725                           fsr1h	equ	0xFE2
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           fsr2h	equ	0xFDA
 11731                           fsr2l	equ	0xFD9
 11732                           status	equ	0xFD8
 11733                           
 11734 ;; *************** function _CheckFlashPrecentage *****************
 11735 ;; Defined at:
 11736 ;;		line 205 in file "FlashApp.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;		None
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;  precentage      3   28[BANK0 ] void 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;                  1    wreg      unsigned char 
 11743 ;; Registers used:
 11744 ;;		wreg, status,2, status,0, cstack
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11750 ;;      Params:         0       0       0       0       0       0       0
 11751 ;;      Locals:         0       3       0       0       0       0       0
 11752 ;;      Temps:          0       4       0       0       0       0       0
 11753 ;;      Totals:         0       7       0       0       0       0       0
 11754 ;;Total ram usage:        7 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    5
 11757 ;; This function calls:
 11758 ;;		___ftdiv
 11759 ;;		___ftge
 11760 ;;		___ftmul
 11761 ;;		___lltoft
 11762 ;; This function is called by:
 11763 ;;		_main
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text81
 11768  0000'                    __ptext81:
 11769                           	opt stack 0
 11770  0000'                    _CheckFlashPrecentage:
 11771                           	opt stack 25
 11772                           
 11773                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;incstack = 0
 11777  0000' 0EE0               	movlw	224
 11778  0002' 6E2B'              	movwf	___ftdiv@f2,c
 11779  0004' 0EFF               	movlw	255
 11780  0006' 6E2C'              	movwf	___ftdiv@f2+1,c
 11781  0008' 0E46               	movlw	70
 11782  000A' 6E2D'              	movwf	___ftdiv@f2+2,c
 11783  000C' C000' F018'        	movff	_writeAddress,??_CheckFlashPrecentage
 11784  0010' C001' F019'        	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11785  0014' C002' F01A'        	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11786  0018' C003' F01B'        	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11787  001C' 0100               	movlb	0	; () banked
 11788  001E' 1F00'              	comf	??_CheckFlashPrecentage& (0+255),f,b
 11789  0020' 1F00'              	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11790  0022' 1F00'              	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11791  0024' 1F00'              	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11792  0026' 2B00'              	incf	??_CheckFlashPrecentage& (0+255),f,b
 11793  0028' 0E00               	movlw	0
 11794  002A' 2300'              	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11795  002C' 2300'              	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11796  002E' 2300'              	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11797  0030' 0EF0               	movlw	240
 11798  0032' 2500'              	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11799  0034' 6E1F'              	movwf	___lltoft@c,c
 11800  0036' 0E7F               	movlw	127
 11801  0038' 2100'              	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11802  003A' 6E20'              	movwf	___lltoft@c+1,c
 11803  003C' 0E00               	movlw	0
 11804  003E' 2100'              	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11805  0040' 6E21'              	movwf	___lltoft@c+2,c
 11806  0042' 0E00               	movlw	0
 11807  0044' 2100'              	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11808  0046' 6E22'              	movwf	___lltoft@c+3,c
 11809  0048' EC00' F000'        	call	___lltoft	;wreg free
 11810  004C' C01F' F028'        	movff	?___lltoft,___ftdiv@f1
 11811  0050' C020' F029'        	movff	?___lltoft+1,___ftdiv@f1+1
 11812  0054' C021' F02A'        	movff	?___lltoft+2,___ftdiv@f1+2
 11813  0058' EC00' F000'        	call	___ftdiv	;wreg free
 11814  005C' C028' F009'        	movff	?___ftdiv,___ftmul@f1
 11815  0060' C029' F00A'        	movff	?___ftdiv+1,___ftmul@f1+1
 11816  0064' C02A' F00B'        	movff	?___ftdiv+2,___ftmul@f1+2
 11817  0068' 0E00               	movlw	0
 11818  006A' 0100               	movlb	0	; () banked
 11819  006C' 6F00'              	movwf	___ftmul@f2& (0+255),b
 11820  006E' 0EC8               	movlw	200
 11821  0070' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 11822  0072' 0E42               	movlw	66
 11823  0074' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 11824  0076' EC00' F000'        	call	___ftmul	;wreg free
 11825  007A' C009' F01C'        	movff	?___ftmul,CheckFlashPrecentage@precentage
 11826  007E' C00A' F01D'        	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11827  0082' C00B' F01E'        	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11828                           
 11829                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11830  0086' 0E00               	movlw	0
 11831  0088' 6E17'              	movwf	___ftge@ff1,c
 11832  008A' 0E96               	movlw	150
 11833  008C' 6E18'              	movwf	___ftge@ff1+1,c
 11834  008E' 0E42               	movlw	66
 11835  0090' 6E19'              	movwf	___ftge@ff1+2,c
 11836  0092' C01C' F01A'        	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11837  0096' C01D' F01B'        	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11838  009A' C01E' F01C'        	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11839  009E' EC00' F000'        	call	___ftge	;wreg free
 11840  00A2' B0D8               	btfsc	status,0,c
 11841  00A4' D002               	goto	u7950
 11842  00A6' 0E01               	movlw	1
 11843  00A8' 0012               	return	
 11844  00AA'                    u7950:
 11845  00AA' 0E00               	movlw	0
 11846  00AC' 0012               	return	
 11847  00AE'                    __end_of_CheckFlashPrecentage:
 11848                           	opt stack 0
 11849                           tosu	equ	0xFFF
 11850                           tosh	equ	0xFFE
 11851                           tosl	equ	0xFFD
 11852                           pclath	equ	0xFFA
 11853                           tblptru	equ	0xFF8
 11854                           tblptrh	equ	0xFF7
 11855                           tblptrl	equ	0xFF6
 11856                           tablat	equ	0xFF5
 11857                           prodh	equ	0xFF4
 11858                           prodl	equ	0xFF3
 11859                           intcon	equ	0xFF2
 11860                           intcon2	equ	0xFF1
 11861                           postinc0	equ	0xFEE
 11862                           wreg	equ	0xFE8
 11863                           indf1	equ	0xFE7
 11864                           postdec1	equ	0xFE5
 11865                           fsr1h	equ	0xFE2
 11866                           fsr1l	equ	0xFE1
 11867                           indf2	equ	0xFDF
 11868                           postinc2	equ	0xFDE
 11869                           postdec2	equ	0xFDD
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function _BlinkOkLeds *****************
 11875 ;; Defined at:
 11876 ;;		line 24 in file "LedsApp.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;  state           1    wreg     enum E7566
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;  state           1   26[COMRAM] enum E7566
 11881 ;;  idx             2   27[COMRAM] int 
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  1    wreg      void 
 11884 ;; Registers used:
 11885 ;;		wreg, status,2, status,0
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11891 ;;      Params:         0       0       0       0       0       0       0
 11892 ;;      Locals:         3       0       0       0       0       0       0
 11893 ;;      Temps:          3       0       0       0       0       0       0
 11894 ;;      Totals:         6       0       0       0       0       0       0
 11895 ;;Total ram usage:        6 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    3
 11898 ;; This function calls:
 11899 ;;		Nothing
 11900 ;; This function is called by:
 11901 ;;		_main
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text82
 11906  0000'                    __ptext82:
 11907                           	opt stack 0
 11908  0000'                    _BlinkOkLeds:
 11909                           	opt stack 27
 11910                           
 11911                           ;incstack = 0
 11912                           ;BlinkOkLeds@state stored from wreg
 11913  0000' 6E1A'              	movwf	BlinkOkLeds@state,c
 11914                           
 11915                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11916  0002' 0E00               	movlw	0
 11917  0004' 6E1C'              	movwf	BlinkOkLeds@idx+1,c
 11918  0006' 0E00               	movlw	0
 11919  0008' 6E1B'              	movwf	BlinkOkLeds@idx,c
 11920  000A'                    l5973:
 11921  000A' 501A'              	movf	BlinkOkLeds@state,w,c
 11922  000C' 6E00'              	movwf	??_BlinkOkLeds& (0+255),c
 11923  000E' 6A00'              	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11924  0010' 5017'              	movf	??_BlinkOkLeds,w,c
 11925  0012' 5C1B'              	subwf	BlinkOkLeds@idx,w,c
 11926  0014' 501C'              	movf	BlinkOkLeds@idx+1,w,c
 11927  0016' 0A80               	xorlw	128
 11928  0018' 6E00'              	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11929  001A' 5018'              	movf	??_BlinkOkLeds+1,w,c
 11930  001C' 0A80               	xorlw	128
 11931  001E' 5800'              	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11932  0020' B0D8               	btfsc	status,0,c
 11933  0022' 0012               	return	
 11934                           
 11935                           ;LedsApp.c: 27: {
 11936                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11937  0024' 908B               	bcf	3979,0,c	;volatile
 11938                           
 11939                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11940  0026' 0E02               	movlw	2
 11941  0028' 6E00'              	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11942  002A' 0E04               	movlw	4
 11943  002C' 6E00'              	movwf	??_BlinkOkLeds& (0+255),c
 11944  002E' 0EBA               	movlw	186
 11945  0030'                    u8157:
 11946  0030' 2EE8               	decfsz	wreg,f,c
 11947  0032' D7FE               	bra	u8157
 11948  0034' 2E00'              	decfsz	??_BlinkOkLeds& (0+255),f,c
 11949  0036' D7FC               	bra	u8157
 11950  0038' 2E00'              	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11951  003A' D7FA               	bra	u8157
 11952  003C' D000               	nop2	
 11953                           
 11954                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11955  003E' 808B               	bsf	3979,0,c	;volatile
 11956                           
 11957                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 11958  0040' 0E02               	movlw	2
 11959  0042' 6E00'              	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11960  0044' 0E04               	movlw	4
 11961  0046' 6E00'              	movwf	??_BlinkOkLeds& (0+255),c
 11962  0048' 0EBA               	movlw	186
 11963  004A'                    u8167:
 11964  004A' 2EE8               	decfsz	wreg,f,c
 11965  004C' D7FE               	bra	u8167
 11966  004E' 2E00'              	decfsz	??_BlinkOkLeds& (0+255),f,c
 11967  0050' D7FC               	bra	u8167
 11968  0052' 2E00'              	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11969  0054' D7FA               	bra	u8167
 11970  0056' D000               	nop2	
 11971  0058' 4A1B'              	infsnz	BlinkOkLeds@idx,f,c
 11972  005A' 2A1C'              	incf	BlinkOkLeds@idx+1,f,c
 11973  005C' D7D6               	goto	l5973
 11974  005E'                    __end_of_BlinkOkLeds:
 11975                           	opt stack 0
 11976                           tosu	equ	0xFFF
 11977                           tosh	equ	0xFFE
 11978                           tosl	equ	0xFFD
 11979                           pclath	equ	0xFFA
 11980                           tblptru	equ	0xFF8
 11981                           tblptrh	equ	0xFF7
 11982                           tblptrl	equ	0xFF6
 11983                           tablat	equ	0xFF5
 11984                           prodh	equ	0xFF4
 11985                           prodl	equ	0xFF3
 11986                           intcon	equ	0xFF2
 11987                           intcon2	equ	0xFF1
 11988                           postinc0	equ	0xFEE
 11989                           wreg	equ	0xFE8
 11990                           indf1	equ	0xFE7
 11991                           postdec1	equ	0xFE5
 11992                           fsr1h	equ	0xFE2
 11993                           fsr1l	equ	0xFE1
 11994                           indf2	equ	0xFDF
 11995                           postinc2	equ	0xFDE
 11996                           postdec2	equ	0xFDD
 11997                           fsr2h	equ	0xFDA
 11998                           fsr2l	equ	0xFD9
 11999                           status	equ	0xFD8
 12000                           
 12001 ;; *************** function _BlinkErrorLeds *****************
 12002 ;; Defined at:
 12003 ;;		line 13 in file "LedsApp.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;  state           1    wreg     enum E7569
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  state           1   26[COMRAM] enum E7569
 12008 ;;  idx             2   27[COMRAM] int 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  1    wreg      void 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12018 ;;      Params:         0       0       0       0       0       0       0
 12019 ;;      Locals:         3       0       0       0       0       0       0
 12020 ;;      Temps:          3       0       0       0       0       0       0
 12021 ;;      Totals:         6       0       0       0       0       0       0
 12022 ;;Total ram usage:        6 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    3
 12025 ;; This function calls:
 12026 ;;		Nothing
 12027 ;; This function is called by:
 12028 ;;		_main
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text83
 12033  0000'                    __ptext83:
 12034                           	opt stack 0
 12035  0000'                    _BlinkErrorLeds:
 12036                           	opt stack 27
 12037                           
 12038                           ;incstack = 0
 12039                           ;BlinkErrorLeds@state stored from wreg
 12040  0000' 6E1A'              	movwf	BlinkErrorLeds@state,c
 12041                           
 12042                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12043  0002' 0E00               	movlw	0
 12044  0004' 6E1C'              	movwf	BlinkErrorLeds@idx+1,c
 12045  0006' 0E00               	movlw	0
 12046  0008' 6E1B'              	movwf	BlinkErrorLeds@idx,c
 12047  000A'                    l5961:
 12048  000A' 501A'              	movf	BlinkErrorLeds@state,w,c
 12049  000C' 6E00'              	movwf	??_BlinkErrorLeds& (0+255),c
 12050  000E' 6A00'              	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12051  0010' 5017'              	movf	??_BlinkErrorLeds,w,c
 12052  0012' 5C1B'              	subwf	BlinkErrorLeds@idx,w,c
 12053  0014' 501C'              	movf	BlinkErrorLeds@idx+1,w,c
 12054  0016' 0A80               	xorlw	128
 12055  0018' 6E00'              	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12056  001A' 5018'              	movf	??_BlinkErrorLeds+1,w,c
 12057  001C' 0A80               	xorlw	128
 12058  001E' 5800'              	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12059  0020' B0D8               	btfsc	status,0,c
 12060  0022' 0012               	return	
 12061                           
 12062                           ;LedsApp.c: 16: {
 12063                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12064  0024' 988A               	bcf	3978,4,c	;volatile
 12065                           
 12066                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12067  0026' 0E02               	movlw	2
 12068  0028' 6E00'              	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12069  002A' 0E04               	movlw	4
 12070  002C' 6E00'              	movwf	??_BlinkErrorLeds& (0+255),c
 12071  002E' 0EBA               	movlw	186
 12072  0030'                    u8177:
 12073  0030' 2EE8               	decfsz	wreg,f,c
 12074  0032' D7FE               	bra	u8177
 12075  0034' 2E00'              	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12076  0036' D7FC               	bra	u8177
 12077  0038' 2E00'              	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12078  003A' D7FA               	bra	u8177
 12079  003C' D000               	nop2	
 12080                           
 12081                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12082  003E' 888A               	bsf	3978,4,c	;volatile
 12083                           
 12084                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12085  0040' 0E02               	movlw	2
 12086  0042' 6E00'              	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12087  0044' 0E04               	movlw	4
 12088  0046' 6E00'              	movwf	??_BlinkErrorLeds& (0+255),c
 12089  0048' 0EBA               	movlw	186
 12090  004A'                    u8187:
 12091  004A' 2EE8               	decfsz	wreg,f,c
 12092  004C' D7FE               	bra	u8187
 12093  004E' 2E00'              	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12094  0050' D7FC               	bra	u8187
 12095  0052' 2E00'              	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12096  0054' D7FA               	bra	u8187
 12097  0056' D000               	nop2	
 12098  0058' 4A1B'              	infsnz	BlinkErrorLeds@idx,f,c
 12099  005A' 2A1C'              	incf	BlinkErrorLeds@idx+1,f,c
 12100  005C' D7D6               	goto	l5961
 12101  005E'                    __end_of_BlinkErrorLeds:
 12102                           	opt stack 0
 12103                           tosu	equ	0xFFF
 12104                           tosh	equ	0xFFE
 12105                           tosl	equ	0xFFD
 12106                           pclath	equ	0xFFA
 12107                           tblptru	equ	0xFF8
 12108                           tblptrh	equ	0xFF7
 12109                           tblptrl	equ	0xFF6
 12110                           tablat	equ	0xFF5
 12111                           prodh	equ	0xFF4
 12112                           prodl	equ	0xFF3
 12113                           intcon	equ	0xFF2
 12114                           intcon2	equ	0xFF1
 12115                           postinc0	equ	0xFEE
 12116                           wreg	equ	0xFE8
 12117                           indf1	equ	0xFE7
 12118                           postdec1	equ	0xFE5
 12119                           fsr1h	equ	0xFE2
 12120                           fsr1l	equ	0xFE1
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           fsr2h	equ	0xFDA
 12125                           fsr2l	equ	0xFD9
 12126                           status	equ	0xFD8
 12127                           
 12128 ;; *************** function _AdcConvert *****************
 12129 ;; Defined at:
 12130 ;;		line 56 in file "AdcApp.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12135 ;;  idx             1   94[BANK0 ] unsigned char 
 12136 ;;  _adcResult      2   87[BANK0 ] unsigned int 
 12137 ;;  adcRes          2   92[BANK0 ] unsigned int 
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  1    wreg      void 
 12140 ;; Registers used:
 12141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12147 ;;      Params:         0       0       0       0       0       0       0
 12148 ;;      Locals:         0      10       0       0       0       0       0
 12149 ;;      Temps:          0       2       0       0       0       0       0
 12150 ;;      Totals:         0      12       0       0       0       0       0
 12151 ;;Total ram usage:       12 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:    8
 12154 ;; This function calls:
 12155 ;;		_ADC_GetConversion
 12156 ;;		_FlashSampleWrite
 12157 ;;		___ftdiv
 12158 ;;		___ftmul
 12159 ;;		___fttol
 12160 ;;		___lwtoft
 12161 ;;		_pow
 12162 ;; This function is called by:
 12163 ;;		_main
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           	psect	text84
 12168  0000'                    __ptext84:
 12169                           	opt stack 0
 12170  0000'                    _AdcConvert:
 12171                           	opt stack 22
 12172                           
 12173                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12174                           
 12175                           ;incstack = 0
 12176  0000' 0E00               	movlw	0
 12177  0002' 0100               	movlb	0	; () banked
 12178  0004' 6F00'              	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12179  0006' 0E00               	movlw	0
 12180  0008' 6F00'              	movwf	AdcConvert@adcRes& (0+255),b
 12181                           
 12182                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12183  000A' 500C'              	movf	_adcSampleMode,w,c
 12184  000C' A4D8               	btfss	status,2,c
 12185  000E' D073               	goto	l120
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;AdcApp.c: 64: {
 12189                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12190  0010' 0E00               	movlw	0
 12191  0012' 6F00'              	movwf	AdcConvert@idx& (0+255),b
 12192  0014'                    l7765:
 12193                           
 12194                           ; BSR set to: 0
 12195  0014' 0E06               	movlw	6
 12196  0016' 6500'              	cpfsgt	AdcConvert@idx& (0+255),b
 12197  0018' D001               	goto	l121
 12198  001A' 0012               	return	
 12199  001C'                    l121:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;AdcApp.c: 66: {
 12203                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12204                           
 12205                           ; BSR set to: 0
 12206  001C' 5100'              	movf	AdcConvert@idx& (0+255),w,b
 12207  001E' 0D01               	mullw	1
 12208  0020' 0E00'              	movlw	low _channelArr
 12209  0022' 24F3               	addwf	prodl,w,c
 12210  0024' 6EF6               	movwf	tblptrl,c
 12211  0026' 0E00'              	movlw	high _channelArr
 12212  0028' 20F4               	addwfc	prodh,w,c
 12213  002A' 6EF7               	movwf	tblptrh,c
 12214  002C'                    	if	0	;There are less than 3 active tblptr bytes
 12215  002C'                    	endif
 12216  002C' 0008               	tblrd		*
 12217  002E' 50F5               	movf	tablat,w,c
 12218  0030' EC00' F000'        	call	_ADC_GetConversion
 12219  0034' C017' F055'        	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12220  0038' C018' F056'        	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12221                           
 12222                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12223  003C' 0E00               	movlw	0
 12224  003E' 0100               	movlb	0	; () banked
 12225  0040' 6F00'              	movwf	pow@y& (0+255),b
 12226  0042' 0E20               	movlw	32
 12227  0044' 6F00'              	movwf	(pow@y+1)& (0+255),b
 12228  0046' 0E41               	movlw	65
 12229  0048' 6F00'              	movwf	(pow@y+2)& (0+255),b
 12230  004A' 0E00               	movlw	0
 12231  004C' 6F00'              	movwf	pow@x& (0+255),b
 12232  004E' 0E00               	movlw	0
 12233  0050' 6F00'              	movwf	(pow@x+1)& (0+255),b
 12234  0052' 0E40               	movlw	64
 12235  0054' 6F00'              	movwf	(pow@x+2)& (0+255),b
 12236  0056' EC00' F000'        	call	_pow	;wreg free
 12237  005A' C042' F059'        	movff	?_pow,_AdcConvert$3280
 12238  005E' C043' F05A'        	movff	?_pow+1,_AdcConvert$3280+1
 12239  0062' C044' F05B'        	movff	?_pow+2,_AdcConvert$3280+2
 12240                           
 12241                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12242  0066' 0EC0               	movlw	192
 12243  0068' 0100               	movlb	0	; () banked
 12244  006A' 6F00'              	movwf	___ftmul@f2& (0+255),b
 12245  006C' 0E50               	movlw	80
 12246  006E' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 12247  0070' 0E45               	movlw	69
 12248  0072' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 12249  0074' C059' F02B'        	movff	_AdcConvert$3280,___ftdiv@f2
 12250  0078' C05A' F02C'        	movff	_AdcConvert$3280+1,___ftdiv@f2+1
 12251  007C' C05B' F02D'        	movff	_AdcConvert$3280+2,___ftdiv@f2+2
 12252  0080' C055' F01F'        	movff	AdcConvert@_adcResult,___lwtoft@c
 12253  0084' C056' F020'        	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12254  0088' EC00' F000'        	call	___lwtoft	;wreg free
 12255  008C' C01F' F028'        	movff	?___lwtoft,___ftdiv@f1
 12256  0090' C020' F029'        	movff	?___lwtoft+1,___ftdiv@f1+1
 12257  0094' C021' F02A'        	movff	?___lwtoft+2,___ftdiv@f1+2
 12258  0098' EC00' F000'        	call	___ftdiv	;wreg free
 12259  009C' C028' F009'        	movff	?___ftdiv,___ftmul@f1
 12260  00A0' C029' F00A'        	movff	?___ftdiv+1,___ftmul@f1+1
 12261  00A4' C02A' F00B'        	movff	?___ftdiv+2,___ftmul@f1+2
 12262  00A8' EC00' F000'        	call	___ftmul	;wreg free
 12263  00AC' C009' F018'        	movff	?___ftmul,___fttol@f1
 12264  00B0' C00A' F019'        	movff	?___ftmul+1,___fttol@f1+1
 12265  00B4' C00B' F01A'        	movff	?___ftmul+2,___fttol@f1+2
 12266  00B8' EC00' F000'        	call	___fttol	;wreg free
 12267  00BC' C018' F05C'        	movff	?___fttol,AdcConvert@adcRes
 12268  00C0' C019' F05D'        	movff	?___fttol+1,AdcConvert@adcRes+1
 12269                           
 12270                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12271  00C4' C05C' F02C'        	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12272  00C8' C05D' F02D'        	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12273  00CC' 0100               	movlb	0	; () banked
 12274  00CE' 2900'              	incf	AdcConvert@idx& (0+255),w,b
 12275  00D0' 6E2E'              	movwf	FlashSampleWrite@channelNum,c
 12276  00D2' EC00' F000'        	call	_FlashSampleWrite	;wreg free
 12277                           
 12278                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12279  00D6' 0E03               	movlw	3
 12280  00D8' 0100               	movlb	0	; () banked
 12281  00DA' 6F00'              	movwf	(??_AdcConvert+1)& (0+255),b
 12282  00DC' 0E8A               	movlw	138
 12283  00DE' 6F00'              	movwf	??_AdcConvert& (0+255),b
 12284  00E0' 0E55               	movlw	85
 12285  00E2'                    u8197:
 12286  00E2' 2EE8               	decfsz	wreg,f,c
 12287  00E4' D7FE               	bra	u8197
 12288  00E6' 2F00'              	decfsz	??_AdcConvert& (0+255),f,b
 12289  00E8' D7FC               	bra	u8197
 12290  00EA' 2F00'              	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12291  00EC' D7FA               	bra	u8197
 12292  00EE' D000               	nop2	
 12293  00F0' 0100               	movlb	0	; () banked
 12294  00F2' 2B00'              	incf	AdcConvert@idx& (0+255),f,b
 12295  00F4' D78F               	goto	l7765
 12296  00F6'                    l120:
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12300                           
 12301                           ; BSR set to: 0
 12302  00F6' 040C'              	decf	_adcSampleMode,w,c
 12303  00F8' A4D8               	btfss	status,2,c
 12304  00FA' 0012               	return	
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;AdcApp.c: 74: {
 12308                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12309  00FC' 5100'              	movf	_channel& (0+255),w,b
 12310  00FE' 0D01               	mullw	1
 12311  0100' 0E00'              	movlw	low _channelArr
 12312  0102' 24F3               	addwf	prodl,w,c
 12313  0104' 6EF6               	movwf	tblptrl,c
 12314  0106' 0E00'              	movlw	high _channelArr
 12315  0108' 20F4               	addwfc	prodh,w,c
 12316  010A' 6EF7               	movwf	tblptrh,c
 12317  010C'                    	if	0	;There are less than 3 active tblptr bytes
 12318  010C'                    	endif
 12319  010C' 0008               	tblrd		*
 12320  010E' 50F5               	movf	tablat,w,c
 12321  0110' EC00' F000'        	call	_ADC_GetConversion
 12322  0114' C017' F057'        	movff	?_ADC_GetConversion,AdcConvert@_adcResult_338
 12323  0118' C018' F058'        	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_338+1
 12324                           
 12325                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12326  011C' 0E00               	movlw	0
 12327  011E' 0100               	movlb	0	; () banked
 12328  0120' 6F00'              	movwf	pow@y& (0+255),b
 12329  0122' 0E20               	movlw	32
 12330  0124' 6F00'              	movwf	(pow@y+1)& (0+255),b
 12331  0126' 0E41               	movlw	65
 12332  0128' 6F00'              	movwf	(pow@y+2)& (0+255),b
 12333  012A' 0E00               	movlw	0
 12334  012C' 6F00'              	movwf	pow@x& (0+255),b
 12335  012E' 0E00               	movlw	0
 12336  0130' 6F00'              	movwf	(pow@x+1)& (0+255),b
 12337  0132' 0E40               	movlw	64
 12338  0134' 6F00'              	movwf	(pow@x+2)& (0+255),b
 12339  0136' EC00' F000'        	call	_pow	;wreg free
 12340  013A' C042' F059'        	movff	?_pow,_AdcConvert$3280
 12341  013E' C043' F05A'        	movff	?_pow+1,_AdcConvert$3280+1
 12342  0142' C044' F05B'        	movff	?_pow+2,_AdcConvert$3280+2
 12343                           
 12344                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12345  0146' 0EC0               	movlw	192
 12346  0148' 0100               	movlb	0	; () banked
 12347  014A' 6F00'              	movwf	___ftmul@f2& (0+255),b
 12348  014C' 0E50               	movlw	80
 12349  014E' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 12350  0150' 0E45               	movlw	69
 12351  0152' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 12352  0154' C059' F02B'        	movff	_AdcConvert$3280,___ftdiv@f2
 12353  0158' C05A' F02C'        	movff	_AdcConvert$3280+1,___ftdiv@f2+1
 12354  015C' C05B' F02D'        	movff	_AdcConvert$3280+2,___ftdiv@f2+2
 12355  0160' C057' F01F'        	movff	AdcConvert@_adcResult_338,___lwtoft@c
 12356  0164' C058' F020'        	movff	AdcConvert@_adcResult_338+1,___lwtoft@c+1
 12357  0168' EC00' F000'        	call	___lwtoft	;wreg free
 12358  016C' C01F' F028'        	movff	?___lwtoft,___ftdiv@f1
 12359  0170' C020' F029'        	movff	?___lwtoft+1,___ftdiv@f1+1
 12360  0174' C021' F02A'        	movff	?___lwtoft+2,___ftdiv@f1+2
 12361  0178' EC00' F000'        	call	___ftdiv	;wreg free
 12362  017C' C028' F009'        	movff	?___ftdiv,___ftmul@f1
 12363  0180' C029' F00A'        	movff	?___ftdiv+1,___ftmul@f1+1
 12364  0184' C02A' F00B'        	movff	?___ftdiv+2,___ftmul@f1+2
 12365  0188' EC00' F000'        	call	___ftmul	;wreg free
 12366  018C' C009' F018'        	movff	?___ftmul,___fttol@f1
 12367  0190' C00A' F019'        	movff	?___ftmul+1,___fttol@f1+1
 12368  0194' C00B' F01A'        	movff	?___ftmul+2,___fttol@f1+2
 12369  0198' EC00' F000'        	call	___fttol	;wreg free
 12370  019C' C018' F05C'        	movff	?___fttol,AdcConvert@adcRes
 12371  01A0' C019' F05D'        	movff	?___fttol+1,AdcConvert@adcRes+1
 12372                           
 12373                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12374  01A4' C05C' F02C'        	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12375  01A8' C05D' F02D'        	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12376  01AC' 0E01               	movlw	1
 12377  01AE' 6E2E'              	movwf	FlashSampleWrite@channelNum,c
 12378  01B0' EC00' F000'        	call	_FlashSampleWrite	;wreg free
 12379  01B4' 0012               	return	
 12380  01B6'                    __end_of_AdcConvert:
 12381                           	opt stack 0
 12382                           tosu	equ	0xFFF
 12383                           tosh	equ	0xFFE
 12384                           tosl	equ	0xFFD
 12385                           pclath	equ	0xFFA
 12386                           tblptru	equ	0xFF8
 12387                           tblptrh	equ	0xFF7
 12388                           tblptrl	equ	0xFF6
 12389                           tablat	equ	0xFF5
 12390                           prodh	equ	0xFF4
 12391                           prodl	equ	0xFF3
 12392                           intcon	equ	0xFF2
 12393                           intcon2	equ	0xFF1
 12394                           postinc0	equ	0xFEE
 12395                           wreg	equ	0xFE8
 12396                           indf1	equ	0xFE7
 12397                           postdec1	equ	0xFE5
 12398                           fsr1h	equ	0xFE2
 12399                           fsr1l	equ	0xFE1
 12400                           indf2	equ	0xFDF
 12401                           postinc2	equ	0xFDE
 12402                           postdec2	equ	0xFDD
 12403                           fsr2h	equ	0xFDA
 12404                           fsr2l	equ	0xFD9
 12405                           status	equ	0xFD8
 12406                           
 12407 ;; *************** function _pow *****************
 12408 ;; Defined at:
 12409 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12410 ;; Parameters:    Size  Location     Type
 12411 ;;  x               3   66[BANK0 ] void 
 12412 ;;  y               3   69[BANK0 ] void 
 12413 ;; Auto vars:     Size  Location     Type
 12414 ;;  yi              4   79[BANK0 ] unsigned long 
 12415 ;;  sign            1   78[BANK0 ] unsigned char 
 12416 ;; Return value:  Size  Location     Type
 12417 ;;                  3   66[BANK0 ] unsigned char 
 12418 ;; Registers used:
 12419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12420 ;; Tracked objects:
 12421 ;;		On entry : 0/0
 12422 ;;		On exit  : 0/0
 12423 ;;		Unchanged: 0/0
 12424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12425 ;;      Params:         0       6       0       0       0       0       0
 12426 ;;      Locals:         0      11       0       0       0       0       0
 12427 ;;      Temps:          0       0       0       0       0       0       0
 12428 ;;      Totals:         0      17       0       0       0       0       0
 12429 ;;Total ram usage:       17 bytes
 12430 ;; Hardware stack levels used:    1
 12431 ;; Hardware stack levels required when called:    7
 12432 ;; This function calls:
 12433 ;;		___ftge
 12434 ;;		___ftmul
 12435 ;;		___ftneg
 12436 ;;		___fttol
 12437 ;;		___lltoft
 12438 ;;		_exp
 12439 ;;		_log
 12440 ;; This function is called by:
 12441 ;;		_AdcConvert
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text85
 12446  0000'                    __ptext85:
 12447                           	opt stack 0
 12448  0000'                    _pow:
 12449                           	opt stack 22
 12450                           
 12451                           ;incstack = 0
 12452  0000' 0E00               	movlw	0
 12453  0002' 0100               	movlb	0	; () banked
 12454  0004' 6F00'              	movwf	pow@sign& (0+255),b
 12455                           
 12456                           ; BSR set to: 0
 12457  0006' 5100'              	movf	pow@x& (0+255),w,b
 12458  0008' 1100'              	iorwf	(pow@x+1)& (0+255),w,b
 12459  000A' 1100'              	iorwf	(pow@x+2)& (0+255),w,b
 12460  000C' A4D8               	btfss	status,2,c
 12461  000E' D01D               	goto	l1888
 12462                           
 12463                           ; BSR set to: 0
 12464  0010' 0E00               	movlw	0
 12465  0012' 6E17'              	movwf	___ftge@ff1,c
 12466  0014' 0E00               	movlw	0
 12467  0016' 6E18'              	movwf	___ftge@ff1+1,c
 12468  0018' 0E00               	movlw	0
 12469  001A' 6E19'              	movwf	___ftge@ff1+2,c
 12470  001C' C045' F01A'        	movff	pow@y,___ftge@ff2
 12471  0020' C046' F01B'        	movff	pow@y+1,___ftge@ff2+1
 12472  0024' C047' F01C'        	movff	pow@y+2,___ftge@ff2+2
 12473  0028' EC00' F000'        	call	___ftge	;wreg free
 12474  002C' A0D8               	btfss	status,0,c
 12475  002E' D005               	goto	l1889
 12476  0030' 0E00               	movlw	0
 12477  0032' 0100               	movlb	0	; () banked
 12478  0034' 6F00'              	movwf	(_errno+1)& (0+255),b
 12479  0036' 0E21               	movlw	33
 12480  0038' 6F00'              	movwf	_errno& (0+255),b
 12481  003A'                    l1889:
 12482  003A' 0E00               	movlw	0
 12483  003C' 0100               	movlb	0	; () banked
 12484  003E' 6F00'              	movwf	?_pow& (0+255),b
 12485  0040' 0E00               	movlw	0
 12486  0042' 6F00'              	movwf	(?_pow+1)& (0+255),b
 12487  0044' 0E00               	movlw	0
 12488  0046' 6F00'              	movwf	(?_pow+2)& (0+255),b
 12489                           
 12490                           ; BSR set to: 0
 12491  0048' 0012               	return	
 12492  004A'                    l1888:
 12493                           
 12494                           ; BSR set to: 0
 12495                           
 12496                           ; BSR set to: 0
 12497  004A' 5100'              	movf	pow@y& (0+255),w,b
 12498  004C' 1100'              	iorwf	(pow@y+1)& (0+255),w,b
 12499  004E' 1100'              	iorwf	(pow@y+2)& (0+255),w,b
 12500  0050' A4D8               	btfss	status,2,c
 12501  0052' D007               	goto	l1891
 12502                           
 12503                           ; BSR set to: 0
 12504  0054' 0E00               	movlw	0
 12505  0056' 6F00'              	movwf	?_pow& (0+255),b
 12506  0058' 0E80               	movlw	128
 12507  005A' 6F00'              	movwf	(?_pow+1)& (0+255),b
 12508  005C' 0E3F               	movlw	63
 12509  005E' 6F00'              	movwf	(?_pow+2)& (0+255),b
 12510                           
 12511                           ; BSR set to: 0
 12512  0060' 0012               	return	
 12513  0062'                    l1891:
 12514                           
 12515                           ; BSR set to: 0
 12516                           
 12517                           ; BSR set to: 0
 12518  0062' AF00'              	btfss	(pow@x+2)& (0+255),7,b
 12519  0064' D041               	goto	l1892
 12520                           
 12521                           ; BSR set to: 0
 12522  0066' C045' F018'        	movff	pow@y,___fttol@f1
 12523  006A' C046' F019'        	movff	pow@y+1,___fttol@f1+1
 12524  006E' C047' F01A'        	movff	pow@y+2,___fttol@f1+2
 12525  0072' EC00' F000'        	call	___fttol	;wreg free
 12526  0076' C018' F04F'        	movff	?___fttol,pow@yi
 12527  007A' C019' F050'        	movff	?___fttol+1,pow@yi+1
 12528  007E' C01A' F051'        	movff	?___fttol+2,pow@yi+2
 12529  0082' C01B' F052'        	movff	?___fttol+3,pow@yi+3
 12530  0086' C04F' F01F'        	movff	pow@yi,___lltoft@c
 12531  008A' C050' F020'        	movff	pow@yi+1,___lltoft@c+1
 12532  008E' C051' F021'        	movff	pow@yi+2,___lltoft@c+2
 12533  0092' C052' F022'        	movff	pow@yi+3,___lltoft@c+3
 12534  0096' EC00' F000'        	call	___lltoft	;wreg free
 12535  009A' 0100               	movlb	0	; () banked
 12536  009C' 5100'              	movf	pow@y& (0+255),w,b
 12537  009E' 181F'              	xorwf	?___lltoft,w,c
 12538  00A0' E107               	bnz	u7640
 12539  00A2' 5100'              	movf	(pow@y+1)& (0+255),w,b
 12540  00A4' 1820'              	xorwf	?___lltoft+1,w,c
 12541  00A6' E104               	bnz	u7640
 12542  00A8' 5100'              	movf	(pow@y+2)& (0+255),w,b
 12543  00AA' 1821'              	xorwf	?___lltoft+2,w,c
 12544  00AC' B4D8               	btfsc	status,2,c
 12545  00AE' D00B               	goto	l1893
 12546  00B0'                    u7640:
 12547                           
 12548                           ; BSR set to: 0
 12549  00B0' 0E00               	movlw	0
 12550  00B2' 6F00'              	movwf	(_errno+1)& (0+255),b
 12551  00B4' 0E21               	movlw	33
 12552  00B6' 6F00'              	movwf	_errno& (0+255),b
 12553  00B8' 0E00               	movlw	0
 12554  00BA' 6F00'              	movwf	?_pow& (0+255),b
 12555  00BC' 0E00               	movlw	0
 12556  00BE' 6F00'              	movwf	(?_pow+1)& (0+255),b
 12557  00C0' 0E00               	movlw	0
 12558  00C2' 6F00'              	movwf	(?_pow+2)& (0+255),b
 12559                           
 12560                           ; BSR set to: 0
 12561  00C4' 0012               	return	
 12562  00C6'                    l1893:
 12563                           
 12564                           ; BSR set to: 0
 12565                           
 12566                           ; BSR set to: 0
 12567  00C6' 5100'              	movf	pow@yi& (0+255),w,b
 12568  00C8' 0B01               	andlw	1
 12569  00CA' 6F00'              	movwf	pow@sign& (0+255),b
 12570                           
 12571                           ; BSR set to: 0
 12572  00CC' C042' F017'        	movff	pow@x,___ftneg@f1
 12573  00D0' C043' F018'        	movff	pow@x+1,___ftneg@f1+1
 12574  00D4' C044' F019'        	movff	pow@x+2,___ftneg@f1+2
 12575  00D8' EC00' F000'        	call	___ftneg	;wreg free
 12576  00DC' C017' F042'        	movff	?___ftneg,pow@x
 12577  00E0' C018' F043'        	movff	?___ftneg+1,pow@x+1
 12578  00E4' C019' F044'        	movff	?___ftneg+2,pow@x+2
 12579  00E8'                    l1892:
 12580  00E8' C042' F030'        	movff	pow@x,log@x
 12581  00EC' C043' F031'        	movff	pow@x+1,log@x+1
 12582  00F0' C044' F032'        	movff	pow@x+2,log@x+2
 12583  00F4' EC00' F000'        	call	_log	;wreg free
 12584  00F8' C030' F048'        	movff	?_log,_pow$3281
 12585  00FC' C031' F049'        	movff	?_log+1,_pow$3281+1
 12586  0100' C032' F04A'        	movff	?_log+2,_pow$3281+2
 12587  0104' C048' F009'        	movff	_pow$3281,___ftmul@f1
 12588  0108' C049' F00A'        	movff	_pow$3281+1,___ftmul@f1+1
 12589  010C' C04A' F00B'        	movff	_pow$3281+2,___ftmul@f1+2
 12590  0110' C045' F00C'        	movff	pow@y,___ftmul@f2
 12591  0114' C046' F00D'        	movff	pow@y+1,___ftmul@f2+1
 12592  0118' C047' F00E'        	movff	pow@y+2,___ftmul@f2+2
 12593  011C' EC00' F000'        	call	___ftmul	;wreg free
 12594  0120' C009' F04B'        	movff	?___ftmul,_pow$3282
 12595  0124' C00A' F04C'        	movff	?___ftmul+1,_pow$3282+1
 12596  0128' C00B' F04D'        	movff	?___ftmul+2,_pow$3282+2
 12597  012C' C04B' F039'        	movff	_pow$3282,exp@x
 12598  0130' C04C' F03A'        	movff	_pow$3282+1,exp@x+1
 12599  0134' C04D' F03B'        	movff	_pow$3282+2,exp@x+2
 12600  0138' EC00' F000'        	call	_exp	;wreg free
 12601  013C' C039' F042'        	movff	?_exp,pow@x
 12602  0140' C03A' F043'        	movff	?_exp+1,pow@x+1
 12603  0144' C03B' F044'        	movff	?_exp+2,pow@x+2
 12604  0148' 0100               	movlb	0	; () banked
 12605  014A' 5100'              	movf	pow@sign& (0+255),w,b
 12606  014C' B4D8               	btfsc	status,2,c
 12607  014E' D00F               	goto	l1894
 12608                           
 12609                           ; BSR set to: 0
 12610  0150' C042' F017'        	movff	pow@x,___ftneg@f1
 12611  0154' C043' F018'        	movff	pow@x+1,___ftneg@f1+1
 12612  0158' C044' F019'        	movff	pow@x+2,___ftneg@f1+2
 12613  015C' EC00' F000'        	call	___ftneg	;wreg free
 12614  0160' C017' F042'        	movff	?___ftneg,?_pow
 12615  0164' C018' F043'        	movff	?___ftneg+1,?_pow+1
 12616  0168' C019' F044'        	movff	?___ftneg+2,?_pow+2
 12617  016C' 0012               	return	
 12618  016E'                    l1894:
 12619                           
 12620                           ; BSR set to: 0
 12621  016E' C042' F042'        	movff	pow@x,?_pow
 12622  0172' C043' F043'        	movff	pow@x+1,?_pow+1
 12623  0176' C044' F044'        	movff	pow@x+2,?_pow+2
 12624  017A' 0012               	return		;funcret
 12625  017C'                    __end_of_pow:
 12626                           	opt stack 0
 12627                           tosu	equ	0xFFF
 12628                           tosh	equ	0xFFE
 12629                           tosl	equ	0xFFD
 12630                           pclath	equ	0xFFA
 12631                           tblptru	equ	0xFF8
 12632                           tblptrh	equ	0xFF7
 12633                           tblptrl	equ	0xFF6
 12634                           tablat	equ	0xFF5
 12635                           prodh	equ	0xFF4
 12636                           prodl	equ	0xFF3
 12637                           intcon	equ	0xFF2
 12638                           intcon2	equ	0xFF1
 12639                           postinc0	equ	0xFEE
 12640                           wreg	equ	0xFE8
 12641                           indf1	equ	0xFE7
 12642                           postdec1	equ	0xFE5
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           fsr2h	equ	0xFDA
 12649                           fsr2l	equ	0xFD9
 12650                           status	equ	0xFD8
 12651                           
 12652 ;; *************** function _log *****************
 12653 ;; Defined at:
 12654 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  x               3   48[BANK0 ] unsigned char 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  exponent        2   51[BANK0 ] int 
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  3   48[BANK0 ] int 
 12661 ;; Registers used:
 12662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12668 ;;      Params:         0       3       0       0       0       0       0
 12669 ;;      Locals:         0       2       0       0       0       0       0
 12670 ;;      Temps:          0       0       0       0       0       0       0
 12671 ;;      Totals:         0       5       0       0       0       0       0
 12672 ;;Total ram usage:        5 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    6
 12675 ;; This function calls:
 12676 ;;		___awtoft
 12677 ;;		___ftadd
 12678 ;;		___ftmul
 12679 ;;		_eval_poly
 12680 ;;		_frexp
 12681 ;; This function is called by:
 12682 ;;		_pow
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           	psect	text86
 12687  0000'                    __ptext86:
 12688                           	opt stack 0
 12689  0000'                    _log:
 12690                           	opt stack 22
 12691                           
 12692                           ;incstack = 0
 12693  0000' 0100               	movlb	0	; () banked
 12694  0002' AF00'              	btfss	(log@x+2)& (0+255),7,b
 12695  0004' D00B               	goto	l2150
 12696                           
 12697                           ; BSR set to: 0
 12698  0006' 0E00               	movlw	0
 12699  0008' 6F00'              	movwf	(_errno+1)& (0+255),b
 12700  000A' 0E21               	movlw	33
 12701  000C' 6F00'              	movwf	_errno& (0+255),b
 12702  000E' 0E00               	movlw	0
 12703  0010' 6F00'              	movwf	?_log& (0+255),b
 12704  0012' 0E00               	movlw	0
 12705  0014' 6F00'              	movwf	(?_log+1)& (0+255),b
 12706  0016' 0E00               	movlw	0
 12707  0018' 6F00'              	movwf	(?_log+2)& (0+255),b
 12708                           
 12709                           ; BSR set to: 0
 12710  001A' 0012               	return	
 12711  001C'                    l2150:
 12712                           
 12713                           ; BSR set to: 0
 12714                           
 12715                           ; BSR set to: 0
 12716  001C' 5100'              	movf	log@x& (0+255),w,b
 12717  001E' 1100'              	iorwf	(log@x+1)& (0+255),w,b
 12718  0020' 1100'              	iorwf	(log@x+2)& (0+255),w,b
 12719  0022' A4D8               	btfss	status,2,c
 12720  0024' D00B               	goto	l2152
 12721                           
 12722                           ; BSR set to: 0
 12723  0026' 0E00               	movlw	0
 12724  0028' 6F00'              	movwf	(_errno+1)& (0+255),b
 12725  002A' 0E22               	movlw	34
 12726  002C' 6F00'              	movwf	_errno& (0+255),b
 12727  002E' 0E00               	movlw	0
 12728  0030' 6F00'              	movwf	?_log& (0+255),b
 12729  0032' 0E00               	movlw	0
 12730  0034' 6F00'              	movwf	(?_log+1)& (0+255),b
 12731  0036' 0E00               	movlw	0
 12732  0038' 6F00'              	movwf	(?_log+2)& (0+255),b
 12733                           
 12734                           ; BSR set to: 0
 12735  003A' 0012               	return	
 12736  003C'                    l2152:
 12737                           
 12738                           ; BSR set to: 0
 12739                           
 12740                           ; BSR set to: 0
 12741  003C' 0E00               	movlw	0
 12742  003E' 6F00'              	movwf	___ftmul@f2& (0+255),b
 12743  0040' 0E00               	movlw	0
 12744  0042' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 12745  0044' 0E40               	movlw	64
 12746  0046' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 12747  0048' 0E00'              	movlw	low log@exponent
 12748  004A' 6E1A'              	movwf	frexp@eptr,c
 12749  004C' 0E00'              	movlw	high log@exponent
 12750  004E' 6E1B'              	movwf	frexp@eptr+1,c
 12751  0050' C030' F017'        	movff	log@x,frexp@value
 12752  0054' C031' F018'        	movff	log@x+1,frexp@value+1
 12753  0058' C032' F019'        	movff	log@x+2,frexp@value+2
 12754  005C' EC00' F000'        	call	_frexp	;wreg free
 12755  0060' C017' F009'        	movff	?_frexp,___ftmul@f1
 12756  0064' C018' F00A'        	movff	?_frexp+1,___ftmul@f1+1
 12757  0068' C019' F00B'        	movff	?_frexp+2,___ftmul@f1+2
 12758  006C' EC00' F000'        	call	___ftmul	;wreg free
 12759  0070' C009' F018'        	movff	?___ftmul,___ftadd@f1
 12760  0074' C00A' F019'        	movff	?___ftmul+1,___ftadd@f1+1
 12761  0078' C00B' F01A'        	movff	?___ftmul+2,___ftadd@f1+2
 12762  007C' 0E00               	movlw	0
 12763  007E' 0100               	movlb	0	; () banked
 12764  0080' 6F00'              	movwf	___ftadd@f2& (0+255),b
 12765  0082' 0E80               	movlw	128
 12766  0084' 6F00'              	movwf	(___ftadd@f2+1)& (0+255),b
 12767  0086' 0EBF               	movlw	191
 12768  0088' 6F00'              	movwf	(___ftadd@f2+2)& (0+255),b
 12769  008A' EC00' F000'        	call	___ftadd	;wreg free
 12770  008E' C018' F030'        	movff	?___ftadd,log@x
 12771  0092' C019' F031'        	movff	?___ftadd+1,log@x+1
 12772  0096' C01A' F032'        	movff	?___ftadd+2,log@x+2
 12773  009A' 0100               	movlb	0	; () banked
 12774  009C' 0700'              	decf	log@exponent& (0+255),f,b
 12775  009E' A0D8               	btfss	status,0,c
 12776  00A0' 0700'              	decf	(log@exponent+1)& (0+255),f,b
 12777                           
 12778                           ; BSR set to: 0
 12779  00A2' C030' F024'        	movff	log@x,eval_poly@x
 12780  00A6' C031' F025'        	movff	log@x+1,eval_poly@x+1
 12781  00AA' C032' F026'        	movff	log@x+2,eval_poly@x+2
 12782  00AE' 0E00'              	movlw	low log@coeff
 12783  00B0' 6F00'              	movwf	eval_poly@d& (0+255),b
 12784  00B2' 0E00'              	movlw	high log@coeff
 12785  00B4' 6F00'              	movwf	(eval_poly@d+1)& (0+255),b
 12786  00B6' 0E00               	movlw	0
 12787  00B8' 6F00'              	movwf	(eval_poly@n+1)& (0+255),b
 12788  00BA' 0E08               	movlw	8
 12789  00BC' 6F00'              	movwf	eval_poly@n& (0+255),b
 12790  00BE' EC00' F000'        	call	_eval_poly	;wreg free
 12791  00C2' C024' F030'        	movff	?_eval_poly,log@x
 12792  00C6' C025' F031'        	movff	?_eval_poly+1,log@x+1
 12793  00CA' C026' F032'        	movff	?_eval_poly+2,log@x+2
 12794  00CE' 0E72               	movlw	114
 12795  00D0' 0100               	movlb	0	; () banked
 12796  00D2' 6F00'              	movwf	___ftmul@f2& (0+255),b
 12797  00D4' 0E31               	movlw	49
 12798  00D6' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 12799  00D8' 0E3F               	movlw	63
 12800  00DA' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 12801  00DC' C033' F01F'        	movff	log@exponent,___awtoft@c
 12802  00E0' C034' F020'        	movff	log@exponent+1,___awtoft@c+1
 12803  00E4' EC00' F000'        	call	___awtoft	;wreg free
 12804  00E8' C01F' F009'        	movff	?___awtoft,___ftmul@f1
 12805  00EC' C020' F00A'        	movff	?___awtoft+1,___ftmul@f1+1
 12806  00F0' C021' F00B'        	movff	?___awtoft+2,___ftmul@f1+2
 12807  00F4' EC00' F000'        	call	___ftmul	;wreg free
 12808  00F8' C009' F018'        	movff	?___ftmul,___ftadd@f1
 12809  00FC' C00A' F019'        	movff	?___ftmul+1,___ftadd@f1+1
 12810  0100' C00B' F01A'        	movff	?___ftmul+2,___ftadd@f1+2
 12811  0104' C030' F01B'        	movff	log@x,___ftadd@f2
 12812  0108' C031' F01C'        	movff	log@x+1,___ftadd@f2+1
 12813  010C' C032' F01D'        	movff	log@x+2,___ftadd@f2+2
 12814  0110' EC00' F000'        	call	___ftadd	;wreg free
 12815  0114' C018' F030'        	movff	?___ftadd,?_log
 12816  0118' C019' F031'        	movff	?___ftadd+1,?_log+1
 12817  011C' C01A' F032'        	movff	?___ftadd+2,?_log+2
 12818  0120' 0012               	return	
 12819  0122'                    __end_of_log:
 12820                           	opt stack 0
 12821                           tosu	equ	0xFFF
 12822                           tosh	equ	0xFFE
 12823                           tosl	equ	0xFFD
 12824                           pclath	equ	0xFFA
 12825                           tblptru	equ	0xFF8
 12826                           tblptrh	equ	0xFF7
 12827                           tblptrl	equ	0xFF6
 12828                           tablat	equ	0xFF5
 12829                           prodh	equ	0xFF4
 12830                           prodl	equ	0xFF3
 12831                           intcon	equ	0xFF2
 12832                           intcon2	equ	0xFF1
 12833                           postinc0	equ	0xFEE
 12834                           wreg	equ	0xFE8
 12835                           indf1	equ	0xFE7
 12836                           postdec1	equ	0xFE5
 12837                           fsr1h	equ	0xFE2
 12838                           fsr1l	equ	0xFE1
 12839                           indf2	equ	0xFDF
 12840                           postinc2	equ	0xFDE
 12841                           postdec2	equ	0xFDD
 12842                           fsr2h	equ	0xFDA
 12843                           fsr2l	equ	0xFD9
 12844                           status	equ	0xFD8
 12845                           
 12846 ;; *************** function _exp *****************
 12847 ;; Defined at:
 12848 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;  x               3   57[BANK0 ] int 
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;  exponent        2   63[BANK0 ] int 
 12853 ;;  sign            1   65[BANK0 ] unsigned char 
 12854 ;; Return value:  Size  Location     Type
 12855 ;;                  3   57[BANK0 ] unsigned char 
 12856 ;; Registers used:
 12857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12863 ;;      Params:         0       3       0       0       0       0       0
 12864 ;;      Locals:         0       6       0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0       0       0
 12866 ;;      Totals:         0       9       0       0       0       0       0
 12867 ;;Total ram usage:        9 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    6
 12870 ;; This function calls:
 12871 ;;		___awtoft
 12872 ;;		___ftdiv
 12873 ;;		___ftge
 12874 ;;		___ftmul
 12875 ;;		___ftneg
 12876 ;;		___ftsub
 12877 ;;		___fttol
 12878 ;;		_eval_poly
 12879 ;;		_floor
 12880 ;;		_ldexp
 12881 ;; This function is called by:
 12882 ;;		_pow
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text87
 12887  0000'                    __ptext87:
 12888                           	opt stack 0
 12889  0000'                    _exp:
 12890                           	opt stack 22
 12891                           
 12892                           ;incstack = 0
 12893  0000' 0100               	movlb	0	; () banked
 12894  0002' 5100'              	movf	exp@x& (0+255),w,b
 12895  0004' 1100'              	iorwf	(exp@x+1)& (0+255),w,b
 12896  0006' 1100'              	iorwf	(exp@x+2)& (0+255),w,b
 12897  0008' A4D8               	btfss	status,2,c
 12898  000A' D007               	goto	l2086
 12899                           
 12900                           ; BSR set to: 0
 12901  000C' 0E00               	movlw	0
 12902  000E' 6F00'              	movwf	?_exp& (0+255),b
 12903  0010' 0E80               	movlw	128
 12904  0012' 6F00'              	movwf	(?_exp+1)& (0+255),b
 12905  0014' 0E3F               	movlw	63
 12906  0016' 6F00'              	movwf	(?_exp+2)& (0+255),b
 12907                           
 12908                           ; BSR set to: 0
 12909  0018' 0012               	return	
 12910  001A'                    l2086:
 12911                           
 12912                           ; BSR set to: 0
 12913                           
 12914                           ; BSR set to: 0
 12915  001A' 0E72               	movlw	114
 12916  001C' 6E17'              	movwf	___ftge@ff1,c
 12917  001E' 0E31               	movlw	49
 12918  0020' 6E18'              	movwf	___ftge@ff1+1,c
 12919  0022' 0E44               	movlw	68
 12920  0024' 6E19'              	movwf	___ftge@ff1+2,c
 12921  0026' C039' F01A'        	movff	exp@x,___ftge@ff2
 12922  002A' C03A' F01B'        	movff	exp@x+1,___ftge@ff2+1
 12923  002E' C03B' F01C'        	movff	exp@x+2,___ftge@ff2+2
 12924  0032' EC00' F000'        	call	___ftge	;wreg free
 12925  0036' B0D8               	btfsc	status,0,c
 12926  0038' D00C               	goto	l2088
 12927  003A' 0E00               	movlw	0
 12928  003C' 0100               	movlb	0	; () banked
 12929  003E' 6F00'              	movwf	(_errno+1)& (0+255),b
 12930  0040' 0E22               	movlw	34
 12931  0042' 6F00'              	movwf	_errno& (0+255),b
 12932  0044' 0EFF               	movlw	255
 12933  0046' 6F00'              	movwf	?_exp& (0+255),b
 12934  0048' 0E7F               	movlw	127
 12935  004A' 6F00'              	movwf	(?_exp+1)& (0+255),b
 12936  004C' 0E7F               	movlw	127
 12937  004E' 6F00'              	movwf	(?_exp+2)& (0+255),b
 12938                           
 12939                           ; BSR set to: 0
 12940  0050' 0012               	return	
 12941  0052'                    l2088:
 12942                           
 12943                           ; BSR set to: 0
 12944  0052' C039' F017'        	movff	exp@x,___ftge@ff1
 12945  0056' C03A' F018'        	movff	exp@x+1,___ftge@ff1+1
 12946  005A' C03B' F019'        	movff	exp@x+2,___ftge@ff1+2
 12947  005E' 0E49               	movlw	73
 12948  0060' 6E1A'              	movwf	___ftge@ff2,c
 12949  0062' 0E3A               	movlw	58
 12950  0064' 6E1B'              	movwf	___ftge@ff2+1,c
 12951  0066' 0EC4               	movlw	196
 12952  0068' 6E1C'              	movwf	___ftge@ff2+2,c
 12953  006A' EC00' F000'        	call	___ftge	;wreg free
 12954  006E' B0D8               	btfsc	status,0,c
 12955  0070' D00C               	goto	l2089
 12956  0072' 0E00               	movlw	0
 12957  0074' 0100               	movlb	0	; () banked
 12958  0076' 6F00'              	movwf	(_errno+1)& (0+255),b
 12959  0078' 0E22               	movlw	34
 12960  007A' 6F00'              	movwf	_errno& (0+255),b
 12961  007C' 0E00               	movlw	0
 12962  007E' 6F00'              	movwf	?_exp& (0+255),b
 12963  0080' 0E00               	movlw	0
 12964  0082' 6F00'              	movwf	(?_exp+1)& (0+255),b
 12965  0084' 0E00               	movlw	0
 12966  0086' 6F00'              	movwf	(?_exp+2)& (0+255),b
 12967                           
 12968                           ; BSR set to: 0
 12969  0088' 0012               	return	
 12970  008A'                    l2089:
 12971                           
 12972                           ; BSR set to: 0
 12973  008A' 0100               	movlb	0	; () banked
 12974  008C' AF00'              	btfss	(exp@x+2)& (0+255),7,b
 12975  008E' D002               	goto	u7550
 12976  0090' 0E01               	movlw	1
 12977  0092' D001               	goto	u7560
 12978  0094'                    u7550:
 12979  0094' 0E00               	movlw	0
 12980  0096'                    u7560:
 12981  0096' 6F00'              	movwf	exp@sign& (0+255),b
 12982                           
 12983                           ; BSR set to: 0
 12984  0098' 5100'              	movf	exp@sign& (0+255),w,b
 12985  009A' B4D8               	btfsc	status,2,c
 12986  009C' D00E               	goto	l2090
 12987                           
 12988                           ; BSR set to: 0
 12989  009E' C039' F017'        	movff	exp@x,___ftneg@f1
 12990  00A2' C03A' F018'        	movff	exp@x+1,___ftneg@f1+1
 12991  00A6' C03B' F019'        	movff	exp@x+2,___ftneg@f1+2
 12992  00AA' EC00' F000'        	call	___ftneg	;wreg free
 12993  00AE' C017' F039'        	movff	?___ftneg,exp@x
 12994  00B2' C018' F03A'        	movff	?___ftneg+1,exp@x+1
 12995  00B6' C019' F03B'        	movff	?___ftneg+2,exp@x+2
 12996  00BA'                    l2090:
 12997  00BA' C039' F009'        	movff	exp@x,___ftmul@f1
 12998  00BE' C03A' F00A'        	movff	exp@x+1,___ftmul@f1+1
 12999  00C2' C03B' F00B'        	movff	exp@x+2,___ftmul@f1+2
 13000  00C6' 0EAA               	movlw	170
 13001  00C8' 0100               	movlb	0	; () banked
 13002  00CA' 6F00'              	movwf	___ftmul@f2& (0+255),b
 13003  00CC' 0EB8               	movlw	184
 13004  00CE' 6F00'              	movwf	(___ftmul@f2+1)& (0+255),b
 13005  00D0' 0E3F               	movlw	63
 13006  00D2' 6F00'              	movwf	(___ftmul@f2+2)& (0+255),b
 13007  00D4' EC00' F000'        	call	___ftmul	;wreg free
 13008  00D8' C009' F039'        	movff	?___ftmul,exp@x
 13009  00DC' C00A' F03A'        	movff	?___ftmul+1,exp@x+1
 13010  00E0' C00B' F03B'        	movff	?___ftmul+2,exp@x+2
 13011  00E4' C039' F031'        	movff	exp@x,floor@x
 13012  00E8' C03A' F032'        	movff	exp@x+1,floor@x+1
 13013  00EC' C03B' F033'        	movff	exp@x+2,floor@x+2
 13014  00F0' EC00' F000'        	call	_floor	;wreg free
 13015  00F4' C031' F03C'        	movff	?_floor,_exp$3283
 13016  00F8' C032' F03D'        	movff	?_floor+1,_exp$3283+1
 13017  00FC' C033' F03E'        	movff	?_floor+2,_exp$3283+2
 13018  0100' C03C' F018'        	movff	_exp$3283,___fttol@f1
 13019  0104' C03D' F019'        	movff	_exp$3283+1,___fttol@f1+1
 13020  0108' C03E' F01A'        	movff	_exp$3283+2,___fttol@f1+2
 13021  010C' EC00' F000'        	call	___fttol	;wreg free
 13022  0110' C018' F03F'        	movff	?___fttol,exp@exponent
 13023  0114' C019' F040'        	movff	?___fttol+1,exp@exponent+1
 13024  0118' C039' F024'        	movff	exp@x,___ftsub@f1
 13025  011C' C03A' F025'        	movff	exp@x+1,___ftsub@f1+1
 13026  0120' C03B' F026'        	movff	exp@x+2,___ftsub@f1+2
 13027  0124' C03F' F01F'        	movff	exp@exponent,___awtoft@c
 13028  0128' C040' F020'        	movff	exp@exponent+1,___awtoft@c+1
 13029  012C' EC00' F000'        	call	___awtoft	;wreg free
 13030  0130' C01F' F027'        	movff	?___awtoft,___ftsub@f2
 13031  0134' C020' F028'        	movff	?___awtoft+1,___ftsub@f2+1
 13032  0138' C021' F029'        	movff	?___awtoft+2,___ftsub@f2+2
 13033  013C' EC00' F000'        	call	___ftsub	;wreg free
 13034  0140' C024' F039'        	movff	?___ftsub,exp@x
 13035  0144' C025' F03A'        	movff	?___ftsub+1,exp@x+1
 13036  0148' C026' F03B'        	movff	?___ftsub+2,exp@x+2
 13037  014C' C039' F024'        	movff	exp@x,eval_poly@x
 13038  0150' C03A' F025'        	movff	exp@x+1,eval_poly@x+1
 13039  0154' C03B' F026'        	movff	exp@x+2,eval_poly@x+2
 13040  0158' 0E00'              	movlw	low exp@coeff
 13041  015A' 0100               	movlb	0	; () banked
 13042  015C' 6F00'              	movwf	eval_poly@d& (0+255),b
 13043  015E' 0E00'              	movlw	high exp@coeff
 13044  0160' 6F00'              	movwf	(eval_poly@d+1)& (0+255),b
 13045  0162' 0E00               	movlw	0
 13046  0164' 6F00'              	movwf	(eval_poly@n+1)& (0+255),b
 13047  0166' 0E09               	movlw	9
 13048  0168' 6F00'              	movwf	eval_poly@n& (0+255),b
 13049  016A' EC00' F000'        	call	_eval_poly	;wreg free
 13050  016E' C024' F030'        	movff	?_eval_poly,ldexp@value
 13051  0172' C025' F031'        	movff	?_eval_poly+1,ldexp@value+1
 13052  0176' C026' F032'        	movff	?_eval_poly+2,ldexp@value+2
 13053  017A' C03F' F033'        	movff	exp@exponent,ldexp@newexp
 13054  017E' C040' F034'        	movff	exp@exponent+1,ldexp@newexp+1
 13055  0182' EC00' F000'        	call	_ldexp	;wreg free
 13056  0186' C030' F039'        	movff	?_ldexp,exp@x
 13057  018A' C031' F03A'        	movff	?_ldexp+1,exp@x+1
 13058  018E' C032' F03B'        	movff	?_ldexp+2,exp@x+2
 13059  0192' 0100               	movlb	0	; () banked
 13060  0194' 5100'              	movf	exp@sign& (0+255),w,b
 13061  0196' B4D8               	btfsc	status,2,c
 13062  0198' D025               	goto	l2091
 13063                           
 13064                           ; BSR set to: 0
 13065  019A' 2900'              	incf	exp@x& (0+255),w,b
 13066  019C' E10E               	bnz	l7549
 13067  019E' 0E7F               	movlw	127
 13068  01A0' 1900'              	xorwf	(exp@x+1)& (0+255),w,b
 13069  01A2' E10B               	bnz	l7549
 13070  01A4' 0E7F               	movlw	127
 13071  01A6' 1900'              	xorwf	(exp@x+2)& (0+255),w,b
 13072  01A8' A4D8               	btfss	status,2,c
 13073  01AA' D007               	goto	l2092
 13074                           
 13075                           ; BSR set to: 0
 13076  01AC' 0E00               	movlw	0
 13077  01AE' 6F00'              	movwf	?_exp& (0+255),b
 13078  01B0' 0E00               	movlw	0
 13079  01B2' 6F00'              	movwf	(?_exp+1)& (0+255),b
 13080  01B4' 0E00               	movlw	0
 13081  01B6' 6F00'              	movwf	(?_exp+2)& (0+255),b
 13082                           
 13083                           ; BSR set to: 0
 13084  01B8' 0012               	return	
 13085  01BA'                    l2092:
 13086  01BA'                    l7549:
 13087                           
 13088                           ; BSR set to: 0
 13089  01BA' 0E00               	movlw	0
 13090  01BC' 6E28'              	movwf	___ftdiv@f1,c
 13091  01BE' 0E80               	movlw	128
 13092  01C0' 6E29'              	movwf	___ftdiv@f1+1,c
 13093  01C2' 0E3F               	movlw	63
 13094  01C4' 6E2A'              	movwf	___ftdiv@f1+2,c
 13095  01C6' C039' F02B'        	movff	exp@x,___ftdiv@f2
 13096  01CA' C03A' F02C'        	movff	exp@x+1,___ftdiv@f2+1
 13097  01CE' C03B' F02D'        	movff	exp@x+2,___ftdiv@f2+2
 13098  01D2' EC00' F000'        	call	___ftdiv	;wreg free
 13099  01D6' C028' F039'        	movff	?___ftdiv,?_exp
 13100  01DA' C029' F03A'        	movff	?___ftdiv+1,?_exp+1
 13101  01DE' C02A' F03B'        	movff	?___ftdiv+2,?_exp+2
 13102  01E2' 0012               	return	
 13103  01E4'                    l2091:
 13104                           
 13105                           ; BSR set to: 0
 13106  01E4' C039' F039'        	movff	exp@x,?_exp
 13107  01E8' C03A' F03A'        	movff	exp@x+1,?_exp+1
 13108  01EC' C03B' F03B'        	movff	exp@x+2,?_exp+2
 13109  01F0' 0012               	return		;funcret
 13110  01F2'                    __end_of_exp:
 13111                           	opt stack 0
 13112                           tosu	equ	0xFFF
 13113                           tosh	equ	0xFFE
 13114                           tosl	equ	0xFFD
 13115                           pclath	equ	0xFFA
 13116                           tblptru	equ	0xFF8
 13117                           tblptrh	equ	0xFF7
 13118                           tblptrl	equ	0xFF6
 13119                           tablat	equ	0xFF5
 13120                           prodh	equ	0xFF4
 13121                           prodl	equ	0xFF3
 13122                           intcon	equ	0xFF2
 13123                           intcon2	equ	0xFF1
 13124                           postinc0	equ	0xFEE
 13125                           wreg	equ	0xFE8
 13126                           indf1	equ	0xFE7
 13127                           postdec1	equ	0xFE5
 13128                           fsr1h	equ	0xFE2
 13129                           fsr1l	equ	0xFE1
 13130                           indf2	equ	0xFDF
 13131                           postinc2	equ	0xFDE
 13132                           postdec2	equ	0xFDD
 13133                           fsr2h	equ	0xFDA
 13134                           fsr2l	equ	0xFD9
 13135                           status	equ	0xFD8
 13136                           
 13137 ;; *************** function _ldexp *****************
 13138 ;; Defined at:
 13139 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13140 ;; Parameters:    Size  Location     Type
 13141 ;;  value           3   48[BANK0 ] unsigned char 
 13142 ;;  newexp          2   51[BANK0 ] int 
 13143 ;; Auto vars:     Size  Location     Type
 13144 ;;		None
 13145 ;; Return value:  Size  Location     Type
 13146 ;;                  3   48[BANK0 ] int 
 13147 ;; Registers used:
 13148 ;;		wreg, status,2, status,0
 13149 ;; Tracked objects:
 13150 ;;		On entry : 0/0
 13151 ;;		On exit  : 0/0
 13152 ;;		Unchanged: 0/0
 13153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13154 ;;      Params:         0       5       0       0       0       0       0
 13155 ;;      Locals:         0       0       0       0       0       0       0
 13156 ;;      Temps:          0       2       0       0       0       0       0
 13157 ;;      Totals:         0       7       0       0       0       0       0
 13158 ;;Total ram usage:        7 bytes
 13159 ;; Hardware stack levels used:    1
 13160 ;; Hardware stack levels required when called:    3
 13161 ;; This function calls:
 13162 ;;		Nothing
 13163 ;; This function is called by:
 13164 ;;		_exp
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           	psect	text88
 13169  0000'                    __ptext88:
 13170                           	opt stack 0
 13171  0000'                    _ldexp:
 13172                           	opt stack 24
 13173                           
 13174                           ;incstack = 0
 13175  0000' 0100               	movlb	0	; () banked
 13176  0002' 5100'              	movf	ldexp@value& (0+255),w,b
 13177  0004' 1100'              	iorwf	(ldexp@value+1)& (0+255),w,b
 13178  0006' 1100'              	iorwf	(ldexp@value+2)& (0+255),w,b
 13179  0008' A4D8               	btfss	status,2,c
 13180  000A' D007               	goto	l2110
 13181                           
 13182                           ; BSR set to: 0
 13183  000C' 0E00               	movlw	0
 13184  000E' 6F00'              	movwf	?_ldexp& (0+255),b
 13185  0010' 0E00               	movlw	0
 13186  0012' 6F00'              	movwf	(?_ldexp+1)& (0+255),b
 13187  0014' 0E00               	movlw	0
 13188  0016' 6F00'              	movwf	(?_ldexp+2)& (0+255),b
 13189                           
 13190                           ; BSR set to: 0
 13191  0018' 0012               	return	
 13192  001A'                    l2110:
 13193                           
 13194                           ; BSR set to: 0
 13195                           
 13196                           ; BSR set to: 0
 13197  001A' 5100'              	movf	(ldexp@value+2)& (0+255),w,b
 13198  001C' 0B7F               	andlw	127
 13199  001E' 6F00'              	movwf	??_ldexp& (0+255),b
 13200  0020' 6B00'              	clrf	(??_ldexp+1)& (0+255),b
 13201  0022' 90D8               	bcf	status,0,c
 13202  0024' 3700'              	rlcf	??_ldexp& (0+255),f,b
 13203  0026' 3700'              	rlcf	(??_ldexp+1)& (0+255),f,b
 13204  0028' 5100'              	movf	??_ldexp& (0+255),w,b
 13205  002A' 2700'              	addwf	ldexp@newexp& (0+255),f,b
 13206  002C' 5100'              	movf	(??_ldexp+1)& (0+255),w,b
 13207  002E' 2300'              	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13208  0030' AF00'              	btfss	(ldexp@value+1)& (0+255),7,b
 13209  0032' D003               	goto	u4370
 13210  0034' 6B00'              	clrf	??_ldexp& (0+255),b
 13211  0036' 2B00'              	incf	??_ldexp& (0+255),f,b
 13212  0038' D002               	goto	u4378
 13213  003A'                    u4370:
 13214  003A' 0100               	movlb	0	; () banked
 13215  003C' 6B00'              	clrf	??_ldexp& (0+255),b
 13216  003E'                    u4378:
 13217  003E' 5100'              	movf	??_ldexp& (0+255),w,b
 13218  0040' 2700'              	addwf	ldexp@newexp& (0+255),f,b
 13219  0042' 0E00               	movlw	0
 13220  0044' 2300'              	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13221  0046' AF00'              	btfss	(ldexp@newexp+1)& (0+255),7,b
 13222  0048' D00B               	goto	l2112
 13223                           
 13224                           ; BSR set to: 0
 13225  004A' 0E00               	movlw	0
 13226  004C' 6F00'              	movwf	(_errno+1)& (0+255),b
 13227  004E' 0E22               	movlw	34
 13228  0050' 6F00'              	movwf	_errno& (0+255),b
 13229  0052' 0E00               	movlw	0
 13230  0054' 6F00'              	movwf	?_ldexp& (0+255),b
 13231  0056' 0E00               	movlw	0
 13232  0058' 6F00'              	movwf	(?_ldexp+1)& (0+255),b
 13233  005A' 0E00               	movlw	0
 13234  005C'                    L2:
 13235  005C' 6F00'              	movwf	(?_ldexp+2)& (0+255),b
 13236                           
 13237                           ; BSR set to: 0
 13238  005E' 0012               	return	
 13239  0060'                    l2112:
 13240                           
 13241                           ; BSR set to: 0
 13242                           
 13243                           ; BSR set to: 0
 13244  0060' BF00'              	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13245  0062' D015               	goto	l2114
 13246  0064' 0500'              	decf	(ldexp@newexp+1)& (0+255),w,b
 13247  0066' A0D8               	btfss	status,0,c
 13248  0068' D012               	goto	l2114
 13249                           
 13250                           ; BSR set to: 0
 13251  006A' 0E00               	movlw	0
 13252  006C' 6F00'              	movwf	(_errno+1)& (0+255),b
 13253  006E' 0E22               	movlw	34
 13254  0070' 6F00'              	movwf	_errno& (0+255),b
 13255                           
 13256                           ; BSR set to: 0
 13257  0072' AF00'              	btfss	(ldexp@value+2)& (0+255),7,b
 13258  0074' D006               	goto	l2115
 13259                           
 13260                           ; BSR set to: 0
 13261  0076' 0EFF               	movlw	255
 13262  0078' 6F00'              	movwf	?_ldexp& (0+255),b
 13263  007A' 0E7F               	movlw	127
 13264  007C' 6F00'              	movwf	(?_ldexp+1)& (0+255),b
 13265  007E' 0EFF               	movlw	255
 13266  0080' D7ED               	goto	L2
 13267  0082'                    l2115:
 13268                           
 13269                           ; BSR set to: 0
 13270                           
 13271                           ; BSR set to: 0
 13272  0082' 0EFF               	movlw	255
 13273  0084' 6F00'              	movwf	?_ldexp& (0+255),b
 13274  0086' 0E7F               	movlw	127
 13275  0088' 6F00'              	movwf	(?_ldexp+1)& (0+255),b
 13276  008A' 0E7F               	movlw	127
 13277  008C' D7E7               	goto	L2
 13278  008E'                    l2114:
 13279                           
 13280                           ; BSR set to: 0
 13281                           
 13282                           ; BSR set to: 0
 13283  008E' 3500'              	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13284  0090' 3100'              	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13285  0092' 6F00'              	movwf	(??_ldexp+1)& (0+255),b
 13286  0094' 3100'              	rrcf	ldexp@newexp& (0+255),w,b
 13287  0096' 6F00'              	movwf	??_ldexp& (0+255),b
 13288  0098' 5100'              	movf	(ldexp@value+2)& (0+255),w,b
 13289  009A' 1900'              	xorwf	??_ldexp& (0+255),w,b
 13290  009C' 0B80               	andlw	-128
 13291  009E' 1900'              	xorwf	??_ldexp& (0+255),w,b
 13292  00A0' 6F00'              	movwf	(ldexp@value+2)& (0+255),b
 13293  00A2' C033' F035'        	movff	ldexp@newexp,??_ldexp
 13294  00A6' 0E01               	movlw	1
 13295  00A8' 1700'              	andwf	??_ldexp& (0+255),f,b
 13296  00AA' 3300'              	rrcf	??_ldexp& (0+255),f,b
 13297  00AC' 3300'              	rrcf	??_ldexp& (0+255),f,b
 13298  00AE' 5100'              	movf	(ldexp@value+1)& (0+255),w,b
 13299  00B0' 1900'              	xorwf	??_ldexp& (0+255),w,b
 13300  00B2' 0B7F               	andlw	-129
 13301  00B4' 1900'              	xorwf	??_ldexp& (0+255),w,b
 13302  00B6' 6F00'              	movwf	(ldexp@value+1)& (0+255),b
 13303                           
 13304                           ; BSR set to: 0
 13305                           
 13306                           ; BSR set to: 0
 13307                           
 13308                           ; BSR set to: 0
 13309  00B8' C030' F030'        	movff	ldexp@value,?_ldexp
 13310  00BC' C031' F031'        	movff	ldexp@value+1,?_ldexp+1
 13311  00C0' C032' F032'        	movff	ldexp@value+2,?_ldexp+2
 13312  00C4' 0012               	return	
 13313  00C6'                    __end_of_ldexp:
 13314                           	opt stack 0
 13315                           tosu	equ	0xFFF
 13316                           tosh	equ	0xFFE
 13317                           tosl	equ	0xFFD
 13318                           pclath	equ	0xFFA
 13319                           tblptru	equ	0xFF8
 13320                           tblptrh	equ	0xFF7
 13321                           tblptrl	equ	0xFF6
 13322                           tablat	equ	0xFF5
 13323                           prodh	equ	0xFF4
 13324                           prodl	equ	0xFF3
 13325                           intcon	equ	0xFF2
 13326                           intcon2	equ	0xFF1
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           indf1	equ	0xFE7
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function _floor *****************
 13341 ;; Defined at:
 13342 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  x               3   49[BANK0 ] int 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;  i               3   52[BANK0 ] int 
 13347 ;;  expon           2   55[BANK0 ] int 
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  3   49[BANK0 ] int 
 13350 ;; Registers used:
 13351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13357 ;;      Params:         0       3       0       0       0       0       0
 13358 ;;      Locals:         0       5       0       0       0       0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0
 13360 ;;      Totals:         0       8       0       0       0       0       0
 13361 ;;Total ram usage:        8 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    5
 13364 ;; This function calls:
 13365 ;;		___altoft
 13366 ;;		___ftadd
 13367 ;;		___ftge
 13368 ;;		___fttol
 13369 ;;		_frexp
 13370 ;; This function is called by:
 13371 ;;		_exp
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374                           
 13375                           	psect	text89
 13376  0000'                    __ptext89:
 13377                           	opt stack 0
 13378  0000'                    _floor:
 13379                           	opt stack 22
 13380                           
 13381                           ; BSR set to: 0
 13382                           ;incstack = 0
 13383  0000' C031' F017'        	movff	floor@x,frexp@value
 13384  0004' C032' F018'        	movff	floor@x+1,frexp@value+1
 13385  0008' C033' F019'        	movff	floor@x+2,frexp@value+2
 13386  000C' 0E00'              	movlw	low floor@expon
 13387  000E' 6E1A'              	movwf	frexp@eptr,c
 13388  0010' 0E00'              	movlw	high floor@expon
 13389  0012' 6E1B'              	movwf	frexp@eptr+1,c
 13390  0014' EC00' F000'        	call	_frexp	;wreg free
 13391  0018' 0100               	movlb	0	; () banked
 13392  001A' AF00'              	btfss	(floor@expon+1)& (0+255),7,b
 13393  001C' D010               	goto	l2097
 13394                           
 13395                           ; BSR set to: 0
 13396  001E' AF00'              	btfss	(floor@x+2)& (0+255),7,b
 13397  0020' D007               	goto	l2098
 13398                           
 13399                           ; BSR set to: 0
 13400  0022' 0E00               	movlw	0
 13401  0024' 6F00'              	movwf	?_floor& (0+255),b
 13402  0026' 0E80               	movlw	128
 13403  0028' 6F00'              	movwf	(?_floor+1)& (0+255),b
 13404  002A' 0EBF               	movlw	191
 13405  002C' 6F00'              	movwf	(?_floor+2)& (0+255),b
 13406                           
 13407                           ; BSR set to: 0
 13408  002E' 0012               	return	
 13409  0030'                    l2098:
 13410                           
 13411                           ; BSR set to: 0
 13412                           
 13413                           ; BSR set to: 0
 13414  0030' 0E00               	movlw	0
 13415  0032' 6F00'              	movwf	?_floor& (0+255),b
 13416  0034' 0E00               	movlw	0
 13417  0036' 6F00'              	movwf	(?_floor+1)& (0+255),b
 13418  0038' 0E00               	movlw	0
 13419  003A' 6F00'              	movwf	(?_floor+2)& (0+255),b
 13420                           
 13421                           ; BSR set to: 0
 13422  003C' 0012               	return	
 13423  003E'                    l2097:
 13424                           
 13425                           ; BSR set to: 0
 13426                           
 13427                           ; BSR set to: 0
 13428  003E' 5100'              	movf	(floor@expon+1)& (0+255),w,b
 13429  0040' E104               	bnz	u7050
 13430  0042' 0E15               	movlw	21
 13431  0044' 5D00'              	subwf	floor@expon& (0+255),w,b
 13432  0046' A0D8               	btfss	status,0,c
 13433  0048' D007               	goto	l2100
 13434  004A'                    u7050:
 13435                           
 13436                           ; BSR set to: 0
 13437  004A' C031' F031'        	movff	floor@x,?_floor
 13438  004E' C032' F032'        	movff	floor@x+1,?_floor+1
 13439  0052' C033' F033'        	movff	floor@x+2,?_floor+2
 13440  0056' 0012               	return	
 13441  0058'                    l2100:
 13442                           
 13443                           ; BSR set to: 0
 13444                           
 13445                           ; BSR set to: 0
 13446  0058' C031' F018'        	movff	floor@x,___fttol@f1
 13447  005C' C032' F019'        	movff	floor@x+1,___fttol@f1+1
 13448  0060' C033' F01A'        	movff	floor@x+2,___fttol@f1+2
 13449  0064' EC00' F000'        	call	___fttol	;wreg free
 13450  0068' C018' F027'        	movff	?___fttol,___altoft@c
 13451  006C' C019' F028'        	movff	?___fttol+1,___altoft@c+1
 13452  0070' C01A' F029'        	movff	?___fttol+2,___altoft@c+2
 13453  0074' C01B' F02A'        	movff	?___fttol+3,___altoft@c+3
 13454  0078' EC00' F000'        	call	___altoft	;wreg free
 13455  007C' C027' F034'        	movff	?___altoft,floor@i
 13456  0080' C028' F035'        	movff	?___altoft+1,floor@i+1
 13457  0084' C029' F036'        	movff	?___altoft+2,floor@i+2
 13458  0088' C031' F017'        	movff	floor@x,___ftge@ff1
 13459  008C' C032' F018'        	movff	floor@x+1,___ftge@ff1+1
 13460  0090' C033' F019'        	movff	floor@x+2,___ftge@ff1+2
 13461  0094' C034' F01A'        	movff	floor@i,___ftge@ff2
 13462  0098' C035' F01B'        	movff	floor@i+1,___ftge@ff2+1
 13463  009C' C036' F01C'        	movff	floor@i+2,___ftge@ff2+2
 13464  00A0' EC00' F000'        	call	___ftge	;wreg free
 13465  00A4' B0D8               	btfsc	status,0,c
 13466  00A6' D016               	goto	l2101
 13467  00A8' C034' F018'        	movff	floor@i,___ftadd@f1
 13468  00AC' C035' F019'        	movff	floor@i+1,___ftadd@f1+1
 13469  00B0' C036' F01A'        	movff	floor@i+2,___ftadd@f1+2
 13470  00B4' 0E00               	movlw	0
 13471  00B6' 0100               	movlb	0	; () banked
 13472  00B8' 6F00'              	movwf	___ftadd@f2& (0+255),b
 13473  00BA' 0E80               	movlw	128
 13474  00BC' 6F00'              	movwf	(___ftadd@f2+1)& (0+255),b
 13475  00BE' 0EBF               	movlw	191
 13476  00C0' 6F00'              	movwf	(___ftadd@f2+2)& (0+255),b
 13477  00C2' EC00' F000'        	call	___ftadd	;wreg free
 13478  00C6' C018' F031'        	movff	?___ftadd,?_floor
 13479  00CA' C019' F032'        	movff	?___ftadd+1,?_floor+1
 13480  00CE' C01A' F033'        	movff	?___ftadd+2,?_floor+2
 13481  00D2' 0012               	return	
 13482  00D4'                    l2101:
 13483  00D4' C034' F031'        	movff	floor@i,?_floor
 13484  00D8' C035' F032'        	movff	floor@i+1,?_floor+1
 13485  00DC' C036' F033'        	movff	floor@i+2,?_floor+2
 13486  00E0' 0012               	return		;funcret
 13487  00E2'                    __end_of_floor:
 13488                           	opt stack 0
 13489                           tosu	equ	0xFFF
 13490                           tosh	equ	0xFFE
 13491                           tosl	equ	0xFFD
 13492                           pclath	equ	0xFFA
 13493                           tblptru	equ	0xFF8
 13494                           tblptrh	equ	0xFF7
 13495                           tblptrl	equ	0xFF6
 13496                           tablat	equ	0xFF5
 13497                           prodh	equ	0xFF4
 13498                           prodl	equ	0xFF3
 13499                           intcon	equ	0xFF2
 13500                           intcon2	equ	0xFF1
 13501                           postinc0	equ	0xFEE
 13502                           wreg	equ	0xFE8
 13503                           indf1	equ	0xFE7
 13504                           postdec1	equ	0xFE5
 13505                           fsr1h	equ	0xFE2
 13506                           fsr1l	equ	0xFE1
 13507                           indf2	equ	0xFDF
 13508                           postinc2	equ	0xFDE
 13509                           postdec2	equ	0xFDD
 13510                           fsr2h	equ	0xFDA
 13511                           fsr2l	equ	0xFD9
 13512                           status	equ	0xFD8
 13513                           
 13514 ;; *************** function _frexp *****************
 13515 ;; Defined at:
 13516 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  value           3   23[COMRAM] int 
 13519 ;;  eptr            2   26[COMRAM] PTR int 
 13520 ;;		 -> log@exponent(2), floor@expon(2), 
 13521 ;; Auto vars:     Size  Location     Type
 13522 ;;		None
 13523 ;; Return value:  Size  Location     Type
 13524 ;;                  3   23[COMRAM] PTR int 
 13525 ;; Registers used:
 13526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13527 ;; Tracked objects:
 13528 ;;		On entry : 0/0
 13529 ;;		On exit  : 0/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13532 ;;      Params:         5       0       0       0       0       0       0
 13533 ;;      Locals:         0       0       0       0       0       0       0
 13534 ;;      Temps:          2       0       0       0       0       0       0
 13535 ;;      Totals:         7       0       0       0       0       0       0
 13536 ;;Total ram usage:        7 bytes
 13537 ;; Hardware stack levels used:    1
 13538 ;; Hardware stack levels required when called:    3
 13539 ;; This function calls:
 13540 ;;		Nothing
 13541 ;; This function is called by:
 13542 ;;		_floor
 13543 ;;		_log
 13544 ;; This function uses a non-reentrant model
 13545 ;;
 13546                           
 13547                           	psect	text90
 13548  0000'                    __ptext90:
 13549                           	opt stack 0
 13550  0000'                    _frexp:
 13551                           	opt stack 24
 13552                           
 13553                           ;incstack = 0
 13554  0000' 5017'              	movf	frexp@value,w,c
 13555  0002' 1018'              	iorwf	frexp@value+1,w,c
 13556  0004' 1019'              	iorwf	frexp@value+2,w,c
 13557  0006' A4D8               	btfss	status,2,c
 13558  0008' D00F               	goto	l2106
 13559  000A' C01A' FFD9         	movff	frexp@eptr,fsr2l
 13560  000E' C01B' FFDA         	movff	frexp@eptr+1,fsr2h
 13561  0012' 0E00               	movlw	0
 13562  0014' 6EDE               	movwf	postinc2,c
 13563  0016' 0E00               	movlw	0
 13564  0018' 6EDD               	movwf	postdec2,c
 13565  001A' 0E00               	movlw	0
 13566  001C' 6E17'              	movwf	?_frexp,c
 13567  001E' 0E00               	movlw	0
 13568  0020' 6E18'              	movwf	?_frexp+1,c
 13569  0022' 0E00               	movlw	0
 13570  0024' 6E19'              	movwf	?_frexp+2,c
 13571  0026' 0012               	return	
 13572  0028'                    l2106:
 13573  0028' 5019'              	movf	frexp@value+2,w,c
 13574  002A' 0B7F               	andlw	127
 13575  002C' 6E00'              	movwf	??_frexp& (0+255),c
 13576  002E' 6A00'              	clrf	(??_frexp+1)& (0+255),c
 13577  0030' 90D8               	bcf	status,0,c
 13578  0032' 361C'              	rlcf	??_frexp,f,c
 13579  0034' 361D'              	rlcf	??_frexp+1,f,c
 13580  0036' C01A' FFD9         	movff	frexp@eptr,fsr2l
 13581  003A' C01B' FFDA         	movff	frexp@eptr+1,fsr2h
 13582  003E' C01C' FFDE         	movff	??_frexp,postinc2
 13583  0042' C01D' FFDD         	movff	??_frexp+1,postdec2
 13584  0046' AE18'              	btfss	frexp@value+1,7,c
 13585  0048' D003               	goto	u3990
 13586  004A' 6A00'              	clrf	??_frexp& (0+255),c
 13587  004C' 2A00'              	incf	??_frexp& (0+255),f,c
 13588  004E' D001               	goto	u3998
 13589  0050'                    u3990:
 13590  0050' 6A00'              	clrf	??_frexp& (0+255),c
 13591  0052'                    u3998:
 13592  0052' 501C'              	movf	??_frexp,w,c
 13593  0054' C01A' FFD9         	movff	frexp@eptr,fsr2l
 13594  0058' C01B' FFDA         	movff	frexp@eptr+1,fsr2h
 13595  005C' 12DE               	iorwf	postinc2,f,c
 13596  005E' 0E00               	movlw	0
 13597  0060' 12DD               	iorwf	postdec2,f,c
 13598  0062' C01A' FFD9         	movff	frexp@eptr,fsr2l
 13599  0066' C01B' FFDA         	movff	frexp@eptr+1,fsr2h
 13600  006A' 0E82               	movlw	130
 13601  006C' 26DE               	addwf	postinc2,f,c
 13602  006E' 0EFF               	movlw	255
 13603  0070' 22DD               	addwfc	postdec2,f,c
 13604  0072' 8019'              	bsf	frexp@value+2,0,c
 13605  0074' 8219'              	bsf	frexp@value+2,1,c
 13606  0076' 8419'              	bsf	frexp@value+2,2,c
 13607  0078' 8619'              	bsf	frexp@value+2,3,c
 13608  007A' 8819'              	bsf	frexp@value+2,4,c
 13609  007C' 8A19'              	bsf	frexp@value+2,5,c
 13610  007E' 9C19'              	bcf	frexp@value+2,6,c
 13611  0080' 9E18'              	bcf	frexp@value+1,7,c
 13612  0082' C017' F017'        	movff	frexp@value,?_frexp
 13613  0086' C018' F018'        	movff	frexp@value+1,?_frexp+1
 13614  008A' C019' F019'        	movff	frexp@value+2,?_frexp+2
 13615  008E' 0012               	return	
 13616  0090'                    __end_of_frexp:
 13617                           	opt stack 0
 13618                           tosu	equ	0xFFF
 13619                           tosh	equ	0xFFE
 13620                           tosl	equ	0xFFD
 13621                           pclath	equ	0xFFA
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           postinc0	equ	0xFEE
 13631                           wreg	equ	0xFE8
 13632                           indf1	equ	0xFE7
 13633                           postdec1	equ	0xFE5
 13634                           fsr1h	equ	0xFE2
 13635                           fsr1l	equ	0xFE1
 13636                           indf2	equ	0xFDF
 13637                           postinc2	equ	0xFDE
 13638                           postdec2	equ	0xFDD
 13639                           fsr2h	equ	0xFDA
 13640                           fsr2l	equ	0xFD9
 13641                           status	equ	0xFD8
 13642                           
 13643 ;; *************** function ___fttol *****************
 13644 ;; Defined at:
 13645 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  f1              3   24[BANK0 ] float 
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;  lval            4   34[BANK0 ] unsigned long 
 13650 ;;  exp1            1   38[BANK0 ] unsigned char 
 13651 ;;  sign1           1   33[BANK0 ] unsigned char 
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  4   24[BANK0 ] long 
 13654 ;; Registers used:
 13655 ;;		wreg, status,2, status,0
 13656 ;; Tracked objects:
 13657 ;;		On entry : 0/0
 13658 ;;		On exit  : 0/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13661 ;;      Params:         0       4       0       0       0       0       0
 13662 ;;      Locals:         0       6       0       0       0       0       0
 13663 ;;      Temps:          0       5       0       0       0       0       0
 13664 ;;      Totals:         0      15       0       0       0       0       0
 13665 ;;Total ram usage:       15 bytes
 13666 ;; Hardware stack levels used:    1
 13667 ;; Hardware stack levels required when called:    3
 13668 ;; This function calls:
 13669 ;;		Nothing
 13670 ;; This function is called by:
 13671 ;;		_AdcConvert
 13672 ;;		_pow
 13673 ;;		_exp
 13674 ;;		_floor
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           	psect	text91
 13679  0000'                    __ptext91:
 13680                           	opt stack 0
 13681  0000'                    ___fttol:
 13682                           	opt stack 23
 13683                           
 13684                           ;incstack = 0
 13685  0000' C01A' F01C'        	movff	___fttol@f1+2,??___fttol
 13686  0004' 0100               	movlb	0	; () banked
 13687  0006' 6B00'              	clrf	(??___fttol+1)& (0+255),b
 13688  0008' 6B00'              	clrf	(??___fttol+2)& (0+255),b
 13689  000A' 3500'              	rlcf	(___fttol@f1+1)& (0+255),w,b
 13690  000C' 3700'              	rlcf	??___fttol& (0+255),f,b
 13691  000E' E301               	bnc	u3901
 13692  0010' 8100'              	bsf	(??___fttol+1)& (0+255),0,b
 13693  0012'                    u3901:
 13694  0012' 5100'              	movf	??___fttol& (0+255),w,b
 13695  0014' 6F00'              	movwf	___fttol@exp1& (0+255),b
 13696  0016' 5100'              	movf	___fttol@exp1& (0+255),w,b
 13697  0018' A4D8               	btfss	status,2,c
 13698  001A' D009               	goto	l1763
 13699                           
 13700                           ; BSR set to: 0
 13701  001C' 0E00               	movlw	0
 13702  001E' 6F00'              	movwf	?___fttol& (0+255),b
 13703  0020' 0E00               	movlw	0
 13704  0022' 6F00'              	movwf	(?___fttol+1)& (0+255),b
 13705  0024' 0E00               	movlw	0
 13706  0026' 6F00'              	movwf	(?___fttol+2)& (0+255),b
 13707  0028' 0E00               	movlw	0
 13708  002A' 6F00'              	movwf	(?___fttol+3)& (0+255),b
 13709                           
 13710                           ; BSR set to: 0
 13711  002C' 0012               	return	
 13712  002E'                    l1763:
 13713                           
 13714                           ; BSR set to: 0
 13715                           
 13716                           ; BSR set to: 0
 13717  002E' 0E17               	movlw	23
 13718  0030' 6F00'              	movwf	??___fttol& (0+255),b
 13719  0032' C018' F01D'        	movff	___fttol@f1,??___fttol+1
 13720  0036' C019' F01E'        	movff	___fttol@f1+1,??___fttol+2
 13721  003A' C01A' F01F'        	movff	___fttol@f1+2,??___fttol+3
 13722  003E' 2900'              	incf	??___fttol& (0+255),w,b
 13723  0040' 6F00'              	movwf	(??___fttol+4)& (0+255),b
 13724  0042' D004               	goto	u3920
 13725  0044'                    u3925:
 13726  0044' 90D8               	bcf	status,0,c
 13727  0046' 3300'              	rrcf	(??___fttol+3)& (0+255),f,b
 13728  0048' 3300'              	rrcf	(??___fttol+2)& (0+255),f,b
 13729  004A' 3300'              	rrcf	(??___fttol+1)& (0+255),f,b
 13730  004C'                    u3920:
 13731  004C' 2F00'              	decfsz	(??___fttol+4)& (0+255),f,b
 13732  004E' D7FA               	goto	u3925
 13733  0050' 0100               	movlb	0	; () banked
 13734  0052' 5100'              	movf	(??___fttol+1)& (0+255),w,b
 13735  0054' 6F00'              	movwf	___fttol@sign1& (0+255),b
 13736                           
 13737                           ; BSR set to: 0
 13738  0056' 8F00'              	bsf	(___fttol@f1+1)& (0+255),7,b
 13739                           
 13740                           ; BSR set to: 0
 13741  0058' 0EFF               	movlw	255
 13742  005A' 1700'              	andwf	___fttol@f1& (0+255),f,b
 13743  005C' 0EFF               	movlw	255
 13744  005E' 1700'              	andwf	(___fttol@f1+1)& (0+255),f,b
 13745  0060' 0E00               	movlw	0
 13746  0062' 1700'              	andwf	(___fttol@f1+2)& (0+255),f,b
 13747                           
 13748                           ; BSR set to: 0
 13749  0064' 5100'              	movf	___fttol@f1& (0+255),w,b
 13750  0066' 6F00'              	movwf	___fttol@lval& (0+255),b
 13751  0068' 5100'              	movf	(___fttol@f1+1)& (0+255),w,b
 13752  006A' 6F00'              	movwf	(___fttol@lval+1)& (0+255),b
 13753  006C' 5100'              	movf	(___fttol@f1+2)& (0+255),w,b
 13754  006E' 6F00'              	movwf	(___fttol@lval+2)& (0+255),b
 13755  0070' 6B00'              	clrf	(___fttol@lval+3)& (0+255),b
 13756                           
 13757                           ; BSR set to: 0
 13758  0072' 0E8E               	movlw	142
 13759  0074' 5F00'              	subwf	___fttol@exp1& (0+255),f,b
 13760                           
 13761                           ; BSR set to: 0
 13762  0076' AF00'              	btfss	___fttol@exp1& (0+255),7,b
 13763  0078' D016               	goto	l1765
 13764                           
 13765                           ; BSR set to: 0
 13766  007A' 5100'              	movf	___fttol@exp1& (0+255),w,b
 13767  007C' 0A80               	xorlw	128
 13768  007E' 0F8F               	addlw	143
 13769  0080' B0D8               	btfsc	status,0,c
 13770  0082' D009               	goto	l1766
 13771                           
 13772                           ; BSR set to: 0
 13773  0084' 0E00               	movlw	0
 13774  0086' 6F00'              	movwf	?___fttol& (0+255),b
 13775  0088' 0E00               	movlw	0
 13776  008A' 6F00'              	movwf	(?___fttol+1)& (0+255),b
 13777  008C' 0E00               	movlw	0
 13778  008E' 6F00'              	movwf	(?___fttol+2)& (0+255),b
 13779  0090' 0E00               	movlw	0
 13780  0092' 6F00'              	movwf	(?___fttol+3)& (0+255),b
 13781                           
 13782                           ; BSR set to: 0
 13783  0094' 0012               	return	
 13784  0096'                    l1766:
 13785                           
 13786                           ; BSR set to: 0
 13787                           
 13788                           ; BSR set to: 0
 13789                           
 13790                           ; BSR set to: 0
 13791  0096' 90D8               	bcf	status,0,c
 13792  0098' 3300'              	rrcf	(___fttol@lval+3)& (0+255),f,b
 13793  009A' 3300'              	rrcf	(___fttol@lval+2)& (0+255),f,b
 13794  009C' 3300'              	rrcf	(___fttol@lval+1)& (0+255),f,b
 13795  009E' 3300'              	rrcf	___fttol@lval& (0+255),f,b
 13796                           
 13797                           ; BSR set to: 0
 13798  00A0' 3F00'              	incfsz	___fttol@exp1& (0+255),f,b
 13799  00A2' D7F9               	goto	l1766
 13800                           
 13801                           ; BSR set to: 0
 13802  00A4' D015               	goto	u3960
 13803  00A6'                    l1765:
 13804                           
 13805                           ; BSR set to: 0
 13806                           
 13807                           ; BSR set to: 0
 13808  00A6' 0E17               	movlw	23
 13809  00A8' 6500'              	cpfsgt	___fttol@exp1& (0+255),b
 13810  00AA' D00F               	goto	l1771
 13811                           
 13812                           ; BSR set to: 0
 13813  00AC' 0E00               	movlw	0
 13814  00AE' 6F00'              	movwf	?___fttol& (0+255),b
 13815  00B0' 0E00               	movlw	0
 13816  00B2' 6F00'              	movwf	(?___fttol+1)& (0+255),b
 13817  00B4' 0E00               	movlw	0
 13818  00B6' 6F00'              	movwf	(?___fttol+2)& (0+255),b
 13819  00B8' 0E00               	movlw	0
 13820  00BA' 6F00'              	movwf	(?___fttol+3)& (0+255),b
 13821                           
 13822                           ; BSR set to: 0
 13823  00BC' 0012               	return	
 13824  00BE'                    
 13825                           ; BSR set to: 0
 13826                           
 13827                           ; BSR set to: 0
 13828  00BE' 90D8               	bcf	status,0,c
 13829  00C0' 3700'              	rlcf	___fttol@lval& (0+255),f,b
 13830  00C2' 3700'              	rlcf	(___fttol@lval+1)& (0+255),f,b
 13831  00C4' 3700'              	rlcf	(___fttol@lval+2)& (0+255),f,b
 13832  00C6' 3700'              	rlcf	(___fttol@lval+3)& (0+255),f,b
 13833  00C8' 0700'              	decf	___fttol@exp1& (0+255),f,b
 13834  00CA'                    l1771:
 13835                           
 13836                           ; BSR set to: 0
 13837                           
 13838                           ; BSR set to: 0
 13839  00CA' 5100'              	movf	___fttol@exp1& (0+255),w,b
 13840  00CC' A4D8               	btfss	status,2,c
 13841  00CE' D7F7               	goto	l1772
 13842  00D0'                    u3960:
 13843                           
 13844                           ; BSR set to: 0
 13845                           
 13846                           ; BSR set to: 0
 13847                           
 13848                           ; BSR set to: 0
 13849  00D0' 5100'              	movf	___fttol@sign1& (0+255),w,b
 13850  00D2' B4D8               	btfsc	status,2,c
 13851  00D4' D008               	goto	l1774
 13852                           
 13853                           ; BSR set to: 0
 13854  00D6' 1F00'              	comf	(___fttol@lval+3)& (0+255),f,b
 13855  00D8' 1F00'              	comf	(___fttol@lval+2)& (0+255),f,b
 13856  00DA' 1F00'              	comf	(___fttol@lval+1)& (0+255),f,b
 13857  00DC' 6D00'              	negf	___fttol@lval& (0+255),b
 13858  00DE' 0E00               	movlw	0
 13859  00E0' 2300'              	addwfc	(___fttol@lval+1)& (0+255),f,b
 13860  00E2' 2300'              	addwfc	(___fttol@lval+2)& (0+255),f,b
 13861  00E4' 2300'              	addwfc	(___fttol@lval+3)& (0+255),f,b
 13862  00E6'                    l1774:
 13863                           
 13864                           ; BSR set to: 0
 13865                           
 13866                           ; BSR set to: 0
 13867  00E6' C022' F018'        	movff	___fttol@lval,?___fttol
 13868  00EA' C023' F019'        	movff	___fttol@lval+1,?___fttol+1
 13869  00EE' C024' F01A'        	movff	___fttol@lval+2,?___fttol+2
 13870  00F2' C025' F01B'        	movff	___fttol@lval+3,?___fttol+3
 13871  00F6' 0012               	return	
 13872  00F8'                    __end_of___fttol:
 13873                           	opt stack 0
 13874                           tosu	equ	0xFFF
 13875                           tosh	equ	0xFFE
 13876                           tosl	equ	0xFFD
 13877                           pclath	equ	0xFFA
 13878                           tblptru	equ	0xFF8
 13879                           tblptrh	equ	0xFF7
 13880                           tblptrl	equ	0xFF6
 13881                           tablat	equ	0xFF5
 13882                           prodh	equ	0xFF4
 13883                           prodl	equ	0xFF3
 13884                           intcon	equ	0xFF2
 13885                           intcon2	equ	0xFF1
 13886                           postinc0	equ	0xFEE
 13887                           wreg	equ	0xFE8
 13888                           indf1	equ	0xFE7
 13889                           postdec1	equ	0xFE5
 13890                           fsr1h	equ	0xFE2
 13891                           fsr1l	equ	0xFE1
 13892                           indf2	equ	0xFDF
 13893                           postinc2	equ	0xFDE
 13894                           postdec2	equ	0xFDD
 13895                           fsr2h	equ	0xFDA
 13896                           fsr2l	equ	0xFD9
 13897                           status	equ	0xFD8
 13898                           
 13899 ;; *************** function ___ftge *****************
 13900 ;; Defined at:
 13901 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;  ff1             3   23[COMRAM] float 
 13904 ;;  ff2             3   26[COMRAM] float 
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;		None
 13907 ;; Return value:  Size  Location     Type
 13908 ;;		None               void
 13909 ;; Registers used:
 13910 ;;		wreg, status,2, status,0
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13916 ;;      Params:         6       0       0       0       0       0       0
 13917 ;;      Locals:         0       0       0       0       0       0       0
 13918 ;;      Temps:          3       0       0       0       0       0       0
 13919 ;;      Totals:         9       0       0       0       0       0       0
 13920 ;;Total ram usage:        9 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; Hardware stack levels required when called:    3
 13923 ;; This function calls:
 13924 ;;		Nothing
 13925 ;; This function is called by:
 13926 ;;		_CheckFlashPrecentage
 13927 ;;		_pow
 13928 ;;		_exp
 13929 ;;		_floor
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           	psect	text92
 13934  0000'                    __ptext92:
 13935                           	opt stack 0
 13936  0000'                    ___ftge:
 13937                           	opt stack 26
 13938                           
 13939                           ; BSR set to: 0
 13940                           ;incstack = 0
 13941  0000' AE19'              	btfss	___ftge@ff1+2,7,c
 13942  0002' D016               	goto	l1735
 13943  0004' C017' F01D'        	movff	___ftge@ff1,??___ftge
 13944  0008' C018' F01E'        	movff	___ftge@ff1+1,??___ftge+1
 13945  000C' C019' F01F'        	movff	___ftge@ff1+2,??___ftge+2
 13946  0010' 1E1D'              	comf	??___ftge,f,c
 13947  0012' 1E1E'              	comf	??___ftge+1,f,c
 13948  0014' 1E1F'              	comf	??___ftge+2,f,c
 13949  0016' 2A1D'              	incf	??___ftge,f,c
 13950  0018' 0E00               	movlw	0
 13951  001A' 221E'              	addwfc	??___ftge+1,f,c
 13952  001C' 221F'              	addwfc	??___ftge+2,f,c
 13953  001E' 0E00               	movlw	0
 13954  0020' 241D'              	addwf	??___ftge,w,c
 13955  0022' 6E17'              	movwf	___ftge@ff1,c
 13956  0024' 0E00               	movlw	0
 13957  0026' 201E'              	addwfc	??___ftge+1,w,c
 13958  0028' 6E18'              	movwf	___ftge@ff1+1,c
 13959  002A' 0E80               	movlw	128
 13960  002C' 201F'              	addwfc	??___ftge+2,w,c
 13961  002E' 6E19'              	movwf	___ftge@ff1+2,c
 13962  0030'                    l1735:
 13963  0030' AE1C'              	btfss	___ftge@ff2+2,7,c
 13964  0032' D016               	goto	l1736
 13965  0034' C01A' F01D'        	movff	___ftge@ff2,??___ftge
 13966  0038' C01B' F01E'        	movff	___ftge@ff2+1,??___ftge+1
 13967  003C' C01C' F01F'        	movff	___ftge@ff2+2,??___ftge+2
 13968  0040' 1E1D'              	comf	??___ftge,f,c
 13969  0042' 1E1E'              	comf	??___ftge+1,f,c
 13970  0044' 1E1F'              	comf	??___ftge+2,f,c
 13971  0046' 2A1D'              	incf	??___ftge,f,c
 13972  0048' 0E00               	movlw	0
 13973  004A' 221E'              	addwfc	??___ftge+1,f,c
 13974  004C' 221F'              	addwfc	??___ftge+2,f,c
 13975  004E' 0E00               	movlw	0
 13976  0050' 241D'              	addwf	??___ftge,w,c
 13977  0052' 6E1A'              	movwf	___ftge@ff2,c
 13978  0054' 0E00               	movlw	0
 13979  0056' 201E'              	addwfc	??___ftge+1,w,c
 13980  0058' 6E1B'              	movwf	___ftge@ff2+1,c
 13981  005A' 0E80               	movlw	128
 13982  005C' 201F'              	addwfc	??___ftge+2,w,c
 13983  005E' 6E1C'              	movwf	___ftge@ff2+2,c
 13984  0060'                    l1736:
 13985  0060' 0E00               	movlw	0
 13986  0062' 1A17'              	xorwf	___ftge@ff1,f,c
 13987  0064' 0E00               	movlw	0
 13988  0066' 1A18'              	xorwf	___ftge@ff1+1,f,c
 13989  0068' 0E80               	movlw	128
 13990  006A' 1A19'              	xorwf	___ftge@ff1+2,f,c
 13991  006C' 0E00               	movlw	0
 13992  006E' 1A1A'              	xorwf	___ftge@ff2,f,c
 13993  0070' 0E00               	movlw	0
 13994  0072' 1A1B'              	xorwf	___ftge@ff2+1,f,c
 13995  0074' 0E80               	movlw	128
 13996  0076' 1A1C'              	xorwf	___ftge@ff2+2,f,c
 13997  0078' 501A'              	movf	___ftge@ff2,w,c
 13998  007A' 5C17'              	subwf	___ftge@ff1,w,c
 13999  007C' 501B'              	movf	___ftge@ff2+1,w,c
 14000  007E' 5818'              	subwfb	___ftge@ff1+1,w,c
 14001  0080' 501C'              	movf	___ftge@ff2+2,w,c
 14002  0082' 5819'              	subwfb	___ftge@ff1+2,w,c
 14003  0084' B0D8               	btfsc	status,0,c
 14004  0086' D002               	goto	l4343
 14005  0088' 90D8               	bcf	status,0,c
 14006  008A' 0012               	return	
 14007  008C'                    l4343:
 14008  008C' 80D8               	bsf	status,0,c
 14009  008E' 0012               	return	
 14010  0090'                    __end_of___ftge:
 14011                           	opt stack 0
 14012                           tosu	equ	0xFFF
 14013                           tosh	equ	0xFFE
 14014                           tosl	equ	0xFFD
 14015                           pclath	equ	0xFFA
 14016                           tblptru	equ	0xFF8
 14017                           tblptrh	equ	0xFF7
 14018                           tblptrl	equ	0xFF6
 14019                           tablat	equ	0xFF5
 14020                           prodh	equ	0xFF4
 14021                           prodl	equ	0xFF3
 14022                           intcon	equ	0xFF2
 14023                           intcon2	equ	0xFF1
 14024                           postinc0	equ	0xFEE
 14025                           wreg	equ	0xFE8
 14026                           indf1	equ	0xFE7
 14027                           postdec1	equ	0xFE5
 14028                           fsr1h	equ	0xFE2
 14029                           fsr1l	equ	0xFE1
 14030                           indf2	equ	0xFDF
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           fsr2h	equ	0xFDA
 14034                           fsr2l	equ	0xFD9
 14035                           status	equ	0xFD8
 14036                           
 14037 ;; *************** function ___altoft *****************
 14038 ;; Defined at:
 14039 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14040 ;; Parameters:    Size  Location     Type
 14041 ;;  c               4   39[BANK0 ] long 
 14042 ;; Auto vars:     Size  Location     Type
 14043 ;;  sign            1   48[BANK0 ] unsigned char 
 14044 ;;  exp             1   47[BANK0 ] unsigned char 
 14045 ;; Return value:  Size  Location     Type
 14046 ;;                  3   39[BANK0 ] float 
 14047 ;; Registers used:
 14048 ;;		wreg, status,2, status,0, cstack
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14054 ;;      Params:         0       4       0       0       0       0       0
 14055 ;;      Locals:         0       2       0       0       0       0       0
 14056 ;;      Temps:          0       4       0       0       0       0       0
 14057 ;;      Totals:         0      10       0       0       0       0       0
 14058 ;;Total ram usage:       10 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; Hardware stack levels required when called:    4
 14061 ;; This function calls:
 14062 ;;		___ftpack
 14063 ;; This function is called by:
 14064 ;;		_floor
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           	psect	text93
 14069  0000'                    __ptext93:
 14070                           	opt stack 0
 14071  0000'                    ___altoft:
 14072                           	opt stack 22
 14073                           
 14074                           ;incstack = 0
 14075  0000' 0E00               	movlw	0
 14076  0002' 0100               	movlb	0	; () banked
 14077  0004' 6F00'              	movwf	___altoft@sign& (0+255),b
 14078  0006' 0E8E               	movlw	142
 14079  0008' 6F00'              	movwf	___altoft@exp& (0+255),b
 14080                           
 14081                           ; BSR set to: 0
 14082  000A' AF00'              	btfss	(___altoft@c+3)& (0+255),7,b
 14083  000C' D011               	goto	l1533
 14084                           
 14085                           ; BSR set to: 0
 14086  000E' 1F00'              	comf	(___altoft@c+3)& (0+255),f,b
 14087  0010' 1F00'              	comf	(___altoft@c+2)& (0+255),f,b
 14088  0012' 1F00'              	comf	(___altoft@c+1)& (0+255),f,b
 14089  0014' 6D00'              	negf	___altoft@c& (0+255),b
 14090  0016' 0E00               	movlw	0
 14091  0018' 2300'              	addwfc	(___altoft@c+1)& (0+255),f,b
 14092  001A' 2300'              	addwfc	(___altoft@c+2)& (0+255),f,b
 14093  001C' 2300'              	addwfc	(___altoft@c+3)& (0+255),f,b
 14094                           
 14095                           ; BSR set to: 0
 14096  001E' 0E01               	movlw	1
 14097  0020' 6F00'              	movwf	___altoft@sign& (0+255),b
 14098                           
 14099                           ; BSR set to: 0
 14100  0022' D006               	goto	l1533
 14101  0024'                    
 14102                           ; BSR set to: 0
 14103                           
 14104                           ; BSR set to: 0
 14105  0024' 90D8               	bcf	status,0,c
 14106  0026' 3300'              	rrcf	(___altoft@c+3)& (0+255),f,b
 14107  0028' 3300'              	rrcf	(___altoft@c+2)& (0+255),f,b
 14108  002A' 3300'              	rrcf	(___altoft@c+1)& (0+255),f,b
 14109  002C' 3300'              	rrcf	___altoft@c& (0+255),f,b
 14110  002E' 2B00'              	incf	___altoft@exp& (0+255),f,b
 14111  0030'                    l1533:
 14112                           
 14113                           ; BSR set to: 0
 14114                           
 14115                           ; BSR set to: 0
 14116  0030' 0E00               	movlw	0
 14117  0032' 1500'              	andwf	___altoft@c& (0+255),w,b
 14118  0034' 6F00'              	movwf	??___altoft& (0+255),b
 14119  0036' 0E00               	movlw	0
 14120  0038' 1500'              	andwf	(___altoft@c+1)& (0+255),w,b
 14121  003A' 6F00'              	movwf	(??___altoft+1)& (0+255),b
 14122  003C' 0E00               	movlw	0
 14123  003E' 1500'              	andwf	(___altoft@c+2)& (0+255),w,b
 14124  0040' 6F00'              	movwf	(??___altoft+2)& (0+255),b
 14125  0042' 0EFF               	movlw	255
 14126  0044' 1500'              	andwf	(___altoft@c+3)& (0+255),w,b
 14127  0046' 6F00'              	movwf	(??___altoft+3)& (0+255),b
 14128  0048' 5100'              	movf	??___altoft& (0+255),w,b
 14129  004A' 1100'              	iorwf	(??___altoft+1)& (0+255),w,b
 14130  004C' 1100'              	iorwf	(??___altoft+2)& (0+255),w,b
 14131  004E' 1100'              	iorwf	(??___altoft+3)& (0+255),w,b
 14132  0050' A4D8               	btfss	status,2,c
 14133  0052' D7E8               	goto	l1534
 14134                           
 14135                           ; BSR set to: 0
 14136                           
 14137                           ; BSR set to: 0
 14138  0054' C027' F017'        	movff	___altoft@c,___ftpack@arg
 14139  0058' C028' F018'        	movff	___altoft@c+1,___ftpack@arg+1
 14140  005C' C029' F019'        	movff	___altoft@c+2,___ftpack@arg+2
 14141  0060' C02F' F01A'        	movff	___altoft@exp,___ftpack@exp
 14142  0064' C030' F01B'        	movff	___altoft@sign,___ftpack@sign
 14143  0068' EC00' F000'        	call	___ftpack	;wreg free
 14144  006C' C017' F027'        	movff	?___ftpack,?___altoft
 14145  0070' C018' F028'        	movff	?___ftpack+1,?___altoft+1
 14146  0074' C019' F029'        	movff	?___ftpack+2,?___altoft+2
 14147  0078' 0012               	return	
 14148  007A'                    __end_of___altoft:
 14149                           	opt stack 0
 14150                           tosu	equ	0xFFF
 14151                           tosh	equ	0xFFE
 14152                           tosl	equ	0xFFD
 14153                           pclath	equ	0xFFA
 14154                           tblptru	equ	0xFF8
 14155                           tblptrh	equ	0xFF7
 14156                           tblptrl	equ	0xFF6
 14157                           tablat	equ	0xFF5
 14158                           prodh	equ	0xFF4
 14159                           prodl	equ	0xFF3
 14160                           intcon	equ	0xFF2
 14161                           intcon2	equ	0xFF1
 14162                           postinc0	equ	0xFEE
 14163                           wreg	equ	0xFE8
 14164                           indf1	equ	0xFE7
 14165                           postdec1	equ	0xFE5
 14166                           fsr1h	equ	0xFE2
 14167                           fsr1l	equ	0xFE1
 14168                           indf2	equ	0xFDF
 14169                           postinc2	equ	0xFDE
 14170                           postdec2	equ	0xFDD
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _eval_poly *****************
 14176 ;; Defined at:
 14177 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;  x               3   36[BANK0 ] float 
 14180 ;;  d               2   39[BANK0 ] PTR const 
 14181 ;;		 -> log@coeff(27), exp@coeff(30), 
 14182 ;;  n               2   41[BANK0 ] int 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  res             3   45[BANK0 ] int 
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  3   36[BANK0 ] int 
 14187 ;; Registers used:
 14188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14194 ;;      Params:         0       7       0       0       0       0       0
 14195 ;;      Locals:         0       3       0       0       0       0       0
 14196 ;;      Temps:          0       2       0       0       0       0       0
 14197 ;;      Totals:         0      12       0       0       0       0       0
 14198 ;;Total ram usage:       12 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    5
 14201 ;; This function calls:
 14202 ;;		___ftadd
 14203 ;;		___ftmul
 14204 ;;		___wmul
 14205 ;; This function is called by:
 14206 ;;		_exp
 14207 ;;		_log
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           	psect	text94
 14212  0000'                    __ptext94:
 14213                           	opt stack 0
 14214  0000'                    _eval_poly:
 14215                           	opt stack 22
 14216                           
 14217                           ;incstack = 0
 14218  0000' C029' F017'        	movff	eval_poly@n,___wmul@multiplier
 14219  0004' C02A' F018'        	movff	eval_poly@n+1,___wmul@multiplier+1
 14220  0008' 0E00               	movlw	0
 14221  000A' 6E1A'              	movwf	___wmul@multiplicand+1,c
 14222  000C' 0E03               	movlw	3
 14223  000E' 6E19'              	movwf	___wmul@multiplicand,c
 14224  0010' EC00' F000'        	call	___wmul	;wreg free
 14225  0014' C027' F02B'        	movff	eval_poly@d,??_eval_poly
 14226  0018' C028' F02C'        	movff	eval_poly@d+1,??_eval_poly+1
 14227  001C' 5017'              	movf	?___wmul,w,c
 14228  001E' 0100               	movlb	0	; () banked
 14229  0020' 2700'              	addwf	??_eval_poly& (0+255),f,b
 14230  0022' 5018'              	movf	?___wmul+1,w,c
 14231  0024' 2300'              	addwfc	(??_eval_poly+1)& (0+255),f,b
 14232  0026' C02B' FFF6         	movff	??_eval_poly,tblptrl
 14233  002A' C02C' FFF7         	movff	??_eval_poly+1,tblptrh
 14234  002E'                    	if	0	;tblptru may be non-zero
 14235  002E'                    	endif
 14236  002E'                    	if	0	;tblptru may be non-zero
 14237  002E'                    	endif
 14238  002E' 0009               	tblrd		*+
 14239  0030' CFF5 F02D'         	movff	tablat,eval_poly@res
 14240  0034' 0009               	tblrd		*+
 14241  0036' CFF5 F02E'         	movff	tablat,eval_poly@res+1
 14242  003A' 000A               	tblrd		*-
 14243  003C' CFF5 F02F'         	movff	tablat,eval_poly@res+2
 14244  0040' D040               	goto	l2158
 14245  0042'                    
 14246                           ; BSR set to: 0
 14247                           
 14248                           ; BSR set to: 0
 14249  0042' C02D' F00C'        	movff	eval_poly@res,___ftmul@f2
 14250  0046' C02E' F00D'        	movff	eval_poly@res+1,___ftmul@f2+1
 14251  004A' C02F' F00E'        	movff	eval_poly@res+2,___ftmul@f2+2
 14252  004E' C024' F009'        	movff	eval_poly@x,___ftmul@f1
 14253  0052' C025' F00A'        	movff	eval_poly@x+1,___ftmul@f1+1
 14254  0056' C026' F00B'        	movff	eval_poly@x+2,___ftmul@f1+2
 14255  005A' EC00' F000'        	call	___ftmul	;wreg free
 14256  005E' C009' F018'        	movff	?___ftmul,___ftadd@f1
 14257  0062' C00A' F019'        	movff	?___ftmul+1,___ftadd@f1+1
 14258  0066' C00B' F01A'        	movff	?___ftmul+2,___ftadd@f1+2
 14259  006A' 0E00               	movlw	0
 14260  006C' 6E1A'              	movwf	___wmul@multiplicand+1,c
 14261  006E' 0E03               	movlw	3
 14262  0070' 6E19'              	movwf	___wmul@multiplicand,c
 14263  0072' 0100               	movlb	0	; () banked
 14264  0074' 0700'              	decf	eval_poly@n& (0+255),f,b
 14265  0076' A0D8               	btfss	status,0,c
 14266  0078' 0700'              	decf	(eval_poly@n+1)& (0+255),f,b
 14267  007A' C029' F017'        	movff	eval_poly@n,___wmul@multiplier
 14268  007E' C02A' F018'        	movff	eval_poly@n+1,___wmul@multiplier+1
 14269  0082' EC00' F000'        	call	___wmul	;wreg free
 14270  0086' C027' F02B'        	movff	eval_poly@d,??_eval_poly
 14271  008A' C028' F02C'        	movff	eval_poly@d+1,??_eval_poly+1
 14272  008E' 5017'              	movf	?___wmul,w,c
 14273  0090' 0100               	movlb	0	; () banked
 14274  0092' 2700'              	addwf	??_eval_poly& (0+255),f,b
 14275  0094' 5018'              	movf	?___wmul+1,w,c
 14276  0096' 2300'              	addwfc	(??_eval_poly+1)& (0+255),f,b
 14277  0098' C02B' FFF6         	movff	??_eval_poly,tblptrl
 14278  009C' C02C' FFF7         	movff	??_eval_poly+1,tblptrh
 14279  00A0'                    	if	0	;tblptru may be non-zero
 14280  00A0'                    	endif
 14281  00A0'                    	if	0	;tblptru may be non-zero
 14282  00A0'                    	endif
 14283  00A0' 0009               	tblrd		*+
 14284  00A2' CFF5 F01B'         	movff	tablat,___ftadd@f2
 14285  00A6' 0009               	tblrd		*+
 14286  00A8' CFF5 F01C'         	movff	tablat,___ftadd@f2+1
 14287  00AC' 000A               	tblrd		*-
 14288  00AE' CFF5 F01D'         	movff	tablat,___ftadd@f2+2
 14289  00B2' EC00' F000'        	call	___ftadd	;wreg free
 14290  00B6' C018' F02D'        	movff	?___ftadd,eval_poly@res
 14291  00BA' C019' F02E'        	movff	?___ftadd+1,eval_poly@res+1
 14292  00BE' C01A' F02F'        	movff	?___ftadd+2,eval_poly@res+2
 14293  00C2'                    l2158:
 14294  00C2' 0100               	movlb	0	; () banked
 14295  00C4' 5100'              	movf	eval_poly@n& (0+255),w,b
 14296  00C6' 1100'              	iorwf	(eval_poly@n+1)& (0+255),w,b
 14297  00C8' A4D8               	btfss	status,2,c
 14298  00CA' D7BB               	goto	l2159
 14299                           
 14300                           ; BSR set to: 0
 14301  00CC' C02D' F024'        	movff	eval_poly@res,?_eval_poly
 14302  00D0' C02E' F025'        	movff	eval_poly@res+1,?_eval_poly+1
 14303  00D4' C02F' F026'        	movff	eval_poly@res+2,?_eval_poly+2
 14304                           
 14305                           ; BSR set to: 0
 14306  00D8' 0012               	return		;funcret
 14307  00DA'                    __end_of_eval_poly:
 14308                           	opt stack 0
 14309                           tosu	equ	0xFFF
 14310                           tosh	equ	0xFFE
 14311                           tosl	equ	0xFFD
 14312                           pclath	equ	0xFFA
 14313                           tblptru	equ	0xFF8
 14314                           tblptrh	equ	0xFF7
 14315                           tblptrl	equ	0xFF6
 14316                           tablat	equ	0xFF5
 14317                           prodh	equ	0xFF4
 14318                           prodl	equ	0xFF3
 14319                           intcon	equ	0xFF2
 14320                           intcon2	equ	0xFF1
 14321                           postinc0	equ	0xFEE
 14322                           wreg	equ	0xFE8
 14323                           indf1	equ	0xFE7
 14324                           postdec1	equ	0xFE5
 14325                           fsr1h	equ	0xFE2
 14326                           fsr1l	equ	0xFE1
 14327                           indf2	equ	0xFDF
 14328                           postinc2	equ	0xFDE
 14329                           postdec2	equ	0xFDD
 14330                           fsr2h	equ	0xFDA
 14331                           fsr2l	equ	0xFD9
 14332                           status	equ	0xFD8
 14333                           
 14334 ;; *************** function ___wmul *****************
 14335 ;; Defined at:
 14336 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14337 ;; Parameters:    Size  Location     Type
 14338 ;;  multiplier      2   23[COMRAM] unsigned int 
 14339 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;  product         2   27[COMRAM] unsigned int 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;                  2   23[COMRAM] unsigned int 
 14344 ;; Registers used:
 14345 ;;		wreg, status,2, status,0, prodl, prodh
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14351 ;;      Params:         4       0       0       0       0       0       0
 14352 ;;      Locals:         2       0       0       0       0       0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0
 14354 ;;      Totals:         6       0       0       0       0       0       0
 14355 ;;Total ram usage:        6 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    3
 14358 ;; This function calls:
 14359 ;;		Nothing
 14360 ;; This function is called by:
 14361 ;;		_eval_poly
 14362 ;; This function uses a non-reentrant model
 14363 ;;
 14364                           
 14365                           	psect	text95
 14366  0000'                    __ptext95:
 14367                           	opt stack 0
 14368  0000'                    ___wmul:
 14369                           	opt stack 23
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;incstack = 0
 14373  0000' 5017'              	movf	___wmul@multiplier,w,c
 14374  0002' 0219'              	mulwf	___wmul@multiplicand,c
 14375  0004' CFF3 F01B'         	movff	prodl,___wmul@product
 14376  0008' CFF4 F01C'         	movff	prodh,___wmul@product+1
 14377  000C' 5017'              	movf	___wmul@multiplier,w,c
 14378  000E' 021A'              	mulwf	___wmul@multiplicand+1,c
 14379  0010' 50F3               	movf	prodl,w,c
 14380  0012' 261C'              	addwf	___wmul@product+1,f,c
 14381  0014' 5018'              	movf	___wmul@multiplier+1,w,c
 14382  0016' 0219'              	mulwf	___wmul@multiplicand,c
 14383  0018' 50F3               	movf	prodl,w,c
 14384  001A' 261C'              	addwf	___wmul@product+1,f,c
 14385  001C' C01B' F017'        	movff	___wmul@product,?___wmul
 14386  0020' C01C' F018'        	movff	___wmul@product+1,?___wmul+1
 14387  0024' 0012               	return	
 14388  0026'                    __end_of___wmul:
 14389                           	opt stack 0
 14390                           tosu	equ	0xFFF
 14391                           tosh	equ	0xFFE
 14392                           tosl	equ	0xFFD
 14393                           pclath	equ	0xFFA
 14394                           tblptru	equ	0xFF8
 14395                           tblptrh	equ	0xFF7
 14396                           tblptrl	equ	0xFF6
 14397                           tablat	equ	0xFF5
 14398                           prodh	equ	0xFF4
 14399                           prodl	equ	0xFF3
 14400                           intcon	equ	0xFF2
 14401                           intcon2	equ	0xFF1
 14402                           postinc0	equ	0xFEE
 14403                           wreg	equ	0xFE8
 14404                           indf1	equ	0xFE7
 14405                           postdec1	equ	0xFE5
 14406                           fsr1h	equ	0xFE2
 14407                           fsr1l	equ	0xFE1
 14408                           indf2	equ	0xFDF
 14409                           postinc2	equ	0xFDE
 14410                           postdec2	equ	0xFDD
 14411                           fsr2h	equ	0xFDA
 14412                           fsr2l	equ	0xFD9
 14413                           status	equ	0xFD8
 14414                           
 14415 ;; *************** function ___ftmul *****************
 14416 ;; Defined at:
 14417 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;  f1              3    9[BANK0 ] float 
 14420 ;;  f2              3   12[BANK0 ] float 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14423 ;;  sign            1   23[BANK0 ] unsigned char 
 14424 ;;  cntr            1   22[BANK0 ] unsigned char 
 14425 ;;  exp             1   18[BANK0 ] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  3    9[BANK0 ] float 
 14428 ;; Registers used:
 14429 ;;		wreg, status,2, status,0, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14435 ;;      Params:         0       6       0       0       0       0       0
 14436 ;;      Locals:         0       6       0       0       0       0       0
 14437 ;;      Temps:          0       3       0       0       0       0       0
 14438 ;;      Totals:         0      15       0       0       0       0       0
 14439 ;;Total ram usage:       15 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    4
 14442 ;; This function calls:
 14443 ;;		___ftpack
 14444 ;; This function is called by:
 14445 ;;		_AdcConvert
 14446 ;;		_CheckFlashPrecentage
 14447 ;;		_pow
 14448 ;;		_exp
 14449 ;;		_log
 14450 ;;		_eval_poly
 14451 ;; This function uses a non-reentrant model
 14452 ;;
 14453                           
 14454                           	psect	text96
 14455  0000'                    __ptext96:
 14456                           	opt stack 0
 14457  0000'                    ___ftmul:
 14458                           	opt stack 25
 14459                           
 14460                           ;incstack = 0
 14461  0000' C00B' F00F'        	movff	___ftmul@f1+2,??___ftmul
 14462  0004' 0100               	movlb	0	; () banked
 14463  0006' 6B00'              	clrf	(??___ftmul+1)& (0+255),b
 14464  0008' 6B00'              	clrf	(??___ftmul+2)& (0+255),b
 14465  000A' 3500'              	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14466  000C' 3700'              	rlcf	??___ftmul& (0+255),f,b
 14467  000E' E301               	bnc	u6671
 14468  0010' 8100'              	bsf	(??___ftmul+1)& (0+255),0,b
 14469  0012'                    u6671:
 14470  0012' 5100'              	movf	??___ftmul& (0+255),w,b
 14471  0014' 6F00'              	movwf	___ftmul@exp& (0+255),b
 14472  0016' 5100'              	movf	___ftmul@exp& (0+255),w,b
 14473  0018' A4D8               	btfss	status,2,c
 14474  001A' D007               	goto	l1742
 14475                           
 14476                           ; BSR set to: 0
 14477  001C' 0E00               	movlw	0
 14478  001E' 6F00'              	movwf	?___ftmul& (0+255),b
 14479  0020' 0E00               	movlw	0
 14480  0022' 6F00'              	movwf	(?___ftmul+1)& (0+255),b
 14481  0024' 0E00               	movlw	0
 14482  0026' 6F00'              	movwf	(?___ftmul+2)& (0+255),b
 14483                           
 14484                           ; BSR set to: 0
 14485  0028' 0012               	return	
 14486  002A'                    l1742:
 14487                           
 14488                           ; BSR set to: 0
 14489                           
 14490                           ; BSR set to: 0
 14491  002A' C00E' F00F'        	movff	___ftmul@f2+2,??___ftmul
 14492  002E' 6B00'              	clrf	(??___ftmul+1)& (0+255),b
 14493  0030' 6B00'              	clrf	(??___ftmul+2)& (0+255),b
 14494  0032' 3500'              	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14495  0034' 3700'              	rlcf	??___ftmul& (0+255),f,b
 14496  0036' E301               	bnc	u6691
 14497  0038' 8100'              	bsf	(??___ftmul+1)& (0+255),0,b
 14498  003A'                    u6691:
 14499  003A' 5100'              	movf	??___ftmul& (0+255),w,b
 14500  003C' 6F00'              	movwf	___ftmul@sign& (0+255),b
 14501  003E' 5100'              	movf	___ftmul@sign& (0+255),w,b
 14502  0040' A4D8               	btfss	status,2,c
 14503  0042' D007               	goto	l1744
 14504                           
 14505                           ; BSR set to: 0
 14506  0044' 0E00               	movlw	0
 14507  0046' 6F00'              	movwf	?___ftmul& (0+255),b
 14508  0048' 0E00               	movlw	0
 14509  004A' 6F00'              	movwf	(?___ftmul+1)& (0+255),b
 14510  004C' 0E00               	movlw	0
 14511  004E' 6F00'              	movwf	(?___ftmul+2)& (0+255),b
 14512                           
 14513                           ; BSR set to: 0
 14514  0050' 0012               	return	
 14515  0052'                    l1744:
 14516                           
 14517                           ; BSR set to: 0
 14518                           
 14519                           ; BSR set to: 0
 14520  0052' 5100'              	movf	___ftmul@sign& (0+255),w,b
 14521  0054' 0F7B               	addlw	123
 14522  0056' 2700'              	addwf	___ftmul@exp& (0+255),f,b
 14523                           
 14524                           ; BSR set to: 0
 14525  0058' C00B' F017'        	movff	___ftmul@f1+2,___ftmul@sign
 14526  005C' 5100'              	movf	(___ftmul@f2+2)& (0+255),w,b
 14527  005E' 1B00'              	xorwf	___ftmul@sign& (0+255),f,b
 14528  0060' 0E80               	movlw	128
 14529  0062' 1700'              	andwf	___ftmul@sign& (0+255),f,b
 14530                           
 14531                           ; BSR set to: 0
 14532  0064' 8F00'              	bsf	(___ftmul@f1+1)& (0+255),7,b
 14533                           
 14534                           ; BSR set to: 0
 14535  0066' 8F00'              	bsf	(___ftmul@f2+1)& (0+255),7,b
 14536                           
 14537                           ; BSR set to: 0
 14538  0068' 0EFF               	movlw	255
 14539  006A' 1700'              	andwf	___ftmul@f2& (0+255),f,b
 14540  006C' 0EFF               	movlw	255
 14541  006E' 1700'              	andwf	(___ftmul@f2+1)& (0+255),f,b
 14542  0070' 0E00               	movlw	0
 14543  0072' 1700'              	andwf	(___ftmul@f2+2)& (0+255),f,b
 14544                           
 14545                           ; BSR set to: 0
 14546  0074' 0E00               	movlw	0
 14547  0076' 6F00'              	movwf	___ftmul@f3_as_product& (0+255),b
 14548  0078' 0E00               	movlw	0
 14549  007A' 6F00'              	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14550  007C' 0E00               	movlw	0
 14551  007E' 6F00'              	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14552                           
 14553                           ; BSR set to: 0
 14554  0080' 0E07               	movlw	7
 14555  0082' 6F00'              	movwf	___ftmul@cntr& (0+255),b
 14556  0084'                    
 14557                           ; BSR set to: 0
 14558                           
 14559                           ; BSR set to: 0
 14560  0084' A100'              	btfss	___ftmul@f1& (0+255),0,b
 14561  0086' D006               	goto	l1746
 14562                           
 14563                           ; BSR set to: 0
 14564  0088' 5100'              	movf	___ftmul@f2& (0+255),w,b
 14565  008A' 2700'              	addwf	___ftmul@f3_as_product& (0+255),f,b
 14566  008C' 5100'              	movf	(___ftmul@f2+1)& (0+255),w,b
 14567  008E' 2300'              	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14568  0090' 5100'              	movf	(___ftmul@f2+2)& (0+255),w,b
 14569  0092' 2300'              	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14570  0094'                    l1746:
 14571                           
 14572                           ; BSR set to: 0
 14573                           
 14574                           ; BSR set to: 0
 14575  0094' 90D8               	bcf	status,0,c
 14576  0096' 3300'              	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14577  0098' 3300'              	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14578  009A' 3300'              	rrcf	___ftmul@f1& (0+255),f,b
 14579  009C' 90D8               	bcf	status,0,c
 14580  009E' 3700'              	rlcf	___ftmul@f2& (0+255),f,b
 14581  00A0' 3700'              	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14582  00A2' 3700'              	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14583                           
 14584                           ; BSR set to: 0
 14585  00A4' 2F00'              	decfsz	___ftmul@cntr& (0+255),f,b
 14586  00A6' D7EE               	goto	l1745
 14587                           
 14588                           ; BSR set to: 0
 14589                           
 14590                           ; BSR set to: 0
 14591  00A8' 0E09               	movlw	9
 14592  00AA' 6F00'              	movwf	___ftmul@cntr& (0+255),b
 14593  00AC'                    
 14594                           ; BSR set to: 0
 14595                           
 14596                           ; BSR set to: 0
 14597  00AC' A100'              	btfss	___ftmul@f1& (0+255),0,b
 14598  00AE' D006               	goto	l1749
 14599                           
 14600                           ; BSR set to: 0
 14601  00B0' 5100'              	movf	___ftmul@f2& (0+255),w,b
 14602  00B2' 2700'              	addwf	___ftmul@f3_as_product& (0+255),f,b
 14603  00B4' 5100'              	movf	(___ftmul@f2+1)& (0+255),w,b
 14604  00B6' 2300'              	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14605  00B8' 5100'              	movf	(___ftmul@f2+2)& (0+255),w,b
 14606  00BA' 2300'              	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14607  00BC'                    l1749:
 14608                           
 14609                           ; BSR set to: 0
 14610                           
 14611                           ; BSR set to: 0
 14612  00BC' 90D8               	bcf	status,0,c
 14613  00BE' 3300'              	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14614  00C0' 3300'              	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14615  00C2' 3300'              	rrcf	___ftmul@f1& (0+255),f,b
 14616  00C4' 90D8               	bcf	status,0,c
 14617  00C6' 3300'              	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14618  00C8' 3300'              	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14619  00CA' 3300'              	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14620                           
 14621                           ; BSR set to: 0
 14622  00CC' 2F00'              	decfsz	___ftmul@cntr& (0+255),f,b
 14623  00CE' D7EE               	goto	l1748
 14624                           
 14625                           ; BSR set to: 0
 14626                           
 14627                           ; BSR set to: 0
 14628  00D0' C013' F017'        	movff	___ftmul@f3_as_product,___ftpack@arg
 14629  00D4' C014' F018'        	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14630  00D8' C015' F019'        	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14631  00DC' C012' F01A'        	movff	___ftmul@exp,___ftpack@exp
 14632  00E0' C017' F01B'        	movff	___ftmul@sign,___ftpack@sign
 14633  00E4' EC00' F000'        	call	___ftpack	;wreg free
 14634  00E8' C017' F009'        	movff	?___ftpack,?___ftmul
 14635  00EC' C018' F00A'        	movff	?___ftpack+1,?___ftmul+1
 14636  00F0' C019' F00B'        	movff	?___ftpack+2,?___ftmul+2
 14637  00F4' 0012               	return	
 14638  00F6'                    __end_of___ftmul:
 14639                           	opt stack 0
 14640                           tosu	equ	0xFFF
 14641                           tosh	equ	0xFFE
 14642                           tosl	equ	0xFFD
 14643                           pclath	equ	0xFFA
 14644                           tblptru	equ	0xFF8
 14645                           tblptrh	equ	0xFF7
 14646                           tblptrl	equ	0xFF6
 14647                           tablat	equ	0xFF5
 14648                           prodh	equ	0xFF4
 14649                           prodl	equ	0xFF3
 14650                           intcon	equ	0xFF2
 14651                           intcon2	equ	0xFF1
 14652                           postinc0	equ	0xFEE
 14653                           wreg	equ	0xFE8
 14654                           indf1	equ	0xFE7
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function ___ftsub *****************
 14666 ;; Defined at:
 14667 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  f1              3   36[BANK0 ] float 
 14670 ;;  f2              3   39[BANK0 ] float 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;		None
 14673 ;; Return value:  Size  Location     Type
 14674 ;;                  3   36[BANK0 ] float 
 14675 ;; Registers used:
 14676 ;;		wreg, status,2, status,0, cstack
 14677 ;; Tracked objects:
 14678 ;;		On entry : 0/0
 14679 ;;		On exit  : 0/0
 14680 ;;		Unchanged: 0/0
 14681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14682 ;;      Params:         0       6       0       0       0       0       0
 14683 ;;      Locals:         0       0       0       0       0       0       0
 14684 ;;      Temps:          0       0       0       0       0       0       0
 14685 ;;      Totals:         0       6       0       0       0       0       0
 14686 ;;Total ram usage:        6 bytes
 14687 ;; Hardware stack levels used:    1
 14688 ;; Hardware stack levels required when called:    5
 14689 ;; This function calls:
 14690 ;;		___ftadd
 14691 ;; This function is called by:
 14692 ;;		_exp
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           	psect	text97
 14697  0000'                    __ptext97:
 14698                           	opt stack 0
 14699  0000'                    ___ftsub:
 14700                           	opt stack 22
 14701                           
 14702                           ;incstack = 0
 14703  0000' 0100               	movlb	0	; () banked
 14704  0002' 5100'              	movf	___ftsub@f2& (0+255),w,b
 14705  0004' 1100'              	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14706  0006' 1100'              	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14707  0008' B4D8               	btfsc	status,2,c
 14708  000A' D006               	goto	l1759
 14709                           
 14710                           ; BSR set to: 0
 14711  000C' 0E00               	movlw	0
 14712  000E' 1B00'              	xorwf	___ftsub@f2& (0+255),f,b
 14713  0010' 0E00               	movlw	0
 14714  0012' 1B00'              	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14715  0014' 0E80               	movlw	128
 14716  0016' 1B00'              	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14717  0018'                    l1759:
 14718                           
 14719                           ; BSR set to: 0
 14720                           
 14721                           ; BSR set to: 0
 14722  0018' C024' F018'        	movff	___ftsub@f1,___ftadd@f1
 14723  001C' C025' F019'        	movff	___ftsub@f1+1,___ftadd@f1+1
 14724  0020' C026' F01A'        	movff	___ftsub@f1+2,___ftadd@f1+2
 14725  0024' C027' F01B'        	movff	___ftsub@f2,___ftadd@f2
 14726  0028' C028' F01C'        	movff	___ftsub@f2+1,___ftadd@f2+1
 14727  002C' C029' F01D'        	movff	___ftsub@f2+2,___ftadd@f2+2
 14728  0030' EC00' F000'        	call	___ftadd	;wreg free
 14729  0034' C018' F024'        	movff	?___ftadd,?___ftsub
 14730  0038' C019' F025'        	movff	?___ftadd+1,?___ftsub+1
 14731  003C' C01A' F026'        	movff	?___ftadd+2,?___ftsub+2
 14732  0040' 0012               	return	
 14733  0042'                    __end_of___ftsub:
 14734                           	opt stack 0
 14735                           tosu	equ	0xFFF
 14736                           tosh	equ	0xFFE
 14737                           tosl	equ	0xFFD
 14738                           pclath	equ	0xFFA
 14739                           tblptru	equ	0xFF8
 14740                           tblptrh	equ	0xFF7
 14741                           tblptrl	equ	0xFF6
 14742                           tablat	equ	0xFF5
 14743                           prodh	equ	0xFF4
 14744                           prodl	equ	0xFF3
 14745                           intcon	equ	0xFF2
 14746                           intcon2	equ	0xFF1
 14747                           postinc0	equ	0xFEE
 14748                           wreg	equ	0xFE8
 14749                           indf1	equ	0xFE7
 14750                           postdec1	equ	0xFE5
 14751                           fsr1h	equ	0xFE2
 14752                           fsr1l	equ	0xFE1
 14753                           indf2	equ	0xFDF
 14754                           postinc2	equ	0xFDE
 14755                           postdec2	equ	0xFDD
 14756                           fsr2h	equ	0xFDA
 14757                           fsr2l	equ	0xFD9
 14758                           status	equ	0xFD8
 14759                           
 14760 ;; *************** function ___ftadd *****************
 14761 ;; Defined at:
 14762 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14763 ;; Parameters:    Size  Location     Type
 14764 ;;  f1              3   24[BANK0 ] float 
 14765 ;;  f2              3   27[BANK0 ] float 
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;  exp1            1   35[BANK0 ] unsigned char 
 14768 ;;  exp2            1   34[BANK0 ] unsigned char 
 14769 ;;  sign            1   33[BANK0 ] unsigned char 
 14770 ;; Return value:  Size  Location     Type
 14771 ;;                  3   24[BANK0 ] float 
 14772 ;; Registers used:
 14773 ;;		wreg, status,2, status,0, cstack
 14774 ;; Tracked objects:
 14775 ;;		On entry : 0/0
 14776 ;;		On exit  : 0/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14779 ;;      Params:         0       6       0       0       0       0       0
 14780 ;;      Locals:         0       3       0       0       0       0       0
 14781 ;;      Temps:          0       3       0       0       0       0       0
 14782 ;;      Totals:         0      12       0       0       0       0       0
 14783 ;;Total ram usage:       12 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; Hardware stack levels required when called:    4
 14786 ;; This function calls:
 14787 ;;		___ftpack
 14788 ;; This function is called by:
 14789 ;;		___ftsub
 14790 ;;		_floor
 14791 ;;		_log
 14792 ;;		_eval_poly
 14793 ;; This function uses a non-reentrant model
 14794 ;;
 14795                           
 14796                           	psect	text98
 14797  0000'                    __ptext98:
 14798                           	opt stack 0
 14799  0000'                    ___ftadd:
 14800                           	opt stack 22
 14801                           
 14802                           ;incstack = 0
 14803  0000' C01A' F01E'        	movff	___ftadd@f1+2,??___ftadd
 14804  0004' 0100               	movlb	0	; () banked
 14805  0006' 6B00'              	clrf	(??___ftadd+1)& (0+255),b
 14806  0008' 6B00'              	clrf	(??___ftadd+2)& (0+255),b
 14807  000A' 3500'              	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14808  000C' 3700'              	rlcf	??___ftadd& (0+255),f,b
 14809  000E' E301               	bnc	u6461
 14810  0010' 8100'              	bsf	(??___ftadd+1)& (0+255),0,b
 14811  0012'                    u6461:
 14812  0012' 5100'              	movf	??___ftadd& (0+255),w,b
 14813  0014' 6F00'              	movwf	___ftadd@exp1& (0+255),b
 14814  0016' C01D' F01E'        	movff	___ftadd@f2+2,??___ftadd
 14815  001A' 6B00'              	clrf	(??___ftadd+1)& (0+255),b
 14816  001C' 6B00'              	clrf	(??___ftadd+2)& (0+255),b
 14817  001E' 3500'              	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14818  0020' 3700'              	rlcf	??___ftadd& (0+255),f,b
 14819  0022' E301               	bnc	u6471
 14820  0024' 8100'              	bsf	(??___ftadd+1)& (0+255),0,b
 14821  0026'                    u6471:
 14822  0026' 5100'              	movf	??___ftadd& (0+255),w,b
 14823  0028' 6F00'              	movwf	___ftadd@exp2& (0+255),b
 14824                           
 14825                           ; BSR set to: 0
 14826  002A' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14827  002C' B4D8               	btfsc	status,2,c
 14828  002E' D00B               	goto	u6500
 14829                           
 14830                           ; BSR set to: 0
 14831  0030' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 14832  0032' 5D00'              	subwf	___ftadd@exp1& (0+255),w,b
 14833  0034' B0D8               	btfsc	status,0,c
 14834  0036' D00E               	goto	l1694
 14835                           
 14836                           ; BSR set to: 0
 14837  0038' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14838  003A' 0800               	sublw	0
 14839  003C' 2500'              	addwf	___ftadd@exp2& (0+255),w,b
 14840  003E' 6F00'              	movwf	??___ftadd& (0+255),b
 14841  0040' 0E18               	movlw	24
 14842  0042' 6500'              	cpfsgt	??___ftadd& (0+255),b
 14843  0044' D007               	goto	l1694
 14844  0046'                    u6500:
 14845                           
 14846                           ; BSR set to: 0
 14847  0046' C01B' F018'        	movff	___ftadd@f2,?___ftadd
 14848  004A' C01C' F019'        	movff	___ftadd@f2+1,?___ftadd+1
 14849  004E' C01D' F01A'        	movff	___ftadd@f2+2,?___ftadd+2
 14850  0052' 0012               	return	
 14851  0054'                    l1694:
 14852                           
 14853                           ; BSR set to: 0
 14854                           
 14855                           ; BSR set to: 0
 14856  0054' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 14857  0056' B4D8               	btfsc	status,2,c
 14858  0058' D00B               	goto	u6530
 14859                           
 14860                           ; BSR set to: 0
 14861  005A' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14862  005C' 5D00'              	subwf	___ftadd@exp2& (0+255),w,b
 14863  005E' B0D8               	btfsc	status,0,c
 14864  0060' D00E               	goto	l1698
 14865                           
 14866                           ; BSR set to: 0
 14867  0062' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 14868  0064' 0800               	sublw	0
 14869  0066' 2500'              	addwf	___ftadd@exp1& (0+255),w,b
 14870  0068' 6F00'              	movwf	??___ftadd& (0+255),b
 14871  006A' 0E18               	movlw	24
 14872  006C' 6500'              	cpfsgt	??___ftadd& (0+255),b
 14873  006E' D007               	goto	l1698
 14874  0070'                    u6530:
 14875                           
 14876                           ; BSR set to: 0
 14877  0070' C018' F018'        	movff	___ftadd@f1,?___ftadd
 14878  0074' C019' F019'        	movff	___ftadd@f1+1,?___ftadd+1
 14879  0078' C01A' F01A'        	movff	___ftadd@f1+2,?___ftadd+2
 14880  007C' 0012               	return	
 14881  007E'                    l1698:
 14882                           
 14883                           ; BSR set to: 0
 14884                           
 14885                           ; BSR set to: 0
 14886  007E' 0E06               	movlw	6
 14887  0080' 6F00'              	movwf	___ftadd@sign& (0+255),b
 14888                           
 14889                           ; BSR set to: 0
 14890  0082' BF00'              	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14891                           
 14892                           ; BSR set to: 0
 14893  0084' 8F00'              	bsf	___ftadd@sign& (0+255),7,b
 14894                           
 14895                           ; BSR set to: 0
 14896                           
 14897                           ; BSR set to: 0
 14898  0086' BF00'              	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14899                           
 14900                           ; BSR set to: 0
 14901  0088' 8D00'              	bsf	___ftadd@sign& (0+255),6,b
 14902                           
 14903                           ; BSR set to: 0
 14904  008A' 8F00'              	bsf	(___ftadd@f1+1)& (0+255),7,b
 14905                           
 14906                           ; BSR set to: 0
 14907  008C' 0EFF               	movlw	255
 14908  008E' 1700'              	andwf	___ftadd@f1& (0+255),f,b
 14909  0090' 0EFF               	movlw	255
 14910  0092' 1700'              	andwf	(___ftadd@f1+1)& (0+255),f,b
 14911  0094' 0E00               	movlw	0
 14912  0096' 1700'              	andwf	(___ftadd@f1+2)& (0+255),f,b
 14913  0098' 8F00'              	bsf	(___ftadd@f2+1)& (0+255),7,b
 14914                           
 14915                           ; BSR set to: 0
 14916  009A' 0EFF               	movlw	255
 14917  009C' 1700'              	andwf	___ftadd@f2& (0+255),f,b
 14918  009E' 0EFF               	movlw	255
 14919  00A0' 1700'              	andwf	(___ftadd@f2+1)& (0+255),f,b
 14920  00A2' 0E00               	movlw	0
 14921  00A4' 1700'              	andwf	(___ftadd@f2+2)& (0+255),f,b
 14922                           
 14923                           ; BSR set to: 0
 14924  00A6' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 14925  00A8' 5D00'              	subwf	___ftadd@exp1& (0+255),w,b
 14926  00AA' B0D8               	btfsc	status,0,c
 14927  00AC' D01B               	goto	l1703
 14928  00AE'                    u6560:
 14929                           
 14930                           ; BSR set to: 0
 14931                           
 14932                           ; BSR set to: 0
 14933  00AE' 90D8               	bcf	status,0,c
 14934  00B0' 3700'              	rlcf	___ftadd@f2& (0+255),f,b
 14935  00B2' 3700'              	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14936  00B4' 3700'              	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14937  00B6' 0700'              	decf	___ftadd@exp2& (0+255),f,b
 14938                           
 14939                           ; BSR set to: 0
 14940  00B8' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14941  00BA' 1900'              	xorwf	___ftadd@exp2& (0+255),w,b
 14942  00BC' B4D8               	btfsc	status,2,c
 14943  00BE' D00D               	goto	l1708
 14944                           
 14945                           ; BSR set to: 0
 14946  00C0' 0700'              	decf	___ftadd@sign& (0+255),f,b
 14947  00C2' C021' F01E'        	movff	___ftadd@sign,??___ftadd
 14948  00C6' 0E07               	movlw	7
 14949  00C8' 1700'              	andwf	??___ftadd& (0+255),f,b
 14950  00CA' B4D8               	btfsc	status,2,c
 14951  00CC' D006               	goto	l1708
 14952  00CE' D7EF               	goto	u6560
 14953  00D0'                    
 14954                           ; BSR set to: 0
 14955                           
 14956                           ; BSR set to: 0
 14957  00D0' 90D8               	bcf	status,0,c
 14958  00D2' 3300'              	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14959  00D4' 3300'              	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14960  00D6' 3300'              	rrcf	___ftadd@f1& (0+255),f,b
 14961  00D8' 2B00'              	incf	___ftadd@exp1& (0+255),f,b
 14962  00DA'                    l1708:
 14963                           
 14964                           ; BSR set to: 0
 14965                           
 14966                           ; BSR set to: 0
 14967  00DA' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 14968  00DC' 1900'              	xorwf	___ftadd@exp1& (0+255),w,b
 14969  00DE' B4D8               	btfsc	status,2,c
 14970  00E0' D01F               	goto	u6630
 14971  00E2' D7F6               	goto	l1709
 14972  00E4'                    l1703:
 14973                           
 14974                           ; BSR set to: 0
 14975                           
 14976                           ; BSR set to: 0
 14977  00E4' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14978  00E6' 5D00'              	subwf	___ftadd@exp2& (0+255),w,b
 14979  00E8' B0D8               	btfsc	status,0,c
 14980  00EA' D01A               	goto	u6630
 14981  00EC'                    u6600:
 14982                           
 14983                           ; BSR set to: 0
 14984                           
 14985                           ; BSR set to: 0
 14986  00EC' 90D8               	bcf	status,0,c
 14987  00EE' 3700'              	rlcf	___ftadd@f1& (0+255),f,b
 14988  00F0' 3700'              	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14989  00F2' 3700'              	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14990  00F4' 0700'              	decf	___ftadd@exp1& (0+255),f,b
 14991                           
 14992                           ; BSR set to: 0
 14993  00F6' 5100'              	movf	___ftadd@exp1& (0+255),w,b
 14994  00F8' 1900'              	xorwf	___ftadd@exp2& (0+255),w,b
 14995  00FA' B4D8               	btfsc	status,2,c
 14996  00FC' D00D               	goto	l1717
 14997                           
 14998                           ; BSR set to: 0
 14999  00FE' 0700'              	decf	___ftadd@sign& (0+255),f,b
 15000  0100' C021' F01E'        	movff	___ftadd@sign,??___ftadd
 15001  0104' 0E07               	movlw	7
 15002  0106' 1700'              	andwf	??___ftadd& (0+255),f,b
 15003  0108' B4D8               	btfsc	status,2,c
 15004  010A' D006               	goto	l1717
 15005  010C' D7EF               	goto	u6600
 15006  010E'                    
 15007                           ; BSR set to: 0
 15008                           
 15009                           ; BSR set to: 0
 15010  010E' 90D8               	bcf	status,0,c
 15011  0110' 3300'              	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15012  0112' 3300'              	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15013  0114' 3300'              	rrcf	___ftadd@f2& (0+255),f,b
 15014  0116' 2B00'              	incf	___ftadd@exp2& (0+255),f,b
 15015  0118'                    l1717:
 15016                           
 15017                           ; BSR set to: 0
 15018                           
 15019                           ; BSR set to: 0
 15020  0118' 5100'              	movf	___ftadd@exp2& (0+255),w,b
 15021  011A' 1900'              	xorwf	___ftadd@exp1& (0+255),w,b
 15022  011C' A4D8               	btfss	status,2,c
 15023  011E' D7F7               	goto	l1718
 15024  0120'                    u6630:
 15025                           
 15026                           ; BSR set to: 0
 15027                           
 15028                           ; BSR set to: 0
 15029                           
 15030                           ; BSR set to: 0
 15031  0120' AF00'              	btfss	___ftadd@sign& (0+255),7,b
 15032  0122' D00C               	goto	l1720
 15033                           
 15034                           ; BSR set to: 0
 15035  0124' 0EFF               	movlw	255
 15036  0126' 1B00'              	xorwf	___ftadd@f1& (0+255),f,b
 15037  0128' 0EFF               	movlw	255
 15038  012A' 1B00'              	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15039  012C' 0EFF               	movlw	255
 15040  012E' 1B00'              	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15041  0130' 0E01               	movlw	1
 15042  0132' 2700'              	addwf	___ftadd@f1& (0+255),f,b
 15043  0134' 0E00               	movlw	0
 15044  0136' 2300'              	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15045  0138' 0E00               	movlw	0
 15046  013A' 2300'              	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15047  013C'                    l1720:
 15048                           
 15049                           ; BSR set to: 0
 15050  013C' AD00'              	btfss	___ftadd@sign& (0+255),6,b
 15051  013E' D00C               	goto	l1721
 15052                           
 15053                           ; BSR set to: 0
 15054  0140' 0EFF               	movlw	255
 15055  0142' 1B00'              	xorwf	___ftadd@f2& (0+255),f,b
 15056  0144' 0EFF               	movlw	255
 15057  0146' 1B00'              	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15058  0148' 0EFF               	movlw	255
 15059  014A' 1B00'              	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15060  014C' 0E01               	movlw	1
 15061  014E' 2700'              	addwf	___ftadd@f2& (0+255),f,b
 15062  0150' 0E00               	movlw	0
 15063  0152' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15064  0154' 0E00               	movlw	0
 15065  0156' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15066  0158'                    l1721:
 15067                           
 15068                           ; BSR set to: 0
 15069                           
 15070                           ; BSR set to: 0
 15071  0158' 0E00               	movlw	0
 15072  015A' 6F00'              	movwf	___ftadd@sign& (0+255),b
 15073                           
 15074                           ; BSR set to: 0
 15075  015C' 5100'              	movf	___ftadd@f1& (0+255),w,b
 15076  015E' 2700'              	addwf	___ftadd@f2& (0+255),f,b
 15077  0160' 5100'              	movf	(___ftadd@f1+1)& (0+255),w,b
 15078  0162' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15079  0164' 5100'              	movf	(___ftadd@f1+2)& (0+255),w,b
 15080  0166' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15081                           
 15082                           ; BSR set to: 0
 15083  0168' AF00'              	btfss	(___ftadd@f2+2)& (0+255),7,b
 15084  016A' D00E               	goto	l1722
 15085                           
 15086                           ; BSR set to: 0
 15087  016C' 0EFF               	movlw	255
 15088  016E' 1B00'              	xorwf	___ftadd@f2& (0+255),f,b
 15089  0170' 0EFF               	movlw	255
 15090  0172' 1B00'              	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15091  0174' 0EFF               	movlw	255
 15092  0176' 1B00'              	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15093  0178' 0E01               	movlw	1
 15094  017A' 2700'              	addwf	___ftadd@f2& (0+255),f,b
 15095  017C' 0E00               	movlw	0
 15096  017E' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15097  0180' 0E00               	movlw	0
 15098  0182' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15099                           
 15100                           ; BSR set to: 0
 15101  0184' 0E01               	movlw	1
 15102  0186' 6F00'              	movwf	___ftadd@sign& (0+255),b
 15103  0188'                    l1722:
 15104                           
 15105                           ; BSR set to: 0
 15106                           
 15107                           ; BSR set to: 0
 15108  0188' C01B' F017'        	movff	___ftadd@f2,___ftpack@arg
 15109  018C' C01C' F018'        	movff	___ftadd@f2+1,___ftpack@arg+1
 15110  0190' C01D' F019'        	movff	___ftadd@f2+2,___ftpack@arg+2
 15111  0194' C023' F01A'        	movff	___ftadd@exp1,___ftpack@exp
 15112  0198' C021' F01B'        	movff	___ftadd@sign,___ftpack@sign
 15113  019C' EC00' F000'        	call	___ftpack	;wreg free
 15114  01A0' C017' F018'        	movff	?___ftpack,?___ftadd
 15115  01A4' C018' F019'        	movff	?___ftpack+1,?___ftadd+1
 15116  01A8' C019' F01A'        	movff	?___ftpack+2,?___ftadd+2
 15117  01AC' 0012               	return	
 15118  01AE'                    __end_of___ftadd:
 15119                           	opt stack 0
 15120                           tosu	equ	0xFFF
 15121                           tosh	equ	0xFFE
 15122                           tosl	equ	0xFFD
 15123                           pclath	equ	0xFFA
 15124                           tblptru	equ	0xFF8
 15125                           tblptrh	equ	0xFF7
 15126                           tblptrl	equ	0xFF6
 15127                           tablat	equ	0xFF5
 15128                           prodh	equ	0xFF4
 15129                           prodl	equ	0xFF3
 15130                           intcon	equ	0xFF2
 15131                           intcon2	equ	0xFF1
 15132                           postinc0	equ	0xFEE
 15133                           wreg	equ	0xFE8
 15134                           indf1	equ	0xFE7
 15135                           postdec1	equ	0xFE5
 15136                           fsr1h	equ	0xFE2
 15137                           fsr1l	equ	0xFE1
 15138                           indf2	equ	0xFDF
 15139                           postinc2	equ	0xFDE
 15140                           postdec2	equ	0xFDD
 15141                           fsr2h	equ	0xFDA
 15142                           fsr2l	equ	0xFD9
 15143                           status	equ	0xFD8
 15144                           
 15145 ;; *************** function ___ftneg *****************
 15146 ;; Defined at:
 15147 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15148 ;; Parameters:    Size  Location     Type
 15149 ;;  f1              3   23[COMRAM] float 
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;		None
 15152 ;; Return value:  Size  Location     Type
 15153 ;;                  3   23[COMRAM] float 
 15154 ;; Registers used:
 15155 ;;		wreg, status,2, status,0
 15156 ;; Tracked objects:
 15157 ;;		On entry : 0/0
 15158 ;;		On exit  : 0/0
 15159 ;;		Unchanged: 0/0
 15160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15161 ;;      Params:         3       0       0       0       0       0       0
 15162 ;;      Locals:         0       0       0       0       0       0       0
 15163 ;;      Temps:          0       0       0       0       0       0       0
 15164 ;;      Totals:         3       0       0       0       0       0       0
 15165 ;;Total ram usage:        3 bytes
 15166 ;; Hardware stack levels used:    1
 15167 ;; Hardware stack levels required when called:    3
 15168 ;; This function calls:
 15169 ;;		Nothing
 15170 ;; This function is called by:
 15171 ;;		_pow
 15172 ;;		_exp
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176                           	psect	text99
 15177  0000'                    __ptext99:
 15178                           	opt stack 0
 15179  0000'                    ___ftneg:
 15180                           	opt stack 24
 15181                           
 15182                           ;incstack = 0
 15183  0000' 5017'              	movf	___ftneg@f1,w,c
 15184  0002' 1018'              	iorwf	___ftneg@f1+1,w,c
 15185  0004' 1019'              	iorwf	___ftneg@f1+2,w,c
 15186  0006' B4D8               	btfsc	status,2,c
 15187  0008' D006               	goto	l1753
 15188  000A' 0E00               	movlw	0
 15189  000C' 1A17'              	xorwf	___ftneg@f1,f,c
 15190  000E' 0E00               	movlw	0
 15191  0010' 1A18'              	xorwf	___ftneg@f1+1,f,c
 15192  0012' 0E80               	movlw	128
 15193  0014' 1A19'              	xorwf	___ftneg@f1+2,f,c
 15194  0016'                    l1753:
 15195  0016' C017' F017'        	movff	___ftneg@f1,?___ftneg
 15196  001A' C018' F018'        	movff	___ftneg@f1+1,?___ftneg+1
 15197  001E' C019' F019'        	movff	___ftneg@f1+2,?___ftneg+2
 15198  0022' 0012               	return		;funcret
 15199  0024'                    __end_of___ftneg:
 15200                           	opt stack 0
 15201                           tosu	equ	0xFFF
 15202                           tosh	equ	0xFFE
 15203                           tosl	equ	0xFFD
 15204                           pclath	equ	0xFFA
 15205                           tblptru	equ	0xFF8
 15206                           tblptrh	equ	0xFF7
 15207                           tblptrl	equ	0xFF6
 15208                           tablat	equ	0xFF5
 15209                           prodh	equ	0xFF4
 15210                           prodl	equ	0xFF3
 15211                           intcon	equ	0xFF2
 15212                           intcon2	equ	0xFF1
 15213                           postinc0	equ	0xFEE
 15214                           wreg	equ	0xFE8
 15215                           indf1	equ	0xFE7
 15216                           postdec1	equ	0xFE5
 15217                           fsr1h	equ	0xFE2
 15218                           fsr1l	equ	0xFE1
 15219                           indf2	equ	0xFDF
 15220                           postinc2	equ	0xFDE
 15221                           postdec2	equ	0xFDD
 15222                           fsr2h	equ	0xFDA
 15223                           fsr2l	equ	0xFD9
 15224                           status	equ	0xFD8
 15225                           
 15226 ;; *************** function ___ftdiv *****************
 15227 ;; Defined at:
 15228 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15229 ;; Parameters:    Size  Location     Type
 15230 ;;  f1              3   40[COMRAM] float 
 15231 ;;  f2              3   43[COMRAM] float 
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;  f3              3    4[BANK0 ] float 
 15234 ;;  sign            1    8[BANK0 ] unsigned char 
 15235 ;;  exp             1    7[BANK0 ] unsigned char 
 15236 ;;  cntr            1    3[BANK0 ] unsigned char 
 15237 ;; Return value:  Size  Location     Type
 15238 ;;                  3   40[COMRAM] float 
 15239 ;; Registers used:
 15240 ;;		wreg, status,2, status,0, cstack
 15241 ;; Tracked objects:
 15242 ;;		On entry : 0/0
 15243 ;;		On exit  : 0/0
 15244 ;;		Unchanged: 0/0
 15245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15246 ;;      Params:         6       0       0       0       0       0       0
 15247 ;;      Locals:         0       6       0       0       0       0       0
 15248 ;;      Temps:          0       3       0       0       0       0       0
 15249 ;;      Totals:         6       9       0       0       0       0       0
 15250 ;;Total ram usage:       15 bytes
 15251 ;; Hardware stack levels used:    1
 15252 ;; Hardware stack levels required when called:    4
 15253 ;; This function calls:
 15254 ;;		___ftpack
 15255 ;; This function is called by:
 15256 ;;		_AdcConvert
 15257 ;;		_CheckFlashPrecentage
 15258 ;;		_exp
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           	psect	text100
 15263  0000'                    __ptext100:
 15264                           	opt stack 0
 15265  0000'                    ___ftdiv:
 15266                           	opt stack 25
 15267                           
 15268                           ;incstack = 0
 15269  0000' C02A' F000'        	movff	___ftdiv@f1+2,??___ftdiv
 15270  0004' 0100               	movlb	0	; () banked
 15271  0006' 6B00'              	clrf	(??___ftdiv+1)& (0+255),b
 15272  0008' 6B00'              	clrf	(??___ftdiv+2)& (0+255),b
 15273  000A' 3429'              	rlcf	___ftdiv@f1+1,w,c
 15274  000C' 3700'              	rlcf	??___ftdiv& (0+255),f,b
 15275  000E' E301               	bnc	u6901
 15276  0010' 8100'              	bsf	(??___ftdiv+1)& (0+255),0,b
 15277  0012'                    u6901:
 15278  0012' 5100'              	movf	??___ftdiv& (0+255),w,b
 15279  0014' 6F00'              	movwf	___ftdiv@exp& (0+255),b
 15280  0016' 5100'              	movf	___ftdiv@exp& (0+255),w,b
 15281  0018' A4D8               	btfss	status,2,c
 15282  001A' D007               	goto	l1727
 15283                           
 15284                           ; BSR set to: 0
 15285  001C' 0E00               	movlw	0
 15286  001E' 6E28'              	movwf	?___ftdiv,c
 15287  0020' 0E00               	movlw	0
 15288  0022' 6E29'              	movwf	?___ftdiv+1,c
 15289  0024' 0E00               	movlw	0
 15290  0026' 6E2A'              	movwf	?___ftdiv+2,c
 15291                           
 15292                           ; BSR set to: 0
 15293  0028' 0012               	return	
 15294  002A'                    l1727:
 15295                           
 15296                           ; BSR set to: 0
 15297                           
 15298                           ; BSR set to: 0
 15299  002A' C02D' F000'        	movff	___ftdiv@f2+2,??___ftdiv
 15300  002E' 6B00'              	clrf	(??___ftdiv+1)& (0+255),b
 15301  0030' 6B00'              	clrf	(??___ftdiv+2)& (0+255),b
 15302  0032' 342C'              	rlcf	___ftdiv@f2+1,w,c
 15303  0034' 3700'              	rlcf	??___ftdiv& (0+255),f,b
 15304  0036' E301               	bnc	u6921
 15305  0038' 8100'              	bsf	(??___ftdiv+1)& (0+255),0,b
 15306  003A'                    u6921:
 15307  003A' 5100'              	movf	??___ftdiv& (0+255),w,b
 15308  003C' 6F00'              	movwf	___ftdiv@sign& (0+255),b
 15309  003E' 5100'              	movf	___ftdiv@sign& (0+255),w,b
 15310  0040' A4D8               	btfss	status,2,c
 15311  0042' D007               	goto	l1729
 15312                           
 15313                           ; BSR set to: 0
 15314  0044' 0E00               	movlw	0
 15315  0046' 6E28'              	movwf	?___ftdiv,c
 15316  0048' 0E00               	movlw	0
 15317  004A' 6E29'              	movwf	?___ftdiv+1,c
 15318  004C' 0E00               	movlw	0
 15319  004E' 6E2A'              	movwf	?___ftdiv+2,c
 15320                           
 15321                           ; BSR set to: 0
 15322  0050' 0012               	return	
 15323  0052'                    l1729:
 15324                           
 15325                           ; BSR set to: 0
 15326                           
 15327                           ; BSR set to: 0
 15328  0052' 0E00               	movlw	0
 15329  0054' 6F00'              	movwf	___ftdiv@f3& (0+255),b
 15330  0056' 0E00               	movlw	0
 15331  0058' 6F00'              	movwf	(___ftdiv@f3+1)& (0+255),b
 15332  005A' 0E00               	movlw	0
 15333  005C' 6F00'              	movwf	(___ftdiv@f3+2)& (0+255),b
 15334                           
 15335                           ; BSR set to: 0
 15336  005E' 5100'              	movf	___ftdiv@sign& (0+255),w,b
 15337  0060' 0F89               	addlw	137
 15338  0062' 5F00'              	subwf	___ftdiv@exp& (0+255),f,b
 15339                           
 15340                           ; BSR set to: 0
 15341  0064' C02A' F008'        	movff	___ftdiv@f1+2,___ftdiv@sign
 15342                           
 15343                           ; BSR set to: 0
 15344  0068' 502D'              	movf	___ftdiv@f2+2,w,c
 15345  006A' 1B00'              	xorwf	___ftdiv@sign& (0+255),f,b
 15346                           
 15347                           ; BSR set to: 0
 15348  006C' 0E80               	movlw	128
 15349  006E' 1700'              	andwf	___ftdiv@sign& (0+255),f,b
 15350                           
 15351                           ; BSR set to: 0
 15352  0070' 8E29'              	bsf	___ftdiv@f1+1,7,c
 15353                           
 15354                           ; BSR set to: 0
 15355  0072' 0EFF               	movlw	255
 15356  0074' 1628'              	andwf	___ftdiv@f1,f,c
 15357  0076' 0EFF               	movlw	255
 15358  0078' 1629'              	andwf	___ftdiv@f1+1,f,c
 15359  007A' 0E00               	movlw	0
 15360  007C' 162A'              	andwf	___ftdiv@f1+2,f,c
 15361                           
 15362                           ; BSR set to: 0
 15363  007E' 8E2C'              	bsf	___ftdiv@f2+1,7,c
 15364                           
 15365                           ; BSR set to: 0
 15366  0080' 0EFF               	movlw	255
 15367  0082' 162B'              	andwf	___ftdiv@f2,f,c
 15368  0084' 0EFF               	movlw	255
 15369  0086' 162C'              	andwf	___ftdiv@f2+1,f,c
 15370  0088' 0E00               	movlw	0
 15371  008A' 162D'              	andwf	___ftdiv@f2+2,f,c
 15372                           
 15373                           ; BSR set to: 0
 15374  008C' 0E18               	movlw	24
 15375  008E' 6F00'              	movwf	___ftdiv@cntr& (0+255),b
 15376  0090'                    
 15377                           ; BSR set to: 0
 15378                           
 15379                           ; BSR set to: 0
 15380  0090' 90D8               	bcf	status,0,c
 15381  0092' 3700'              	rlcf	___ftdiv@f3& (0+255),f,b
 15382  0094' 3700'              	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15383  0096' 3700'              	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15384                           
 15385                           ; BSR set to: 0
 15386  0098' 502B'              	movf	___ftdiv@f2,w,c
 15387  009A' 5C28'              	subwf	___ftdiv@f1,w,c
 15388  009C' 502C'              	movf	___ftdiv@f2+1,w,c
 15389  009E' 5829'              	subwfb	___ftdiv@f1+1,w,c
 15390  00A0' 502D'              	movf	___ftdiv@f2+2,w,c
 15391  00A2' 582A'              	subwfb	___ftdiv@f1+2,w,c
 15392  00A4' A0D8               	btfss	status,0,c
 15393  00A6' D007               	goto	l1731
 15394                           
 15395                           ; BSR set to: 0
 15396  00A8' 502B'              	movf	___ftdiv@f2,w,c
 15397  00AA' 5E28'              	subwf	___ftdiv@f1,f,c
 15398  00AC' 502C'              	movf	___ftdiv@f2+1,w,c
 15399  00AE' 5A29'              	subwfb	___ftdiv@f1+1,f,c
 15400  00B0' 502D'              	movf	___ftdiv@f2+2,w,c
 15401  00B2' 5A2A'              	subwfb	___ftdiv@f1+2,f,c
 15402                           
 15403                           ; BSR set to: 0
 15404  00B4' 8100'              	bsf	___ftdiv@f3& (0+255),0,b
 15405  00B6'                    l1731:
 15406                           
 15407                           ; BSR set to: 0
 15408  00B6' 90D8               	bcf	status,0,c
 15409  00B8' 3628'              	rlcf	___ftdiv@f1,f,c
 15410  00BA' 3629'              	rlcf	___ftdiv@f1+1,f,c
 15411  00BC' 362A'              	rlcf	___ftdiv@f1+2,f,c
 15412                           
 15413                           ; BSR set to: 0
 15414  00BE' 2F00'              	decfsz	___ftdiv@cntr& (0+255),f,b
 15415  00C0' D7E7               	goto	l1730
 15416                           
 15417                           ; BSR set to: 0
 15418                           
 15419                           ; BSR set to: 0
 15420  00C2' C004' F017'        	movff	___ftdiv@f3,___ftpack@arg
 15421  00C6' C005' F018'        	movff	___ftdiv@f3+1,___ftpack@arg+1
 15422  00CA' C006' F019'        	movff	___ftdiv@f3+2,___ftpack@arg+2
 15423  00CE' C007' F01A'        	movff	___ftdiv@exp,___ftpack@exp
 15424  00D2' C008' F01B'        	movff	___ftdiv@sign,___ftpack@sign
 15425  00D6' EC00' F000'        	call	___ftpack	;wreg free
 15426  00DA' C017' F028'        	movff	?___ftpack,?___ftdiv
 15427  00DE' C018' F029'        	movff	?___ftpack+1,?___ftdiv+1
 15428  00E2' C019' F02A'        	movff	?___ftpack+2,?___ftdiv+2
 15429  00E6' 0012               	return	
 15430  00E8'                    __end_of___ftdiv:
 15431                           	opt stack 0
 15432                           tosu	equ	0xFFF
 15433                           tosh	equ	0xFFE
 15434                           tosl	equ	0xFFD
 15435                           pclath	equ	0xFFA
 15436                           tblptru	equ	0xFF8
 15437                           tblptrh	equ	0xFF7
 15438                           tblptrl	equ	0xFF6
 15439                           tablat	equ	0xFF5
 15440                           prodh	equ	0xFF4
 15441                           prodl	equ	0xFF3
 15442                           intcon	equ	0xFF2
 15443                           intcon2	equ	0xFF1
 15444                           postinc0	equ	0xFEE
 15445                           wreg	equ	0xFE8
 15446                           indf1	equ	0xFE7
 15447                           postdec1	equ	0xFE5
 15448                           fsr1h	equ	0xFE2
 15449                           fsr1l	equ	0xFE1
 15450                           indf2	equ	0xFDF
 15451                           postinc2	equ	0xFDE
 15452                           postdec2	equ	0xFDD
 15453                           fsr2h	equ	0xFDA
 15454                           fsr2l	equ	0xFD9
 15455                           status	equ	0xFD8
 15456                           
 15457 ;; *************** function ___awtoft *****************
 15458 ;; Defined at:
 15459 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;  c               2   31[COMRAM] int 
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;  sign            1   34[COMRAM] unsigned char 
 15464 ;; Return value:  Size  Location     Type
 15465 ;;                  3   31[COMRAM] float 
 15466 ;; Registers used:
 15467 ;;		wreg, status,2, status,0, cstack
 15468 ;; Tracked objects:
 15469 ;;		On entry : 0/0
 15470 ;;		On exit  : 0/0
 15471 ;;		Unchanged: 0/0
 15472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15473 ;;      Params:         3       0       0       0       0       0       0
 15474 ;;      Locals:         1       0       0       0       0       0       0
 15475 ;;      Temps:          0       0       0       0       0       0       0
 15476 ;;      Totals:         4       0       0       0       0       0       0
 15477 ;;Total ram usage:        4 bytes
 15478 ;; Hardware stack levels used:    1
 15479 ;; Hardware stack levels required when called:    4
 15480 ;; This function calls:
 15481 ;;		___ftpack
 15482 ;; This function is called by:
 15483 ;;		_exp
 15484 ;;		_log
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           	psect	text101
 15489  0000'                    __ptext101:
 15490                           	opt stack 0
 15491  0000'                    ___awtoft:
 15492                           	opt stack 23
 15493                           
 15494                           ;incstack = 0
 15495  0000' 0E00               	movlw	0
 15496  0002' 6E22'              	movwf	___awtoft@sign,c
 15497  0004' AE20'              	btfss	___awtoft@c+1,7,c
 15498  0006' D006               	goto	l1644
 15499  0008' 6C1F'              	negf	___awtoft@c,c
 15500  000A' 1E20'              	comf	___awtoft@c+1,f,c
 15501  000C' B0D8               	btfsc	status,0,c
 15502  000E' 2A20'              	incf	___awtoft@c+1,f,c
 15503  0010' 0E01               	movlw	1
 15504  0012' 6E22'              	movwf	___awtoft@sign,c
 15505  0014'                    l1644:
 15506  0014' C01F' F017'        	movff	___awtoft@c,___ftpack@arg
 15507  0018' C020' F018'        	movff	___awtoft@c+1,___ftpack@arg+1
 15508  001C' 6A19'              	clrf	___ftpack@arg+2,c
 15509  001E' 0E8E               	movlw	142
 15510  0020' 6E1A'              	movwf	___ftpack@exp,c
 15511  0022' C022' F01B'        	movff	___awtoft@sign,___ftpack@sign
 15512  0026' EC00' F000'        	call	___ftpack	;wreg free
 15513  002A' C017' F01F'        	movff	?___ftpack,?___awtoft
 15514  002E' C018' F020'        	movff	?___ftpack+1,?___awtoft+1
 15515  0032' C019' F021'        	movff	?___ftpack+2,?___awtoft+2
 15516  0036' 0012               	return	
 15517  0038'                    __end_of___awtoft:
 15518                           	opt stack 0
 15519                           tosu	equ	0xFFF
 15520                           tosh	equ	0xFFE
 15521                           tosl	equ	0xFFD
 15522                           pclath	equ	0xFFA
 15523                           tblptru	equ	0xFF8
 15524                           tblptrh	equ	0xFF7
 15525                           tblptrl	equ	0xFF6
 15526                           tablat	equ	0xFF5
 15527                           prodh	equ	0xFF4
 15528                           prodl	equ	0xFF3
 15529                           intcon	equ	0xFF2
 15530                           intcon2	equ	0xFF1
 15531                           postinc0	equ	0xFEE
 15532                           wreg	equ	0xFE8
 15533                           indf1	equ	0xFE7
 15534                           postdec1	equ	0xFE5
 15535                           fsr1h	equ	0xFE2
 15536                           fsr1l	equ	0xFE1
 15537                           indf2	equ	0xFDF
 15538                           postinc2	equ	0xFDE
 15539                           postdec2	equ	0xFDD
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function ___lltoft *****************
 15545 ;; Defined at:
 15546 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;  c               4   31[COMRAM] unsigned long 
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;  exp             1   39[COMRAM] unsigned char 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;                  3   31[COMRAM] float 
 15553 ;; Registers used:
 15554 ;;		wreg, status,2, status,0, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15560 ;;      Params:         4       0       0       0       0       0       0
 15561 ;;      Locals:         1       0       0       0       0       0       0
 15562 ;;      Temps:          4       0       0       0       0       0       0
 15563 ;;      Totals:         9       0       0       0       0       0       0
 15564 ;;Total ram usage:        9 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    4
 15567 ;; This function calls:
 15568 ;;		___ftpack
 15569 ;; This function is called by:
 15570 ;;		_CheckFlashPrecentage
 15571 ;;		_pow
 15572 ;; This function uses a non-reentrant model
 15573 ;;
 15574                           
 15575                           	psect	text102
 15576  0000'                    __ptext102:
 15577                           	opt stack 0
 15578  0000'                    ___lltoft:
 15579                           	opt stack 25
 15580                           
 15581                           ;incstack = 0
 15582  0000' 0E8E               	movlw	142
 15583  0002' 6E27'              	movwf	___lltoft@exp,c
 15584  0004' D006               	goto	l1820
 15585  0006' 90D8               	bcf	status,0,c
 15586  0008' 3222'              	rrcf	___lltoft@c+3,f,c
 15587  000A' 3221'              	rrcf	___lltoft@c+2,f,c
 15588  000C' 3220'              	rrcf	___lltoft@c+1,f,c
 15589  000E' 321F'              	rrcf	___lltoft@c,f,c
 15590  0010' 2A27'              	incf	___lltoft@exp,f,c
 15591  0012'                    l1820:
 15592  0012' 0E00               	movlw	0
 15593  0014' 141F'              	andwf	___lltoft@c,w,c
 15594  0016' 6E00'              	movwf	??___lltoft& (0+255),c
 15595  0018' 0E00               	movlw	0
 15596  001A' 1420'              	andwf	___lltoft@c+1,w,c
 15597  001C' 6E00'              	movwf	(??___lltoft+1)& (0+255),c
 15598  001E' 0E00               	movlw	0
 15599  0020' 1421'              	andwf	___lltoft@c+2,w,c
 15600  0022' 6E00'              	movwf	(??___lltoft+2)& (0+255),c
 15601  0024' 0EFF               	movlw	255
 15602  0026' 1422'              	andwf	___lltoft@c+3,w,c
 15603  0028' 6E00'              	movwf	(??___lltoft+3)& (0+255),c
 15604  002A' 5023'              	movf	??___lltoft,w,c
 15605  002C' 1024'              	iorwf	??___lltoft+1,w,c
 15606  002E' 1025'              	iorwf	??___lltoft+2,w,c
 15607  0030' 1026'              	iorwf	??___lltoft+3,w,c
 15608  0032' A4D8               	btfss	status,2,c
 15609  0034' D7E8               	goto	l1821
 15610  0036' C01F' F017'        	movff	___lltoft@c,___ftpack@arg
 15611  003A' C020' F018'        	movff	___lltoft@c+1,___ftpack@arg+1
 15612  003E' C021' F019'        	movff	___lltoft@c+2,___ftpack@arg+2
 15613  0042' C027' F01A'        	movff	___lltoft@exp,___ftpack@exp
 15614  0046' 0E00               	movlw	0
 15615  0048' 6E1B'              	movwf	___ftpack@sign,c
 15616  004A' EC00' F000'        	call	___ftpack	;wreg free
 15617  004E' C017' F01F'        	movff	?___ftpack,?___lltoft
 15618  0052' C018' F020'        	movff	?___ftpack+1,?___lltoft+1
 15619  0056' C019' F021'        	movff	?___ftpack+2,?___lltoft+2
 15620  005A' 0012               	return	
 15621  005C'                    __end_of___lltoft:
 15622                           	opt stack 0
 15623                           tosu	equ	0xFFF
 15624                           tosh	equ	0xFFE
 15625                           tosl	equ	0xFFD
 15626                           pclath	equ	0xFFA
 15627                           tblptru	equ	0xFF8
 15628                           tblptrh	equ	0xFF7
 15629                           tblptrl	equ	0xFF6
 15630                           tablat	equ	0xFF5
 15631                           prodh	equ	0xFF4
 15632                           prodl	equ	0xFF3
 15633                           intcon	equ	0xFF2
 15634                           intcon2	equ	0xFF1
 15635                           postinc0	equ	0xFEE
 15636                           wreg	equ	0xFE8
 15637                           indf1	equ	0xFE7
 15638                           postdec1	equ	0xFE5
 15639                           fsr1h	equ	0xFE2
 15640                           fsr1l	equ	0xFE1
 15641                           indf2	equ	0xFDF
 15642                           postinc2	equ	0xFDE
 15643                           postdec2	equ	0xFDD
 15644                           fsr2h	equ	0xFDA
 15645                           fsr2l	equ	0xFD9
 15646                           status	equ	0xFD8
 15647                           
 15648 ;; *************** function ___lwtoft *****************
 15649 ;; Defined at:
 15650 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15651 ;; Parameters:    Size  Location     Type
 15652 ;;  c               2   31[COMRAM] unsigned int 
 15653 ;; Auto vars:     Size  Location     Type
 15654 ;;		None
 15655 ;; Return value:  Size  Location     Type
 15656 ;;                  3   31[COMRAM] float 
 15657 ;; Registers used:
 15658 ;;		wreg, status,2, status,0, cstack
 15659 ;; Tracked objects:
 15660 ;;		On entry : 0/0
 15661 ;;		On exit  : 0/0
 15662 ;;		Unchanged: 0/0
 15663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15664 ;;      Params:         3       0       0       0       0       0       0
 15665 ;;      Locals:         0       0       0       0       0       0       0
 15666 ;;      Temps:          0       0       0       0       0       0       0
 15667 ;;      Totals:         3       0       0       0       0       0       0
 15668 ;;Total ram usage:        3 bytes
 15669 ;; Hardware stack levels used:    1
 15670 ;; Hardware stack levels required when called:    4
 15671 ;; This function calls:
 15672 ;;		___ftpack
 15673 ;; This function is called by:
 15674 ;;		_AdcConvert
 15675 ;; This function uses a non-reentrant model
 15676 ;;
 15677                           
 15678                           	psect	text103
 15679  0000'                    __ptext103:
 15680                           	opt stack 0
 15681  0000'                    ___lwtoft:
 15682                           	opt stack 25
 15683                           
 15684                           ;incstack = 0
 15685  0000' C01F' F017'        	movff	___lwtoft@c,___ftpack@arg
 15686  0004' C020' F018'        	movff	___lwtoft@c+1,___ftpack@arg+1
 15687  0008' 6A19'              	clrf	___ftpack@arg+2,c
 15688  000A' 0E8E               	movlw	142
 15689  000C' 6E1A'              	movwf	___ftpack@exp,c
 15690  000E' 0E00               	movlw	0
 15691  0010' 6E1B'              	movwf	___ftpack@sign,c
 15692  0012' EC00' F000'        	call	___ftpack	;wreg free
 15693  0016' C017' F01F'        	movff	?___ftpack,?___lwtoft
 15694  001A' C018' F020'        	movff	?___ftpack+1,?___lwtoft+1
 15695  001E' C019' F021'        	movff	?___ftpack+2,?___lwtoft+2
 15696  0022' 0012               	return	
 15697  0024'                    __end_of___lwtoft:
 15698                           	opt stack 0
 15699                           tosu	equ	0xFFF
 15700                           tosh	equ	0xFFE
 15701                           tosl	equ	0xFFD
 15702                           pclath	equ	0xFFA
 15703                           tblptru	equ	0xFF8
 15704                           tblptrh	equ	0xFF7
 15705                           tblptrl	equ	0xFF6
 15706                           tablat	equ	0xFF5
 15707                           prodh	equ	0xFF4
 15708                           prodl	equ	0xFF3
 15709                           intcon	equ	0xFF2
 15710                           intcon2	equ	0xFF1
 15711                           postinc0	equ	0xFEE
 15712                           wreg	equ	0xFE8
 15713                           indf1	equ	0xFE7
 15714                           postdec1	equ	0xFE5
 15715                           fsr1h	equ	0xFE2
 15716                           fsr1l	equ	0xFE1
 15717                           indf2	equ	0xFDF
 15718                           postinc2	equ	0xFDE
 15719                           postdec2	equ	0xFDD
 15720                           fsr2h	equ	0xFDA
 15721                           fsr2l	equ	0xFD9
 15722                           status	equ	0xFD8
 15723                           
 15724 ;; *************** function ___ftpack *****************
 15725 ;; Defined at:
 15726 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15727 ;; Parameters:    Size  Location     Type
 15728 ;;  arg             3   23[COMRAM] unsigned um
 15729 ;;  exp             1   26[COMRAM] unsigned char 
 15730 ;;  sign            1   27[COMRAM] unsigned char 
 15731 ;; Auto vars:     Size  Location     Type
 15732 ;;		None
 15733 ;; Return value:  Size  Location     Type
 15734 ;;                  3   23[COMRAM] float 
 15735 ;; Registers used:
 15736 ;;		wreg, status,2, status,0
 15737 ;; Tracked objects:
 15738 ;;		On entry : 0/0
 15739 ;;		On exit  : 0/0
 15740 ;;		Unchanged: 0/0
 15741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15742 ;;      Params:         5       0       0       0       0       0       0
 15743 ;;      Locals:         0       0       0       0       0       0       0
 15744 ;;      Temps:          3       0       0       0       0       0       0
 15745 ;;      Totals:         8       0       0       0       0       0       0
 15746 ;;Total ram usage:        8 bytes
 15747 ;; Hardware stack levels used:    1
 15748 ;; Hardware stack levels required when called:    3
 15749 ;; This function calls:
 15750 ;;		Nothing
 15751 ;; This function is called by:
 15752 ;;		___altoft
 15753 ;;		___awtoft
 15754 ;;		___ftadd
 15755 ;;		___ftdiv
 15756 ;;		___ftmul
 15757 ;;		___lltoft
 15758 ;;		___lwtoft
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           	psect	text104
 15763  0000'                    __ptext104:
 15764                           	opt stack 0
 15765  0000'                    ___ftpack:
 15766                           	opt stack 25
 15767                           
 15768                           ;incstack = 0
 15769  0000' 501A'              	movf	___ftpack@exp,w,c
 15770  0002' B4D8               	btfsc	status,2,c
 15771  0004' D005               	goto	u6000
 15772  0006' 5017'              	movf	___ftpack@arg,w,c
 15773  0008' 1018'              	iorwf	___ftpack@arg+1,w,c
 15774  000A' 1019'              	iorwf	___ftpack@arg+2,w,c
 15775  000C' A4D8               	btfss	status,2,c
 15776  000E' D00C               	goto	l1663
 15777  0010'                    u6000:
 15778  0010' 0E00               	movlw	0
 15779  0012' 6E17'              	movwf	?___ftpack,c
 15780  0014' 0E00               	movlw	0
 15781  0016' 6E18'              	movwf	?___ftpack+1,c
 15782  0018' 0E00               	movlw	0
 15783  001A' 6E19'              	movwf	?___ftpack+2,c
 15784  001C' 0012               	return	
 15785  001E' 2A1A'              	incf	___ftpack@exp,f,c
 15786  0020' 90D8               	bcf	status,0,c
 15787  0022' 3219'              	rrcf	___ftpack@arg+2,f,c
 15788  0024' 3218'              	rrcf	___ftpack@arg+1,f,c
 15789  0026' 3217'              	rrcf	___ftpack@arg,f,c
 15790  0028'                    l1663:
 15791  0028' 0E00               	movlw	0
 15792  002A' 1417'              	andwf	___ftpack@arg,w,c
 15793  002C' 6E00'              	movwf	??___ftpack& (0+255),c
 15794  002E' 0E00               	movlw	0
 15795  0030' 1418'              	andwf	___ftpack@arg+1,w,c
 15796  0032' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
 15797  0034' 0EFE               	movlw	254
 15798  0036' 1419'              	andwf	___ftpack@arg+2,w,c
 15799  0038' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
 15800  003A' 501C'              	movf	??___ftpack,w,c
 15801  003C' 101D'              	iorwf	??___ftpack+1,w,c
 15802  003E' 101E'              	iorwf	??___ftpack+2,w,c
 15803  0040' B4D8               	btfsc	status,2,c
 15804  0042' D00C               	goto	l1666
 15805  0044' D7EC               	goto	l1664
 15806  0046' 2A1A'              	incf	___ftpack@exp,f,c
 15807  0048' 0E01               	movlw	1
 15808  004A' 2617'              	addwf	___ftpack@arg,f,c
 15809  004C' 0E00               	movlw	0
 15810  004E' 2218'              	addwfc	___ftpack@arg+1,f,c
 15811  0050' 0E00               	movlw	0
 15812  0052' 2219'              	addwfc	___ftpack@arg+2,f,c
 15813  0054' 90D8               	bcf	status,0,c
 15814  0056' 3219'              	rrcf	___ftpack@arg+2,f,c
 15815  0058' 3218'              	rrcf	___ftpack@arg+1,f,c
 15816  005A' 3217'              	rrcf	___ftpack@arg,f,c
 15817  005C'                    l1666:
 15818  005C' 0E00               	movlw	0
 15819  005E' 1417'              	andwf	___ftpack@arg,w,c
 15820  0060' 6E00'              	movwf	??___ftpack& (0+255),c
 15821  0062' 0E00               	movlw	0
 15822  0064' 1418'              	andwf	___ftpack@arg+1,w,c
 15823  0066' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
 15824  0068' 0EFF               	movlw	255
 15825  006A' 1419'              	andwf	___ftpack@arg+2,w,c
 15826  006C' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
 15827  006E' 501C'              	movf	??___ftpack,w,c
 15828  0070' 101D'              	iorwf	??___ftpack+1,w,c
 15829  0072' 101E'              	iorwf	??___ftpack+2,w,c
 15830  0074' B4D8               	btfsc	status,2,c
 15831  0076' D006               	goto	l1669
 15832  0078' D7E6               	goto	l1667
 15833  007A' 061A'              	decf	___ftpack@exp,f,c
 15834  007C' 90D8               	bcf	status,0,c
 15835  007E' 3617'              	rlcf	___ftpack@arg,f,c
 15836  0080' 3618'              	rlcf	___ftpack@arg+1,f,c
 15837  0082' 3619'              	rlcf	___ftpack@arg+2,f,c
 15838  0084'                    l1669:
 15839  0084' BE18'              	btfsc	___ftpack@arg+1,7,c
 15840  0086' D003               	goto	u6040
 15841  0088' 0E02               	movlw	2
 15842  008A' 601A'              	cpfslt	___ftpack@exp,c
 15843  008C' D7F6               	goto	l1670
 15844  008E'                    u6040:
 15845  008E' A01A'              	btfss	___ftpack@exp,0,c
 15846  0090' 9E18'              	bcf	___ftpack@arg+1,7,c
 15847  0092' 90D8               	bcf	status,0,c
 15848  0094' 321A'              	rrcf	___ftpack@exp,f,c
 15849  0096' 501A'              	movf	___ftpack@exp,w,c
 15850  0098' 1219'              	iorwf	___ftpack@arg+2,f,c
 15851  009A' 501B'              	movf	___ftpack@sign,w,c
 15852  009C' A4D8               	btfss	status,2,c
 15853  009E' 8E19'              	bsf	___ftpack@arg+2,7,c
 15854  00A0' C017' F017'        	movff	___ftpack@arg,?___ftpack
 15855  00A4' C018' F018'        	movff	___ftpack@arg+1,?___ftpack+1
 15856  00A8' C019' F019'        	movff	___ftpack@arg+2,?___ftpack+2
 15857  00AC' 0012               	return	
 15858  00AE'                    __end_of___ftpack:
 15859                           	opt stack 0
 15860                           tosu	equ	0xFFF
 15861                           tosh	equ	0xFFE
 15862                           tosl	equ	0xFFD
 15863                           pclath	equ	0xFFA
 15864                           tblptru	equ	0xFF8
 15865                           tblptrh	equ	0xFF7
 15866                           tblptrl	equ	0xFF6
 15867                           tablat	equ	0xFF5
 15868                           prodh	equ	0xFF4
 15869                           prodl	equ	0xFF3
 15870                           intcon	equ	0xFF2
 15871                           intcon2	equ	0xFF1
 15872                           postinc0	equ	0xFEE
 15873                           wreg	equ	0xFE8
 15874                           indf1	equ	0xFE7
 15875                           postdec1	equ	0xFE5
 15876                           fsr1h	equ	0xFE2
 15877                           fsr1l	equ	0xFE1
 15878                           indf2	equ	0xFDF
 15879                           postinc2	equ	0xFDE
 15880                           postdec2	equ	0xFDD
 15881                           fsr2h	equ	0xFDA
 15882                           fsr2l	equ	0xFD9
 15883                           status	equ	0xFD8
 15884                           
 15885 ;; *************** function _FlashSampleWrite *****************
 15886 ;; Defined at:
 15887 ;;		line 29 in file "FlashApp.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;  sampleData      2   44[COMRAM] unsigned int 
 15890 ;;  channelNum      1   46[COMRAM] unsigned char 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;                  1    wreg      void 
 15895 ;; Registers used:
 15896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15902 ;;      Params:         3       0       0       0       0       0       0
 15903 ;;      Locals:         0       2       0       0       0       0       0
 15904 ;;      Temps:          0       2       0       0       0       0       0
 15905 ;;      Totals:         3       4       0       0       0       0       0
 15906 ;;Total ram usage:        7 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    5
 15909 ;; This function calls:
 15910 ;;		_FLASH_IsWriteDone
 15911 ;;		_FLASH_WriteBlock
 15912 ;; This function is called by:
 15913 ;;		_AdcConvert
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           	psect	text105
 15918  0000'                    __ptext105:
 15919                           	opt stack 0
 15920  0000'                    _FlashSampleWrite:
 15921                           	opt stack 24
 15922                           
 15923                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15924                           
 15925                           ;incstack = 0
 15926  0000' 502E'              	movf	FlashSampleWrite@channelNum,w,c
 15927  0002' 0100               	movlb	0	; () banked
 15928  0004' 6F00'              	movwf	??_FlashSampleWrite& (0+255),b
 15929  0006' 6B00'              	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15930  0008' 0E0C               	movlw	12
 15931  000A'                    u7665:
 15932  000A' 90D8               	bcf	status,0,c
 15933  000C' 3700'              	rlcf	??_FlashSampleWrite& (0+255),f,b
 15934  000E' 3700'              	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15935  0010' 2EE8               	decfsz	wreg,f,c
 15936  0012' D7FB               	goto	u7665
 15937  0014' C000' F002'        	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15938  0018' C001' F003'        	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15939                           
 15940                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15941  001C' 5100'              	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15942  001E' 122C'              	iorwf	FlashSampleWrite@sampleData,f,c
 15943  0020' 5100'              	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15944  0022' 122D'              	iorwf	FlashSampleWrite@sampleData+1,f,c
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15948  0024' 90D8               	bcf	status,0,c
 15949  0026' 3500'              	rlcf	_sampleCount& (0+255),w,b
 15950  0028' 6ED9               	movwf	fsr2l,c
 15951  002A' 3500'              	rlcf	(_sampleCount+1)& (0+255),w,b
 15952  002C' 6EDA               	movwf	fsr2h,c
 15953  002E' 0E00'              	movlw	low _sampleArray
 15954  0030' 26D9               	addwf	fsr2l,f,c
 15955  0032' 0E00'              	movlw	high _sampleArray
 15956  0034' 22DA               	addwfc	fsr2h,f,c
 15957  0036' C02C' FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15958  003A' C02D' FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;FlashApp.c: 35: sampleCount ++;
 15962  003E' 4B00'              	infsnz	_sampleCount& (0+255),f,b
 15963  0040' 2B00'              	incf	(_sampleCount+1)& (0+255),f,b
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 15967  0042' C006' F000'        	movff	_sampleCount,??_FlashSampleWrite
 15968  0046' C007' F001'        	movff	_sampleCount+1,??_FlashSampleWrite+1
 15969  004A' 90D8               	bcf	status,0,c
 15970  004C' 3700'              	rlcf	??_FlashSampleWrite& (0+255),f,b
 15971  004E' 3700'              	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15972  0050' 5100'              	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 15973  0052' E104               	bnz	u7670
 15974  0054' 0E40               	movlw	64
 15975  0056' 5D00'              	subwf	??_FlashSampleWrite& (0+255),w,b
 15976  0058' A0D8               	btfss	status,0,c
 15977  005A' 0012               	return	
 15978  005C'                    u7670:
 15979                           
 15980                           ; BSR set to: 0
 15981  005C' EC00' F000'        	call	_FLASH_IsWriteDone	;wreg free
 15982  0060' 0900               	iorlw	0
 15983  0062' B4D8               	btfsc	status,2,c
 15984  0064' 0012               	return	
 15985                           
 15986                           ;FlashApp.c: 38: {
 15987                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 15988  0066' C000' F01C'        	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 15989  006A' C001' F01D'        	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 15990  006E' C002' F01E'        	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 15991  0072' C003' F01F'        	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 15992  0076' 0E00'              	movlw	low _sampleArray
 15993  0078' 6E20'              	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 15994  007A' 0E00'              	movlw	high _sampleArray
 15995  007C' 6E21'              	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 15996  007E' EC00' F000'        	call	_FLASH_WriteBlock	;wreg free
 15997                           
 15998                           ;FlashApp.c: 40: writeAddress += (64);
 15999  0082' 0E40               	movlw	64
 16000  0084' 2600'              	addwf	_writeAddress,f,c
 16001  0086' 0E00               	movlw	0
 16002  0088' 2201'              	addwfc	_writeAddress+1,f,c
 16003  008A' 2202'              	addwfc	_writeAddress+2,f,c
 16004  008C' 2203'              	addwfc	_writeAddress+3,f,c
 16005                           
 16006                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16007  008E' 5003'              	movf	_writeAddress+3,w,c
 16008  0090' 1002'              	iorwf	_writeAddress+2,w,c
 16009  0092' E106               	bnz	u7690
 16010  0094' 0EF0               	movlw	240
 16011  0096' 5C00'              	subwf	_writeAddress,w,c
 16012  0098' 0E7F               	movlw	127
 16013  009A' 5801'              	subwfb	_writeAddress+1,w,c
 16014  009C' A0D8               	btfss	status,0,c
 16015  009E' D018               	goto	l299
 16016  00A0'                    u7690:
 16017                           
 16018                           ;FlashApp.c: 42: {
 16019                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16020  00A0' 0E00               	movlw	0
 16021  00A2' 6E00'              	movwf	_writeAddress,c
 16022  00A4' 0E40               	movlw	64
 16023  00A6' 6E01'              	movwf	_writeAddress+1,c
 16024  00A8' 0E00               	movlw	0
 16025  00AA' 6E02'              	movwf	_writeAddress+2,c
 16026  00AC' 0E00               	movlw	0
 16027  00AE' 6E03'              	movwf	_writeAddress+3,c
 16028                           
 16029                           ;FlashApp.c: 44: isReWriteDone = 1;
 16030  00B0' 0E01               	movlw	1
 16031  00B2' 6E0B'              	movwf	_isReWriteDone,c
 16032                           
 16033                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16034  00B4' 0E40               	movlw	64
 16035  00B6' 0100               	movlb	0	; () banked
 16036  00B8' 1900'              	xorwf	(_readAddress+1)& (0+255),w,b
 16037  00BA' 1100'              	iorwf	_readAddress& (0+255),w,b
 16038  00BC' 1100'              	iorwf	(_readAddress+2)& (0+255),w,b
 16039  00BE' 1100'              	iorwf	(_readAddress+3)& (0+255),w,b
 16040  00C0' A4D8               	btfss	status,2,c
 16041  00C2' D006               	goto	l299
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;FlashApp.c: 46: {
 16045                           ;FlashApp.c: 47: readAddress += (64);
 16046  00C4' 0E40               	movlw	64
 16047  00C6' 2700'              	addwf	_readAddress& (0+255),f,b
 16048  00C8' 0E00               	movlw	0
 16049  00CA' 2300'              	addwfc	(_readAddress+1)& (0+255),f,b
 16050  00CC' 2300'              	addwfc	(_readAddress+2)& (0+255),f,b
 16051  00CE' 2300'              	addwfc	(_readAddress+3)& (0+255),f,b
 16052  00D0'                    l299:
 16053                           
 16054                           ;FlashApp.c: 48: }
 16055                           ;FlashApp.c: 49: }
 16056                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16057                           
 16058                           ; BSR set to: 0
 16059  00D0' 0400'              	decf	_numOfValidateSamples,w,c
 16060  00D2' 0EFF               	movlw	255
 16061  00D4' 5801'              	subwfb	_numOfValidateSamples+1,w,c
 16062  00D6' 0EFF               	movlw	255
 16063  00D8' 5802'              	subwfb	_numOfValidateSamples+2,w,c
 16064  00DA' 0EFF               	movlw	255
 16065  00DC' 5803'              	subwfb	_numOfValidateSamples+3,w,c
 16066  00DE' B0D8               	btfsc	status,0,c
 16067  00E0' D006               	goto	l300
 16068                           
 16069                           ;FlashApp.c: 52: {
 16070                           ;FlashApp.c: 53: numOfValidateSamples++;
 16071  00E2' 0E01               	movlw	1
 16072  00E4' 2600'              	addwf	_numOfValidateSamples,f,c
 16073  00E6' 0E00               	movlw	0
 16074  00E8' 2201'              	addwfc	_numOfValidateSamples+1,f,c
 16075  00EA' 2202'              	addwfc	_numOfValidateSamples+2,f,c
 16076  00EC' 2203'              	addwfc	_numOfValidateSamples+3,f,c
 16077  00EE'                    l300:
 16078                           
 16079                           ;FlashApp.c: 54: }
 16080                           ;FlashApp.c: 55: sampleCount = 0;
 16081  00EE' 0E00               	movlw	0
 16082  00F0' 0100               	movlb	0	; () banked
 16083  00F2' 6F00'              	movwf	(_sampleCount+1)& (0+255),b
 16084  00F4' 0E00               	movlw	0
 16085  00F6' 6F00'              	movwf	_sampleCount& (0+255),b
 16086  00F8' 0012               	return	
 16087  00FA'                    __end_of_FlashSampleWrite:
 16088                           	opt stack 0
 16089                           tosu	equ	0xFFF
 16090                           tosh	equ	0xFFE
 16091                           tosl	equ	0xFFD
 16092                           pclath	equ	0xFFA
 16093                           tblptru	equ	0xFF8
 16094                           tblptrh	equ	0xFF7
 16095                           tblptrl	equ	0xFF6
 16096                           tablat	equ	0xFF5
 16097                           prodh	equ	0xFF4
 16098                           prodl	equ	0xFF3
 16099                           intcon	equ	0xFF2
 16100                           intcon2	equ	0xFF1
 16101                           postinc0	equ	0xFEE
 16102                           wreg	equ	0xFE8
 16103                           indf1	equ	0xFE7
 16104                           postdec1	equ	0xFE5
 16105                           fsr1h	equ	0xFE2
 16106                           fsr1l	equ	0xFE1
 16107                           indf2	equ	0xFDF
 16108                           postinc2	equ	0xFDE
 16109                           postdec2	equ	0xFDD
 16110                           fsr2h	equ	0xFDA
 16111                           fsr2l	equ	0xFD9
 16112                           status	equ	0xFD8
 16113                           
 16114 ;; *************** function _FLASH_WriteBlock *****************
 16115 ;; Defined at:
 16116 ;;		line 93 in file "mcc_generated_files/memory.c"
 16117 ;; Parameters:    Size  Location     Type
 16118 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16119 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16120 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16121 ;; Auto vars:     Size  Location     Type
 16122 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16123 ;;  i               1   43[COMRAM] unsigned char 
 16124 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16125 ;; Return value:  Size  Location     Type
 16126 ;;                  1    wreg      char 
 16127 ;; Registers used:
 16128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16134 ;;      Params:         6       0       0       0       0       0       0
 16135 ;;      Locals:         6       0       0       0       0       0       0
 16136 ;;      Temps:          4       0       0       0       0       0       0
 16137 ;;      Totals:        16       0       0       0       0       0       0
 16138 ;;Total ram usage:       16 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:    4
 16141 ;; This function calls:
 16142 ;;		_FLASH_EraseBlock
 16143 ;; This function is called by:
 16144 ;;		_FlashSampleWrite
 16145 ;;		_FlashTest
 16146 ;;		_FLASH_WriteByte
 16147 ;; This function uses a non-reentrant model
 16148 ;;
 16149                           
 16150                           	psect	text106
 16151  0000'                    __ptext106:
 16152                           	opt stack 0
 16153  0000'                    _FLASH_WriteBlock:
 16154                           	opt stack 24
 16155                           
 16156                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16157                           
 16158                           ;incstack = 0
 16159  0000' 0EC0               	movlw	192
 16160  0002' 6E00'              	movwf	??_FLASH_WriteBlock& (0+255),c
 16161  0004' 0E7F               	movlw	127
 16162  0006' 6E00'              	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16163  0008' C01C' F024'        	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16164  000C' C01D' F025'        	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16165  0010' 5022'              	movf	??_FLASH_WriteBlock,w,c
 16166  0012' 1624'              	andwf	??_FLASH_WriteBlock+2,f,c
 16167  0014' 5023'              	movf	??_FLASH_WriteBlock+1,w,c
 16168  0016' 1625'              	andwf	??_FLASH_WriteBlock+3,f,c
 16169  0018' C024' F026'        	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16170  001C' C025' F027'        	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16171  0020' 6A28'              	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16172  0022' 6A29'              	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16173                           
 16174                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16175  0024' 0E00               	movlw	0
 16176  0026' BEF2               	btfsc	intcon,7,c	;volatile
 16177  0028' 0E01               	movlw	1
 16178  002A' 6E2A'              	movwf	FLASH_WriteBlock@GIEBitValue,c
 16179                           
 16180                           ;memory.c: 97: uint8_t i;
 16181                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16182  002C' 5026'              	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16183  002E' 181C'              	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16184  0030' E144               	bnz	l940
 16185  0032' 5027'              	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16186  0034' 181D'              	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16187  0036' E141               	bnz	l940
 16188  0038' 5028'              	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16189  003A' 181E'              	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16190  003C' E13E               	bnz	l940
 16191  003E' 5029'              	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16192  0040' 181F'              	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16193  0042' A4D8               	btfss	status,2,c
 16194  0044' 0012               	return	
 16195                           
 16196                           ;memory.c: 103: }
 16197                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16198                           
 16199                           ;memory.c: 101: {
 16200                           ;memory.c: 102: return -1;
 16201                           ;	Return value of _FLASH_WriteBlock is never used
 16202  0046' C01C' F017'        	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16203  004A' C01D' F018'        	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16204  004E' C01E' F019'        	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16205  0052' C01F' F01A'        	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16206  0056' EC00' F000'        	call	_FLASH_EraseBlock	;wreg free
 16207                           
 16208                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16209  005A' C01E' FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16210                           
 16211                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16212  005E' C01D' FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16213                           
 16214                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16215  0062' C01C' FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16216                           
 16217                           ;memory.c: 114: for (i=0; i<(64); i++)
 16218  0066' 0E00               	movlw	0
 16219  0068' 6E2B'              	movwf	FLASH_WriteBlock@i,c
 16220  006A'                    l7233:
 16221  006A' 0E3F               	movlw	63
 16222  006C' 642B'              	cpfsgt	FLASH_WriteBlock@i,c
 16223  006E' D001               	goto	l941
 16224  0070' D013               	goto	u7140
 16225  0072'                    l941:
 16226                           
 16227                           ;memory.c: 115: {
 16228                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16229  0072' 502B'              	movf	FLASH_WriteBlock@i,w,c
 16230  0074' 0D01               	mullw	1
 16231  0076' 50F3               	movf	prodl,w,c
 16232  0078' 2420'              	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16233  007A' 6ED9               	movwf	fsr2l,c
 16234  007C' 50F4               	movf	prodh,w,c
 16235  007E' 2021'              	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16236  0080' 6EDA               	movwf	fsr2h,c
 16237  0082' 50DF               	movf	indf2,w,c
 16238  0084' 6EF5               	movwf	tablat,c	;volatile
 16239                           
 16240                           ;memory.c: 118: if (i == ((64)-1))
 16241  0086' 0E3F               	movlw	63
 16242  0088' 182B'              	xorwf	FLASH_WriteBlock@i,w,c
 16243  008A' A4D8               	btfss	status,2,c
 16244  008C' D002               	goto	l943
 16245  008E' 000C               	tblwt		*	;# 
 16246                           
 16247                           ;memory.c: 121: }
 16248  0090' D001               	goto	l944
 16249  0092'                    l943:
 16250  0092' 000D               	tblwt		*+	;# 
 16251  0094'                    l944:
 16252  0094' 2A2B'              	incf	FLASH_WriteBlock@i,f,c
 16253  0096' D7E9               	goto	l7233
 16254  0098'                    u7140:
 16255                           
 16256                           ;memory.c: 125: }
 16257                           ;memory.c: 126: }
 16258                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16259  0098' 88A1               	bsf	4001,4,c	;volatile
 16260                           
 16261                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16262  009A' 8EA6               	bsf	4006,7,c	;volsfr
 16263                           
 16264                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16265  009C' 9CA6               	bcf	4006,6,c	;volsfr
 16266                           
 16267                           ;memory.c: 131: EECON1bits.WREN = 1;
 16268  009E' 84A6               	bsf	4006,2,c	;volsfr
 16269                           
 16270                           ;memory.c: 132: INTCONbits.GIE = 0;
 16271  00A0' 9EF2               	bcf	intcon,7,c	;volatile
 16272                           
 16273                           ;memory.c: 133: EECON2 = 0x55;
 16274  00A2' 0E55               	movlw	85
 16275  00A4' 6EA7               	movwf	4007,c	;volsfr
 16276                           
 16277                           ;memory.c: 134: EECON2 = 0xAA;
 16278  00A6' 0EAA               	movlw	170
 16279  00A8' 6EA7               	movwf	4007,c	;volsfr
 16280                           
 16281                           ;memory.c: 135: EECON1bits.WR = 1;
 16282  00AA' 82A6               	bsf	4006,1,c	;volsfr
 16283                           
 16284                           ;memory.c: 137: EECON1bits.WREN = 0;
 16285  00AC' 94A6               	bcf	4006,2,c	;volsfr
 16286                           
 16287                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16288  00AE' B02A'              	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16289  00B0' D002               	bra	u7155
 16290  00B2' 9EF2               	bcf	intcon,7,c	;volatile
 16291  00B4' D001               	bra	u7156
 16292  00B6'                    u7155:
 16293  00B6' 8EF2               	bsf	intcon,7,c	;volatile
 16294  00B8'                    u7156:
 16295  00B8' 0012               	return	
 16296  00BA'                    l940:
 16297  00BA' 0012               	return		;funcret
 16298  00BC'                    __end_of_FLASH_WriteBlock:
 16299                           	opt stack 0
 16300                           tosu	equ	0xFFF
 16301                           tosh	equ	0xFFE
 16302                           tosl	equ	0xFFD
 16303                           pclath	equ	0xFFA
 16304                           tblptru	equ	0xFF8
 16305                           tblptrh	equ	0xFF7
 16306                           tblptrl	equ	0xFF6
 16307                           tablat	equ	0xFF5
 16308                           prodh	equ	0xFF4
 16309                           prodl	equ	0xFF3
 16310                           intcon	equ	0xFF2
 16311                           intcon2	equ	0xFF1
 16312                           postinc0	equ	0xFEE
 16313                           wreg	equ	0xFE8
 16314                           indf1	equ	0xFE7
 16315                           postdec1	equ	0xFE5
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           fsr2h	equ	0xFDA
 16322                           fsr2l	equ	0xFD9
 16323                           status	equ	0xFD8
 16324                           
 16325 ;; *************** function _FLASH_EraseBlock *****************
 16326 ;; Defined at:
 16327 ;;		line 144 in file "mcc_generated_files/memory.c"
 16328 ;; Parameters:    Size  Location     Type
 16329 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16330 ;; Auto vars:     Size  Location     Type
 16331 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16332 ;; Return value:  Size  Location     Type
 16333 ;;                  1    wreg      void 
 16334 ;; Registers used:
 16335 ;;		wreg, status,2
 16336 ;; Tracked objects:
 16337 ;;		On entry : 0/0
 16338 ;;		On exit  : 0/0
 16339 ;;		Unchanged: 0/0
 16340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16341 ;;      Params:         4       0       0       0       0       0       0
 16342 ;;      Locals:         1       0       0       0       0       0       0
 16343 ;;      Temps:          0       0       0       0       0       0       0
 16344 ;;      Totals:         5       0       0       0       0       0       0
 16345 ;;Total ram usage:        5 bytes
 16346 ;; Hardware stack levels used:    1
 16347 ;; Hardware stack levels required when called:    3
 16348 ;; This function calls:
 16349 ;;		Nothing
 16350 ;; This function is called by:
 16351 ;;		_FLASH_WriteBlock
 16352 ;; This function uses a non-reentrant model
 16353 ;;
 16354                           
 16355                           	psect	text107
 16356  0000'                    __ptext107:
 16357                           	opt stack 0
 16358  0000'                    _FLASH_EraseBlock:
 16359                           	opt stack 24
 16360                           
 16361                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16362                           
 16363                           ;incstack = 0
 16364  0000' 0E00               	movlw	0
 16365  0002' BEF2               	btfsc	intcon,7,c	;volatile
 16366  0004' 0E01               	movlw	1
 16367  0006' 6E1B'              	movwf	FLASH_EraseBlock@GIEBitValue,c
 16368                           
 16369                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16370  0008' C019' FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16371                           
 16372                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16373  000C' C018' FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16374                           
 16375                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16376  0010' C017' FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16377                           
 16378                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16379  0014' 8EA6               	bsf	4006,7,c	;volsfr
 16380                           
 16381                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16382  0016' 9CA6               	bcf	4006,6,c	;volsfr
 16383                           
 16384                           ;memory.c: 154: EECON1bits.WREN = 1;
 16385  0018' 84A6               	bsf	4006,2,c	;volsfr
 16386                           
 16387                           ;memory.c: 155: EECON1bits.FREE = 1;
 16388  001A' 88A6               	bsf	4006,4,c	;volsfr
 16389                           
 16390                           ;memory.c: 156: INTCONbits.GIE = 0;
 16391  001C' 9EF2               	bcf	intcon,7,c	;volatile
 16392                           
 16393                           ;memory.c: 157: EECON2 = 0x55;
 16394  001E' 0E55               	movlw	85
 16395  0020' 6EA7               	movwf	4007,c	;volsfr
 16396                           
 16397                           ;memory.c: 158: EECON2 = 0xAA;
 16398  0022' 0EAA               	movlw	170
 16399  0024' 6EA7               	movwf	4007,c	;volsfr
 16400                           
 16401                           ;memory.c: 159: EECON1bits.WR = 1;
 16402  0026' 82A6               	bsf	4006,1,c	;volsfr
 16403                           
 16404                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16405  0028' B01B'              	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16406  002A' D002               	bra	u6895
 16407  002C' 9EF2               	bcf	intcon,7,c	;volatile
 16408  002E' D001               	bra	u6896
 16409  0030'                    u6895:
 16410  0030' 8EF2               	bsf	intcon,7,c	;volatile
 16411  0032'                    u6896:
 16412  0032' 0012               	return		;funcret
 16413  0034'                    __end_of_FLASH_EraseBlock:
 16414                           	opt stack 0
 16415                           tosu	equ	0xFFF
 16416                           tosh	equ	0xFFE
 16417                           tosl	equ	0xFFD
 16418                           pclath	equ	0xFFA
 16419                           tblptru	equ	0xFF8
 16420                           tblptrh	equ	0xFF7
 16421                           tblptrl	equ	0xFF6
 16422                           tablat	equ	0xFF5
 16423                           prodh	equ	0xFF4
 16424                           prodl	equ	0xFF3
 16425                           intcon	equ	0xFF2
 16426                           intcon2	equ	0xFF1
 16427                           postinc0	equ	0xFEE
 16428                           wreg	equ	0xFE8
 16429                           indf1	equ	0xFE7
 16430                           postdec1	equ	0xFE5
 16431                           fsr1h	equ	0xFE2
 16432                           fsr1l	equ	0xFE1
 16433                           indf2	equ	0xFDF
 16434                           postinc2	equ	0xFDE
 16435                           postdec2	equ	0xFDD
 16436                           fsr2h	equ	0xFDA
 16437                           fsr2l	equ	0xFD9
 16438                           status	equ	0xFD8
 16439                           
 16440 ;; *************** function _FLASH_IsWriteDone *****************
 16441 ;; Defined at:
 16442 ;;		line 189 in file "mcc_generated_files/memory.c"
 16443 ;; Parameters:    Size  Location     Type
 16444 ;;		None
 16445 ;; Auto vars:     Size  Location     Type
 16446 ;;		None
 16447 ;; Return value:  Size  Location     Type
 16448 ;;                  1    wreg      unsigned char 
 16449 ;; Registers used:
 16450 ;;		wreg
 16451 ;; Tracked objects:
 16452 ;;		On entry : 0/0
 16453 ;;		On exit  : 0/0
 16454 ;;		Unchanged: 0/0
 16455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16456 ;;      Params:         0       0       0       0       0       0       0
 16457 ;;      Locals:         0       0       0       0       0       0       0
 16458 ;;      Temps:          0       0       0       0       0       0       0
 16459 ;;      Totals:         0       0       0       0       0       0       0
 16460 ;;Total ram usage:        0 bytes
 16461 ;; Hardware stack levels used:    1
 16462 ;; Hardware stack levels required when called:    3
 16463 ;; This function calls:
 16464 ;;		Nothing
 16465 ;; This function is called by:
 16466 ;;		_FlashSampleWrite
 16467 ;;		_FlashReadUart
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           	psect	text108
 16472  0000'                    __ptext108:
 16473                           	opt stack 0
 16474  0000'                    _FLASH_IsWriteDone:
 16475                           	opt stack 24
 16476                           
 16477                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16478                           
 16479                           ;incstack = 0
 16480  0000' A2A6               	btfss	4006,1,c	;volsfr
 16481  0002' D001               	goto	u6731
 16482  0004' D002               	goto	u6730
 16483  0006'                    u6731:
 16484  0006' 0E01               	movlw	1
 16485  0008' 0012               	return	
 16486  000A'                    u6730:
 16487  000A' 0E00               	movlw	0
 16488  000C' 0012               	return	
 16489  000E'                    __end_of_FLASH_IsWriteDone:
 16490                           	opt stack 0
 16491                           tosu	equ	0xFFF
 16492                           tosh	equ	0xFFE
 16493                           tosl	equ	0xFFD
 16494                           pclath	equ	0xFFA
 16495                           tblptru	equ	0xFF8
 16496                           tblptrh	equ	0xFF7
 16497                           tblptrl	equ	0xFF6
 16498                           tablat	equ	0xFF5
 16499                           prodh	equ	0xFF4
 16500                           prodl	equ	0xFF3
 16501                           intcon	equ	0xFF2
 16502                           intcon2	equ	0xFF1
 16503                           postinc0	equ	0xFEE
 16504                           wreg	equ	0xFE8
 16505                           indf1	equ	0xFE7
 16506                           postdec1	equ	0xFE5
 16507                           fsr1h	equ	0xFE2
 16508                           fsr1l	equ	0xFE1
 16509                           indf2	equ	0xFDF
 16510                           postinc2	equ	0xFDE
 16511                           postdec2	equ	0xFDD
 16512                           fsr2h	equ	0xFDA
 16513                           fsr2l	equ	0xFD9
 16514                           status	equ	0xFD8
 16515                           
 16516 ;; *************** function _ADC_GetConversion *****************
 16517 ;; Defined at:
 16518 ;;		line 106 in file "mcc_generated_files/adc.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;  channel         1    wreg     enum E6975
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  channel         1   27[COMRAM] enum E6975
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  2   23[COMRAM] unsigned int 
 16525 ;; Registers used:
 16526 ;;		wreg, status,2, status,0
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16532 ;;      Params:         2       0       0       0       0       0       0
 16533 ;;      Locals:         1       0       0       0       0       0       0
 16534 ;;      Temps:          2       0       0       0       0       0       0
 16535 ;;      Totals:         5       0       0       0       0       0       0
 16536 ;;Total ram usage:        5 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    3
 16539 ;; This function calls:
 16540 ;;		Nothing
 16541 ;; This function is called by:
 16542 ;;		_AdcConvert
 16543 ;; This function uses a non-reentrant model
 16544 ;;
 16545                           
 16546                           	psect	text109
 16547  0000'                    __ptext109:
 16548                           	opt stack 0
 16549  0000'                    _ADC_GetConversion:
 16550                           	opt stack 26
 16551                           
 16552                           ;incstack = 0
 16553                           ;ADC_GetConversion@channel stored from wreg
 16554  0000' 6E1B'              	movwf	ADC_GetConversion@channel,c
 16555                           
 16556                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16557  0002' C01B' F019'        	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16558  0006' 4619'              	rlncf	??_ADC_GetConversion,f,c
 16559  0008' 4619'              	rlncf	??_ADC_GetConversion,f,c
 16560  000A' 50C2               	movf	4034,w,c	;volatile
 16561  000C' 1819'              	xorwf	??_ADC_GetConversion,w,c
 16562  000E' 0B83               	andlw	-125
 16563  0010' 1819'              	xorwf	??_ADC_GetConversion,w,c
 16564  0012' 6EC2               	movwf	4034,c	;volatile
 16565                           
 16566                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16567  0014' 80C2               	bsf	4034,0,c	;volatile
 16568                           
 16569                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16570  0016' 82C2               	bsf	4034,1,c	;volatile
 16571  0018'                    
 16572                           ;adc.c: 119: {
 16573  0018' B2C2               	btfsc	4034,1,c	;volatile
 16574  001A' D7FE               	goto	l1053
 16575                           
 16576                           ;adc.c: 120: }
 16577                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16578  001C' 50C4               	movf	4036,w,c	;volatile
 16579  001E' 6E00'              	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16580  0020' 6A00'              	clrf	??_ADC_GetConversion& (0+255),c
 16581  0022' 50C3               	movf	4035,w,c	;volatile
 16582  0024' 2419'              	addwf	??_ADC_GetConversion,w,c
 16583  0026' 6E17'              	movwf	?_ADC_GetConversion,c
 16584  0028' 0E00               	movlw	0
 16585  002A' 201A'              	addwfc	??_ADC_GetConversion+1,w,c
 16586  002C' 6E18'              	movwf	?_ADC_GetConversion+1,c
 16587  002E' 0012               	return	
 16588  0030'                    __end_of_ADC_GetConversion:
 16589                           	opt stack 0
 16590                           tosu	equ	0xFFF
 16591                           tosh	equ	0xFFE
 16592                           tosl	equ	0xFFD
 16593                           pclath	equ	0xFFA
 16594                           tblptru	equ	0xFF8
 16595                           tblptrh	equ	0xFF7
 16596                           tblptrl	equ	0xFF6
 16597                           tablat	equ	0xFF5
 16598                           prodh	equ	0xFF4
 16599                           prodl	equ	0xFF3
 16600                           intcon	equ	0xFF2
 16601                           intcon2	equ	0xFF1
 16602                           postinc0	equ	0xFEE
 16603                           wreg	equ	0xFE8
 16604                           indf1	equ	0xFE7
 16605                           postdec1	equ	0xFE5
 16606                           fsr1h	equ	0xFE2
 16607                           fsr1l	equ	0xFE1
 16608                           indf2	equ	0xFDF
 16609                           postinc2	equ	0xFDE
 16610                           postdec2	equ	0xFDD
 16611                           fsr2h	equ	0xFDA
 16612                           fsr2l	equ	0xFD9
 16613                           status	equ	0xFD8
 16614                           
 16615 ;; *************** function _INTERRUPT_InterruptManager *****************
 16616 ;; Defined at:
 16617 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16618 ;; Parameters:    Size  Location     Type
 16619 ;;		None
 16620 ;; Auto vars:     Size  Location     Type
 16621 ;;		None
 16622 ;; Return value:  Size  Location     Type
 16623 ;;                  1    wreg      void 
 16624 ;; Registers used:
 16625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16631 ;;      Params:         0       0       0       0       0       0       0
 16632 ;;      Locals:         0       0       0       0       0       0       0
 16633 ;;      Temps:         18       0       0       0       0       0       0
 16634 ;;      Totals:        18       0       0       0       0       0       0
 16635 ;;Total ram usage:       18 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    2
 16638 ;; This function calls:
 16639 ;;		_EUSART1_Receive_ISR
 16640 ;;		_EUSART1_Transmit_ISR
 16641 ;;		_MEMORY_ISR
 16642 ;;		_PIN_MANAGER_IOC
 16643 ;;		_TMR0_ISR
 16644 ;; This function is called by:
 16645 ;;		Interrupt level 2
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	intcode
 16650  0000'                    __pintcode:
 16651                           	opt stack 0
 16652  0000'                    _INTERRUPT_InterruptManager:
 16653                           	opt stack 21
 16654                           
 16655                           ;incstack = 0
 16656  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16657  0002' CFFA F005'         	movff	pclath,??_INTERRUPT_InterruptManager
 16658  0006' CFFB F006'         	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16659  000A' CFE9 F007'         	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16660  000E' CFEA F008'         	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16661  0012' CFE1 F009'         	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16662  0016' CFE2 F00A'         	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16663  001A' CFD9 F00B'         	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16664  001E' CFDA F00C'         	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16665  0022' CFF3 F00D'         	movff	prodl,??_INTERRUPT_InterruptManager+8
 16666  0026' CFF4 F00E'         	movff	prodh,??_INTERRUPT_InterruptManager+9
 16667  002A' CFF6 F00F'         	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16668  002E' CFF7 F010'         	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16669  0032' CFF8 F011'         	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16670  0036' CFF5 F012'         	movff	tablat,??_INTERRUPT_InterruptManager+13
 16671  003A' C000' F013'        	movff	btemp,??_INTERRUPT_InterruptManager+14
 16672  003E' C001' F014'        	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16673  0042' C002' F015'        	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16674  0046' C003' F016'        	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16675                           
 16676                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16677  004A' B6F2               	btfsc	intcon,3,c	;volatile
 16678  004C' A0F2               	btfss	intcon,0,c	;volatile
 16679  004E' D003               	goto	i2l778
 16680                           
 16681                           ;interrupt_manager.c: 61: {
 16682                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16683  0050' EC00' F000'        	call	_PIN_MANAGER_IOC	;wreg free
 16684                           
 16685                           ;interrupt_manager.c: 63: }
 16686  0054' D019               	goto	i2l787
 16687  0056'                    i2l778:
 16688                           
 16689                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16690  0056' BAF2               	btfsc	intcon,5,c	;volatile
 16691  0058' A4F2               	btfss	intcon,2,c	;volatile
 16692  005A' D003               	goto	i2l780
 16693                           
 16694                           ;interrupt_manager.c: 65: {
 16695                           ;interrupt_manager.c: 66: TMR0_ISR();
 16696  005C' EC00' F000'        	call	_TMR0_ISR	;wreg free
 16697                           
 16698                           ;interrupt_manager.c: 67: }
 16699  0060' D013               	goto	i2l787
 16700  0062'                    i2l780:
 16701                           
 16702                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16703  0062' ACF2               	btfss	intcon,6,c	;volatile
 16704  0064' D011               	goto	i2l787
 16705                           
 16706                           ;interrupt_manager.c: 69: {
 16707                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16708  0066' B8A0               	btfsc	4000,4,c	;volatile
 16709  0068' A8A1               	btfss	4001,4,c	;volatile
 16710  006A' D003               	goto	i2l783
 16711                           
 16712                           ;interrupt_manager.c: 71: {
 16713                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16714  006C' EC00' F000'        	call	_MEMORY_ISR	;wreg free
 16715                           
 16716                           ;interrupt_manager.c: 73: }
 16717  0070' D00B               	goto	i2l787
 16718  0072'                    i2l783:
 16719                           
 16720                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16721  0072' B89D               	btfsc	3997,4,c	;volatile
 16722  0074' A89E               	btfss	3998,4,c	;volatile
 16723  0076' D003               	goto	i2l785
 16724                           
 16725                           ;interrupt_manager.c: 75: {
 16726                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16727  0078' EC00' F000'        	call	_EUSART1_Transmit_ISR	;wreg free
 16728                           
 16729                           ;interrupt_manager.c: 77: }
 16730  007C' D005               	goto	i2l787
 16731  007E'                    i2l785:
 16732                           
 16733                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16734  007E' BA9D               	btfsc	3997,5,c	;volatile
 16735  0080' AA9E               	btfss	3998,5,c	;volatile
 16736  0082' D002               	goto	i2l787
 16737                           
 16738                           ;interrupt_manager.c: 79: {
 16739                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16740  0084' EC00' F000'        	call	_EUSART1_Receive_ISR	;wreg free
 16741  0088'                    i2l787:
 16742                           
 16743                           ;interrupt_manager.c: 87: else
 16744                           ;interrupt_manager.c: 88: {
 16745                           
 16746                           ;interrupt_manager.c: 85: }
 16747                           ;interrupt_manager.c: 86: }
 16748                           
 16749                           ;interrupt_manager.c: 82: else
 16750                           ;interrupt_manager.c: 83: {
 16751  0088' C016' F003'        	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16752  008C' C015' F002'        	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16753  0090' C014' F001'        	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16754  0094' C013' F000'        	movff	??_INTERRUPT_InterruptManager+14,btemp
 16755  0098' C012' FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16756  009C' C011' FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16757  00A0' C010' FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16758  00A4' C00F' FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16759  00A8' C00E' FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16760  00AC' C00D' FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16761  00B0' C00C' FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16762  00B4' C00B' FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16763  00B8' C00A' FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16764  00BC' C009' FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16765  00C0' C008' FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16766  00C4' C007' FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16767  00C8' C006' FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16768  00CC' C005' FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16769  00D0' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16770  00D2' 0011               	retfie		f
 16771  00D4'                    __end_of_INTERRUPT_InterruptManager:
 16772                           	opt stack 0
 16773                           tosu	equ	0xFFF
 16774                           tosh	equ	0xFFE
 16775                           tosl	equ	0xFFD
 16776                           pclatu	equ	0xFFB
 16777                           pclath	equ	0xFFA
 16778                           tblptru	equ	0xFF8
 16779                           tblptrh	equ	0xFF7
 16780                           tblptrl	equ	0xFF6
 16781                           tablat	equ	0xFF5
 16782                           prodh	equ	0xFF4
 16783                           prodl	equ	0xFF3
 16784                           intcon	equ	0xFF2
 16785                           intcon2	equ	0xFF1
 16786                           postinc0	equ	0xFEE
 16787                           fsr0h	equ	0xFEA
 16788                           fsr0l	equ	0xFE9
 16789                           wreg	equ	0xFE8
 16790                           indf1	equ	0xFE7
 16791                           postdec1	equ	0xFE5
 16792                           fsr1h	equ	0xFE2
 16793                           fsr1l	equ	0xFE1
 16794                           indf2	equ	0xFDF
 16795                           postinc2	equ	0xFDE
 16796                           postdec2	equ	0xFDD
 16797                           fsr2h	equ	0xFDA
 16798                           fsr2l	equ	0xFD9
 16799                           status	equ	0xFD8
 16800                           
 16801 ;; *************** function _TMR0_ISR *****************
 16802 ;; Defined at:
 16803 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16804 ;; Parameters:    Size  Location     Type
 16805 ;;		None
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;		None
 16808 ;; Return value:  Size  Location     Type
 16809 ;;                  1    wreg      void 
 16810 ;; Registers used:
 16811 ;;		wreg, status,2, status,0, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16817 ;;      Params:         0       0       0       0       0       0       0
 16818 ;;      Locals:         0       0       0       0       0       0       0
 16819 ;;      Temps:          0       0       0       0       0       0       0
 16820 ;;      Totals:         0       0       0       0       0       0       0
 16821 ;;Total ram usage:        0 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    1
 16824 ;; This function calls:
 16825 ;;		___lwmod
 16826 ;; This function is called by:
 16827 ;;		_INTERRUPT_InterruptManager
 16828 ;; This function uses a non-reentrant model
 16829 ;;
 16830                           
 16831                           	psect	text111
 16832  0000'                    __ptext111:
 16833                           	opt stack 0
 16834  0000'                    _TMR0_ISR:
 16835                           	opt stack 21
 16836                           
 16837                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16838                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16839                           
 16840                           ;incstack = 0
 16841  0000' 94F2               	bcf	intcon,2,c	;volatile
 16842                           
 16843                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16844  0002' 5001'              	movf	_timer0ReloadVal+1,w,c	;volatile
 16845  0004' 6ED7               	movwf	4055,c	;volatile
 16846                           
 16847                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16848  0006' C000' FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16849                           
 16850                           ;tmr0.c: 146: CountCallBack ++;
 16851  000A' 4A04'              	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16852  000C' 2A05'              	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16853                           
 16854                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16855  000E' C004' F000'        	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16856  0012' C005' F001'        	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16857  0016' 0E00               	movlw	0
 16858  0018' 6E03'              	movwf	___lwmod@divisor+1,c
 16859  001A' 0E14               	movlw	20
 16860  001C' 6E02'              	movwf	___lwmod@divisor,c
 16861  001E' EC00' F000'        	call	___lwmod	;wreg free
 16862  0022' 5000'              	movf	?___lwmod,w,c
 16863  0024' 1001'              	iorwf	?___lwmod+1,w,c
 16864  0026' A4D8               	btfss	status,2,c
 16865  0028' D003               	goto	i2l1009
 16866                           
 16867                           ;tmr0.c: 148: {
 16868                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16869  002A' 0E01               	movlw	1
 16870  002C' 0100               	movlb	0	; () banked
 16871  002E' 6F00'              	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16872  0030'                    i2l1009:
 16873                           
 16874                           ;tmr0.c: 150: }
 16875                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16876                           
 16877                           ; BSR set to: 0
 16878  0030' C004' F000'        	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16879  0034' C005' F001'        	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16880  0038' 0E00               	movlw	0
 16881  003A' 6E03'              	movwf	___lwmod@divisor+1,c
 16882  003C' 0E32               	movlw	50
 16883  003E' 6E02'              	movwf	___lwmod@divisor,c
 16884  0040' EC00' F000'        	call	___lwmod	;wreg free
 16885  0044' 5000'              	movf	?___lwmod,w,c
 16886  0046' 1001'              	iorwf	?___lwmod+1,w,c
 16887  0048' A4D8               	btfss	status,2,c
 16888  004A' D003               	goto	i2l1010
 16889                           
 16890                           ;tmr0.c: 153: {
 16891                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16892  004C' 0E01               	movlw	1
 16893  004E' 0100               	movlb	0	; () banked
 16894  0050' 6F00'              	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16895  0052'                    i2l1010:
 16896                           
 16897                           ;tmr0.c: 155: }
 16898                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16899                           
 16900                           ; BSR set to: 0
 16901  0052' C004' F000'        	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16902  0056' C005' F001'        	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16903  005A' 0E01               	movlw	1
 16904  005C' 6E03'              	movwf	___lwmod@divisor+1,c
 16905  005E' 0E2C               	movlw	44
 16906  0060' 6E02'              	movwf	___lwmod@divisor,c
 16907  0062' EC00' F000'        	call	___lwmod	;wreg free
 16908  0066' 5000'              	movf	?___lwmod,w,c
 16909  0068' 1001'              	iorwf	?___lwmod+1,w,c
 16910  006A' A4D8               	btfss	status,2,c
 16911  006C' D003               	goto	i2l1011
 16912                           
 16913                           ;tmr0.c: 157: {
 16914                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16915  006E' 0E01               	movlw	1
 16916  0070' 0100               	movlb	0	; () banked
 16917  0072' 6F00'              	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16918  0074'                    i2l1011:
 16919                           
 16920                           ;tmr0.c: 159: }
 16921                           ;tmr0.c: 161: CountCallBack %= 300;
 16922                           
 16923                           ; BSR set to: 0
 16924  0074' C004' F000'        	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16925  0078' C005' F001'        	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16926  007C' 0E01               	movlw	1
 16927  007E' 6E03'              	movwf	___lwmod@divisor+1,c
 16928  0080' 0E2C               	movlw	44
 16929  0082' 6E02'              	movwf	___lwmod@divisor,c
 16930  0084' EC00' F000'        	call	___lwmod	;wreg free
 16931  0088' C000' F004'        	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16932  008C' C001' F005'        	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16933  0090' 0012               	return		;funcret
 16934  0092'                    __end_of_TMR0_ISR:
 16935                           	opt stack 0
 16936                           tosu	equ	0xFFF
 16937                           tosh	equ	0xFFE
 16938                           tosl	equ	0xFFD
 16939                           pclatu	equ	0xFFB
 16940                           pclath	equ	0xFFA
 16941                           tblptru	equ	0xFF8
 16942                           tblptrh	equ	0xFF7
 16943                           tblptrl	equ	0xFF6
 16944                           tablat	equ	0xFF5
 16945                           prodh	equ	0xFF4
 16946                           prodl	equ	0xFF3
 16947                           intcon	equ	0xFF2
 16948                           intcon2	equ	0xFF1
 16949                           postinc0	equ	0xFEE
 16950                           fsr0h	equ	0xFEA
 16951                           fsr0l	equ	0xFE9
 16952                           wreg	equ	0xFE8
 16953                           indf1	equ	0xFE7
 16954                           postdec1	equ	0xFE5
 16955                           fsr1h	equ	0xFE2
 16956                           fsr1l	equ	0xFE1
 16957                           indf2	equ	0xFDF
 16958                           postinc2	equ	0xFDE
 16959                           postdec2	equ	0xFDD
 16960                           fsr2h	equ	0xFDA
 16961                           fsr2l	equ	0xFD9
 16962                           status	equ	0xFD8
 16963                           
 16964 ;; *************** function ___lwmod *****************
 16965 ;; Defined at:
 16966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16967 ;; Parameters:    Size  Location     Type
 16968 ;;  dividend        2    0[COMRAM] unsigned int 
 16969 ;;  divisor         2    2[COMRAM] unsigned int 
 16970 ;; Auto vars:     Size  Location     Type
 16971 ;;  counter         1    4[COMRAM] unsigned char 
 16972 ;; Return value:  Size  Location     Type
 16973 ;;                  2    0[COMRAM] unsigned int 
 16974 ;; Registers used:
 16975 ;;		wreg, status,2, status,0
 16976 ;; Tracked objects:
 16977 ;;		On entry : 0/0
 16978 ;;		On exit  : 0/0
 16979 ;;		Unchanged: 0/0
 16980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16981 ;;      Params:         4       0       0       0       0       0       0
 16982 ;;      Locals:         1       0       0       0       0       0       0
 16983 ;;      Temps:          0       0       0       0       0       0       0
 16984 ;;      Totals:         5       0       0       0       0       0       0
 16985 ;;Total ram usage:        5 bytes
 16986 ;; Hardware stack levels used:    1
 16987 ;; This function calls:
 16988 ;;		Nothing
 16989 ;; This function is called by:
 16990 ;;		_TMR0_ISR
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text112
 16995  0000'                    __ptext112:
 16996                           	opt stack 0
 16997  0000'                    ___lwmod:
 16998                           	opt stack 21
 16999                           
 17000                           ;incstack = 0
 17001  0000' 5002'              	movf	___lwmod@divisor,w,c
 17002  0002' 1003'              	iorwf	___lwmod@divisor+1,w,c
 17003  0004' B4D8               	btfsc	status,2,c
 17004  0006' D018               	goto	i2l1867
 17005  0008' 0E01               	movlw	1
 17006  000A' 6E04'              	movwf	___lwmod@counter,c
 17007  000C' D004               	goto	i2l1862
 17008  000E' 90D8               	bcf	status,0,c
 17009  0010' 3602'              	rlcf	___lwmod@divisor,f,c
 17010  0012' 3603'              	rlcf	___lwmod@divisor+1,f,c
 17011  0014' 2A04'              	incf	___lwmod@counter,f,c
 17012  0016'                    i2l1862:
 17013  0016' AE03'              	btfss	___lwmod@divisor+1,7,c
 17014  0018' D7FA               	goto	i2l1863
 17015  001A'                    i2u514_40:
 17016  001A' 5002'              	movf	___lwmod@divisor,w,c
 17017  001C' 5C00'              	subwf	___lwmod@dividend,w,c
 17018  001E' 5003'              	movf	___lwmod@divisor+1,w,c
 17019  0020' 5801'              	subwfb	___lwmod@dividend+1,w,c
 17020  0022' A0D8               	btfss	status,0,c
 17021  0024' D004               	goto	i2l1866
 17022  0026' 5002'              	movf	___lwmod@divisor,w,c
 17023  0028' 5E00'              	subwf	___lwmod@dividend,f,c
 17024  002A' 5003'              	movf	___lwmod@divisor+1,w,c
 17025  002C' 5A01'              	subwfb	___lwmod@dividend+1,f,c
 17026  002E'                    i2l1866:
 17027  002E' 90D8               	bcf	status,0,c
 17028  0030' 3203'              	rrcf	___lwmod@divisor+1,f,c
 17029  0032' 3202'              	rrcf	___lwmod@divisor,f,c
 17030  0034' 2E04'              	decfsz	___lwmod@counter,f,c
 17031  0036' D7F1               	goto	i2u514_40
 17032  0038'                    i2l1867:
 17033  0038' C000' F000'        	movff	___lwmod@dividend,?___lwmod
 17034  003C' C001' F001'        	movff	___lwmod@dividend+1,?___lwmod+1
 17035  0040' 0012               	return		;funcret
 17036  0042'                    __end_of___lwmod:
 17037                           	opt stack 0
 17038                           tosu	equ	0xFFF
 17039                           tosh	equ	0xFFE
 17040                           tosl	equ	0xFFD
 17041                           pclatu	equ	0xFFB
 17042                           pclath	equ	0xFFA
 17043                           tblptru	equ	0xFF8
 17044                           tblptrh	equ	0xFF7
 17045                           tblptrl	equ	0xFF6
 17046                           tablat	equ	0xFF5
 17047                           prodh	equ	0xFF4
 17048                           prodl	equ	0xFF3
 17049                           intcon	equ	0xFF2
 17050                           intcon2	equ	0xFF1
 17051                           postinc0	equ	0xFEE
 17052                           fsr0h	equ	0xFEA
 17053                           fsr0l	equ	0xFE9
 17054                           wreg	equ	0xFE8
 17055                           indf1	equ	0xFE7
 17056                           postdec1	equ	0xFE5
 17057                           fsr1h	equ	0xFE2
 17058                           fsr1l	equ	0xFE1
 17059                           indf2	equ	0xFDF
 17060                           postinc2	equ	0xFDE
 17061                           postdec2	equ	0xFDD
 17062                           fsr2h	equ	0xFDA
 17063                           fsr2l	equ	0xFD9
 17064                           status	equ	0xFD8
 17065                           
 17066 ;; *************** function _PIN_MANAGER_IOC *****************
 17067 ;; Defined at:
 17068 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17069 ;; Parameters:    Size  Location     Type
 17070 ;;		None
 17071 ;; Auto vars:     Size  Location     Type
 17072 ;;		None
 17073 ;; Return value:  Size  Location     Type
 17074 ;;                  1    wreg      void 
 17075 ;; Registers used:
 17076 ;;		None
 17077 ;; Tracked objects:
 17078 ;;		On entry : 0/0
 17079 ;;		On exit  : 0/0
 17080 ;;		Unchanged: 0/0
 17081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17082 ;;      Params:         0       0       0       0       0       0       0
 17083 ;;      Locals:         0       0       0       0       0       0       0
 17084 ;;      Temps:          0       0       0       0       0       0       0
 17085 ;;      Totals:         0       0       0       0       0       0       0
 17086 ;;Total ram usage:        0 bytes
 17087 ;; Hardware stack levels used:    1
 17088 ;; This function calls:
 17089 ;;		Nothing
 17090 ;; This function is called by:
 17091 ;;		_INTERRUPT_InterruptManager
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text113
 17096  0000'                    __ptext113:
 17097                           	opt stack 0
 17098  0000'                    _PIN_MANAGER_IOC:
 17099                           	opt stack 22
 17100                           
 17101                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17102                           
 17103                           ;incstack = 0
 17104  0000' 90F2               	bcf	intcon,0,c	;volatile
 17105  0002' 0012               	return		;funcret
 17106  0004'                    __end_of_PIN_MANAGER_IOC:
 17107                           	opt stack 0
 17108                           tosu	equ	0xFFF
 17109                           tosh	equ	0xFFE
 17110                           tosl	equ	0xFFD
 17111                           pclatu	equ	0xFFB
 17112                           pclath	equ	0xFFA
 17113                           tblptru	equ	0xFF8
 17114                           tblptrh	equ	0xFF7
 17115                           tblptrl	equ	0xFF6
 17116                           tablat	equ	0xFF5
 17117                           prodh	equ	0xFF4
 17118                           prodl	equ	0xFF3
 17119                           intcon	equ	0xFF2
 17120                           intcon2	equ	0xFF1
 17121                           postinc0	equ	0xFEE
 17122                           fsr0h	equ	0xFEA
 17123                           fsr0l	equ	0xFE9
 17124                           wreg	equ	0xFE8
 17125                           indf1	equ	0xFE7
 17126                           postdec1	equ	0xFE5
 17127                           fsr1h	equ	0xFE2
 17128                           fsr1l	equ	0xFE1
 17129                           indf2	equ	0xFDF
 17130                           postinc2	equ	0xFDE
 17131                           postdec2	equ	0xFDD
 17132                           fsr2h	equ	0xFDA
 17133                           fsr2l	equ	0xFD9
 17134                           status	equ	0xFD8
 17135                           
 17136 ;; *************** function _MEMORY_ISR *****************
 17137 ;; Defined at:
 17138 ;;		line 206 in file "mcc_generated_files/memory.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;		None
 17141 ;; Auto vars:     Size  Location     Type
 17142 ;;		None
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  1    wreg      void 
 17145 ;; Registers used:
 17146 ;;		None
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17152 ;;      Params:         0       0       0       0       0       0       0
 17153 ;;      Locals:         0       0       0       0       0       0       0
 17154 ;;      Temps:          0       0       0       0       0       0       0
 17155 ;;      Totals:         0       0       0       0       0       0       0
 17156 ;;Total ram usage:        0 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; This function calls:
 17159 ;;		Nothing
 17160 ;; This function is called by:
 17161 ;;		_INTERRUPT_InterruptManager
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           	psect	text114
 17166  0000'                    __ptext114:
 17167                           	opt stack 0
 17168  0000'                    _MEMORY_ISR:
 17169                           	opt stack 22
 17170                           
 17171                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17172                           
 17173                           ;incstack = 0
 17174  0000' 98A1               	bcf	4001,4,c	;volatile
 17175  0002' 0012               	return		;funcret
 17176  0004'                    __end_of_MEMORY_ISR:
 17177                           	opt stack 0
 17178                           tosu	equ	0xFFF
 17179                           tosh	equ	0xFFE
 17180                           tosl	equ	0xFFD
 17181                           pclatu	equ	0xFFB
 17182                           pclath	equ	0xFFA
 17183                           tblptru	equ	0xFF8
 17184                           tblptrh	equ	0xFF7
 17185                           tblptrl	equ	0xFF6
 17186                           tablat	equ	0xFF5
 17187                           prodh	equ	0xFF4
 17188                           prodl	equ	0xFF3
 17189                           intcon	equ	0xFF2
 17190                           intcon2	equ	0xFF1
 17191                           postinc0	equ	0xFEE
 17192                           fsr0h	equ	0xFEA
 17193                           fsr0l	equ	0xFE9
 17194                           wreg	equ	0xFE8
 17195                           indf1	equ	0xFE7
 17196                           postdec1	equ	0xFE5
 17197                           fsr1h	equ	0xFE2
 17198                           fsr1l	equ	0xFE1
 17199                           indf2	equ	0xFDF
 17200                           postinc2	equ	0xFDE
 17201                           postdec2	equ	0xFDD
 17202                           fsr2h	equ	0xFDA
 17203                           fsr2l	equ	0xFD9
 17204                           status	equ	0xFD8
 17205                           
 17206 ;; *************** function _EUSART1_Transmit_ISR *****************
 17207 ;; Defined at:
 17208 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17209 ;; Parameters:    Size  Location     Type
 17210 ;;		None
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;		None
 17213 ;; Return value:  Size  Location     Type
 17214 ;;                  1    wreg      void 
 17215 ;; Registers used:
 17216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17217 ;; Tracked objects:
 17218 ;;		On entry : 0/0
 17219 ;;		On exit  : 0/0
 17220 ;;		Unchanged: 0/0
 17221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17222 ;;      Params:         0       0       0       0       0       0       0
 17223 ;;      Locals:         0       0       0       0       0       0       0
 17224 ;;      Temps:          0       0       0       0       0       0       0
 17225 ;;      Totals:         0       0       0       0       0       0       0
 17226 ;;Total ram usage:        0 bytes
 17227 ;; Hardware stack levels used:    1
 17228 ;; This function calls:
 17229 ;;		Nothing
 17230 ;; This function is called by:
 17231 ;;		_INTERRUPT_InterruptManager
 17232 ;; This function uses a non-reentrant model
 17233 ;;
 17234                           
 17235                           	psect	text115
 17236  0000'                    __ptext115:
 17237                           	opt stack 0
 17238  0000'                    _EUSART1_Transmit_ISR:
 17239                           	opt stack 22
 17240                           
 17241                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17242                           
 17243                           ;incstack = 0
 17244  0000' 0E46               	movlw	70
 17245  0002' 0100               	movlb	0	; () banked
 17246  0004' 6100'              	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17247  0006' D012               	goto	i2l849
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;eusart1.c: 186: {
 17251                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17252  0008' 5008'              	movf	_eusart1TxTail,w,c	;volatile
 17253  000A' 0D01               	mullw	1
 17254  000C' 0E00'              	movlw	low _eusart1TxBuffer
 17255  000E' 24F3               	addwf	prodl,w,c
 17256  0010' 6ED9               	movwf	fsr2l,c
 17257  0012' 0E00'              	movlw	high _eusart1TxBuffer
 17258  0014' 20F4               	addwfc	prodh,w,c
 17259  0016' 6EDA               	movwf	fsr2h,c
 17260  0018' 50DF               	movf	indf2,w,c
 17261  001A' 6EAD               	movwf	4013,c	;volatile
 17262                           
 17263                           ; BSR set to: 0
 17264  001C' 2A08'              	incf	_eusart1TxTail,f,c	;volatile
 17265                           
 17266                           ; BSR set to: 0
 17267                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17268  001E' 0E45               	movlw	69
 17269  0020' 6408'              	cpfsgt	_eusart1TxTail,c	;volatile
 17270  0022' D002               	goto	i2l850
 17271                           
 17272                           ; BSR set to: 0
 17273                           ;eusart1.c: 189: {
 17274                           ;eusart1.c: 190: eusart1TxTail = 0;
 17275  0024' 0E00               	movlw	0
 17276  0026' 6E08'              	movwf	_eusart1TxTail,c	;volatile
 17277  0028'                    i2l850:
 17278                           
 17279                           ; BSR set to: 0
 17280                           ;eusart1.c: 191: }
 17281                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17282                           
 17283                           ; BSR set to: 0
 17284  0028' 2B00'              	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17285                           
 17286                           ;eusart1.c: 193: }
 17287  002A' 0012               	return	
 17288  002C'                    i2l849:
 17289                           
 17290                           ; BSR set to: 0
 17291                           ;eusart1.c: 194: else
 17292                           ;eusart1.c: 195: {
 17293                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17294  002C' 989D               	bcf	3997,4,c	;volatile
 17295                           
 17296                           ; BSR set to: 0
 17297                           ;eusart1.c: 197: eusart1TxTail = 0;
 17298  002E' 0E00               	movlw	0
 17299  0030' 6E08'              	movwf	_eusart1TxTail,c	;volatile
 17300                           
 17301                           ;eusart1.c: 198: eusart1TxHead = 0;
 17302  0032' 0E00               	movlw	0
 17303  0034' 6E09'              	movwf	_eusart1TxHead,c	;volatile
 17304  0036' 0012               	return	
 17305  0038'                    __end_of_EUSART1_Transmit_ISR:
 17306                           	opt stack 0
 17307                           tosu	equ	0xFFF
 17308                           tosh	equ	0xFFE
 17309                           tosl	equ	0xFFD
 17310                           pclatu	equ	0xFFB
 17311                           pclath	equ	0xFFA
 17312                           tblptru	equ	0xFF8
 17313                           tblptrh	equ	0xFF7
 17314                           tblptrl	equ	0xFF6
 17315                           tablat	equ	0xFF5
 17316                           prodh	equ	0xFF4
 17317                           prodl	equ	0xFF3
 17318                           intcon	equ	0xFF2
 17319                           intcon2	equ	0xFF1
 17320                           postinc0	equ	0xFEE
 17321                           fsr0h	equ	0xFEA
 17322                           fsr0l	equ	0xFE9
 17323                           wreg	equ	0xFE8
 17324                           indf1	equ	0xFE7
 17325                           postdec1	equ	0xFE5
 17326                           fsr1h	equ	0xFE2
 17327                           fsr1l	equ	0xFE1
 17328                           indf2	equ	0xFDF
 17329                           postinc2	equ	0xFDE
 17330                           postdec2	equ	0xFDD
 17331                           fsr2h	equ	0xFDA
 17332                           fsr2l	equ	0xFD9
 17333                           status	equ	0xFD8
 17334                           
 17335 ;; *************** function _EUSART1_Receive_ISR *****************
 17336 ;; Defined at:
 17337 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17338 ;; Parameters:    Size  Location     Type
 17339 ;;		None
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;		None
 17342 ;; Return value:  Size  Location     Type
 17343 ;;                  1    wreg      void 
 17344 ;; Registers used:
 17345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17346 ;; Tracked objects:
 17347 ;;		On entry : 0/0
 17348 ;;		On exit  : 0/0
 17349 ;;		Unchanged: 0/0
 17350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17351 ;;      Params:         0       0       0       0       0       0       0
 17352 ;;      Locals:         0       0       0       0       0       0       0
 17353 ;;      Temps:          0       0       0       0       0       0       0
 17354 ;;      Totals:         0       0       0       0       0       0       0
 17355 ;;Total ram usage:        0 bytes
 17356 ;; Hardware stack levels used:    1
 17357 ;; This function calls:
 17358 ;;		Nothing
 17359 ;; This function is called by:
 17360 ;;		_INTERRUPT_InterruptManager
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           	psect	text116
 17365  0000'                    __ptext116:
 17366                           	opt stack 0
 17367  0000'                    _EUSART1_Receive_ISR:
 17368                           	opt stack 22
 17369                           
 17370                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;incstack = 0
 17374  0000' A2AB               	btfss	4011,1,c	;volatile
 17375  0002' D002               	goto	i2l855
 17376                           
 17377                           ;eusart1.c: 206: {
 17378                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17379  0004' 98AB               	bcf	4011,4,c	;volatile
 17380                           
 17381                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17382  0006' 88AB               	bsf	4011,4,c	;volatile
 17383  0008'                    i2l855:
 17384                           
 17385                           ;eusart1.c: 210: }
 17386                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17387  0008' 5007'              	movf	_eusart1RxHead,w,c	;volatile
 17388  000A' 0D01               	mullw	1
 17389  000C' 0E00'              	movlw	low _eusart1RxBuffer
 17390  000E' 24F3               	addwf	prodl,w,c
 17391  0010' 6ED9               	movwf	fsr2l,c
 17392  0012' 0E00'              	movlw	high _eusart1RxBuffer
 17393  0014' 20F4               	addwfc	prodh,w,c
 17394  0016' 6EDA               	movwf	fsr2h,c
 17395  0018' CFAE FFDF          	movff	4014,indf2	;volatile
 17396  001C' 2A07'              	incf	_eusart1RxHead,f,c	;volatile
 17397                           
 17398                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17399  001E' 0E27               	movlw	39
 17400  0020' 6407'              	cpfsgt	_eusart1RxHead,c	;volatile
 17401  0022' D002               	goto	i2l856
 17402                           
 17403                           ;eusart1.c: 217: {
 17404                           ;eusart1.c: 218: eusart1RxHead = 0;
 17405  0024' 0E00               	movlw	0
 17406  0026' 6E07'              	movwf	_eusart1RxHead,c	;volatile
 17407  0028'                    i2l856:
 17408                           
 17409                           ;eusart1.c: 219: }
 17410                           ;eusart1.c: 220: eusart1RxCount++;
 17411  0028' 0100               	movlb	0	; () banked
 17412  002A' 2B00'              	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17413                           
 17414                           ; BSR set to: 0
 17415  002C' 0012               	return		;funcret
 17416  002E'                    __end_of_EUSART1_Receive_ISR:
 17417                           	opt stack 0
 17418                           tosu	equ	0xFFF
 17419                           tosh	equ	0xFFE
 17420                           tosl	equ	0xFFD
 17421                           pclatu	equ	0xFFB
 17422                           pclath	equ	0xFFA
 17423                           tblptru	equ	0xFF8
 17424                           tblptrh	equ	0xFF7
 17425                           tblptrl	equ	0xFF6
 17426                           tablat	equ	0xFF5
 17427                           prodh	equ	0xFF4
 17428                           prodl	equ	0xFF3
 17429                           intcon	equ	0xFF2
 17430                           intcon2	equ	0xFF1
 17431                           postinc0	equ	0xFEE
 17432                           fsr0h	equ	0xFEA
 17433                           fsr0l	equ	0xFE9
 17434                           wreg	equ	0xFE8
 17435                           indf1	equ	0xFE7
 17436                           postdec1	equ	0xFE5
 17437                           fsr1h	equ	0xFE2
 17438                           fsr1l	equ	0xFE1
 17439                           indf2	equ	0xFDF
 17440                           postinc2	equ	0xFDE
 17441                           postdec2	equ	0xFDD
 17442                           fsr2h	equ	0xFDA
 17443                           fsr2l	equ	0xFD9
 17444                           status	equ	0xFD8
 17445                           tosu	equ	0xFFF
 17446                           tosh	equ	0xFFE
 17447                           tosl	equ	0xFFD
 17448                           pclatu	equ	0xFFB
 17449                           pclath	equ	0xFFA
 17450                           tblptru	equ	0xFF8
 17451                           tblptrh	equ	0xFF7
 17452                           tblptrl	equ	0xFF6
 17453                           tablat	equ	0xFF5
 17454                           prodh	equ	0xFF4
 17455                           prodl	equ	0xFF3
 17456                           intcon	equ	0xFF2
 17457                           intcon2	equ	0xFF1
 17458                           postinc0	equ	0xFEE
 17459                           fsr0h	equ	0xFEA
 17460                           fsr0l	equ	0xFE9
 17461                           wreg	equ	0xFE8
 17462                           indf1	equ	0xFE7
 17463                           postdec1	equ	0xFE5
 17464                           fsr1h	equ	0xFE2
 17465                           fsr1l	equ	0xFE1
 17466                           indf2	equ	0xFDF
 17467                           postinc2	equ	0xFDE
 17468                           postdec2	equ	0xFDD
 17469                           fsr2h	equ	0xFDA
 17470                           fsr2l	equ	0xFD9
 17471                           status	equ	0xFD8
 17472                           
 17473                           	psect	text117
 17474  0000'                    __ptext117:
 17475                           	opt stack 0
 17476                           tosu	equ	0xFFF
 17477                           tosh	equ	0xFFE
 17478                           tosl	equ	0xFFD
 17479                           pclatu	equ	0xFFB
 17480                           pclath	equ	0xFFA
 17481                           tblptru	equ	0xFF8
 17482                           tblptrh	equ	0xFF7
 17483                           tblptrl	equ	0xFF6
 17484                           tablat	equ	0xFF5
 17485                           prodh	equ	0xFF4
 17486                           prodl	equ	0xFF3
 17487                           intcon	equ	0xFF2
 17488                           intcon2	equ	0xFF1
 17489                           postinc0	equ	0xFEE
 17490                           fsr0h	equ	0xFEA
 17491                           fsr0l	equ	0xFE9
 17492                           wreg	equ	0xFE8
 17493                           indf1	equ	0xFE7
 17494                           postdec1	equ	0xFE5
 17495                           fsr1h	equ	0xFE2
 17496                           fsr1l	equ	0xFE1
 17497                           indf2	equ	0xFDF
 17498                           postinc2	equ	0xFDE
 17499                           postdec2	equ	0xFDD
 17500                           fsr2h	equ	0xFDA
 17501                           fsr2l	equ	0xFD9
 17502                           status	equ	0xFD8
 17503                           
 17504                           	psect	rparam
 17505  0000                     tosu	equ	0xFFF
 17506                           tosh	equ	0xFFE
 17507                           tosl	equ	0xFFD
 17508                           pclatu	equ	0xFFB
 17509                           pclath	equ	0xFFA
 17510                           tblptru	equ	0xFF8
 17511                           tblptrh	equ	0xFF7
 17512                           tblptrl	equ	0xFF6
 17513                           tablat	equ	0xFF5
 17514                           prodh	equ	0xFF4
 17515                           prodl	equ	0xFF3
 17516                           intcon	equ	0xFF2
 17517                           intcon2	equ	0xFF1
 17518                           postinc0	equ	0xFEE
 17519                           fsr0h	equ	0xFEA
 17520                           fsr0l	equ	0xFE9
 17521                           wreg	equ	0xFE8
 17522                           indf1	equ	0xFE7
 17523                           postdec1	equ	0xFE5
 17524                           fsr1h	equ	0xFE2
 17525                           fsr1l	equ	0xFE1
 17526                           indf2	equ	0xFDF
 17527                           postinc2	equ	0xFDE
 17528                           postdec2	equ	0xFDD
 17529                           fsr2h	equ	0xFDA
 17530                           fsr2l	equ	0xFD9
 17531                           status	equ	0xFD8
 17532                           
 17533                           	psect	temp
 17534  0000'                    btemp:
 17535                           	opt stack 0
 17536  0000'                    	ds	1
 17537  0000                     int$flags	set	btemp
 17538  0000                     wtemp6	set	btemp+1
 17539                           tosu	equ	0xFFF
 17540                           tosh	equ	0xFFE
 17541                           tosl	equ	0xFFD
 17542                           pclatu	equ	0xFFB
 17543                           pclath	equ	0xFFA
 17544                           tblptru	equ	0xFF8
 17545                           tblptrh	equ	0xFF7
 17546                           tblptrl	equ	0xFF6
 17547                           tablat	equ	0xFF5
 17548                           prodh	equ	0xFF4
 17549                           prodl	equ	0xFF3
 17550                           intcon	equ	0xFF2
 17551                           intcon2	equ	0xFF1
 17552                           postinc0	equ	0xFEE
 17553                           fsr0h	equ	0xFEA
 17554                           fsr0l	equ	0xFE9
 17555                           wreg	equ	0xFE8
 17556                           indf1	equ	0xFE7
 17557                           postdec1	equ	0xFE5
 17558                           fsr1h	equ	0xFE2
 17559                           fsr1l	equ	0xFE1
 17560                           indf2	equ	0xFDF
 17561                           postinc2	equ	0xFDE
 17562                           postdec2	equ	0xFDD
 17563                           fsr2h	equ	0xFDA
 17564                           fsr2l	equ	0xFD9
 17565                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    132
    Data        21
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     96     159
    BANK1           256      9     203
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 9
		 -> GetIntFromUartData@dataRegArr(BANK0[9]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _InitRxMessageParams->_ZeroArray
    _UpdateTxFreq->_SWSPI_send_word
    _UpdateRxFreq->_SWSPI_send_word
    _SynthReadData->_ZeroArray
    _SetSynthTxOper->_SendAckMessage
    _SetSynthRxOper->_SendAckMessage
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _DacSetValue->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _GroupControlMcu->_testLeds
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _ReadIntFromEeprom->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupFlashMemory
    _GroupFlashMemory->_FlashReadUart
    _GetIntFromUartData->_strtol
    _InitSystemApplicationManagers->_DacInit
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  307578
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  162861
                                              2 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2359
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   60989
                                             46 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                     _SetSynthRxOper
                     _SetSynthTxOper
                      _SynthReadData
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   20662
                                             38 BANK0      6     4      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   20662
                                             38 BANK0      6     4      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       30    28      2    5565
                                             35 COMRAM     3     1      2
                                              0 BANK0     27    27      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _SetSynthTxOper                                       0     0      0    7064
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SetSynthRxOper                                       0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2    9523
                                             46 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      2     0      2       0
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     13    13      0    5323
                                              0 BANK0     13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   29138
                                             46 COMRAM     1     1      0
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13378
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6700
                                             35 COMRAM     4     4      0
                                              0 BANK0      9     9      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8998
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   23044
                                             46 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          8     6      2   22917
                                             38 BANK0      8     6      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2159
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     428
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  21    17      4    5350
                                              6 BANK0     21    17      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   13377
                                             46 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6707
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   20373
                                             46 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6729
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6791
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6729
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6639
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2359
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   18069
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        1     1      0    9042
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0    9026
                                             38 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8518
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   13     9      4     313
                                             25 COMRAM    13     9      4
                         _EepromRead
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             83 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetMcuFwVersion
     _GroupSynthesizers *
       _PLLUartInitialize
       _SetSynthRxOper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetSynthTxOper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      9      CB       6       79.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     60      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B1       9        0.0%
DATA                 0      0     1B1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 14 13:22:57 2018

             __size_of_SendSystemStartAck 000000                         ??_GetMcuFwVersion 000023  
              __end_of_keepAliveSignalLed 000018                              ___altoft@exp 00002F  
                _eusart1TxBufferRemaining 000002                        readUartMessage@idx 000006  
                         _GroupControlMcu 000000               __end_of_keepAliveSignalUart 00000C  
                           ___altoft@sign 000030                __size_of_FLASH_IsWriteDone 000000  
                                      l54 000018                  GetIntFromUartData@retVal 000014  
                     __end_of_BlinkOkLeds 00005E                           _SWSPI_send_word 000000  
                     ___wmul@multiplicand 000019                           _timer0ReloadVal 000000  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 000023                              ___ftadd@exp2 000022  
                            ___ftadd@sign 000021                               ?_MEMORY_ISR 000000  
                                     l120 0000F6                                       l121 00001C  
                                     l201 000060                                       l210 0000C4  
                                     l203 000078                                       l300 0000EE  
                                     l116 000024                                       l212 00012E  
                                     l205 000096                                       l222 000020  
                                     l214 000166                                       l223 00000A  
                                     l311 0000D8                                       l207 00009C  
                                     l216 00016C                                       l321 000270  
                                     l313 000144                                       l209 000108  
                                     l306 000218                                       l314 000206  
                                     l331 000390                                       l307 00017C  
                                     l332 0003A6                                       l324 000288  
                                     l316 0001B6                                       l421 00007A  
                                     l325 0003AC                                       l309 0000C8  
                                     l422 000090                                       l326 0002A4  
                                     l318 0001C8                                       l190 0001C6  
                                     l327 0002BC                                       l191 000008  
                                     l329 00033A                                       l505 000034  
                                     l194 000016                                       l195 000042  
                                     l614 00002C                                       l606 000018  
                                     l615 000036                                       l607 000022  
                                     l199 000048                                       l704 00000C  
                                     l625 000040                                       l705 000004  
                                     l626 000004                                       l299 0000D0  
                                     l643 00002C                                       l635 000018  
                                     l627 00000E                                       l571 00003C  
                                     l644 000036                                       l636 000022  
                                     l492 000042                                       l581 00003C  
                                     l709 000008                                       l582 000008  
                                     l662 00002C                                       l830 000014  
                                     l583 000022                                       l591 00007A  
                                     l575 000096                                       l663 000004  
                                     l479 00001A                                       l487 000042  
                                     l584 00002C                                       l592 000086  
                                     l672 000018                                       l664 00000E  
                                     l832 00003A                                       l673 000022  
                                     l497 000020                                       l498 00002A  
                                     l683 00002C                                       l843 000014  
                                     l940 0000BA                                       l596 000040  
                                     l684 000004                                       l844 000038  
                                     l941 000072                                       l597 000004  
                                     l589 00004C                                       l693 000018  
                                     l685 00000E                                       l845 000036  
                                     l598 00000E                                       l694 000022  
                                     l943 000092                                       l951 000024  
                                     l944 000094                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 000008  
                       ??_Make32bitsArray 00001D                                _SYNTH_REGS 000001  
                        PLLInitialize@idx 00002E                                       _abs 000000  
                                     _exp 000000                                       _log 000000  
                                     _pow 000000                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 00002D            ?_InitSystemApplicationManagers 000000  
                            __CFG_LVP$OFF 000000                __end_of_FlashReadCondition 000118  
                            ___ftdiv@cntr 000003                              ___ftdiv@sign 000008  
                          ?_ZeroBitsArray 00001F                                      l1202 000064  
                                    l1210 000048                                      l1211 000056  
                                    l1203 000004                                      ?_abs 000017  
                                    l2100 000058                                      l1220 000012  
                                    l1053 000018                                      l2101 0000D4  
                                    l1301 000018                                      l1205 000012  
                                    l2110 00001A                                      l1206 000020  
                                    l1303 000056                                      l2031 0000AC  
                                    l1207 00002E                                      l2112 000060  
                                    l1312 00004C                                      l2040 0000E6  
                                    l1208 00003C                                      l1216 00002A  
                                    l1209 000042                                      l1217 000006  
                                    l1225 000012                                      l2106 000028  
                                    l2114 00008E                                      l1306 000030  
                                    l1226 000004                                      l2115 000082  
                                    l2123 000020                                      l2051 000010  
                                    l2043 0000F8                                      l2027 000040  
                                    l1307 000006                                      l1219 00000C  
                                    l2044 000164                                      l2133 00001E  
                                    l2037 0000BC                                      l2029 000058  
                                    l2150 00001C                                      l2046 000188  
                                    l2038 0000CC                                      l1174 000010  
                                    l2047 0001C4                                      l1175 000004  
                                    l2152 00003C                                      l1272 00002E  
                                    l2128 000016                                      l1184 00001E  
                                    l1273 000012                                      l1177 00000A  
                                    l1185 000004                                      l1193 00002E  
                                    l2090 0000BA                                      l2138 000016  
                                    l1194 000004                                      l2091 0001E4  
                                    l1291 000040                                      l1187 00000A  
                                    l1435 000012                                      l2092 0001BA  
                                    l1292 000002                                      l1284 000044  
                                    l1188 000018                                      l1196 000012  
                                    l1436 00002A                                      l1533 000030  
                                    l1373 00003A                                      l1197 000020  
                                    l2158 0000C2                                      l1534 000024  
                                    l2086 00001A                                      l1294 000006  
                                    l1438 000050                                      l1703 0000E4  
                                    l2159 000042                                      l1295 00000A  
                                    l1439 000044                                      l1720 00013C  
                                    l2088 000052                                      l1296 00000E  
                                    l1456 000010                                      l1800 000022  
                                    l1721 000158                                      l2097 00003E  
                                    l2089 00008A                                      l1297 00003C  
                                    l1457 000024                                      l1730 000090  
                                    l1722 000188                                      l2098 000030  
                                    l1810 000012                                      l1731 0000B6  
                                    l1803 000062                                      l1820 000012  
                                    l1644 000014                                      l1708 0000DA  
                                    l1804 000070                                      l1821 000006  
                                    l1717 000118                                      l1709 0000D0  
                                    l1813 000046                                      l1670 00007A  
                                    l1718 00010E                                      l1742 00002A  
                                    l1814 000054                                      l1494 00001E  
                                    l1663 000028                                      l1727 00002A  
                                    l1735 000030                                      l1664 00001E  
                                    l1744 000052                                      l1736 000060  
                                    l1729 000052                                      l1753 000016  
                                    l1745 000084                                      l1809 00001E  
                                    l1666 00005C                                      l1746 000094  
                                    l1667 000046                                      l1771 0000CA  
                                    l1763 00002E                                      l1748 0000AC  
                                    l1772 0000BE                                      l1669 000084  
                                    l1749 0000BC                                      l1765 0000A6  
                                    l1694 000054                                      l1774 0000E6  
                                    l1766 000096                                      l1759 000018  
                                    l4343 00008C                                      l1698 00007E  
                                    l1891 000062                                      l1892 0000E8  
                                    l1876 00001A                                      l1893 0000C6  
                                    l1877 00000A                                      l1894 00016E  
                                    l1799 00002E                                      l1888 00004A  
                                    l1889 00003A                                      l7233 00006A  
                                    l7313 0002AC                                      l7323 00030C  
                                    ?_exp 000039                                      l6453 000008  
                                    l6357 00000A                                      l7309 000288  
                                    ?_log 000030                                      l6375 000002  
                                    l7185 000008                                      l6651 000044  
                                    l7461 00002A                                      l7199 00005E  
                                    l5961 00000A                                      l7473 0000B6  
                                    l7549 0001BA                                      l5973 00000A  
                                    l7671 000012                                      l6961 000064  
                                    l7649 000006                                      l7659 00007A  
                                    l7765 000014                                      l6957 000056  
                                    l6977 000034                                      l6995 000080  
                                    ?_pow 000042                                      STR_1 000085  
                                    STR_2 000000                        EepromWrite@address 00001B  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6000 000010                                      u5200 00000A  
                                    u6110 000012                                      u6040 00008E  
                                    u4370 00003A                                      u7010 000022  
                                    u5218 00000C                                      u3901 000012  
                                    u6310 000048                                      u3920 00004C  
                                    u7200 000076                                      u7050 00004A  
                                    u4378 00003E                                      u6090 00001A  
                                    u7140 000098                                      u6500 000046  
                                    u6260 000098                                      u6340 000082  
                                    u7300 00025E                                      u3925 000044  
                                    u6190 000034                                      u6600 0000EC  
                                    u3960 0000D0                                      u6360 000092  
                                    u6530 000070                                      u7090 00005E  
                                    u7330 00030C                                      u7155 0000B6  
                                    u6195 00002A                                      u8107 000020  
                                    u7156 0000B8                                      u7340 00032A  
                                    u6461 000012                                      u8117 000030  
                                    u7405 00003A                                      u7245 00014E  
                                    u6630 000120                                      u3990 000050  
                                    u7190 000074                                      u7430 00000A  
                                    u6471 000026                                      u8127 000040  
                                    u6560 0000AE                                      u6800 000090  
                                    u7440 00000C                                      u8137 000050  
                                    u5825 000032                                      u7265 0001DA  
                                    u6730 00000A                                      u5826 000034  
                                    u6731 000006                                      u8147 00009A  
                                    u6901 000012                                      u8157 000030  
                                    u3998 000052                                      u7550 000094  
                                    u6830 000080                                      u6671 000012  
                                    u8167 00004A                                      u7560 000096  
                                    u7640 0000B0                                      u7480 0000B6  
                                    u6921 00003A                                      u8177 000030  
                                    u6770 000010                                      u6691 00003A  
                                    u8187 00004A                                      u8197 0000E2  
                                    u7670 00005C                                      u7665 00000A  
                                    u7690 0000A0                                      u6980 000032  
                                    u7950 0000AA                                      u6895 000030  
                                    u6896 000032                                      u7948 00019E  
                                    u7949 0001BE                  ??_SwSpi_Set_Synth_Le_Pin 000018  
                                    _WPUB 000F61                             _EUSART1_Write 000000  
                                    abs@a 000017                                      _crc8 000000  
                 ??_InitAdcApplicationMgr 000017                                      _data 00000D  
                                    _main 000000                              ___ftpack@arg 000017  
                           ?_EUSART1_Read 000000                              ___ftpack@exp 00001A  
                         _TMR0_StartTimer 000000                           __end_of_DacInit 000096  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 000000                             __CFG_BORV$190 000000  
                                    exp@x 000039                                      log@x 000030  
                       ?_FLASH_WriteBlock 00001C                          ?_ClearMcuRunTime 000000  
                                    pow@x 000042                                      pow@y 000045  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 000000             __size_of_CheckFlashPrecentage 000000  
                                    start 000000*                            __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 00000E                        ??_FLASH_WriteBlock 000022  
                           _adcSampleMode 00000C                              ___ftmul@cntr 000016  
                            ___param_bank 000000                              ___ftmul@sign 000017  
                          _BlinkErrorLeds 000000                              ___fttol@exp1 000026  
                                   ??_abs 000019                 __size_of_DATAEE_WriteByte 000000  
                                   ??_exp 00002E                                     ??_log 00002E  
                            ___fttol@lval 000022                                     ??_pow 00002E  
                 __end_of_TMR0_Initialize 000034            __size_of_OSCILLATOR_Initialize 000000  
           __end_of_OSCILLATOR_Initialize 00000E                                     ?_crc8 000017  
              SWSPI_DAC_send_bits@phrType 00001B                            _SetSynthRxOper 000000  
                                   ?_main 000000                            _SetSynthTxOper 000000  
                                   _EEADR 000FA9                           __end_of___ftadd 0001AE  
         __size_of_SwSpi_Set_Dac_Sync_Pin 000000                           __end_of___ftdiv 0000E8  
                         __end_of___ftneg 000024                           __end_of___lldiv 000082  
                              _EepromRead 000000                           __end_of___ftmul 0000F6  
                                   _T0CON 000FD5                           __end_of___llmod 000066  
                         __end_of___ftsub 000042                           __end_of___fttol 0000F8  
                            _SYNTH_ADDRES 000044                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 000042                       StoreIntInEeprom@idx 000028  
                                   i2l850 000028                                     i2l780 000062  
                                   i2l855 000008                                     i2l783 000072  
                                   i2l856 000028                                     i2l849 00002C  
                                   i2l785 00007E                                     i2l778 000056  
                                   i2l787 000088                       StoreIntInEeprom@val 000027  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 000000  
       __size_of_TMR0_SetInterruptHandler 000000                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 0000C0  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 00001B  
               ?_TMR0_SetInterruptHandler 000017                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 000027                      _EUSART1_Transmit_ISR 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 000018  
                        __end_of_TMR0_ISR 000092                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 000026                           _DATAEE_ReadByte 000000  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 000022  
                 __end_of_PIN_MANAGER_IOC 000004                                     crc8@i 00001E  
                                   _make8 000000            __size_of_SWSPI_Synth_send_bits 000000  
                   __end_of_GetMcuRunTime 0000E4                                     _count 000008  
                                   _floor 000000                                     _ldexp 000000  
                                   _frexp 000000                                     _errno 000004  
           __end_of_SWSPI_Synth_send_bits 0000BA                           __end_of_isalpha 000028  
                         __end_of_isdigit 00001E                                     _group 000010  
                      ??_WriteUartMessage 00001C                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 00001B                   ??_GroupStatusAndVersion 00002E  
                         __end_of_isspace 000026                            ?_EUSART1_Write 000000  
                             ?_AdcConvert 000000                            __CFG_BOREN$OFF 000000  
                         __end_of_isupper 00001E                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00004F  
                          ??_EUSART1_Read 000017                                     status 000FD8  
                                   wtemp6 000001                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 000014            SwSpi_Set_Synth_Le_Pin@cPinMode 000017  
                 __end_of_GroupControlMcu 00002C                       __size_of_MEMORY_ISR 000000  
                          __CFG_PBADEN$ON 000000        __size_of_SetConversionResultFormat 000000  
                             exp@exponent 00003F            CheckFlashPrecentage@precentage 00001C  
                    ?_SWSPI_DAC_send_bits 000019                    __end_of_BlinkErrorLeds 00005E  
                             ldexp@newexp 000033                   __end_of_SWSPI_send_word 00009A  
                             _BlinkOkLeds 000000                   WriteUartMessage@dataBuf 000018  
                         __initialization 000000                               log@exponent 000033  
                            __end_of_crc8 00004E                __end_of_EUSART1_Initialize 000036  
                            __end_of_main 000062                    __end_of_SetSynthRxOper 00000C  
                 FLASH_ReadByte@flashAddr 000017                    __end_of_SetSynthTxOper 000036  
             ?_INTERRUPT_InterruptManager 000000                          __end_of_GroupDAC 00001C  
                  __size_of_SynthReadData 000000                           _readUartMessage 000000  
                        __end_of_GroupAdc 000044                                    ??_crc8 00001B  
                                  ??_main 00002F                             ___fttol@sign1 000021  
                       ?_SwSpi_Set_CE_Pin 000017                        _TimerKeepAliveFlag 000015  
                           __activetblptr 000002                   __size_of_FLASH_ReadByte 000000  
                        __end_of_ResetMcu 00000E                              _writeAddress 000000  
                      ??_SwSpi_Set_CE_Pin 000018                     ?_EUSART1_Transmit_ISR 000000  
                         ??_ZeroBitsArray 000021                   __end_of_TMR0_StartTimer 000004  
                                  ?_make8 000017                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 000031                 FLASH_WriteBlock@writeAddr 00001C  
                                  ?_ldexp 000030                                    ?_frexp 000017  
                        __end_of___altoft 00007A                          ___llmod@dividend 000017  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 000026  
                                  _EECON2 000FA7                          __end_of___awtoft 000038  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 0000AE  
                        __end_of___lltoft 00005C                         _FlashReadUart$577 000051  
                       _FlashReadUart$578 000055                                    i2l1010 000052  
                                  i2l1011 000074                         ?_FlashSampleWrite 00002C  
                                  i2l1009 000030                            __CFG_WDTEN$OFF 000000  
                    StoreIntInEeprom@data 000020                                    i2l1862 000016  
                                  i2l1863 00000E                                    i2l1866 00002E  
                                  i2l1867 000038                                    _TABLAT 000FF5  
                             _EepromWrite 000000                                    _RCREG1 000FAE  
                        __end_of___lwtoft 000024                   __size_of_FlashEreaseMem 000000  
               __size_of_FLASH_EraseBlock 000000                                    _RCSTA1 000FAB  
                       SynthReadData@data 000023           __size_of_SwSpi_Set_Synth_Le_Pin 000000  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 000000                   __size_of_SwSpi_Data_Pin 000000  
                GroupSynthesizers@request 00002E                        ??_FlashSampleWrite 000000  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 00001A                  __end_of_GroupFlashMemory 000042  
                         ?_BlinkErrorLeds 000000                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                                    _cState 000011  
                                  ___ftge 000000                                    ___lmul 000000  
               SWSPI_Synth_send_bits@data 000021                                    ___wmul 000000  
                     UpdateRxFreq@regData 000028                                 ??___ftadd 00001E  
               SWSPI_Synth_send_bits@mask 000020                                 ??___ftdiv 000000  
                               ??___ftneg 00001A                                 ??___lldiv 00001F  
                               ??___ftmul 00000F                     __end_of_PLLInitialize 000050  
                               ??___llmod 00001F                                 ??___ftsub 00002E  
                               ??___fttol 00001C                                 ??___lwmod 000004  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 000017                           ?_SetSynthRxOper 000000  
                         ?_SetSynthTxOper 000000                          ?_TMR0_Initialize 000000  
                                  _memset 000000                        __end_of_DAC_ADDRES 00004C  
                                  clear_0 000046                                    clear_1 000052  
                                  clear_2 00005E                       __size_of_AdcConvert 000000  
                 __end_of_DATAEE_ReadByte 000014                               ?_EepromRead 000000  
                                  _strtol 000000                                    floor@i 000034  
                   __end_of_SwSpi_Clk_Pin 000056                                    floor@x 000031  
                   ___ftmul@f3_as_product 000013                  SWSPI_DAC_send_bits@count 00001A  
              FlashSampleWrite@channelNum 00002E                              __pdataCOMRAM 000000  
                               ??_isalpha 00001A                                 ??_isdigit 000017  
                   __end_of_FlashReadUart 0003C2                          __end_of_testLeds 00006A  
                           ?_SetMcuSystem 000000                              __mediumconst 000000* 
                               ??_isspace 000017                                    tblptrh 000FF7  
                               ??_isupper 000017                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 00001B  
                         ??_EUSART1_Write 000017  TMR0_SetInterruptHandler@InterruptHandler 000017  
            __size_of_InitRxMessageParams 000000                          ?_PIN_MANAGER_IOC 000000  
                         _eusart1RxBuffer 000046                                 ??_toupper 000017  
                      __size_of_ZeroArray 000000             __size_of_INTERRUPT_Initialize 000000  
                           _SynthReadData 000000                           _eusart1TxBuffer 000000  
                         _GetMcuFwVersion 000000                          __end_ofexp@coeff 00006A  
                       _SYSTEM_Initialize 000000                          __end_oflog@coeff 000085  
                              __accesstop 000000*                  __end_of__initialization 000064  
                              ___altoft@c 000027                             ZeroArray@size 000021  
                       ??_SetMcuFwVersion 000000                                ___ftadd@f1 000018  
                              ___ftadd@f2 00001B                                ___ftge@ff1 000017  
                              ___ftge@ff2 00001A                        ?_SYSTEM_Initialize 000000  
                            eval_poly@res 00002D                             ___rparam_used 000001  
                              ___ftdiv@f1 000028                                ___ftdiv@f2 00002B  
                              ___ftdiv@f3 000004                          ?_GroupControlMcu 000000  
            GroupStatusAndVersion@request 00002E                                ___ftneg@f1 000017  
                              ___awtoft@c 00001F                   __end_of_readUartMessage 0001FC  
                WriteUartMessage@dataSize 00001A                                ___ftmul@f1 000009  
                              ___ftmul@f2 00000C                          ?_SWSPI_send_word 000025  
                            ?_DacSetValue 000026                                ___ftsub@f1 000024  
                              ___ftsub@f2 000027                                ___fttol@f1 000018  
                         _Make32bitsArray 000000                            __pcstackCOMRAM 000000  
                            __pidataBANK0 000000                       ??_SYSTEM_Initialize 00001B  
                               ?_TMR0_ISR 000000                                ___lltoft@c 00001F  
                           __end_of_make8 00005C                          _DATAEE_WriteByte 000000  
                           __end_of_floor 0000E2                             __end_of_ldexp 0000C6  
                           __end_of_frexp 000090                    _SwSpi_Set_Synth_Le_Pin 000000  
                    GroupFlashMemory@data 000000                                ___lwtoft@c 00001F  
         __end_of_DAC_DEFAULT_INIT_VALUES 00003D                      __end_of_EUSART1_Read 000044  
                            ??_MEMORY_ISR 000000                 __size_of_StoreIntInEeprom 000000  
                  __size_of_SetMcuRunTime 000000                    ??_EUSART1_Transmit_ISR 000000  
                          ??_SetMcuSystem 00001B                        ZeroBitsArray@array 00001F  
                   TMR0_ISR@CountCallBack 000004             SwSpi_Set_Synth_Le_Pin@phrType 000018  
                 GroupFlashMemory@request 00005F                        _keepAliveSignalLed 000000  
                       make8@dataLocation 00001B               __end_of_EUSART1_Receive_ISR 00002E  
             FLASH_WriteBlock@GIEBitValue 00002A                              GroupDAC@data 000000  
                                 ??_make8 00001C                                   ??_floor 00002E  
                        ?_TMR0_StartTimer 000000                                   ??_ldexp 000035  
                                 ??_frexp 00001C                 __end_of_SYSTEM_Initialize 00001A  
                         _AdcConvert$3280 000059                            ?_SynthReadData 000023  
                           _eusart1RxHead 000007                      GetMcuFwVersion@TxMsg 000004  
                           _eusart1TxHead 000009                             _eusart1RxTail 000006  
                              __pbssBANK0 000000                                __pbssBANK1 000000  
                           _eusart1TxTail 000008                       ?_keepAliveSignalLed 000000  
                      __size_of_eval_poly 000000                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 00003D                                 ?_GroupDAC 000000  
                              __pnvCOMRAM 000000                                 ?_GroupAdc 000000  
          __size_of_InitAdcApplicationMgr 000000                __end_of_SendSystemStartAck 00000C  
           __end_of_InitAdcApplicationMgr 000010                       __size_of_EepromRead 000000  
                      __end_of_MEMORY_ISR 000004                                 ?_ResetMcu 000000  
                      _FlashReadCondition 000000           ??_InitSystemApplicationManagers 00002F  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 000017  
                          FlashReadUart@j 000059          __end_of_TMR0_SetInterruptHandler 00000A  
                                 ?___lmul 000017                                   ?___wmul 000017  
                              ??_TMR0_ISR 000005                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 00002B                      ??_keepAliveSignalLed 000017  
                       __end_of_ZeroArray 00001E                                 ?___altoft 000027  
                                 ?_memset 000017                         _ReadIntFromEeprom 000000  
                          ___lmul@product 00001F                       ?_FlashReadCondition 000000  
                               ?___awtoft 00001F                                 ?___ftpack 000017  
                            GroupAdc@data 000000                          FlashReadUart@idx 00005B  
                               ?___lltoft 00001F                 __size_of_FLASH_WriteBlock 000000  
                 __size_of_ADC_Initialize 000000               __end_of_SetAdcOperationMode 00000C  
              FlashSampleWrite@sampleData 00002C                            _FLASH_ReadByte 000000  
                               ?___lwtoft 00001F              __end_of_CheckFlashPrecentage 0000AE  
                      ?_ReadIntFromEeprom 000019                                   ?_strtol 000023  
                        ?_DATAEE_ReadByte 000000              __size_of_keepAliveSignalUart 000000  
                      SynthReadData@TxMsg 000000                   __end_of_GetMcuFwVersion 000074  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 00001D                                   _DacInit 000000  
                   GetIntFromUartData@idx 000019                     GetIntFromUartData@num 000013  
                        GetMcuRunTime@idx 00000D                              ??_AdcConvert 000053  
                    ??_FlashReadCondition 000023                            _FlashEreaseMem 000000  
                        _FLASH_EraseBlock 000000            __size_of_GroupStatusAndVersion 000000  
                          _SwSpi_Data_Pin 000000                      DATAEE_WriteByte@bAdd 000018  
           __end_of_GroupStatusAndVersion 000034                   __end_of_Make32bitsArray 000058  
                              ??_GroupDAC 00002E                                ??_GroupAdc 00002E  
                           _SetMcuRunTime 000000                        _GetIntFromUartData 000000  
                      FlashReadUart@TxMsg 00000C                     GroupSynthesizers@data 000000  
                                 __Hparam 000000                                ??_ResetMcu 00002B  
               __size_of_WriteUartMessage 000000                              ?_BlinkOkLeds 000000  
                                 __Lparam 000000                              _cntRegUpdate 00000A  
                        UpdateRxFreq@data 000026                     SendAckMessage@inGroup 000024  
                        ?_readUartMessage 000000                    GroupControlMcu@request 00002E  
                               ?_testLeds 000000                 __end_of_ReadIntFromEeprom 00005E  
                     ?_GetIntFromUartData 000006                           __size_of___ftge 000000  
                         __size_of___lmul 000000                                   ___ftadd 000000  
                                 ___ftdiv 000000                                   ___ftneg 000000  
                                 ___lldiv 000000                           __size_of___wmul 000000  
                                 ___ftmul 000000                                   ___llmod 000000  
                                 ___ftsub 000000                                   ___fttol 000000  
              FlashSampleWrite@rotateLeft 000002                              crc8@dataSize 000019  
                __size_of_ClearMcuRunTime 000000                                   ___lwmod 000000  
                    AdcConvert@_adcResult 000055                              __psmallconst 000000  
                              ??___altoft 00002B                    __end_of_FLASH_ReadByte 000012  
                         __CFG_STVREN$OFF 000000                SWSPI_Synth_send_bits@count 000024  
                   _mcuRunTimeIn5SecTicks 000000                                   _crcCalc 00000C  
                                 _channel 000013                                   __pcinit 000000  
                              ??___awtoft 000022                                ??___ftpack 00001C  
                       __end_of_eval_poly 0000DA                           __size_of_memset 000000  
                                 __ramtop 000000*                  __size_of_SendAckMessage 000000  
                              ??___lltoft 000023                   __size_of_SetChannelMode 000000  
                                 __ptext0 000000                                   __ptext1 000000  
                                 __ptext2 000000                                   __ptext3 000000  
                                 __ptext4 000000                                   __ptext5 000000  
                                 __ptext6 000000                                   __ptext7 000000  
                                 __ptext8 000000                                   __ptext9 000000  
                                 crc8@crc 00001C                        __end_of_AdcConvert 0001B6  
                              ??___lwtoft 000022                                 _T0CONbits 000FD5  
                       BlinkErrorLeds@idx 00001B                           __size_of_strtol 000000  
                   _OSCILLATOR_Initialize 000000                              __size_of_abs 000000  
                                 _isalpha 000000                              __size_of_exp 000000  
                            __size_of_log 000000                                   _isdigit 000000  
                            __size_of_pow 000000                        _EUSART1_Initialize 000000  
                ??_PIN_MANAGER_Initialize 000017                                   _isspace 000000  
               StoreIntInEeprom@numOfByes 000025                                   _isupper 000000  
                        UpdateTxFreq@data 000026                                   _request 00000F  
                         GroupDAC@request 00002E                           ??_SynthReadData 000025  
                    ??_GetIntFromUartData 00002D                    __end_of_FlashEreaseMem 000052  
              __size_of_SYSTEM_Initialize 000000                   ?_SwSpi_Set_Dac_Sync_Pin 000000  
                  __end_of_SwSpi_Data_Pin 000056                   StoreIntInEeprom@address 000024  
                                 _toupper 000000                      end_of_initialization 000064  
                           ?_UpdateRxFreq 000026                                   exp@sign 000041  
                           ?_UpdateTxFreq 000026                       ?_EUSART1_Initialize 000000  
                        ??_BlinkErrorLeds 000017                              ?_EepromWrite 00001A  
                   _SWSPI_Synth_send_bits 000000                 __size_of_SwSpi_Set_CE_Pin 000000  
                          ?_SetMcuRunTime 000000                                   memset@c 000019  
                                 memset@n 00001B                                   memset@p 00001D  
                           __Lmediumconst 000000*                          ___lldiv@divisor 00001B  
                    __end_of_SetMcuSystem 00000A                                   pow@sign 00004E  
                         ___lldiv@counter 000023                          ??_SetSynthRxOper 00002B  
                       ?_GroupFlashMemory 000000                          AdcConvert@adcRes 00005C  
                        ??_SetSynthTxOper 00002B                        __end_of_SYNTH_REGS 000035  
                              ??_testLeds 00002B                      SWSPI_send_word@datac 00002A  
                              _rxMsgQueue 000018                                   postdec1 000FE5  
                                 postdec2 000FDD                        ??_GroupFlashMemory 00002E  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 000000                       _InitRxMessageParams 000000  
                             testLeds@idx 00002C                      __size_of_DacSetValue 000000  
               __size_of_FlashSampleWrite 000000                    __size_of_GetMcuRunTime 000000  
                     UpdateTxFreq@regData 000028                      ??_EUSART1_Initialize 000017  
   __end_of_InitSystemApplicationManagers 000016    __size_of_InitSystemApplicationManagers 000000  
           _InitSystemApplicationManagers 000000                           ?_FLASH_ReadByte 000017  
                                 strtol@a 000001                                   strtol@c 000005  
                                 strtol@s 000023                  _TMR0_SetInterruptHandler 000000  
                            ??_EepromRead 000018                          _StoreIntInEeprom 000000  
                         _SetMcuFwVersion 000000*                         ?_GetMcuFwVersion 000000  
                          ZeroArray@array 00001F            __end_of_SwSpi_Set_Dac_Sync_Pin 00001C  
                            strtol@endptr 000025             FLASH_WriteBlock@flashWrBufPtr 000020  
                      GetMcuRunTime@TxMsg 000000                      ?_InitRxMessageParams 000000  
                         ?_FlashEreaseMem 000000                       EUSART1_Write@txData 000017  
                         ?_SwSpi_Data_Pin 000017                     __end_of_ZeroBitsArray 00001E  
                          ??_UpdateRxFreq 00002E                            ??_UpdateTxFreq 00002E  
                __end_of_DATAEE_WriteByte 000036               __end_of_SWSPI_DAC_send_bits 000058  
                FLASH_EraseBlock@baseAddr 000017                          ?_Make32bitsArray 000017  
                             ___ftdiv@exp 000007                              _EUSART1_Read 000000  
                    _CheckFlashPrecentage 000000                         FLASH_WriteBlock@i 00002B  
                      __end_of_EepromRead 00000A                               ___ftmul@exp 000012  
                 ?_SwSpi_Set_Synth_Le_Pin 000017                     PLLUartInitialize@data 000017  
              __size_of_ReadIntFromEeprom 000000                ?_SetConversionResultFormat 00002B  
            __end_of_INTERRUPT_Initialize 000004                            __end_of___ftge 000090  
            InitAdcApplicationMgr@channel 000017                            __end_of___lmul 000056  
                          __end_of___wmul 000026                       GroupControlMcu@data 000000  
                           __pidataCOMRAM 000000                         __size_of_TMR0_ISR 000000  
                          _ADC_Initialize 000000                          _FLASH_WriteBlock 000000  
                  ?_OSCILLATOR_Initialize 000000                            __end_of_memset 00002C  
                              floor@expon 000037                         ??_ClearMcuRunTime 000017  
                          __end_of_strtol 0001D6                       start_initialization 000000  
                              eval_poly@d 000027                                eval_poly@n 000029  
                              eval_poly@x 000024                          BlinkOkLeds@state 00001A  
                __size_of_TMR0_Initialize 000000                                ldexp@value 000030  
                             _SynthTxOper 000004           __size_of_PIN_MANAGER_Initialize 000000  
                             __end_of_abs 000028                     ??_InitRxMessageParams 000023  
                             __end_of_exp 0001F2                               __end_of_log 000122  
                             __end_of_pow 00017C                  AdcConvert@_adcResult_338 000057  
                           _GetMcuRunTime 000000                    ?_SWSPI_Synth_send_bits 000021  
                         ??_SetMcuRunTime 000020                     __end_of_EUSART1_Write 00003C  
                  __size_of_PLLInitialize 000000                                frexp@value 000017  
                         ___llmod@divisor 00001B                     ?_CheckFlashPrecentage 000000  
                         ___llmod@counter 00001F                       DATAEE_ReadByte@bAdd 000017  
                __size_of_PIN_MANAGER_IOC 000000                    __size_of_SwSpi_Clk_Pin 000000  
                     SendAckMessage@TxMsg 000025            __end_of_SwSpi_Set_Synth_Le_Pin 00003C  
                     _keepAliveSignalUart 000000                         __size_of_GroupDAC 000000  
                        _WriteUartMessage 000000                         __size_of_GroupAdc 000000  
                  __size_of_FlashReadUart 000000                                  ??___ftge 00001D  
                                ??___lmul 00001F                   SendAckMessage@inRequest 000023  
                                ??___wmul 00001B                         __size_of_ResetMcu 000000  
                    __size_of_BlinkOkLeds 000000                   SetAdcOperationMode@data 00002B  
                  __end_of_ADC_Initialize 000016         __end_of_SetConversionResultFormat 00000C  
                             __pdataBANK0 000000                   SWSPI_DAC_send_bits@data 000019  
                                ??_memset 00001D                  __size_of_GroupControlMcu 000000  
             FLASH_EraseBlock@GIEBitValue 00001B                            _SendAckMessage 000000  
                          _SetChannelMode 000000                  __end_of_FLASH_EraseBlock 000034  
                      _SendSystemStartAck 000000                  __size_of_SWSPI_send_word 000000  
                                ??_strtol 000029                            _eusart1RxCount 000012  
                       __size_of___altoft 000000                                 _ZeroArray 000000  
                         DacInit@dacInput 000028                         __size_of___awtoft 000000  
                       __size_of___ftpack 000000                      ?_keepAliveSignalUart 000000  
                       __size_of___lltoft 000000                               __pbssCOMRAM 000000  
                       __size_of___lwtoft 000000             __size_of_EUSART1_Transmit_ISR 000000  
                           __pcstackBANK0 000000                             __pcstackBANK1 000000  
                     ?_SendSystemStartAck 000000                              _isalpha$2991 00001B  
                          ?_GetMcuRunTime 000000                              _isdigit$2994 000018  
                     DacSetValue@dacIndex 00002B                            BlinkOkLeds@idx 00001B  
                                ?_DacInit 000000                     __size_of_SetMcuSystem 000000  
                        _SwSpi_Set_CE_Pin 000000              __size_of_EUSART1_Receive_ISR 000000  
           SWSPI_Synth_send_bits@bitArray 000000                   _DAC_DEFAULT_INIT_VALUES 000035  
                    __size_of_EepromWrite 000000                     _TMR0_InterruptHandler 000000  
                               __pnvBANK0 000000                  __size_of_TMR0_StartTimer 000000  
                  _PIN_MANAGER_Initialize 000000                      ??_SendSystemStartAck 00002B  
                   _InitAdcApplicationMgr 000000                                 __pintcode 000000  
                  __end_of_SendAckMessage 000052                                 __ptext100 000000  
                               __ptext101 000000                                 __ptext102 000000  
                               __ptext111 000000                                 __ptext103 000000  
                               __ptext112 000000                                 __ptext104 000000  
                               __ptext113 000000                                 __ptext105 000000  
                               __ptext114 000000                                 __ptext106 000000  
                               __ptext115 000000                                 __ptext107 000000  
                               __ptext116 000000                                 __ptext108 000000  
                               __ptext117 000000                                 __ptext109 000000  
                                ?___ftadd 000018                                  ?___ftdiv 000028  
                  __end_of_SetChannelMode 000030                                  ?___ftneg 000017  
                                ?___lldiv 000017                                  ?___ftmul 000009  
                                ?___llmod 000017                                  ?___ftsub 000024  
                                ?___fttol 000018                          _FlashSampleWrite 000000  
                                ?___lwmod 000000                           ?_ADC_Initialize 000000  
                    __end_of_UpdateRxFreq 000052                         __size_of_testLeds 000000  
                           _PLLInitialize 000000             SetConversionResultFormat@data 00002B  
                    __end_of_UpdateTxFreq 000052               __size_of_keepAliveSignalLed 000000  
            ??_INTERRUPT_InterruptManager 000005                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 00001F                               __smallconst 000000* 
                   ??_keepAliveSignalUart 00002B                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 000000                                  ?_isalpha 000000  
                                ?_isdigit 000000                                 _eval_poly 000000  
                     BlinkErrorLeds@state 00001A                           _TimerOneSecFlag 000017  
                                ?_isspace 000000                              _SetMcuSystem 000000  
                                ?_isupper 000000                             _FlashReadUart 000000  
                       _PLLUartInitialize 000000              __size_of_SetAdcOperationMode 000000  
                          __size_of_make8 000000                            __size_of_floor 000000  
                          __size_of_ldexp 000000                            __size_of_frexp 000000  
                      ?_PLLUartInitialize 000017                  __size_of_DATAEE_ReadByte 000000  
                                ?_toupper 000000                          _conversionFormat 000014  
                    _INTERRUPT_Initialize 000000            FLASH_WriteBlock@blockStartAddr 000026  
             __size_of_FlashReadCondition 000000                         ??_TMR0_Initialize 000019  
                  ??_CheckFlashPrecentage 000018                            ___wmul@product 00001B  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 000038                       ??_PLLUartInitialize 000019  
          FlashReadUart@numOfSampleToRead 00002B                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 000000  
                       _GroupSynthesizers 000000       __size_of_INTERRUPT_InterruptManager 000000  
              ??_TMR0_SetInterruptHandler 000019                      Make32bitsArray@array 000017  
                                _PIR1bits 000F9E                                  i2u514_40 00001A  
                        ??_FLASH_ReadByte 00001B                                  _PIR2bits 000FA1  
                               _rxMsgData 0000AE                       SWSPI_send_word@data 000025  
                      ?_GroupSynthesizers 000000                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                                 make8@data 000017  
                                _TMR0_ISR 000000                           ?_SendAckMessage 000023  
                         ?_SetChannelMode 00002B                            ?_PLLInitialize 000000  
                       ??_PIN_MANAGER_IOC 000000                          ?_SetMcuFwVersion 000000  
                     ??_GroupSynthesizers 00002E                    GetIntFromUartData@data 000006  
                 SWSPI_send_word@dataSize 000029                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 000000                         ___wmul@multiplier 000017  
                          ?_SwSpi_Clk_Pin 000017                          ??_FlashEreaseMem 00002B  
               __end_of_PLLUartInitialize 000002                        __end_of_channelArr 000044  
                        ??_SwSpi_Data_Pin 000018                 __size_of_GroupFlashMemory 000000  
                              ?_eval_poly 000024                            ?_FlashReadUart 00002B  
                       ??_GroupControlMcu 00002E                           ??_GetMcuRunTime 000024  
                   DATAEE_WriteByte@bData 000017                              _isspace$2997 000018  
                       ??_SWSPI_send_word 00002A                                DacInit@idx 00002A  
               GetMcuFwVersion@timeCoplie 000000                                _DAC_ADDRES 000048  
             __size_of_GetIntFromUartData 000000                         ___lmul@multiplier 000017  
                 FlashReadCondition@TxMsg 000000                               _INTCON2bits 000FF1  
                   __end_of_SynthReadData 000066                                 copy_data0 000014  
                               copy_data1 000034                     ?_INTERRUPT_Initialize 000000  
                        __size_of_DacInit 000000                         ?_DATAEE_WriteByte 000017  
               __end_of_GroupSynthesizers 000098                     EUSART1_Read@readValue 000018  
                __end_of_FLASH_WriteBlock 0000BC                                  _GroupDAC 000000  
                      ??_DATAEE_WriteByte 000018                                  _GroupAdc 000000  
                               frexp@eptr 00001A                                _EECON1bits 000FA6  
                                __Hrparam 000000*                   ?_InitAdcApplicationMgr 000000  
                                _ResetMcu 000000                             ??_DacSetValue 000028  
                             _readAddress 00000C                                  __Lrparam 000000* 
                       _ADC_GetConversion 000000                       FlashReadUart@offset 00005D  
                         _ClearMcuRunTime 000000                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 00002D                   ??_OSCILLATOR_Initialize 000017  
                      ?_ADC_GetConversion 000017                         ??_TMR0_StartTimer 000017  
                        __size_of___ftadd 000000                          __size_of___ftdiv 000000  
                    _numOfValidateSamples 000000                          __size_of___ftneg 000000  
                        __size_of___lldiv 000000                                  ___altoft 000000  
                        __size_of___ftmul 000000                          __size_of___llmod 000000  
                        __size_of___ftsub 000000                          __size_of___fttol 000000  
             __size_of_EUSART1_Initialize 000000                          __size_of___lwmod 000000  
                         GroupAdc@request 00002E                                  ___awtoft 000000  
                           crc8@dataArray 000017                                  ___ftpack 000000  
                        _numOfReadSamples 00000D                                  ___lltoft 000000  
                       _FLASH_IsWriteDone 000000                       WriteUartMessage@idx 00001D  
                                ___lwtoft 000000                               ??_ZeroArray 000023  
                GetMcuRunTime@tempRunTime 000009                       ??_ADC_GetConversion 000019  
                            _isupper$3000 000018                                  _exp$3283 00003C  
                      ?_FLASH_IsWriteDone 000000                                  _dataSize 00000E  
                   SwSpi_Clk_Pin@cPinMode 000017                  __end_of_WriteUartMessage 000036  
                        __size_of_isalpha 000000                                  _crcGiven 00000B  
                        __size_of_isdigit 000000                   ??_SWSPI_Synth_send_bits 000025  
                  SwSpi_Data_Pin@cPinMode 000017                          __size_of_isspace 000000  
                      DacSetValue@regData 00002C                                  __ptext10 000000  
                                __ptext11 000000                                  __ptext20 000000  
                                __ptext12 000000                                  __ptext21 000000  
                                __ptext13 000000                                  __ptext30 000000  
                                __ptext22 000000                                  __ptext14 000000  
                                __ptext31 000000                                  __ptext23 000000  
                                __ptext15 000000                                  __ptext40 000000  
                                __ptext32 000000                                  __ptext24 000000  
                                __ptext16 000000                                  __ptext41 000000  
                                __ptext33 000000                                  __ptext25 000000  
                                __ptext17 000000                                  __ptext50 000000  
                                __ptext42 000000                                  __ptext34 000000  
                                __ptext26 000000                                  __ptext18 000000  
                                __ptext51 000000                                  __ptext43 000000  
                                __ptext35 000000                                  __ptext27 000000  
                                __ptext19 000000                                  __ptext60 000000  
                                __ptext52 000000                                  __ptext44 000000  
                                __ptext36 000000                                  __ptext28 000000  
                                __ptext61 000000                                  __ptext53 000000  
                                __ptext45 000000                                  __ptext37 000000  
                                __ptext29 000000                                  __ptext70 000000  
                                __ptext62 000000                                  __ptext54 000000  
                                __ptext46 000000                                  __ptext38 000000  
                                __ptext71 000000                                  __ptext63 000000  
                                __ptext55 000000                                  __ptext47 000000  
                                __ptext39 000000                                  __ptext80 000000  
                                __ptext72 000000                                  __ptext64 000000  
                                __ptext56 000000                                  __ptext48 000000  
                                __ptext81 000000                                  __ptext73 000000  
                                __ptext65 000000                                  __ptext57 000000  
                                __ptext49 000000                                  __ptext90 000000  
                                __ptext82 000000                                  __ptext74 000000  
                                __ptext66 000000                                  __ptext58 000000  
                                __ptext91 000000                                  __ptext83 000000  
                                __ptext75 000000                                  __ptext67 000000  
                                __ptext59 000000                                  __ptext92 000000  
                                __ptext84 000000                                  __ptext76 000000  
                                __ptext68 000000                                  __ptext93 000000  
                                __ptext85 000000                                  __ptext77 000000  
                                __ptext69 000000                                  __ptext94 000000  
                                __ptext86 000000                                  __ptext78 000000  
                                __ptext95 000000                                  __ptext87 000000  
                                __ptext79 000000                                  __ptext96 000000  
                                __ptext88 000000                                  __ptext97 000000  
                                __ptext89 000000                                  __ptext98 000000  
                                __ptext99 000000                          __size_of_isupper 000000  
            SWSPI_Synth_send_bits@phrType 000025                  SwSpi_Set_CE_Pin@cPinMode 000017  
                                _pow$3281 000048                                  _pow$3282 00004B  
                     ??_FLASH_IsWriteDone 000017                       GetIntFromUartData@c 000018  
             DATAEE_WriteByte@GIEBitValue 000019                          __size_of_toupper 000000  
                __size_of_GetMcuFwVersion 000000                             __size_of_crc8 000000  
                           __size_of_main 000000                    ?_GroupStatusAndVersion 000000  
                    __end_of_SYNTH_ADDRES 000048                                  _msgCount 00000A  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 000017  
               __end_of_ADC_GetConversion 000030              __size_of_SWSPI_DAC_send_bits 000000  
                   __size_of_UpdateRxFreq 000000                       Make32bitsArray@data 000019  
                   __size_of_UpdateTxFreq 000000                        SWSPI_send_word@idx 00002B  
                             _groupsArray 000000                           ??_PLLInitialize 00002E  
                                _testLeds 000000                   __size_of_BlinkErrorLeds 000000  
                                int$flags 000000                  __size_of_Make32bitsArray 000000  
                              strtol@base 000027                                strtol@sign 000000  
               __end_of_FLASH_IsWriteDone 00000E        __end_of_INTERRUPT_InterruptManager 0000D4  
              _INTERRUPT_InterruptManager 000000                    __size_of_ZeroBitsArray 000000  
                         EepromWrite@data 00001A                           ??_SwSpi_Clk_Pin 000018  
                     __end_of_DacSetValue 000084                       _EUSART1_Receive_ISR 000000  
                __end_of_SwSpi_Set_CE_Pin 00003C                         ?_FLASH_EraseBlock 000017  
             __end_of_InitRxMessageParams 000028                                  exp@coeff 00004C  
                 __size_of_SetSynthRxOper 000000                                _MEMORY_ISR 000000  
                         ??_FlashReadUart 000000                                  log@coeff 00006A  
                 __size_of_SetSynthTxOper 000000                __size_of_PLLUartInitialize 000000  
                  SWSPI_send_word@phrType 00002D                        ??_FLASH_EraseBlock 00001B  
                              _INTCONbits 000FF2                               ??_eval_poly 00002B  
                             _sampleArray 00006E                               _sampleCount 000006  
                                isalpha@c 00001C                                  isdigit@c 000019  
                  ??_INTERRUPT_Initialize 000017                                  memset@p1 000017  
                       ??_readUartMessage 000002                 _SetConversionResultFormat 000000  
                __end_of_FlashSampleWrite 0000FA                                  intlevel2 000000* 
                            _UpdateRxFreq 000000                              _UpdateTxFreq 000000  
                    ?_EUSART1_Receive_ISR 000000                     __end_of_SetMcuRunTime 000044  
                        ___lwmod@dividend 000000                __size_of_GroupSynthesizers 000000  
                                isspace@c 000019                          ___lldiv@dividend 000017  
                 ?_PIN_MANAGER_Initialize 000000                   __end_of_ClearMcuRunTime 000014  
                              _RCSTA1bits 000FAB                                  isupper@c 000019  
                ReadIntFromEeprom@address 000025              __end_of_EUSART1_Transmit_ISR 000038  
                           ??_BlinkOkLeds 000017                          ??_ADC_Initialize 000017  
                      Make32bitsArray@idx 00001F                         _TimerSamplingFlag 000016  
                           AdcConvert@idx 00005E                       _SetAdcOperationMode 000000  
                           _isReWriteDone 00000B                      SwSpi_Clk_Pin@phrType 000018  
                   SwSpi_Data_Pin@phrType 000018                   SwSpi_Set_CE_Pin@phrType 000018  
                  __size_of_EUSART1_Write 000000                  ??_SwSpi_Set_Dac_Sync_Pin 000017  
                       EepromRead@address 000018                          ___lldiv@quotient 00001F  
                        _GroupFlashMemory 000000                           ___lwmod@divisor 000002  
                         _TMR0_Initialize 000000                           ___lwmod@counter 000004  
                                toupper@c 000017                ReadIntFromEeprom@numOfByes 000019  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 00002B  
                 ReadIntFromEeprom@retVal 000021                             ??_EepromWrite 00001B  
                           _ZeroBitsArray 000000                                _AdcConvert 000000  
                   ??_EUSART1_Receive_ISR 000000            __end_of_PIN_MANAGER_Initialize 000048  
            GetIntFromUartData@dataRegArr 00000A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 000000                         ?_StoreIntInEeprom 000020  
                        ??_SendAckMessage 000024                __size_of_ADC_GetConversion 000000  
                        ??_SetChannelMode 00002D                        ??_StoreIntInEeprom 000027  
                             _DacSetValue 000000  
